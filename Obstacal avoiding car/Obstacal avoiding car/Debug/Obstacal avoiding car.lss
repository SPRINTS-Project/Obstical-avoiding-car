
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00001ff0  00002084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800152  00800152  00002176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004aa6  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001631  00000000  00000000  0000707a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bff  00000000  00000000  000086ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000096c  00000000  00000000  0000b2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000143b  00000000  00000000  0000bc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b83  00000000  00000000  0000d053  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000fbd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_1>
       8:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_2>
       c:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	f4 0b       	sbc	r31, r20
      56:	ff 0b       	sbc	r31, r31
      58:	0a 0c       	add	r0, r10
      5a:	1a 0d       	add	r17, r10
      5c:	15 0c       	add	r1, r5
      5e:	1a 0d       	add	r17, r10
      60:	20 0c       	add	r2, r0
      62:	2b 0c       	add	r2, r11
      64:	36 0c       	add	r3, r6
      66:	41 0c       	add	r4, r1
      68:	57 0c       	add	r5, r7
      6a:	62 0c       	add	r6, r2
      6c:	6d 0c       	add	r6, r13
      6e:	1c 0d       	add	r17, r12
      70:	78 0c       	add	r7, r8
      72:	1c 0d       	add	r17, r12
      74:	83 0c       	add	r8, r3
      76:	8e 0c       	add	r8, r14
      78:	99 0c       	add	r9, r9
      7a:	a4 0c       	add	r10, r4
      7c:	ba 0c       	add	r11, r10
      7e:	c5 0c       	add	r12, r5
      80:	d0 0c       	add	r13, r0
      82:	db 0c       	add	r13, r11
      84:	e6 0c       	add	r14, r6
      86:	f1 0c       	add	r15, r1
      88:	fc 0c       	add	r15, r12
      8a:	07 0d       	add	r16, r7

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e0 ef       	ldi	r30, 0xF0	; 240
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	a2 e5       	ldi	r26, 0x52	; 82
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a2 38       	cpi	r26, 0x82	; 130
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 b4 08 	call	0x1168	; 0x1168 <main>
      c2:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <BUTTON_vidChangeDir>:
/*									Static Function Implementation                				*/
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	u8_g_dirStateCounter ^= 1 ;
      ca:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <u8_g_dirStateCounter>
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	89 27       	eor	r24, r25
      d2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <u8_g_dirStateCounter>
      d6:	08 95       	ret

000000d8 <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      d8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <TIMER_Manager_reset>
      ea:	08 95       	ret

000000ec <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      ec:	0e 94 7d 08 	call	0x10fa	; 0x10fa <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
      f0:	0e 94 97 08 	call	0x112e	; 0x112e <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
      f4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
      f8:	87 e6       	ldi	r24, 0x67	; 103
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 16 06 	call	0xc2c	; 0xc2c <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 32 04 	call	0x864	; 0x864 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     108:	80 e6       	ldi	r24, 0x60	; 96
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 a1 07 	call	0xf42	; 0xf42 <TIMER_Manager_init>
	(void) PWM_init();
     110:	0e 94 55 07 	call	0xeaa	; 0xeaa <PWM_init>
	(void) CAR_init();
     114:	0e 94 ba 03 	call	0x774	; 0x774 <CAR_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     118:	8b ef       	ldi	r24, 0xFB	; 251
     11a:	97 e0       	ldi	r25, 0x07	; 7
     11c:	0e 94 ae 08 	call	0x115c	; 0x115c <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     120:	8f e0       	ldi	r24, 0x0F	; 15
     122:	98 e0       	ldi	r25, 0x08	; 8
     124:	0e 94 b1 08 	call	0x1162	; 0x1162 <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     128:	85 e6       	ldi	r24, 0x65	; 101
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 48 04 	call	0x890	; 0x890 <HExtInt_enCBFInt0>
     130:	08 95       	ret

00000132 <APP_updateDirection>:
	TIMER_Manager_reset(&st_timer1Config);
}

void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     132:	0e 94 9e 08 	call	0x113c	; 0x113c <HULTRASONIC_vidInterruptDisable>
	u8_g_OneSecTicks = 0;
     136:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8_g_OneSecTicks>
	TIMER_Manager_start (&st_timer1Config);
     13a:	80 e6       	ldi	r24, 0x60	; 96
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 c1 07 	call	0xf82	; 0xf82 <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     142:	0e 94 53 04 	call	0x8a6	; 0x8a6 <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 2)
     146:	1d c0       	rjmp	.+58     	; 0x182 <APP_updateDirection+0x50>
	{
		if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     148:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <u8_g_dirStateCounter>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	79 f4       	brne	.+30     	; 0x16e <APP_updateDirection+0x3c>
		{
			HLCD_gotoXY(1,4);
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
			HLCD_vidWriteChar(' ');
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	0e 94 31 05 	call	0xa62	; 0xa62 <HLCD_vidWriteChar>
			HLCD_gotoXY(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
			HLCD_WriteString("Left");
     164:	8d e8       	ldi	r24, 0x8D	; 141
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
     16c:	0a c0       	rjmp	.+20     	; 0x182 <APP_updateDirection+0x50>
		}
		else if(u8_g_dirStateCounter == MOTOR_TURN_RIGHT){
     16e:	81 11       	cpse	r24, r1
     170:	08 c0       	rjmp	.+16     	; 0x182 <APP_updateDirection+0x50>
			HLCD_gotoXY(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
			HLCD_WriteString("Right");
     17a:	82 e9       	ldi	r24, 0x92	; 146
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
{
	HULTRASONIC_vidInterruptDisable();
	u8_g_OneSecTicks = 0;
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 2)
     182:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	f8 f2       	brcs	.-66     	; 0x148 <APP_updateDirection+0x16>
		else {
			/* do nothing  */
		}
	}
	//while(u8_g_OneSecTicks <= 7);
	HLCD_ClrDisplay();
     18a:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     192:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     196:	0e 94 50 04 	call	0x8a0	; 0x8a0 <HExtInt0_enIntDisable>
	HULTRASONIC_vidInterruptEnable();
     19a:	0e 94 97 08 	call	0x112e	; 0x112e <HULTRASONIC_vidInterruptEnable>
	HLCD_gotoXY(0,0);
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
	HLCD_WriteString("Motor starts in");
     1a6:	88 e9       	ldi	r24, 0x98	; 152
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
	HLCD_gotoXY(1,0);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
	HLCD_WriteString("2 Sec.");
     1b6:	88 ea       	ldi	r24, 0xA8	; 168
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	2f ef       	ldi	r18, 0xFF	; 255
     1c0:	83 ed       	ldi	r24, 0xD3	; 211
     1c2:	90 e3       	ldi	r25, 0x30	; 48
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	80 40       	sbci	r24, 0x00	; 0
     1c8:	90 40       	sbci	r25, 0x00	; 0
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <APP_updateDirection+0x92>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <APP_updateDirection+0x9c>
     1ce:	00 00       	nop
	_delay_ms(2000);
	HLCD_ClrDisplay();
     1d0:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
     1d4:	08 95       	ret

000001d6 <APP_vidStart>:
/*	sei();*/
	//DDRA = 0xFF;
}

void APP_vidStart(void)
{
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
// 	if (en_motorSel == EN_MOTOR_IDLE)
// 	{
		(void) KEYPAD_read(&u8KeyRead);
     1de:	88 e7       	ldi	r24, 0x78	; 120
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 53 06 	call	0xca6	; 0xca6 <KEYPAD_read>
		
		if (u8KeyRead != 'N')
     1e6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <u8KeyRead>
     1ea:	8e 34       	cpi	r24, 0x4E	; 78
     1ec:	59 f0       	breq	.+22     	; 0x204 <APP_vidStart+0x2e>
		{
			switch(u8KeyRead)
     1ee:	81 33       	cpi	r24, 0x31	; 49
     1f0:	19 f0       	breq	.+6      	; 0x1f8 <APP_vidStart+0x22>
     1f2:	82 33       	cpi	r24, 0x32	; 50
     1f4:	21 f0       	breq	.+8      	; 0x1fe <APP_vidStart+0x28>
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <APP_vidStart+0x2e>
			{
				case '1' : {
					en_motorSel = EN_MOTOR_START;
     1f8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
					break;
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <APP_vidStart+0x2e>
				}
				case '2' : {
					en_motorSel = EN_MOTOR_STOP;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					break;
				}
			}
		}
/*	}*/
	if (en_motorSel == EN_MOTOR_START)
     204:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     208:	81 11       	cpse	r24, r1
     20a:	4b c2       	rjmp	.+1174   	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
	 { 				
		if (en_start_state == EN_UPDATE_DIR)
     20c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <en_start_state>
     210:	81 11       	cpse	r24, r1
     212:	10 c0       	rjmp	.+32     	; 0x234 <APP_vidStart+0x5e>
		{
			HLCD_ClrDisplay();
     214:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
			HLCD_gotoXY(0,0);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
			HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     220:	8f ea       	ldi	r24, 0xAF	; 175
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
			APP_updateDirection();
     228:	0e 94 99 00 	call	0x132	; 0x132 <APP_updateDirection>
			en_start_state = UPDATE_OBISTICAL_STATE;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <en_start_state>
     232:	66 c0       	rjmp	.+204    	; 0x300 <APP_vidStart+0x12a>
		}
		else if (en_start_state == UPDATE_OBISTICAL_STATE )
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	09 f0       	breq	.+2      	; 0x23a <APP_vidStart+0x64>
     238:	63 c0       	rjmp	.+198    	; 0x300 <APP_vidStart+0x12a>
		{
		  global_f64Dist = HULTRASONIC_u8Read();
     23a:	0e 94 a3 08 	call	0x1146	; 0x1146 <HULTRASONIC_u8Read>
     23e:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <global_f64Dist>
     242:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <global_f64Dist+0x1>
     246:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <global_f64Dist+0x2>
     24a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <global_f64Dist+0x3>
     24e:	8f e2       	ldi	r24, 0x2F	; 47
     250:	95 e7       	ldi	r25, 0x75	; 117
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <APP_vidStart+0x7c>
     256:	00 c0       	rjmp	.+0      	; 0x258 <APP_vidStart+0x82>
     258:	00 00       	nop
		  _delay_ms(15);
		  
			if		(global_f64Dist > 70.0 )							{ en_Dist_states = NO_OBISTICALS;  }		
     25a:	c0 90 79 01 	lds	r12, 0x0179	; 0x800179 <global_f64Dist>
     25e:	d0 90 7a 01 	lds	r13, 0x017A	; 0x80017a <global_f64Dist+0x1>
     262:	e0 90 7b 01 	lds	r14, 0x017B	; 0x80017b <global_f64Dist+0x2>
     266:	f0 90 7c 01 	lds	r15, 0x017C	; 0x80017c <global_f64Dist+0x3>
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	4c e8       	ldi	r20, 0x8C	; 140
     270:	52 e4       	ldi	r21, 0x42	; 66
     272:	c7 01       	movw	r24, r14
     274:	b6 01       	movw	r22, r12
     276:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__gesf2>
     27a:	18 16       	cp	r1, r24
     27c:	24 f4       	brge	.+8      	; 0x286 <APP_vidStart+0xb0>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     284:	3d c0       	rjmp	.+122    	; 0x300 <APP_vidStart+0x12a>
			else if (global_f64Dist > 30.0 && global_f64Dist <= 70.0)	{ en_Dist_states = OBISTICAL_70_30; }	
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 ef       	ldi	r20, 0xF0	; 240
     28c:	51 e4       	ldi	r21, 0x41	; 65
     28e:	c7 01       	movw	r24, r14
     290:	b6 01       	movw	r22, r12
     292:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__gesf2>
     296:	18 16       	cp	r1, r24
     298:	74 f4       	brge	.+28     	; 0x2b6 <APP_vidStart+0xe0>
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	4c e8       	ldi	r20, 0x8C	; 140
     2a0:	52 e4       	ldi	r21, 0x42	; 66
     2a2:	c7 01       	movw	r24, r14
     2a4:	b6 01       	movw	r22, r12
     2a6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__cmpsf2>
     2aa:	18 16       	cp	r1, r24
     2ac:	24 f0       	brlt	.+8      	; 0x2b6 <APP_vidStart+0xe0>
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     2b4:	25 c0       	rjmp	.+74     	; 0x300 <APP_vidStart+0x12a>
			else if (global_f64Dist >= 20.0 && global_f64Dist <= 30)	{ en_Dist_states = OBISTICAL_30_20;}	
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 ea       	ldi	r20, 0xA0	; 160
     2bc:	51 e4       	ldi	r21, 0x41	; 65
     2be:	c7 01       	movw	r24, r14
     2c0:	b6 01       	movw	r22, r12
     2c2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__gesf2>
     2c6:	88 23       	and	r24, r24
     2c8:	74 f0       	brlt	.+28     	; 0x2e6 <APP_vidStart+0x110>
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 ef       	ldi	r20, 0xF0	; 240
     2d0:	51 e4       	ldi	r21, 0x41	; 65
     2d2:	c7 01       	movw	r24, r14
     2d4:	b6 01       	movw	r22, r12
     2d6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__cmpsf2>
     2da:	18 16       	cp	r1, r24
     2dc:	24 f0       	brlt	.+8      	; 0x2e6 <APP_vidStart+0x110>
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     2e4:	0d c0       	rjmp	.+26     	; 0x300 <APP_vidStart+0x12a>
			else if (global_f64Dist < 20.0)								{ en_Dist_states = OBISTICAL_LESS_20;}	
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 ea       	ldi	r20, 0xA0	; 160
     2ec:	51 e4       	ldi	r21, 0x41	; 65
     2ee:	c7 01       	movw	r24, r14
     2f0:	b6 01       	movw	r22, r12
     2f2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__cmpsf2>
     2f6:	88 23       	and	r24, r24
     2f8:	1c f4       	brge	.+6      	; 0x300 <APP_vidStart+0x12a>
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
			else{  /* do nothing */ }	
				
			}	else { /*do nothing*/}
				
		if (en_Dist_states == NO_OBISTICALS)
     300:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	09 f0       	breq	.+2      	; 0x30a <APP_vidStart+0x134>
     308:	6d c0       	rjmp	.+218    	; 0x3e4 <APP_vidStart+0x20e>
		{
			if(global_f64Dist>99.0)
     30a:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     30e:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     312:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     316:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	46 ec       	ldi	r20, 0xC6	; 198
     320:	52 e4       	ldi	r21, 0x42	; 66
     322:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__gesf2>
     326:	18 16       	cp	r1, r24
     328:	64 f4       	brge	.+24     	; 0x342 <APP_vidStart+0x16c>
			{
				global_f64Dist = 99.0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	a6 ec       	ldi	r26, 0xC6	; 198
     330:	b2 e4       	ldi	r27, 0x42	; 66
     332:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <global_f64Dist>
     336:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <global_f64Dist+0x1>
     33a:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <global_f64Dist+0x2>
     33e:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <global_f64Dist+0x3>
			}
				HLCD_gotoXY(1,0);
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     34a:	8d eb       	ldi	r24, 0xBD	; 189
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     352:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     356:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     35a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     35e:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     362:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fixunssfsi>
     366:	0e 94 f7 05 	call	0xbee	; 0xbee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     36a:	84 ec       	ldi	r24, 0xC4	; 196
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
     372:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8_g_OneSecTicks>
				TIMER_Manager_start (&st_timer1Config);
     376:	80 e6       	ldi	r24, 0x60	; 96
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 c1 07 	call	0xf82	; 0xf82 <TIMER_Manager_start>
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     37e:	11 c0       	rjmp	.+34     	; 0x3a2 <APP_vidStart+0x1cc>
				{
					HLCD_gotoXY(0,0);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
					HLCD_WriteString("Speed:30% ");
     388:	88 ec       	ldi	r24, 0xC8	; 200
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
					HLCD_WriteString("Dir:F");
     390:	83 ed       	ldi	r24, 0xD3	; 211
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
					PWM_start(30,20,FORWARD);
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	64 e1       	ldi	r22, 0x14	; 20
     39c:	8e e1       	ldi	r24, 0x1E	; 30
     39e:	0e 94 64 07 	call	0xec8	; 0xec8 <PWM_start>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
				TIMER_Manager_start (&st_timer1Config);
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     3a2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_g_OneSecTicks>
     3a6:	86 30       	cpi	r24, 0x06	; 6
     3a8:	20 f4       	brcc	.+8      	; 0x3b2 <APP_vidStart+0x1dc>
     3aa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag4>
     3ae:	88 23       	and	r24, r24
     3b0:	39 f3       	breq	.-50     	; 0x380 <APP_vidStart+0x1aa>
					HLCD_gotoXY(0,0);
					HLCD_WriteString("Speed:30% ");
					HLCD_WriteString("Dir:F");
					PWM_start(30,20,FORWARD);
				}
				flag4=1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <flag4>
				(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     3b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     3bc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TIMER_Manager_stop>
				/* Motor move forward with duty cycle 50%  */
				HLCD_gotoXY(0,0);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:50% ");
     3c8:	89 ed       	ldi	r24, 0xD9	; 217
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     3d0:	83 ed       	ldi	r24, 0xD3	; 211
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				PWM_start(50,20,FORWARD);
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	64 e1       	ldi	r22, 0x14	; 20
     3dc:	82 e3       	ldi	r24, 0x32	; 50
     3de:	0e 94 64 07 	call	0xec8	; 0xec8 <PWM_start>
     3e2:	c3 c1       	rjmp	.+902    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
				
		}
		else if (en_Dist_states == OBISTICAL_70_30)
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	61 f5       	brne	.+88     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		{
				flag4=0;
     3e8:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag4>
				HLCD_gotoXY(1,0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     3f4:	8d eb       	ldi	r24, 0xBD	; 189
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     3fc:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     400:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     404:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     408:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     40c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fixunssfsi>
     410:	0e 94 f7 05 	call	0xbee	; 0xbee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     414:	84 ec       	ldi	r24, 0xC4	; 196
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     424:	88 ec       	ldi	r24, 0xC8	; 200
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     42c:	83 ed       	ldi	r24, 0xD3	; 211
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				/* Motor move forward with duty cycle 30% */		
				PWM_start(30,20,FORWARD);
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	64 e1       	ldi	r22, 0x14	; 20
     438:	8e e1       	ldi	r24, 0x1E	; 30
     43a:	0e 94 64 07 	call	0xec8	; 0xec8 <PWM_start>
     43e:	95 c1       	rjmp	.+810    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
		}
		else if (en_Dist_states == OBISTICAL_30_20)
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	09 f0       	breq	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	b5 c0       	rjmp	.+362    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		{
			flag4=0;
     446:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag4>
			PWM_stop();
     44a:	0e 94 90 07 	call	0xf20	; 0xf20 <PWM_stop>
				HLCD_gotoXY(1,0);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     456:	8d eb       	ldi	r24, 0xBD	; 189
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     45e:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     462:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     466:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     46a:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     46e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fixunssfsi>
     472:	0e 94 f7 05 	call	0xbee	; 0xbee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     476:	84 ec       	ldi	r24, 0xC4	; 196
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:0%");
     486:	84 ee       	ldi	r24, 0xE4	; 228
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     48e:	8d ee       	ldi	r24, 0xED	; 237
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				/* Motor Stop Implementation  */
				CAR_stop();
     496:	0e 94 1e 04 	call	0x83c	; 0x83c <CAR_stop>
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	24 e3       	ldi	r18, 0x34	; 52
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	91 50       	subi	r25, 0x01	; 1
     4a2:	20 40       	sbci	r18, 0x00	; 0
     4a4:	80 40       	sbci	r24, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4aa:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:100%");
     4b4:	83 ef       	ldi	r24, 0xF3	; 243
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteString("Dir:R");
     4bc:	8e ef       	ldi	r24, 0xFE	; 254
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				while (global_f64Dist <= 30.0)
     4c4:	63 c0       	rjmp	.+198    	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				{
					/* rotate depend on u8_g_dirStateCounter  */
					if (u8_gs_rotate_counter <= 4)
     4c6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     4ca:	85 30       	cpi	r24, 0x05	; 5
     4cc:	40 f5       	brcc	.+80     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
					{
						if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     4ce:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <u8_g_dirStateCounter>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	89 f4       	brne	.+34     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
						{
							CAR_reverse_left();
     4d6:	0e 94 0a 04 	call	0x814	; 0x814 <CAR_reverse_left>
     4da:	9f ef       	ldi	r25, 0xFF	; 255
     4dc:	29 e6       	ldi	r18, 0x69	; 105
     4de:	88 e1       	ldi	r24, 0x18	; 24
     4e0:	91 50       	subi	r25, 0x01	; 1
     4e2:	20 40       	sbci	r18, 0x00	; 0
     4e4:	80 40       	sbci	r24, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4ea:	00 00       	nop
							_delay_ms(1000);
							u8_gs_rotate_counter++;
     4ec:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     4f6:	17 c0       	rjmp	.+46     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
						}
						else if (u8_g_dirStateCounter == MOTOR_TURN_RIGHT)
     4f8:	81 11       	cpse	r24, r1
     4fa:	15 c0       	rjmp	.+42     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
						{
							CAR_reverse_right();
     4fc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <CAR_reverse_right>
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	29 e6       	ldi	r18, 0x69	; 105
     504:	88 e1       	ldi	r24, 0x18	; 24
     506:	91 50       	subi	r25, 0x01	; 1
     508:	20 40       	sbci	r18, 0x00	; 0
     50a:	80 40       	sbci	r24, 0x00	; 0
     50c:	e1 f7       	brne	.-8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     510:	00 00       	nop
							_delay_ms(1000);
							u8_gs_rotate_counter++;
     512:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     51c:	04 c0       	rjmp	.+8      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
							// do nothing
						}
						/*u8_gs_rotate_counter++;*/
					}
					else{
						en_motorSel = EN_MOTOR_STOP_V2;
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
						break;
     524:	22 c1       	rjmp	.+580    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
					}
					global_f64Dist = HULTRASONIC_u8Read();
     526:	0e 94 a3 08 	call	0x1146	; 0x1146 <HULTRASONIC_u8Read>
     52a:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <global_f64Dist>
     52e:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <global_f64Dist+0x1>
     532:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <global_f64Dist+0x2>
     536:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     542:	8d eb       	ldi	r24, 0xBD	; 189
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     54a:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     54e:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     552:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     556:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     55a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fixunssfsi>
     55e:	0e 94 f7 05 	call	0xbee	; 0xbee <HLCD_WriteInt>
					HLCD_WriteString(" cm");
     562:	84 ec       	ldi	r24, 0xC4	; 196
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
					if (global_f64Dist <= 20.0) break;
     56a:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     56e:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     572:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     576:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 ea       	ldi	r20, 0xA0	; 160
     580:	51 e4       	ldi	r21, 0x41	; 65
     582:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__cmpsf2>
     586:	18 16       	cp	r1, r24
     588:	0c f0       	brlt	.+2      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     58a:	ef c0       	rjmp	.+478    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:100%");
				HLCD_WriteString("Dir:R");
				while (global_f64Dist <= 30.0)
     58c:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     590:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     594:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     598:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 ef       	ldi	r20, 0xF0	; 240
     5a2:	51 e4       	ldi	r21, 0x41	; 65
     5a4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__cmpsf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	0c f0       	brlt	.+2      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5ac:	8c cf       	rjmp	.-232    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     5ae:	dd c0       	rjmp	.+442    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
					HLCD_WriteString(" cm");
					if (global_f64Dist <= 20.0) break;
				}

		}
		else if (en_Dist_states == OBISTICAL_LESS_20)
     5b0:	84 30       	cpi	r24, 0x04	; 4
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     5b4:	da c0       	rjmp	.+436    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
		{
			flag4=0;
     5b6:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag4>
				HLCD_gotoXY(1,0);
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     5c2:	8d eb       	ldi	r24, 0xBD	; 189
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     5ca:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     5ce:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     5d2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     5d6:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     5da:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fixunssfsi>
     5de:	0e 94 f7 05 	call	0xbee	; 0xbee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     5e2:	84 ec       	ldi	r24, 0xC4	; 196
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:0% ");
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     5fa:	8d ee       	ldi	r24, 0xED	; 237
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				/*  Motor Stop Implementation  */
				CAR_stop();
     602:	0e 94 1e 04 	call	0x83c	; 0x83c <CAR_stop>
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	24 e3       	ldi	r18, 0x34	; 52
     60a:	8c e0       	ldi	r24, 0x0C	; 12
     60c:	91 50       	subi	r25, 0x01	; 1
     60e:	20 40       	sbci	r18, 0x00	; 0
     610:	80 40       	sbci	r24, 0x00	; 0
     612:	e1 f7       	brne	.-8      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
     614:	00 c0       	rjmp	.+0      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
     616:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     620:	88 ec       	ldi	r24, 0xC8	; 200
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				HLCD_WriteString("Dir:b");
     628:	8e e0       	ldi	r24, 0x0E	; 14
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				while (global_f64Dist <= 20.0)
     630:	27 c0       	rjmp	.+78     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
				{
					/* Motor move backward with duty cycle 30%  */
					PWM_start(30,20,BACKWARD);
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	64 e1       	ldi	r22, 0x14	; 20
     636:	8e e1       	ldi	r24, 0x1E	; 30
     638:	0e 94 64 07 	call	0xec8	; 0xec8 <PWM_start>
					global_f64Dist = HULTRASONIC_u8Read();
     63c:	0e 94 a3 08 	call	0x1146	; 0x1146 <HULTRASONIC_u8Read>
     640:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <global_f64Dist>
     644:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <global_f64Dist+0x1>
     648:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <global_f64Dist+0x2>
     64c:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     658:	8d eb       	ldi	r24, 0xBD	; 189
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     660:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     664:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     668:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     66c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     670:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fixunssfsi>
     674:	0e 94 f7 05 	call	0xbee	; 0xbee <HLCD_WriteInt>
					HLCD_WriteString(" cm");						
     678:	84 ec       	ldi	r24, 0xC4	; 196
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:30% ");
				HLCD_WriteString("Dir:b");
				while (global_f64Dist <= 20.0)
     680:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <global_f64Dist>
     684:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <global_f64Dist+0x1>
     688:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <global_f64Dist+0x2>
     68c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <global_f64Dist+0x3>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 ea       	ldi	r20, 0xA0	; 160
     696:	51 e4       	ldi	r21, 0x41	; 65
     698:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__cmpsf2>
     69c:	18 16       	cp	r1, r24
     69e:	4c f6       	brge	.-110    	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
     6a0:	64 c0       	rjmp	.+200    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
					HLCD_WriteString(" cm");						
				}
		}
	 } 
	else if (en_motorSel == EN_MOTOR_STOP)
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	b1 f4       	brne	.+44     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     6a6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <flag2>
     6aa:	81 11       	cpse	r24, r1
     6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
     6ae:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
     6b2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <flag1>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <flag2>
     6bc:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <flag3>
		  HLCD_gotoXY(0,0);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     6c8:	84 e1       	ldi	r24, 0x14	; 20
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
     6d0:	4c c0       	rjmp	.+152    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
	  }
	  else if (en_motorSel == EN_MOTOR_STOP_V2)
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	a9 f5       	brne	.+106    	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
	  {
		  
		  HLCD_ClrDisplay();
     6d6:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
		  HLCD_gotoXY(0,0);
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
		  CAR_stop();
     6ea:	0e 94 1e 04 	call	0x83c	; 0x83c <CAR_stop>
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	23 ed       	ldi	r18, 0xD3	; 211
     6f2:	80 e3       	ldi	r24, 0x30	; 48
     6f4:	91 50       	subi	r25, 0x01	; 1
     6f6:	20 40       	sbci	r18, 0x00	; 0
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
     6fe:	00 00       	nop
		  _delay_ms(2000);
		  HLCD_ClrDisplay();
     700:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
		  HLCD_gotoXY(0,0);
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Trying again in");
     70c:	82 e2       	ldi	r24, 0x22	; 34
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
		  HLCD_gotoXY(1,0);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "1 sec");
     71c:	82 e3       	ldi	r24, 0x32	; 50
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
     724:	9f ef       	ldi	r25, 0xFF	; 255
     726:	29 e6       	ldi	r18, 0x69	; 105
     728:	88 e1       	ldi	r24, 0x18	; 24
     72a:	91 50       	subi	r25, 0x01	; 1
     72c:	20 40       	sbci	r18, 0x00	; 0
     72e:	80 40       	sbci	r24, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <__EEPROM_REGION_LENGTH__+0x32a>
     732:	00 c0       	rjmp	.+0      	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
     734:	00 00       	nop
		  _delay_ms(1000);
		  u8_gs_rotate_counter=0;
     736:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <u8_gs_rotate_counter>
		  en_motorSel = EN_MOTOR_START;
     73a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     73e:	15 c0       	rjmp	.+42     	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     740:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <flag1>
     744:	81 11       	cpse	r24, r1
     746:	09 c0       	rjmp	.+18     	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
     748:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_ClrDisplay>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <flag1>
     752:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <flag2>
     756:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <flag3>
		  HLCD_gotoXY(0,0);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 c2 05 	call	0xb84	; 0xb84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     762:	88 e3       	ldi	r24, 0x38	; 56
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
	  }
}
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	08 95       	ret

00000774 <CAR_init>:
*description : used to initialize the two motor as output 
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK                                                             
************************************************************************/
EN_car_error_t CAR_init(void)
{
     774:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(&ST_motor_1);
     776:	8a e7       	ldi	r24, 0x7A	; 122
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 d0 06 	call	0xda0	; 0xda0 <MOTOR_INIT>
     77e:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_INIT(&ST_motor_2);
     780:	87 e7       	ldi	r24, 0x77	; 119
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 d0 06 	call	0xda0	; 0xda0 <MOTOR_INIT>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     788:	c1 11       	cpse	r28, r1
     78a:	03 c0       	rjmp	.+6      	; 0x792 <CAR_init+0x1e>
     78c:	81 11       	cpse	r24, r1
     78e:	03 c0       	rjmp	.+6      	; 0x796 <CAR_init+0x22>
     790:	03 c0       	rjmp	.+6      	; 0x798 <CAR_init+0x24>
	{
		ret_val=CAR_NOK;
     792:	8b e0       	ldi	r24, 0x0B	; 11
     794:	01 c0       	rjmp	.+2      	; 0x798 <CAR_init+0x24>
     796:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <CAR_forward>:
*description : used to move the car forward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_forward(void)
{
     79c:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     79e:	8a e7       	ldi	r24, 0x7A	; 122
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MOTOR_FORWARD>
     7a6:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_2);
     7a8:	87 e7       	ldi	r24, 0x77	; 119
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MOTOR_FORWARD>
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7b0:	c1 11       	cpse	r28, r1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <CAR_forward+0x1e>
     7b4:	81 11       	cpse	r24, r1
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <CAR_forward+0x22>
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <CAR_forward+0x24>
	{
		ret_val=CAR_NOK;
     7ba:	8b e0       	ldi	r24, 0x0B	; 11
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <CAR_forward+0x24>
     7be:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <CAR_backword>:
*description : used to move the car backward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_backword(void)
{
     7c4:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_1);
     7c6:	8a e7       	ldi	r24, 0x7A	; 122
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_BACKWARD>
     7ce:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     7d0:	87 e7       	ldi	r24, 0x77	; 119
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7d8:	c1 11       	cpse	r28, r1
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <CAR_backword+0x1e>
     7dc:	81 11       	cpse	r24, r1
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <CAR_backword+0x22>
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <CAR_backword+0x24>
	{
		ret_val=CAR_NOK;
     7e2:	8b e0       	ldi	r24, 0x0B	; 11
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <CAR_backword+0x24>
     7e6:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <CAR_reverse_right>:
*description : used to reverse the car to the right
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_right(void)
{
     7ec:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     7ee:	8a e7       	ldi	r24, 0x7A	; 122
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MOTOR_FORWARD>
     7f6:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     7f8:	87 e7       	ldi	r24, 0x77	; 119
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     800:	c1 11       	cpse	r28, r1
     802:	03 c0       	rjmp	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     804:	81 11       	cpse	r24, r1
     806:	03 c0       	rjmp	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     808:	03 c0       	rjmp	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		ret_val=CAR_NOK;
     80a:	8b e0       	ldi	r24, 0x0B	; 11
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <CAR_reverse_left>:
*description : used to reverse the car to the left
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_left(void)
{
     814:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_1);
     816:	8a e7       	ldi	r24, 0x7A	; 122
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MOTOR_FORWARD>
     81e:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_2);
     820:	87 e7       	ldi	r24, 0x77	; 119
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     828:	81 11       	cpse	r24, r1
     82a:	03 c0       	rjmp	.+6      	; 0x832 <CAR_reverse_left+0x1e>
     82c:	c1 11       	cpse	r28, r1
     82e:	03 c0       	rjmp	.+6      	; 0x836 <CAR_reverse_left+0x22>
     830:	03 c0       	rjmp	.+6      	; 0x838 <CAR_reverse_left+0x24>
	{
		ret_val=CAR_NOK;
     832:	8b e0       	ldi	r24, 0x0B	; 11
     834:	01 c0       	rjmp	.+2      	; 0x838 <CAR_reverse_left+0x24>
     836:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <CAR_stop>:
*description : used to stop the car
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_stop(void)
{
     83c:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(&ST_motor_1);
     83e:	8a e7       	ldi	r24, 0x7A	; 122
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 18 07 	call	0xe30	; 0xe30 <MOTOR_STOP>
     846:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_STOP(&ST_motor_2);
     848:	87 e7       	ldi	r24, 0x77	; 119
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 18 07 	call	0xe30	; 0xe30 <MOTOR_STOP>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     850:	c1 11       	cpse	r28, r1
     852:	03 c0       	rjmp	.+6      	; 0x85a <CAR_stop+0x1e>
     854:	81 11       	cpse	r24, r1
     856:	03 c0       	rjmp	.+6      	; 0x85e <CAR_stop+0x22>
     858:	03 c0       	rjmp	.+6      	; 0x860 <__stack+0x1>
	{
		ret_val=CAR_NOK;
     85a:	8b e0       	ldi	r24, 0x0B	; 11
     85c:	01 c0       	rjmp	.+2      	; 0x860 <__stack+0x1>
     85e:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <HExtInt_enInit>:
		errorStatus = HEXTINT_NOK;
	}


	return errorStatus;
}
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	c8 2f       	mov	r28, r24
     86a:	d6 2f       	mov	r29, r22
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	62 e0       	ldi	r22, 0x02	; 2
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     880:	6d 2f       	mov	r22, r29
     882:	8c 2f       	mov	r24, r28
     884:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vidExtInt_init>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <HExtInt_enCBFInt0>:
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	21 f0       	breq	.+8      	; 0x89c <HExtInt_enCBFInt0+0xc>
     894:	0e 94 56 0a 	call	0x14ac	; 0x14ac <MEXTINT_vidCallBackFuncInt0>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	08 95       	ret
     89c:	85 e0       	ldi	r24, 0x05	; 5
     89e:	08 95       	ret

000008a0 <HExtInt0_enIntDisable>:

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     8a0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MEXTINT_vidDisableInterrupt>
     8a4:	08 95       	ret

000008a6 <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     8a6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <MEXTINT_vidEnableInterrupt>
     8aa:	08 95       	ret

000008ac <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	18 2f       	mov	r17, r24
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     8c0:	c8 2f       	mov	r28, r24
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	67 e0       	ldi	r22, 0x07	; 7
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     8cc:	c8 2b       	or	r28, r24
     8ce:	01 2f       	mov	r16, r17
     8d0:	02 95       	swap	r16
     8d2:	0f 70       	andi	r16, 0x0F	; 15
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
     8d6:	15 c0       	rjmp	.+42     	; 0x902 <HLCD_vidWritecmd+0x56>
     8d8:	ed 2f       	mov	r30, r29
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	40 2f       	mov	r20, r16
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	0d 2e       	mov	r0, r29
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <HLCD_vidWritecmd+0x3c>
     8e4:	55 95       	asr	r21
     8e6:	47 95       	ror	r20
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <HLCD_vidWritecmd+0x38>
     8ec:	41 70       	andi	r20, 0x01	; 1
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	e3 58       	subi	r30, 0x83	; 131
     8f4:	ff 4f       	sbci	r31, 0xFF	; 255
     8f6:	61 81       	ldd	r22, Z+1	; 0x01
     8f8:	80 81       	ld	r24, Z
     8fa:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     8fe:	c8 2b       	or	r28, r24
     900:	df 5f       	subi	r29, 0xFF	; 255
     902:	d4 30       	cpi	r29, 0x04	; 4
     904:	48 f3       	brcs	.-46     	; 0x8d8 <HLCD_vidWritecmd+0x2c>
     906:	41 e0       	ldi	r20, 0x01	; 1
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     910:	c8 2b       	or	r28, r24
     912:	89 ef       	ldi	r24, 0xF9	; 249
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <HLCD_vidWritecmd+0x6a>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <HLCD_vidWritecmd+0x70>
     91c:	00 00       	nop
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     928:	c8 2b       	or	r28, r24
     92a:	92 e4       	ldi	r25, 0x42	; 66
     92c:	9a 95       	dec	r25
     92e:	f1 f7       	brne	.-4      	; 0x92c <HLCD_vidWritecmd+0x80>
     930:	00 c0       	rjmp	.+0      	; 0x932 <HLCD_vidWritecmd+0x86>
     932:	1f 70       	andi	r17, 0x0F	; 15
     934:	d0 e0       	ldi	r29, 0x00	; 0
     936:	15 c0       	rjmp	.+42     	; 0x962 <HLCD_vidWritecmd+0xb6>
     938:	ed 2f       	mov	r30, r29
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	41 2f       	mov	r20, r17
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0d 2e       	mov	r0, r29
     942:	02 c0       	rjmp	.+4      	; 0x948 <HLCD_vidWritecmd+0x9c>
     944:	55 95       	asr	r21
     946:	47 95       	ror	r20
     948:	0a 94       	dec	r0
     94a:	e2 f7       	brpl	.-8      	; 0x944 <HLCD_vidWritecmd+0x98>
     94c:	41 70       	andi	r20, 0x01	; 1
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	e3 58       	subi	r30, 0x83	; 131
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	61 81       	ldd	r22, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     95e:	c8 2b       	or	r28, r24
     960:	df 5f       	subi	r29, 0xFF	; 255
     962:	d4 30       	cpi	r29, 0x04	; 4
     964:	48 f3       	brcs	.-46     	; 0x938 <HLCD_vidWritecmd+0x8c>
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     970:	c8 2b       	or	r28, r24
     972:	e9 ef       	ldi	r30, 0xF9	; 249
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	f1 f7       	brne	.-4      	; 0x976 <HLCD_vidWritecmd+0xca>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <HLCD_vidWritecmd+0xd0>
     97c:	00 00       	nop
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     988:	8c 2b       	or	r24, r28
     98a:	e3 ef       	ldi	r30, 0xF3	; 243
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <HLCD_vidWritecmd+0xe2>
     992:	00 c0       	rjmp	.+0      	; 0x994 <HLCD_vidWritecmd+0xe8>
     994:	00 00       	nop
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <HLCD_vidInit>:
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	c0 e0       	ldi	r28, 0x00	; 0
     9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <HLCD_vidInit+0x24>
     9aa:	ed 2f       	mov	r30, r29
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e3 58       	subi	r30, 0x83	; 131
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	41 e0       	ldi	r20, 0x01	; 1
     9b8:	61 81       	ldd	r22, Z+1	; 0x01
     9ba:	80 81       	ld	r24, Z
     9bc:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     9c0:	c8 2b       	or	r28, r24
     9c2:	df 5f       	subi	r29, 0xFF	; 255
     9c4:	d4 30       	cpi	r29, 0x04	; 4
     9c6:	88 f3       	brcs	.-30     	; 0x9aa <HLCD_vidInit+0xa>
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	67 e0       	ldi	r22, 0x07	; 7
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     9d2:	c8 2b       	or	r28, r24
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     9de:	c8 2b       	or	r28, r24
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     9ea:	c8 2b       	or	r28, r24
     9ec:	8f e0       	ldi	r24, 0x0F	; 15
     9ee:	97 e2       	ldi	r25, 0x27	; 39
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <HLCD_vidInit+0x50>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <HLCD_vidInit+0x56>
     9f6:	00 00       	nop
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     9fe:	c8 2b       	or	r28, r24
     a00:	e9 ef       	ldi	r30, 0xF9	; 249
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <HLCD_vidInit+0x64>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <HLCD_vidInit+0x6a>
     a0a:	00 00       	nop
     a0c:	88 e2       	ldi	r24, 0x28	; 40
     a0e:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     a12:	c8 2b       	or	r28, r24
     a14:	89 ef       	ldi	r24, 0xF9	; 249
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <HLCD_vidInit+0x78>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <HLCD_vidInit+0x7e>
     a1e:	00 00       	nop
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     a26:	c8 2b       	or	r28, r24
     a28:	e7 ee       	ldi	r30, 0xE7	; 231
     a2a:	f3 e0       	ldi	r31, 0x03	; 3
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <HLCD_vidInit+0x8c>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <HLCD_vidInit+0x92>
     a32:	00 00       	nop
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     a3a:	c8 2b       	or	r28, r24
     a3c:	89 ef       	ldi	r24, 0xF9	; 249
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <HLCD_vidInit+0xa0>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <HLCD_vidInit+0xa6>
     a46:	00 00       	nop
     a48:	8c e0       	ldi	r24, 0x0C	; 12
     a4a:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     a4e:	8c 2b       	or	r24, r28
     a50:	e9 ef       	ldi	r30, 0xF9	; 249
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <HLCD_vidInit+0xb4>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <HLCD_vidInit+0xba>
     a5a:	00 00       	nop
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <HLCD_vidWriteChar>:
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	18 2f       	mov	r17, r24
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     a76:	c8 2f       	mov	r28, r24
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	67 e0       	ldi	r22, 0x07	; 7
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     a82:	c8 2b       	or	r28, r24
     a84:	01 2f       	mov	r16, r17
     a86:	02 95       	swap	r16
     a88:	0f 70       	andi	r16, 0x0F	; 15
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
     a8c:	15 c0       	rjmp	.+42     	; 0xab8 <HLCD_vidWriteChar+0x56>
     a8e:	ed 2f       	mov	r30, r29
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	40 2f       	mov	r20, r16
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	0d 2e       	mov	r0, r29
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <HLCD_vidWriteChar+0x3c>
     a9a:	55 95       	asr	r21
     a9c:	47 95       	ror	r20
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <HLCD_vidWriteChar+0x38>
     aa2:	41 70       	andi	r20, 0x01	; 1
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e3 58       	subi	r30, 0x83	; 131
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	61 81       	ldd	r22, Z+1	; 0x01
     aae:	80 81       	ld	r24, Z
     ab0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     ab4:	c8 2b       	or	r28, r24
     ab6:	df 5f       	subi	r29, 0xFF	; 255
     ab8:	d4 30       	cpi	r29, 0x04	; 4
     aba:	48 f3       	brcs	.-46     	; 0xa8e <HLCD_vidWriteChar+0x2c>
     abc:	41 e0       	ldi	r20, 0x01	; 1
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     ac6:	c8 2b       	or	r28, r24
     ac8:	89 ef       	ldi	r24, 0xF9	; 249
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <HLCD_vidWriteChar+0x6a>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <HLCD_vidWriteChar+0x70>
     ad2:	00 00       	nop
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     ade:	c8 2b       	or	r28, r24
     ae0:	92 e4       	ldi	r25, 0x42	; 66
     ae2:	9a 95       	dec	r25
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <HLCD_vidWriteChar+0x80>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <HLCD_vidWriteChar+0x86>
     ae8:	1f 70       	andi	r17, 0x0F	; 15
     aea:	d0 e0       	ldi	r29, 0x00	; 0
     aec:	15 c0       	rjmp	.+42     	; 0xb18 <HLCD_vidWriteChar+0xb6>
     aee:	ed 2f       	mov	r30, r29
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	41 2f       	mov	r20, r17
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	0d 2e       	mov	r0, r29
     af8:	02 c0       	rjmp	.+4      	; 0xafe <HLCD_vidWriteChar+0x9c>
     afa:	55 95       	asr	r21
     afc:	47 95       	ror	r20
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <HLCD_vidWriteChar+0x98>
     b02:	41 70       	andi	r20, 0x01	; 1
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	e3 58       	subi	r30, 0x83	; 131
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	61 81       	ldd	r22, Z+1	; 0x01
     b0e:	80 81       	ld	r24, Z
     b10:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     b14:	c8 2b       	or	r28, r24
     b16:	df 5f       	subi	r29, 0xFF	; 255
     b18:	d4 30       	cpi	r29, 0x04	; 4
     b1a:	48 f3       	brcs	.-46     	; 0xaee <HLCD_vidWriteChar+0x8c>
     b1c:	41 e0       	ldi	r20, 0x01	; 1
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     b26:	c8 2b       	or	r28, r24
     b28:	e9 ef       	ldi	r30, 0xF9	; 249
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <HLCD_vidWriteChar+0xca>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <HLCD_vidWriteChar+0xd0>
     b32:	00 00       	nop
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     b3e:	8c 2b       	or	r24, r28
     b40:	e3 ef       	ldi	r30, 0xF3	; 243
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <HLCD_vidWriteChar+0xe2>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <HLCD_vidWriteChar+0xe8>
     b4a:	00 00       	nop
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <HLCD_ClrDisplay>:
     b56:	cf 93       	push	r28
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     b5e:	c8 2f       	mov	r28, r24
     b60:	87 ee       	ldi	r24, 0xE7	; 231
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <HLCD_ClrDisplay+0xe>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <HLCD_ClrDisplay+0x14>
     b6a:	00 00       	nop
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     b72:	8c 2b       	or	r24, r28
     b74:	e7 ee       	ldi	r30, 0xE7	; 231
     b76:	f3 e0       	ldi	r31, 0x03	; 3
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <HLCD_ClrDisplay+0x22>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <HLCD_ClrDisplay+0x28>
     b7e:	00 00       	nop
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     b84:	81 11       	cpse	r24, r1
     b86:	08 c0       	rjmp	.+16     	; 0xb98 <HLCD_gotoXY+0x14>
     b88:	60 31       	cpi	r22, 0x10	; 16
     b8a:	30 f4       	brcc	.+12     	; 0xb98 <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     b8c:	86 2f       	mov	r24, r22
     b8e:	8f 70       	andi	r24, 0x0F	; 15
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     b96:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	41 f4       	brne	.+16     	; 0xbac <HLCD_gotoXY+0x28>
     b9c:	60 31       	cpi	r22, 0x10	; 16
     b9e:	40 f4       	brcc	.+16     	; 0xbb0 <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     ba0:	86 2f       	mov	r24, r22
     ba2:	8f 70       	andi	r24, 0x0F	; 15
     ba4:	80 6c       	ori	r24, 0xC0	; 192
     ba6:	0e 94 56 04 	call	0x8ac	; 0x8ac <HLCD_vidWritecmd>
     baa:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	08 95       	ret
     bb0:	88 e0       	ldi	r24, 0x08	; 8
	}
	return errorStatus;
}
     bb2:	08 95       	ret

00000bb4 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     bc0:	fc 01       	movw	r30, r24
     bc2:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     bc8:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     bca:	08 c0       	rjmp	.+16     	; 0xbdc <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     bcc:	0e 94 31 05 	call	0xa62	; 0xa62 <HLCD_vidWriteChar>
     bd0:	18 2b       	or	r17, r24
		string = str[++count];
     bd2:	21 96       	adiw	r28, 0x01	; 1
     bd4:	f7 01       	movw	r30, r14
     bd6:	ec 0f       	add	r30, r28
     bd8:	fd 1f       	adc	r31, r29
     bda:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     bdc:	81 11       	cpse	r24, r1
     bde:	f6 cf       	rjmp	.-20     	; 0xbcc <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     be0:	81 2f       	mov	r24, r17
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	2a 97       	sbiw	r28, 0x0a	; 10
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c06:	4a e0       	ldi	r20, 0x0A	; 10
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 da 05 	call	0xbb4	; 0xbb4 <HLCD_WriteString>
	return errorStatus;
}
     c1a:	2a 96       	adiw	r28, 0x0a	; 10
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	a9 f1       	breq	.+106    	; 0xc9e <KEYPAD_init+0x72>
     c34:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     c36:	69 81       	ldd	r22, Y+1	; 0x01
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	88 81       	ld	r24, Y
     c3c:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     c40:	6b 81       	ldd	r22, Y+3	; 0x03
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     c4a:	6d 81       	ldd	r22, Y+5	; 0x05
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	8c 81       	ldd	r24, Y+4	; 0x04
     c50:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     c54:	69 81       	ldd	r22, Y+1	; 0x01
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	88 81       	ld	r24, Y
     c5a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     c5e:	6b 81       	ldd	r22, Y+3	; 0x03
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     c68:	6d 81       	ldd	r22, Y+5	; 0x05
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     c72:	6f 81       	ldd	r22, Y+7	; 0x07
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	8e 81       	ldd	r24, Y+6	; 0x06
     c78:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     c7c:	69 85       	ldd	r22, Y+9	; 0x09
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	88 85       	ldd	r24, Y+8	; 0x08
     c82:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     c86:	6b 85       	ldd	r22, Y+11	; 0x0b
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c8c:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     c90:	6d 85       	ldd	r22, Y+13	; 0x0d
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	8c 85       	ldd	r24, Y+12	; 0x0c
     c96:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     c9e:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	1f 92       	push	r1
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     cbc:	07 e6       	ldi	r16, 0x67	; 103
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	f8 01       	movw	r30, r16
     cc2:	67 81       	ldd	r22, Z+7	; 0x07
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	86 81       	ldd	r24, Z+6	; 0x06
     cc8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     ccc:	f8 01       	movw	r30, r16
     cce:	61 85       	ldd	r22, Z+9	; 0x09
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	80 85       	ldd	r24, Z+8	; 0x08
     cd4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     cd8:	f8 01       	movw	r30, r16
     cda:	63 85       	ldd	r22, Z+11	; 0x0b
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	82 85       	ldd	r24, Z+10	; 0x0a
     ce0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     ce4:	f8 01       	movw	r30, r16
     ce6:	65 85       	ldd	r22, Z+13	; 0x0d
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	84 85       	ldd	r24, Z+12	; 0x0c
     cec:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     cf0:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     cf2:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     cf4:	42 c0       	rjmp	.+132    	; 0xd7a <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     cf6:	e7 e6       	ldi	r30, 0x67	; 103
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	67 81       	ldd	r22, Z+7	; 0x07
     cfc:	60 0f       	add	r22, r16
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	86 81       	ldd	r24, Z+6	; 0x06
     d02:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
		for(j=0;j<3;j++)
     d06:	10 e0       	ldi	r17, 0x00	; 0
     d08:	2d c0       	rjmp	.+90     	; 0xd64 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     d0a:	e7 e6       	ldi	r30, 0x67	; 103
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	61 81       	ldd	r22, Z+1	; 0x01
     d10:	61 0f       	add	r22, r17
     d12:	ae 01       	movw	r20, r28
     d14:	4f 5f       	subi	r20, 0xFF	; 255
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_readPIN>
			if(value==0)
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	81 11       	cpse	r24, r1
     d22:	1f c0       	rjmp	.+62     	; 0xd62 <KEYPAD_read+0xbc>
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     d26:	e7 e6       	ldi	r30, 0x67	; 103
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	61 81       	ldd	r22, Z+1	; 0x01
     d2c:	61 0f       	add	r22, r17
     d2e:	ae 01       	movw	r20, r28
     d30:	4f 5f       	subi	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	99 f3       	breq	.-26     	; 0xd26 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     d40:	80 2f       	mov	r24, r16
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	e8 0f       	add	r30, r24
     d4c:	f9 1f       	adc	r31, r25
     d4e:	ea 5b       	subi	r30, 0xBA	; 186
     d50:	fe 4f       	sbci	r31, 0xFE	; 254
     d52:	e1 0f       	add	r30, r17
     d54:	f1 1d       	adc	r31, r1
     d56:	80 81       	ld	r24, Z
     d58:	f7 01       	movw	r30, r14
     d5a:	80 83       	st	Z, r24
				flag=1;
     d5c:	dd 24       	eor	r13, r13
     d5e:	d3 94       	inc	r13
				
				break;
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     d62:	1f 5f       	subi	r17, 0xFF	; 255
     d64:	13 30       	cpi	r17, 0x03	; 3
     d66:	88 f2       	brcs	.-94     	; 0xd0a <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     d68:	e7 e6       	ldi	r30, 0x67	; 103
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	67 81       	ldd	r22, Z+7	; 0x07
     d6e:	60 0f       	add	r22, r16
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	86 81       	ldd	r24, Z+6	; 0x06
     d74:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     d78:	0f 5f       	subi	r16, 0xFF	; 255
     d7a:	04 30       	cpi	r16, 0x04	; 4
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <KEYPAD_read+0xda>
     d7e:	bb cf       	rjmp	.-138    	; 0xcf6 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	df 16       	cp	r13, r31
     d84:	19 f0       	breq	.+6      	; 0xd8c <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     d86:	8e e4       	ldi	r24, 0x4E	; 78
     d88:	f7 01       	movw	r30, r14
     d8a:	80 83       	st	Z, r24
		return ret_val;
	}
	
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	08 95       	ret

00000da0 <MOTOR_INIT>:
/*including sections*/
#include "motor.h"

/* APIs impelementation*/
EN_motor_error_t MOTOR_INIT(const ST_motor_t* motor)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ec 01       	movw	r28, r24
	if((DIO_init(motor->port,motor->pin_num1,STD_OUTPUT)==DIO_E_OK) && (DIO_init(motor->port,motor->pin_num2,STD_OUTPUT)==DIO_E_OK ))
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	69 81       	ldd	r22, Y+1	; 0x01
     daa:	88 81       	ld	r24, Y
     dac:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     db0:	81 11       	cpse	r24, r1
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <MOTOR_INIT+0x24>
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	6a 81       	ldd	r22, Y+2	; 0x02
     db8:	88 81       	ld	r24, Y
     dba:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
     dbe:	81 11       	cpse	r24, r1
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <MOTOR_INIT+0x28>
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <MOTOR_INIT+0x2a>
	{
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     dc4:	89 e0       	ldi	r24, 0x09	; 9
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <MOTOR_INIT+0x2a>
     dc8:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <MOTOR_FORWARD>:
EN_motor_error_t MOTOR_FORWARD(const ST_motor_t* motor)
{
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_HIGH)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	69 81       	ldd	r22, Y+1	; 0x01
     dda:	88 81       	ld	r24, Y
     ddc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     de0:	81 11       	cpse	r24, r1
     de2:	08 c0       	rjmp	.+16     	; 0xdf4 <MOTOR_FORWARD+0x24>
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	6a 81       	ldd	r22, Y+2	; 0x02
     de8:	88 81       	ld	r24, Y
     dea:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     dee:	81 11       	cpse	r24, r1
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <MOTOR_FORWARD+0x28>
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <MOTOR_FORWARD+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     df4:	89 e0       	ldi	r24, 0x09	; 9
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <MOTOR_FORWARD+0x2a>
     df8:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <MOTOR_BACKWARD>:
EN_motor_error_t MOTOR_BACKWARD(const ST_motor_t* motor)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_HIGH)==DIO_E_OK)
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	69 81       	ldd	r22, Y+1	; 0x01
     e0a:	88 81       	ld	r24, Y
     e0c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     e10:	81 11       	cpse	r24, r1
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <MOTOR_BACKWARD+0x24>
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	6a 81       	ldd	r22, Y+2	; 0x02
     e18:	88 81       	ld	r24, Y
     e1a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     e1e:	81 11       	cpse	r24, r1
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <MOTOR_BACKWARD+0x28>
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <MOTOR_BACKWARD+0x2a>
	{    
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     e24:	89 e0       	ldi	r24, 0x09	; 9
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <MOTOR_BACKWARD+0x2a>
     e28:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <MOTOR_STOP>:
EN_motor_error_t MOTOR_STOP(const ST_motor_t* motor)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	69 81       	ldd	r22, Y+1	; 0x01
     e3a:	88 81       	ld	r24, Y
     e3c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     e40:	81 11       	cpse	r24, r1
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <MOTOR_STOP+0x24>
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	6a 81       	ldd	r22, Y+2	; 0x02
     e48:	88 81       	ld	r24, Y
     e4a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     e4e:	81 11       	cpse	r24, r1
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <MOTOR_STOP+0x28>
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <MOTOR_STOP+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     e54:	89 e0       	ldi	r24, 0x09	; 9
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <MOTOR_STOP+0x2a>
     e58:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <TIMER0_callBackFunc>:



void TIMER0_callBackFunc(void)
{
	u8_gs_pwm_counter++;
     e60:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <u8_gs_pwm_counter>
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <u8_gs_pwm_counter>
	if (u8_gs_pwm_counter < u8_gs_duty_counter)
     e6a:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <u8_gs_duty_counter>
     e6e:	89 17       	cp	r24, r25
     e70:	60 f4       	brcc	.+24     	; 0xe8a <TIMER0_callBackFunc+0x2a>
	{
		if (u8_gs_dir == FORWARD)
     e72:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <u8_gs_dir>
     e76:	81 11       	cpse	r24, r1
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <TIMER0_callBackFunc+0x20>
		{
			CAR_forward();
     e7a:	0e 94 ce 03 	call	0x79c	; 0x79c <CAR_forward>
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <TIMER0_callBackFunc+0x40>
		}
		else if (u8_gs_dir == BACKWARD)
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	71 f4       	brne	.+28     	; 0xea0 <TIMER0_callBackFunc+0x40>
		{
			CAR_backword();
     e84:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <CAR_backword>
     e88:	0b c0       	rjmp	.+22     	; 0xea0 <TIMER0_callBackFunc+0x40>
		}
		else{
			// do nothing
		}
	}
	else if (u8_gs_pwm_counter < u8_gs_cycle && u8_gs_pwm_counter>= u8_gs_duty_counter)
     e8a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <u8_gs_cycle>
     e8e:	82 17       	cp	r24, r18
     e90:	28 f4       	brcc	.+10     	; 0xe9c <TIMER0_callBackFunc+0x3c>
     e92:	89 17       	cp	r24, r25
     e94:	18 f0       	brcs	.+6      	; 0xe9c <TIMER0_callBackFunc+0x3c>
	{
		CAR_stop();
     e96:	0e 94 1e 04 	call	0x83c	; 0x83c <CAR_stop>
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <TIMER0_callBackFunc+0x40>
	}
	else{
		u8_gs_pwm_counter = 0;
     e9c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u8_gs_pwm_counter>
	}
	TIMER_Manager_reset(&st_timer0Config);
     ea0:	85 e8       	ldi	r24, 0x85	; 133
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <TIMER_Manager_reset>
     ea8:	08 95       	ret

00000eaa <PWM_init>:
static uint8_t u8_gs_duty_counter = 0;
static uint8_t u8_gs_cycle = 0;
static uint8_t u8_gs_dir = 0;

u8_pwmErrorType PWM_init(void)
{
     eaa:	cf 93       	push	r28
	//DDRB = 0xff;
	uint8_t u8_retVal = PWM_ERROR_OK;
	u8_retVal = TIMER_Manager_init(&st_timer0Config);
     eac:	85 e8       	ldi	r24, 0x85	; 133
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 a1 07 	call	0xf42	; 0xf42 <TIMER_Manager_init>
     eb4:	c8 2f       	mov	r28, r24
	u8_retVal |= CAR_init();
     eb6:	0e 94 ba 03 	call	0x774	; 0x774 <CAR_init>
     eba:	8c 2b       	or	r24, r28
	if (u8_retVal == PWM_ERROR_OK)
     ebc:	19 f4       	brne	.+6      	; 0xec4 <PWM_init+0x1a>
	{
		u8_gs_pwm_state = INIT;
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <u8_gs_pwm_state>
	}
	return u8_retVal;
}
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <PWM_start>:
u8_pwmErrorType PWM_start(uint8_t u8_duty , uint8_t u8_cycle , en_motor_dir_t u8_motor_dir)
{
	
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state != NOT_INIT)
     ec8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <u8_gs_pwm_state>
     ecc:	99 23       	and	r25, r25
     ece:	31 f1       	breq	.+76     	; 0xf1c <PWM_start+0x54>
	{
		if (u8_gs_pwm_state == START &&  (u8_gs_duty != u8_duty || u8_gs_cycle != u8_cycle || u8_gs_dir != u8_motor_dir ))
     ed0:	92 30       	cpi	r25, 0x02	; 2
     ed2:	69 f4       	brne	.+26     	; 0xeee <PWM_start+0x26>
     ed4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <u8_gs_duty>
     ed8:	98 13       	cpse	r25, r24
     eda:	07 c0       	rjmp	.+14     	; 0xeea <PWM_start+0x22>
     edc:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <u8_gs_cycle>
     ee0:	96 13       	cpse	r25, r22
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <PWM_start+0x22>
     ee4:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <u8_gs_dir>
     ee8:	94 13       	cpse	r25, r20
		{
			u8_gs_pwm_counter = 0;
     eea:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u8_gs_pwm_counter>
		}
		u8_gs_duty = u8_duty;
     eee:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <u8_gs_duty>
		u8_gs_cycle = u8_cycle;
     ef2:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <u8_gs_cycle>
		u8_gs_dir = u8_motor_dir;
     ef6:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <u8_gs_dir>
		u8_duty = (u8_cycle * u8_duty) / 100;
     efa:	68 9f       	mul	r22, r24
     efc:	c0 01       	movw	r24, r0
     efe:	11 24       	eor	r1, r1
     f00:	64 e6       	ldi	r22, 0x64	; 100
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__divmodhi4>
		u8_gs_duty_counter = u8_duty;
     f08:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <u8_gs_duty_counter>
		u8_retVal |= TIMER_Manager_start(&st_timer0Config);
     f0c:	85 e8       	ldi	r24, 0x85	; 133
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 c1 07 	call	0xf82	; 0xf82 <TIMER_Manager_start>
		}
		else{
			u8_gs_pwm_counter = 0;
		}
		*/
		u8_gs_pwm_state = START;
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <u8_gs_pwm_state>
     f1a:	08 95       	ret
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     f1c:	8a e0       	ldi	r24, 0x0A	; 10
	}
	return u8_retVal;
}
     f1e:	08 95       	ret

00000f20 <PWM_stop>:
u8_pwmErrorType PWM_stop(void)
{
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state == START )
     f20:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u8_gs_pwm_state>
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	59 f4       	brne	.+22     	; 0xf3e <PWM_stop+0x1e>
	{
		TIMER_Manager_stop(st_timer0Config.u8_timerNum);
     f28:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <st_timer0Config>
     f2c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TIMER_Manager_stop>
		u8_gs_pwm_counter = 0;
     f30:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <u8_gs_pwm_counter>
		u8_gs_pwm_state = STOP;
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <u8_gs_pwm_state>
	}
	return u8_retVal;
}
u8_pwmErrorType PWM_stop(void)
{
	uint8_t u8_retVal = PWM_ERROR_OK;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	08 95       	ret
		TIMER_Manager_stop(st_timer0Config.u8_timerNum);
		u8_gs_pwm_counter = 0;
		u8_gs_pwm_state = STOP;
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
	}
	return u8_retVal;
}
     f40:	08 95       	ret

00000f42 <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	91 f0       	breq	.+36     	; 0xf70 <TIMER_Manager_init+0x2e>
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 81       	ld	r18, Z
     f50:	23 30       	cpi	r18, 0x03	; 3
     f52:	80 f4       	brcc	.+32     	; 0xf74 <TIMER_Manager_init+0x32>
     f54:	21 81       	ldd	r18, Z+1	; 0x01
     f56:	2a 30       	cpi	r18, 0x0A	; 10
     f58:	78 f4       	brcc	.+30     	; 0xf78 <TIMER_Manager_init+0x36>
     f5a:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     f5c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TIMER_init>
     f60:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     f62:	68 81       	ld	r22, Y
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	0e 94 75 0d 	call	0x1aea	; 0x1aea <TIMER_setCallBack>
     f6c:	81 2b       	or	r24, r17
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <TIMER_Manager_init+0x38>
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <TIMER_Manager_init+0x38>
     f78:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	08 95       	ret

00000f82 <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	51 f0       	breq	.+20     	; 0xf9a <TIMER_Manager_start+0x18>
     f86:	fc 01       	movw	r30, r24
     f88:	20 81       	ld	r18, Z
     f8a:	23 30       	cpi	r18, 0x03	; 3
     f8c:	40 f4       	brcc	.+16     	; 0xf9e <TIMER_Manager_start+0x1c>
     f8e:	21 81       	ldd	r18, Z+1	; 0x01
     f90:	2a 30       	cpi	r18, 0x0A	; 10
     f92:	38 f4       	brcc	.+14     	; 0xfa2 <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
     f94:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <TIMER_start>
     f98:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	08 95       	ret
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	08 95       	ret
     fa2:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
     fa4:	08 95       	ret

00000fa6 <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	18 f4       	brcc	.+6      	; 0xfb0 <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
     faa:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <TIMER_stop>
     fae:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     fb0:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     fb2:	08 95       	ret

00000fb4 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	51 f0       	breq	.+20     	; 0xfcc <TIMER_Manager_reset+0x18>
     fb8:	fc 01       	movw	r30, r24
     fba:	20 81       	ld	r18, Z
     fbc:	23 30       	cpi	r18, 0x03	; 3
     fbe:	40 f4       	brcc	.+16     	; 0xfd0 <TIMER_Manager_reset+0x1c>
     fc0:	21 81       	ldd	r18, Z+1	; 0x01
     fc2:	2a 30       	cpi	r18, 0x0A	; 10
     fc4:	38 f4       	brcc	.+14     	; 0xfd4 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     fc6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TIMER_reset>
     fca:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	08 95       	ret
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	08 95       	ret
     fd4:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     fd6:	08 95       	ret

00000fd8 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	63 e0       	ldi	r22, 0x03	; 3
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fe2:	8a e1       	ldi	r24, 0x1A	; 26
     fe4:	8a 95       	dec	r24
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <HULTRASONIC_vidTrigger+0xc>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	63 e0       	ldi	r22, 0x03	; 3
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>
     ff4:	08 95       	ret

00000ff6 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     ff6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <g_v_u16_ovfCounts>
     ffa:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <g_v_u16_ovfCounts+0x1>
     ffe:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <g_v_u16_ovfCounts+0x2>
    1002:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <g_v_u16_ovfCounts+0x3>
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	a1 1d       	adc	r26, r1
    100a:	b1 1d       	adc	r27, r1
    100c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <g_v_u16_ovfCounts>
    1010:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <g_v_u16_ovfCounts+0x1>
    1014:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <g_v_u16_ovfCounts+0x2>
    1018:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <g_v_u16_ovfCounts+0x3>
    101c:	08 95       	ret

0000101e <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
    101e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <g_v_u8_flag>
    1022:	81 11       	cpse	r24, r1
    1024:	14 c0       	rjmp	.+40     	; 0x104e <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
    1026:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
    102a:	62 e0       	ldi	r22, 0x02	; 2
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vidExtInt_init>
		g_v_u8_flag = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
    1038:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <g_v_u16_ovfCounts>
    103c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <g_v_u16_ovfCounts+0x1>
    1040:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <g_v_u16_ovfCounts+0x2>
    1044:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
    1048:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <vidTimer2_start>
    104c:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
    104e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <g_v_u8_flag>
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	09 f0       	breq	.+2      	; 0x1058 <HULTRASONIC_vidSigCalc+0x3a>
    1056:	50 c0       	rjmp	.+160    	; 0x10f8 <HULTRASONIC_vidSigCalc+0xda>
	{
		vidTimer2_stop();
    1058:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
    105c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <MTIMER_u8GetTCNT>
    1060:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
    1064:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <g_v_u16_ovfCounts>
    1068:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <g_v_u16_ovfCounts+0x1>
    106c:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <g_v_u16_ovfCounts+0x2>
    1070:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <g_v_u16_ovfCounts+0x3>
    1074:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <g_v_u16_ovf>
    1078:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <g_v_u16_ovf+0x1>
    107c:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <g_v_u16_ovf+0x2>
    1080:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
    1084:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <g_v_u8_cap>
    1088:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <g_v_u16_ovf>
    108c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <g_v_u16_ovf+0x1>
    1090:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <g_v_u16_ovf+0x2>
    1094:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <g_v_u16_ovf+0x3>
    1098:	ba 2f       	mov	r27, r26
    109a:	a9 2f       	mov	r26, r25
    109c:	98 2f       	mov	r25, r24
    109e:	88 27       	eor	r24, r24
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	62 0f       	add	r22, r18
    10a6:	71 1d       	adc	r23, r1
    10a8:	81 1d       	adc	r24, r1
    10aa:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = (float64_t)global_u32Ticks / 932.95;
    10ac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__floatunsisf>
    10b0:	2d ec       	ldi	r18, 0xCD	; 205
    10b2:	3c e3       	ldi	r19, 0x3C	; 60
    10b4:	49 e6       	ldi	r20, 0x69	; 105
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__divsf3>
    10bc:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <global_f64distance>
    10c0:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <global_f64distance+0x1>
    10c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <global_f64distance+0x2>
    10c8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
    10cc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <g_v_u16_ovf>
    10d0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <g_v_u16_ovf+0x1>
    10d4:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <g_v_u16_ovf+0x2>
    10d8:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <g_v_u16_ovf+0x3>
    10dc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <g_v_u16_ovfCounts>
    10e0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <g_v_u16_ovfCounts+0x1>
    10e4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <g_v_u16_ovfCounts+0x2>
    10e8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <g_v_u16_ovfCounts+0x3>
    10ec:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
    10f0:	63 e0       	ldi	r22, 0x03	; 3
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vidExtInt_init>
    10f8:	08 95       	ret

000010fa <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	63 e0       	ldi	r22, 0x03	; 3
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	62 e0       	ldi	r22, 0x02	; 2
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	62 e0       	ldi	r22, 0x02	; 2
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
    1118:	63 e0       	ldi	r22, 0x03	; 3
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <u8Timer2_setPrescallar>
    112c:	08 95       	ret

0000112e <HULTRASONIC_vidInterruptEnable>:
}

void HULTRASONIC_vidInterruptEnable(void)
{
	(void) vidTimer2_OvfIrqEnable();
    112e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <vidTimer2_OvfIrqEnable>
	MEXTINT2_vidEnableInterrupt();
    1132:	0e 94 6f 0a 	call	0x14de	; 0x14de <MEXTINT2_vidEnableInterrupt>
	MTIMER_vidEnableGlobalInterrupt();
    1136:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <MTIMER_vidEnableGlobalInterrupt>
    113a:	08 95       	ret

0000113c <HULTRASONIC_vidInterruptDisable>:
}

void HULTRASONIC_vidInterruptDisable(void)
{
	(void) vidTimer2_OvfIrqDisable();
    113c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <vidTimer2_OvfIrqDisable>
	MEXTINT2_vidDisableInterrupt();
    1140:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <MEXTINT2_vidDisableInterrupt>
    1144:	08 95       	ret

00001146 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
    1146:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
    114a:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <global_f64distance>
    114e:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <global_f64distance+0x1>
    1152:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <global_f64distance+0x2>
    1156:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <global_f64distance+0x3>
}
    115a:	08 95       	ret

0000115c <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
    115c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vidTimer2_setcbf_OVF>
    1160:	08 95       	ret

00001162 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
    1162:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MEXTINT_vidCallBackFunc>
    1166:	08 95       	ret

00001168 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
    1168:	0e 94 76 00 	call	0xec	; 0xec <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
    116c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <APP_vidStart>
    1170:	fd cf       	rjmp	.-6      	; 0x116c <main+0x4>

00001172 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
    1172:	68 30       	cpi	r22, 0x08	; 8
    1174:	a0 f5       	brcc	.+104    	; 0x11de <DIO_init+0x6c>
	{
		if (port == porta)
    1176:	81 11       	cpse	r24, r1
    1178:	0b c0       	rjmp	.+22     	; 0x1190 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
    117a:	8a b3       	in	r24, 0x1a	; 26
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_init+0x12>
    1180:	44 0f       	add	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	6a 95       	dec	r22
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_init+0xe>
    1188:	48 2b       	or	r20, r24
    118a:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	08 95       	ret
		}
		else if (port == portb)
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	59 f4       	brne	.+22     	; 0x11aa <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
    1194:	87 b3       	in	r24, 0x17	; 23
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_init+0x2c>
    119a:	44 0f       	add	r20, r20
    119c:	55 1f       	adc	r21, r21
    119e:	6a 95       	dec	r22
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_init+0x28>
    11a2:	48 2b       	or	r20, r24
    11a4:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret
		}
		else if (port == portc)
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
    11ae:	84 b3       	in	r24, 0x14	; 20
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_init+0x46>
    11b4:	44 0f       	add	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	6a 95       	dec	r22
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_init+0x42>
    11bc:	48 2b       	or	r20, r24
    11be:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	08 95       	ret
		}
		else if (port == portd)
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	69 f4       	brne	.+26     	; 0x11e2 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
    11c8:	81 b3       	in	r24, 0x11	; 17
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_init+0x60>
    11ce:	44 0f       	add	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	6a 95       	dec	r22
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_init+0x5c>
    11d6:	48 2b       	or	r20, r24
    11d8:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    11e2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    11e4:	08 95       	ret

000011e6 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
    11e6:	68 30       	cpi	r22, 0x08	; 8
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_writePIN+0x6>
    11ea:	74 c0       	rjmp	.+232    	; 0x12d4 <DIO_writePIN+0xee>
	{
		if (port == porta)
    11ec:	81 11       	cpse	r24, r1
    11ee:	1b c0       	rjmp	.+54     	; 0x1226 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
    11f0:	41 30       	cpi	r20, 0x01	; 1
    11f2:	61 f4       	brne	.+24     	; 0x120c <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
    11f4:	2b b3       	in	r18, 0x1b	; 27
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_writePIN+0x1a>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	6a 95       	dec	r22
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_writePIN+0x16>
    1204:	82 2b       	or	r24, r18
    1206:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
    120c:	2b b3       	in	r18, 0x1b	; 27
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_writePIN+0x32>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	6a 95       	dec	r22
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_writePIN+0x2e>
    121c:	80 95       	com	r24
    121e:	82 23       	and	r24, r18
    1220:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	08 95       	ret
		}
		else if (port == portb)
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	d9 f4       	brne	.+54     	; 0x1260 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
    122a:	41 30       	cpi	r20, 0x01	; 1
    122c:	61 f4       	brne	.+24     	; 0x1246 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
    122e:	28 b3       	in	r18, 0x18	; 24
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_writePIN+0x54>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	6a 95       	dec	r22
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_writePIN+0x50>
    123e:	82 2b       	or	r24, r18
    1240:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
    1246:	28 b3       	in	r18, 0x18	; 24
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_writePIN+0x6c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	6a 95       	dec	r22
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_writePIN+0x68>
    1256:	80 95       	com	r24
    1258:	82 23       	and	r24, r18
    125a:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	08 95       	ret
		}
		else if (port == portc)
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	d9 f4       	brne	.+54     	; 0x129a <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
    1264:	41 30       	cpi	r20, 0x01	; 1
    1266:	61 f4       	brne	.+24     	; 0x1280 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
    1268:	25 b3       	in	r18, 0x15	; 21
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_writePIN+0x8e>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	6a 95       	dec	r22
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_writePIN+0x8a>
    1278:	82 2b       	or	r24, r18
    127a:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
    1280:	25 b3       	in	r18, 0x15	; 21
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_writePIN+0xa6>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	6a 95       	dec	r22
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_writePIN+0xa2>
    1290:	80 95       	com	r24
    1292:	82 23       	and	r24, r18
    1294:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret
		}
		else if (port == portd)
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	e9 f4       	brne	.+58     	; 0x12d8 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	61 f4       	brne	.+24     	; 0x12ba <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
    12a2:	22 b3       	in	r18, 0x12	; 18
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_writePIN+0xc8>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	6a 95       	dec	r22
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_writePIN+0xc4>
    12b2:	82 2b       	or	r24, r18
    12b4:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
    12ba:	22 b3       	in	r18, 0x12	; 18
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_writePIN+0xe0>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	6a 95       	dec	r22
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_writePIN+0xdc>
    12ca:	80 95       	com	r24
    12cc:	82 23       	and	r24, r18
    12ce:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    12d8:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    12da:	08 95       	ret

000012dc <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
    12dc:	68 30       	cpi	r22, 0x08	; 8
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <DIO_readPIN+0x6>
    12e0:	64 c0       	rjmp	.+200    	; 0x13aa <DIO_readPIN+0xce>
	{
		if (port == porta)
    12e2:	81 11       	cpse	r24, r1
    12e4:	17 c0       	rjmp	.+46     	; 0x1314 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
    12e6:	79 b3       	in	r23, 0x19	; 25
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9c 01       	movw	r18, r24
    12ee:	06 2e       	mov	r0, r22
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_readPIN+0x1a>
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_readPIN+0x16>
    12fa:	87 2f       	mov	r24, r23
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	82 23       	and	r24, r18
    1300:	93 23       	and	r25, r19
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_readPIN+0x2c>
    1304:	96 95       	lsr	r25
    1306:	87 95       	ror	r24
    1308:	6a 95       	dec	r22
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_readPIN+0x28>
    130c:	fa 01       	movw	r30, r20
    130e:	80 83       	st	Z, r24
			return DIO_E_OK;
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 95       	ret
		}
		else if (port == portb)
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	b9 f4       	brne	.+46     	; 0x1346 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
    1318:	76 b3       	in	r23, 0x16	; 22
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 01       	movw	r18, r24
    1320:	06 2e       	mov	r0, r22
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_readPIN+0x4c>
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_readPIN+0x48>
    132c:	87 2f       	mov	r24, r23
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	82 23       	and	r24, r18
    1332:	93 23       	and	r25, r19
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_readPIN+0x5e>
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	6a 95       	dec	r22
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_readPIN+0x5a>
    133e:	fa 01       	movw	r30, r20
    1340:	80 83       	st	Z, r24
			return DIO_E_OK;
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	08 95       	ret
		}
		else if (port == portc)
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	b9 f4       	brne	.+46     	; 0x1378 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
    134a:	73 b3       	in	r23, 0x13	; 19
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9c 01       	movw	r18, r24
    1352:	06 2e       	mov	r0, r22
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_readPIN+0x7e>
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_readPIN+0x7a>
    135e:	87 2f       	mov	r24, r23
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	82 23       	and	r24, r18
    1364:	93 23       	and	r25, r19
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_readPIN+0x90>
    1368:	96 95       	lsr	r25
    136a:	87 95       	ror	r24
    136c:	6a 95       	dec	r22
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_readPIN+0x8c>
    1370:	fa 01       	movw	r30, r20
    1372:	80 83       	st	Z, r24
			return DIO_E_OK;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret
		}
		else if (port == portd)
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	c9 f4       	brne	.+50     	; 0x13ae <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
    137c:	70 b3       	in	r23, 0x10	; 16
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9c 01       	movw	r18, r24
    1384:	06 2e       	mov	r0, r22
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_readPIN+0xb0>
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_readPIN+0xac>
    1390:	87 2f       	mov	r24, r23
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	82 23       	and	r24, r18
    1396:	93 23       	and	r25, r19
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_readPIN+0xc2>
    139a:	96 95       	lsr	r25
    139c:	87 95       	ror	r24
    139e:	6a 95       	dec	r22
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_readPIN+0xbe>
    13a2:	fa 01       	movw	r30, r20
    13a4:	80 83       	st	Z, r24
			return DIO_E_OK;
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
    13b0:	08 95       	ret

000013b2 <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <vidExtInt_init+0x6>
    13b6:	70 c0       	rjmp	.+224    	; 0x1498 <vidExtInt_init+0xe6>
    13b8:	64 30       	cpi	r22, 0x04	; 4
    13ba:	08 f0       	brcs	.+2      	; 0x13be <vidExtInt_init+0xc>
    13bc:	6f c0       	rjmp	.+222    	; 0x149c <vidExtInt_init+0xea>
    13be:	81 11       	cpse	r24, r1
    13c0:	28 c0       	rjmp	.+80     	; 0x1412 <vidExtInt_init+0x60>
    13c2:	61 30       	cpi	r22, 0x01	; 1
    13c4:	71 f0       	breq	.+28     	; 0x13e2 <vidExtInt_init+0x30>
    13c6:	28 f0       	brcs	.+10     	; 0x13d2 <vidExtInt_init+0x20>
    13c8:	62 30       	cpi	r22, 0x02	; 2
    13ca:	99 f0       	breq	.+38     	; 0x13f2 <vidExtInt_init+0x40>
    13cc:	63 30       	cpi	r22, 0x03	; 3
    13ce:	c9 f0       	breq	.+50     	; 0x1402 <vidExtInt_init+0x50>
    13d0:	67 c0       	rjmp	.+206    	; 0x14a0 <vidExtInt_init+0xee>
    13d2:	85 b7       	in	r24, 0x35	; 53
    13d4:	8e 7f       	andi	r24, 0xFE	; 254
    13d6:	85 bf       	out	0x35, r24	; 53
    13d8:	85 b7       	in	r24, 0x35	; 53
    13da:	8d 7f       	andi	r24, 0xFD	; 253
    13dc:	85 bf       	out	0x35, r24	; 53
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	08 95       	ret
    13e2:	85 b7       	in	r24, 0x35	; 53
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	85 bf       	out	0x35, r24	; 53
    13e8:	85 b7       	in	r24, 0x35	; 53
    13ea:	8d 7f       	andi	r24, 0xFD	; 253
    13ec:	85 bf       	out	0x35, r24	; 53
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret
    13f2:	85 b7       	in	r24, 0x35	; 53
    13f4:	8e 7f       	andi	r24, 0xFE	; 254
    13f6:	85 bf       	out	0x35, r24	; 53
    13f8:	85 b7       	in	r24, 0x35	; 53
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	85 bf       	out	0x35, r24	; 53
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	08 95       	ret
    1402:	85 b7       	in	r24, 0x35	; 53
    1404:	81 60       	ori	r24, 0x01	; 1
    1406:	85 bf       	out	0x35, r24	; 53
    1408:	85 b7       	in	r24, 0x35	; 53
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	85 bf       	out	0x35, r24	; 53
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	08 95       	ret
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	81 f5       	brne	.+96     	; 0x1476 <vidExtInt_init+0xc4>
    1416:	61 30       	cpi	r22, 0x01	; 1
    1418:	71 f0       	breq	.+28     	; 0x1436 <vidExtInt_init+0x84>
    141a:	28 f0       	brcs	.+10     	; 0x1426 <vidExtInt_init+0x74>
    141c:	62 30       	cpi	r22, 0x02	; 2
    141e:	99 f0       	breq	.+38     	; 0x1446 <vidExtInt_init+0x94>
    1420:	63 30       	cpi	r22, 0x03	; 3
    1422:	c9 f0       	breq	.+50     	; 0x1456 <vidExtInt_init+0xa4>
    1424:	20 c0       	rjmp	.+64     	; 0x1466 <vidExtInt_init+0xb4>
    1426:	85 b7       	in	r24, 0x35	; 53
    1428:	8b 7f       	andi	r24, 0xFB	; 251
    142a:	85 bf       	out	0x35, r24	; 53
    142c:	85 b7       	in	r24, 0x35	; 53
    142e:	87 7f       	andi	r24, 0xF7	; 247
    1430:	85 bf       	out	0x35, r24	; 53
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	19 c0       	rjmp	.+50     	; 0x1468 <vidExtInt_init+0xb6>
    1436:	85 b7       	in	r24, 0x35	; 53
    1438:	84 60       	ori	r24, 0x04	; 4
    143a:	85 bf       	out	0x35, r24	; 53
    143c:	85 b7       	in	r24, 0x35	; 53
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	85 bf       	out	0x35, r24	; 53
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <vidExtInt_init+0xb6>
    1446:	85 b7       	in	r24, 0x35	; 53
    1448:	8b 7f       	andi	r24, 0xFB	; 251
    144a:	85 bf       	out	0x35, r24	; 53
    144c:	85 b7       	in	r24, 0x35	; 53
    144e:	88 60       	ori	r24, 0x08	; 8
    1450:	85 bf       	out	0x35, r24	; 53
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <vidExtInt_init+0xb6>
    1456:	85 b7       	in	r24, 0x35	; 53
    1458:	84 60       	ori	r24, 0x04	; 4
    145a:	85 bf       	out	0x35, r24	; 53
    145c:	85 b7       	in	r24, 0x35	; 53
    145e:	88 60       	ori	r24, 0x08	; 8
    1460:	85 bf       	out	0x35, r24	; 53
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <vidExtInt_init+0xb6>
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	9b b7       	in	r25, 0x3b	; 59
    146a:	90 68       	ori	r25, 0x80	; 128
    146c:	9b bf       	out	0x3b, r25	; 59
    146e:	9a b7       	in	r25, 0x3a	; 58
    1470:	90 68       	ori	r25, 0x80	; 128
    1472:	9a bf       	out	0x3a, r25	; 58
    1474:	08 95       	ret
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	a9 f4       	brne	.+42     	; 0x14a4 <vidExtInt_init+0xf2>
    147a:	62 30       	cpi	r22, 0x02	; 2
    147c:	19 f0       	breq	.+6      	; 0x1484 <vidExtInt_init+0xd2>
    147e:	63 30       	cpi	r22, 0x03	; 3
    1480:	31 f0       	breq	.+12     	; 0x148e <vidExtInt_init+0xdc>
    1482:	12 c0       	rjmp	.+36     	; 0x14a8 <vidExtInt_init+0xf6>
    1484:	84 b7       	in	r24, 0x34	; 52
    1486:	8f 7b       	andi	r24, 0xBF	; 191
    1488:	84 bf       	out	0x34, r24	; 52
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	08 95       	ret
    148e:	84 b7       	in	r24, 0x34	; 52
    1490:	80 64       	ori	r24, 0x40	; 64
    1492:	84 bf       	out	0x34, r24	; 52
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	08 95       	ret
    1498:	84 e0       	ldi	r24, 0x04	; 4
    149a:	08 95       	ret
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	08 95       	ret
    14a0:	84 e0       	ldi	r24, 0x04	; 4
    14a2:	08 95       	ret
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	08 95       	ret

000014ac <MEXTINT_vidCallBackFuncInt0>:
    14ac:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <callBackFuncInt0+0x1>
    14b0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <callBackFuncInt0>
    14b4:	08 95       	ret

000014b6 <MEXTINT_vidCallBackFunc>:
    14b6:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <callBack+0x1>
    14ba:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <callBack>
    14be:	08 95       	ret

000014c0 <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
    14c0:	8b b7       	in	r24, 0x3b	; 59
    14c2:	8f 7b       	andi	r24, 0xBF	; 191
    14c4:	8b bf       	out	0x3b, r24	; 59
    14c6:	08 95       	ret

000014c8 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
    14c8:	8a b7       	in	r24, 0x3a	; 58
    14ca:	80 64       	ori	r24, 0x40	; 64
    14cc:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
    14ce:	8b b7       	in	r24, 0x3b	; 59
    14d0:	80 64       	ori	r24, 0x40	; 64
    14d2:	8b bf       	out	0x3b, r24	; 59
    14d4:	08 95       	ret

000014d6 <MEXTINT2_vidDisableInterrupt>:
}

void MEXTINT2_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT2);
    14d6:	8b b7       	in	r24, 0x3b	; 59
    14d8:	8f 7d       	andi	r24, 0xDF	; 223
    14da:	8b bf       	out	0x3b, r24	; 59
    14dc:	08 95       	ret

000014de <MEXTINT2_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT2_vidEnableInterrupt(void)
{
		SET_BIT(GICR_REG, INT2);
    14de:	8b b7       	in	r24, 0x3b	; 59
    14e0:	80 62       	ori	r24, 0x20	; 32
    14e2:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR_REG, INTF2);
    14e4:	8a b7       	in	r24, 0x3a	; 58
    14e6:	80 62       	ori	r24, 0x20	; 32
    14e8:	8a bf       	out	0x3a, r24	; 58
    14ea:	08 95       	ret

000014ec <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
	callBackFuncInt0();
    150e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <callBackFuncInt0>
    1512:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <callBackFuncInt0+0x1>
    1516:	09 95       	icall
}
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <__vector_2>:

ISR(INT1_vect)
{
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
	callBackFunc();
    155c:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <callBackFunc>
    1560:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <callBackFunc+0x1>
    1564:	09 95       	icall
}
    1566:	ff 91       	pop	r31
    1568:	ef 91       	pop	r30
    156a:	bf 91       	pop	r27
    156c:	af 91       	pop	r26
    156e:	9f 91       	pop	r25
    1570:	8f 91       	pop	r24
    1572:	7f 91       	pop	r23
    1574:	6f 91       	pop	r22
    1576:	5f 91       	pop	r21
    1578:	4f 91       	pop	r20
    157a:	3f 91       	pop	r19
    157c:	2f 91       	pop	r18
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <__vector_3>:

ISR(INT2_vect)
{
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	2f 93       	push	r18
    1594:	3f 93       	push	r19
    1596:	4f 93       	push	r20
    1598:	5f 93       	push	r21
    159a:	6f 93       	push	r22
    159c:	7f 93       	push	r23
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31
	callBack();
    15aa:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <callBack>
    15ae:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <callBack+0x1>
    15b2:	09 95       	icall
}
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <sg_Timer0_callBackPtr>
    15fc:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <sg_Timer0_callBackPtr+0x1>
    1600:	89 2b       	or	r24, r25
    1602:	41 f0       	breq	.+16     	; 0x1614 <__vector_11+0x3e>
    1604:	88 b7       	in	r24, 0x38	; 56
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	88 bf       	out	0x38, r24	; 56
    160a:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <sg_Timer0_callBackPtr>
    160e:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <sg_Timer0_callBackPtr+0x1>
    1612:	09 95       	icall
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <__vector_9>:
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	2f 93       	push	r18
    1642:	3f 93       	push	r19
    1644:	4f 93       	push	r20
    1646:	5f 93       	push	r21
    1648:	6f 93       	push	r22
    164a:	7f 93       	push	r23
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	af 93       	push	r26
    1652:	bf 93       	push	r27
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
    1658:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <sg_Timer1_callBackPtr>
    165c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <sg_Timer1_callBackPtr+0x1>
    1660:	89 2b       	or	r24, r25
    1662:	41 f0       	breq	.+16     	; 0x1674 <__vector_9+0x3e>
    1664:	88 b7       	in	r24, 0x38	; 56
    1666:	8b 7f       	andi	r24, 0xFB	; 251
    1668:	88 bf       	out	0x38, r24	; 56
    166a:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <sg_Timer1_callBackPtr>
    166e:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <sg_Timer1_callBackPtr+0x1>
    1672:	09 95       	icall
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <TIMER_init>:
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	09 f4       	brne	.+2      	; 0x169c <TIMER_init+0x6>
    169a:	78 c0       	rjmp	.+240    	; 0x178c <TIMER_init+0xf6>
    169c:	fc 01       	movw	r30, r24
    169e:	20 81       	ld	r18, Z
    16a0:	23 30       	cpi	r18, 0x03	; 3
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <TIMER_init+0x10>
    16a4:	75 c0       	rjmp	.+234    	; 0x1790 <TIMER_init+0xfa>
    16a6:	31 81       	ldd	r19, Z+1	; 0x01
    16a8:	3a 30       	cpi	r19, 0x0A	; 10
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <TIMER_init+0x18>
    16ac:	73 c0       	rjmp	.+230    	; 0x1794 <TIMER_init+0xfe>
    16ae:	21 30       	cpi	r18, 0x01	; 1
    16b0:	19 f1       	breq	.+70     	; 0x16f8 <TIMER_init+0x62>
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <TIMER_init+0x26>
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	09 f4       	brne	.+2      	; 0x16ba <TIMER_init+0x24>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <TIMER_init+0xc4>
    16ba:	6e c0       	rjmp	.+220    	; 0x1798 <TIMER_init+0x102>
    16bc:	12 be       	out	0x32, r1	; 50
    16be:	13 be       	out	0x33, r1	; 51
    16c0:	1c be       	out	0x3c, r1	; 60
    16c2:	fc 01       	movw	r30, r24
    16c4:	22 81       	ldd	r18, Z+2	; 0x02
    16c6:	22 bf       	out	0x32, r18	; 50
    16c8:	23 b7       	in	r18, 0x33	; 51
    16ca:	20 68       	ori	r18, 0x80	; 128
    16cc:	23 bf       	out	0x33, r18	; 51
    16ce:	23 b7       	in	r18, 0x33	; 51
    16d0:	2f 7b       	andi	r18, 0xBF	; 191
    16d2:	23 bf       	out	0x33, r18	; 51
    16d4:	23 b7       	in	r18, 0x33	; 51
    16d6:	27 7f       	andi	r18, 0xF7	; 247
    16d8:	23 bf       	out	0x33, r18	; 51
    16da:	23 b7       	in	r18, 0x33	; 51
    16dc:	2f 7e       	andi	r18, 0xEF	; 239
    16de:	23 bf       	out	0x33, r18	; 51
    16e0:	23 b7       	in	r18, 0x33	; 51
    16e2:	2f 7d       	andi	r18, 0xDF	; 223
    16e4:	23 bf       	out	0x33, r18	; 51
    16e6:	84 81       	ldd	r24, Z+4	; 0x04
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	09 f0       	breq	.+2      	; 0x16ee <TIMER_init+0x58>
    16ec:	57 c0       	rjmp	.+174    	; 0x179c <TIMER_init+0x106>
    16ee:	89 b7       	in	r24, 0x39	; 57
    16f0:	81 60       	ori	r24, 0x01	; 1
    16f2:	89 bf       	out	0x39, r24	; 57
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	08 95       	ret
    16f8:	1c bc       	out	0x2c, r1	; 44
    16fa:	1d bc       	out	0x2d, r1	; 45
    16fc:	1f bc       	out	0x2f, r1	; 47
    16fe:	1e bc       	out	0x2e, r1	; 46
    1700:	1b bc       	out	0x2b, r1	; 43
    1702:	1a bc       	out	0x2a, r1	; 42
    1704:	fc 01       	movw	r30, r24
    1706:	22 81       	ldd	r18, Z+2	; 0x02
    1708:	33 81       	ldd	r19, Z+3	; 0x03
    170a:	3d bd       	out	0x2d, r19	; 45
    170c:	2c bd       	out	0x2c, r18	; 44
    170e:	2f b5       	in	r18, 0x2f	; 47
    1710:	28 60       	ori	r18, 0x08	; 8
    1712:	2f bd       	out	0x2f, r18	; 47
    1714:	2f b5       	in	r18, 0x2f	; 47
    1716:	24 60       	ori	r18, 0x04	; 4
    1718:	2f bd       	out	0x2f, r18	; 47
    171a:	2f b5       	in	r18, 0x2f	; 47
    171c:	2e 7f       	andi	r18, 0xFE	; 254
    171e:	2f bd       	out	0x2f, r18	; 47
    1720:	2f b5       	in	r18, 0x2f	; 47
    1722:	2d 7f       	andi	r18, 0xFD	; 253
    1724:	2f bd       	out	0x2f, r18	; 47
    1726:	2e b5       	in	r18, 0x2e	; 46
    1728:	2f 7e       	andi	r18, 0xEF	; 239
    172a:	2e bd       	out	0x2e, r18	; 46
    172c:	2e b5       	in	r18, 0x2e	; 46
    172e:	27 7f       	andi	r18, 0xF7	; 247
    1730:	2e bd       	out	0x2e, r18	; 46
    1732:	2f b5       	in	r18, 0x2f	; 47
    1734:	2f 7b       	andi	r18, 0xBF	; 191
    1736:	2f bd       	out	0x2f, r18	; 47
    1738:	2f b5       	in	r18, 0x2f	; 47
    173a:	2f 77       	andi	r18, 0x7F	; 127
    173c:	2f bd       	out	0x2f, r18	; 47
    173e:	2f b5       	in	r18, 0x2f	; 47
    1740:	2f 7e       	andi	r18, 0xEF	; 239
    1742:	2f bd       	out	0x2f, r18	; 47
    1744:	2f b5       	in	r18, 0x2f	; 47
    1746:	2f 7d       	andi	r18, 0xDF	; 223
    1748:	2f bd       	out	0x2f, r18	; 47
    174a:	84 81       	ldd	r24, Z+4	; 0x04
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	41 f5       	brne	.+80     	; 0x17a0 <TIMER_init+0x10a>
    1750:	89 b7       	in	r24, 0x39	; 57
    1752:	84 60       	ori	r24, 0x04	; 4
    1754:	89 bf       	out	0x39, r24	; 57
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	08 95       	ret
    175a:	14 bc       	out	0x24, r1	; 36
    175c:	15 bc       	out	0x25, r1	; 37
    175e:	13 bc       	out	0x23, r1	; 35
    1760:	14 bc       	out	0x24, r1	; 36
    1762:	25 b5       	in	r18, 0x25	; 37
    1764:	2f 7b       	andi	r18, 0xBF	; 191
    1766:	25 bd       	out	0x25, r18	; 37
    1768:	25 b5       	in	r18, 0x25	; 37
    176a:	27 7f       	andi	r18, 0xF7	; 247
    176c:	25 bd       	out	0x25, r18	; 37
    176e:	25 b5       	in	r18, 0x25	; 37
    1770:	2f 7e       	andi	r18, 0xEF	; 239
    1772:	25 bd       	out	0x25, r18	; 37
    1774:	25 b5       	in	r18, 0x25	; 37
    1776:	2f 7d       	andi	r18, 0xDF	; 223
    1778:	25 bd       	out	0x25, r18	; 37
    177a:	fc 01       	movw	r30, r24
    177c:	84 81       	ldd	r24, Z+4	; 0x04
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	89 f4       	brne	.+34     	; 0x17a4 <TIMER_init+0x10e>
    1782:	89 b7       	in	r24, 0x39	; 57
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	89 bf       	out	0x39, r24	; 57
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	08 95       	ret
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	08 95       	ret
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	08 95       	ret
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	08 95       	ret
    1798:	83 e0       	ldi	r24, 0x03	; 3
    179a:	08 95       	ret
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 95       	ret
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	08 95       	ret
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	08 95       	ret

000017a8 <TIMER_start>:
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	09 f4       	brne	.+2      	; 0x17ae <TIMER_start+0x6>
    17ac:	3b c1       	rjmp	.+630    	; 0x1a24 <TIMER_start+0x27c>
    17ae:	dc 01       	movw	r26, r24
    17b0:	2c 91       	ld	r18, X
    17b2:	23 30       	cpi	r18, 0x03	; 3
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <TIMER_start+0x10>
    17b6:	38 c1       	rjmp	.+624    	; 0x1a28 <TIMER_start+0x280>
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	ec 91       	ld	r30, X
    17bc:	ea 30       	cpi	r30, 0x0A	; 10
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <TIMER_start+0x1a>
    17c0:	35 c1       	rjmp	.+618    	; 0x1a2c <TIMER_start+0x284>
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <TIMER_start+0x20>
    17c6:	68 c0       	rjmp	.+208    	; 0x1898 <TIMER_start+0xf0>
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <TIMER_start+0x2a>
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <TIMER_start+0x28>
    17ce:	c7 c0       	rjmp	.+398    	; 0x195e <TIMER_start+0x1b6>
    17d0:	2f c1       	rjmp	.+606    	; 0x1a30 <TIMER_start+0x288>
    17d2:	8e 2f       	mov	r24, r30
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	8a 30       	cpi	r24, 0x0A	; 10
    17d8:	91 05       	cpc	r25, r1
    17da:	08 f0       	brcs	.+2      	; 0x17de <TIMER_start+0x36>
    17dc:	2b c1       	rjmp	.+598    	; 0x1a34 <TIMER_start+0x28c>
    17de:	fc 01       	movw	r30, r24
    17e0:	e6 5d       	subi	r30, 0xD6	; 214
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__tablejump2__>
    17e8:	83 b7       	in	r24, 0x33	; 51
    17ea:	8e 7f       	andi	r24, 0xFE	; 254
    17ec:	83 bf       	out	0x33, r24	; 51
    17ee:	83 b7       	in	r24, 0x33	; 51
    17f0:	8d 7f       	andi	r24, 0xFD	; 253
    17f2:	83 bf       	out	0x33, r24	; 51
    17f4:	83 b7       	in	r24, 0x33	; 51
    17f6:	8b 7f       	andi	r24, 0xFB	; 251
    17f8:	83 bf       	out	0x33, r24	; 51
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	08 95       	ret
    17fe:	83 b7       	in	r24, 0x33	; 51
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	83 bf       	out	0x33, r24	; 51
    1804:	83 b7       	in	r24, 0x33	; 51
    1806:	8d 7f       	andi	r24, 0xFD	; 253
    1808:	83 bf       	out	0x33, r24	; 51
    180a:	83 b7       	in	r24, 0x33	; 51
    180c:	8b 7f       	andi	r24, 0xFB	; 251
    180e:	83 bf       	out	0x33, r24	; 51
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	08 95       	ret
    1814:	83 b7       	in	r24, 0x33	; 51
    1816:	8e 7f       	andi	r24, 0xFE	; 254
    1818:	83 bf       	out	0x33, r24	; 51
    181a:	83 b7       	in	r24, 0x33	; 51
    181c:	82 60       	ori	r24, 0x02	; 2
    181e:	83 bf       	out	0x33, r24	; 51
    1820:	83 b7       	in	r24, 0x33	; 51
    1822:	8b 7f       	andi	r24, 0xFB	; 251
    1824:	83 bf       	out	0x33, r24	; 51
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	08 95       	ret
    182a:	83 b7       	in	r24, 0x33	; 51
    182c:	81 60       	ori	r24, 0x01	; 1
    182e:	83 bf       	out	0x33, r24	; 51
    1830:	83 b7       	in	r24, 0x33	; 51
    1832:	82 60       	ori	r24, 0x02	; 2
    1834:	83 bf       	out	0x33, r24	; 51
    1836:	83 b7       	in	r24, 0x33	; 51
    1838:	8b 7f       	andi	r24, 0xFB	; 251
    183a:	83 bf       	out	0x33, r24	; 51
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	08 95       	ret
    1840:	83 b7       	in	r24, 0x33	; 51
    1842:	8e 7f       	andi	r24, 0xFE	; 254
    1844:	83 bf       	out	0x33, r24	; 51
    1846:	83 b7       	in	r24, 0x33	; 51
    1848:	8d 7f       	andi	r24, 0xFD	; 253
    184a:	83 bf       	out	0x33, r24	; 51
    184c:	83 b7       	in	r24, 0x33	; 51
    184e:	84 60       	ori	r24, 0x04	; 4
    1850:	83 bf       	out	0x33, r24	; 51
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	08 95       	ret
    1856:	83 b7       	in	r24, 0x33	; 51
    1858:	81 60       	ori	r24, 0x01	; 1
    185a:	83 bf       	out	0x33, r24	; 51
    185c:	83 b7       	in	r24, 0x33	; 51
    185e:	8d 7f       	andi	r24, 0xFD	; 253
    1860:	83 bf       	out	0x33, r24	; 51
    1862:	83 b7       	in	r24, 0x33	; 51
    1864:	84 60       	ori	r24, 0x04	; 4
    1866:	83 bf       	out	0x33, r24	; 51
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	08 95       	ret
    186c:	83 b7       	in	r24, 0x33	; 51
    186e:	8e 7f       	andi	r24, 0xFE	; 254
    1870:	83 bf       	out	0x33, r24	; 51
    1872:	83 b7       	in	r24, 0x33	; 51
    1874:	82 60       	ori	r24, 0x02	; 2
    1876:	83 bf       	out	0x33, r24	; 51
    1878:	83 b7       	in	r24, 0x33	; 51
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	83 bf       	out	0x33, r24	; 51
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	08 95       	ret
    1882:	83 b7       	in	r24, 0x33	; 51
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	83 bf       	out	0x33, r24	; 51
    1888:	83 b7       	in	r24, 0x33	; 51
    188a:	82 60       	ori	r24, 0x02	; 2
    188c:	83 bf       	out	0x33, r24	; 51
    188e:	83 b7       	in	r24, 0x33	; 51
    1890:	84 60       	ori	r24, 0x04	; 4
    1892:	83 bf       	out	0x33, r24	; 51
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	08 95       	ret
    1898:	8e 2f       	mov	r24, r30
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	8a 30       	cpi	r24, 0x0A	; 10
    189e:	91 05       	cpc	r25, r1
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <TIMER_start+0xfc>
    18a2:	ca c0       	rjmp	.+404    	; 0x1a38 <TIMER_start+0x290>
    18a4:	fc 01       	movw	r30, r24
    18a6:	ec 5c       	subi	r30, 0xCC	; 204
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__tablejump2__>
    18ae:	8e b5       	in	r24, 0x2e	; 46
    18b0:	8e 7f       	andi	r24, 0xFE	; 254
    18b2:	8e bd       	out	0x2e, r24	; 46
    18b4:	8e b5       	in	r24, 0x2e	; 46
    18b6:	8d 7f       	andi	r24, 0xFD	; 253
    18b8:	8e bd       	out	0x2e, r24	; 46
    18ba:	8e b5       	in	r24, 0x2e	; 46
    18bc:	8b 7f       	andi	r24, 0xFB	; 251
    18be:	8e bd       	out	0x2e, r24	; 46
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	08 95       	ret
    18c4:	8e b5       	in	r24, 0x2e	; 46
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	8e bd       	out	0x2e, r24	; 46
    18ca:	8e b5       	in	r24, 0x2e	; 46
    18cc:	8d 7f       	andi	r24, 0xFD	; 253
    18ce:	8e bd       	out	0x2e, r24	; 46
    18d0:	8e b5       	in	r24, 0x2e	; 46
    18d2:	8b 7f       	andi	r24, 0xFB	; 251
    18d4:	8e bd       	out	0x2e, r24	; 46
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	08 95       	ret
    18da:	8e b5       	in	r24, 0x2e	; 46
    18dc:	8e 7f       	andi	r24, 0xFE	; 254
    18de:	8e bd       	out	0x2e, r24	; 46
    18e0:	8e b5       	in	r24, 0x2e	; 46
    18e2:	82 60       	ori	r24, 0x02	; 2
    18e4:	8e bd       	out	0x2e, r24	; 46
    18e6:	8e b5       	in	r24, 0x2e	; 46
    18e8:	8b 7f       	andi	r24, 0xFB	; 251
    18ea:	8e bd       	out	0x2e, r24	; 46
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	08 95       	ret
    18f0:	8e b5       	in	r24, 0x2e	; 46
    18f2:	81 60       	ori	r24, 0x01	; 1
    18f4:	8e bd       	out	0x2e, r24	; 46
    18f6:	8e b5       	in	r24, 0x2e	; 46
    18f8:	82 60       	ori	r24, 0x02	; 2
    18fa:	8e bd       	out	0x2e, r24	; 46
    18fc:	8e b5       	in	r24, 0x2e	; 46
    18fe:	8b 7f       	andi	r24, 0xFB	; 251
    1900:	8e bd       	out	0x2e, r24	; 46
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	08 95       	ret
    1906:	8e b5       	in	r24, 0x2e	; 46
    1908:	8e 7f       	andi	r24, 0xFE	; 254
    190a:	8e bd       	out	0x2e, r24	; 46
    190c:	8e b5       	in	r24, 0x2e	; 46
    190e:	8d 7f       	andi	r24, 0xFD	; 253
    1910:	8e bd       	out	0x2e, r24	; 46
    1912:	8e b5       	in	r24, 0x2e	; 46
    1914:	84 60       	ori	r24, 0x04	; 4
    1916:	8e bd       	out	0x2e, r24	; 46
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	08 95       	ret
    191c:	8e b5       	in	r24, 0x2e	; 46
    191e:	81 60       	ori	r24, 0x01	; 1
    1920:	8e bd       	out	0x2e, r24	; 46
    1922:	8e b5       	in	r24, 0x2e	; 46
    1924:	8d 7f       	andi	r24, 0xFD	; 253
    1926:	8e bd       	out	0x2e, r24	; 46
    1928:	8e b5       	in	r24, 0x2e	; 46
    192a:	84 60       	ori	r24, 0x04	; 4
    192c:	8e bd       	out	0x2e, r24	; 46
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	08 95       	ret
    1932:	8e b5       	in	r24, 0x2e	; 46
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	8e bd       	out	0x2e, r24	; 46
    1938:	8e b5       	in	r24, 0x2e	; 46
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	8e bd       	out	0x2e, r24	; 46
    193e:	8e b5       	in	r24, 0x2e	; 46
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	8e bd       	out	0x2e, r24	; 46
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	08 95       	ret
    1948:	8e b5       	in	r24, 0x2e	; 46
    194a:	81 60       	ori	r24, 0x01	; 1
    194c:	8e bd       	out	0x2e, r24	; 46
    194e:	8e b5       	in	r24, 0x2e	; 46
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	8e bd       	out	0x2e, r24	; 46
    1954:	8e b5       	in	r24, 0x2e	; 46
    1956:	84 60       	ori	r24, 0x04	; 4
    1958:	8e bd       	out	0x2e, r24	; 46
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	08 95       	ret
    195e:	8e 2f       	mov	r24, r30
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	91 05       	cpc	r25, r1
    1966:	08 f0       	brcs	.+2      	; 0x196a <TIMER_start+0x1c2>
    1968:	69 c0       	rjmp	.+210    	; 0x1a3c <TIMER_start+0x294>
    196a:	fc 01       	movw	r30, r24
    196c:	e2 5c       	subi	r30, 0xC2	; 194
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__tablejump2__>
    1974:	85 b5       	in	r24, 0x25	; 37
    1976:	8b 7f       	andi	r24, 0xFB	; 251
    1978:	85 bd       	out	0x25, r24	; 37
    197a:	85 b5       	in	r24, 0x25	; 37
    197c:	8d 7f       	andi	r24, 0xFD	; 253
    197e:	85 bd       	out	0x25, r24	; 37
    1980:	85 b5       	in	r24, 0x25	; 37
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	85 bd       	out	0x25, r24	; 37
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	08 95       	ret
    198a:	85 b5       	in	r24, 0x25	; 37
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	85 bd       	out	0x25, r24	; 37
    1990:	85 b5       	in	r24, 0x25	; 37
    1992:	8d 7f       	andi	r24, 0xFD	; 253
    1994:	85 bd       	out	0x25, r24	; 37
    1996:	85 b5       	in	r24, 0x25	; 37
    1998:	8e 7f       	andi	r24, 0xFE	; 254
    199a:	85 bd       	out	0x25, r24	; 37
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	08 95       	ret
    19a0:	85 b5       	in	r24, 0x25	; 37
    19a2:	8b 7f       	andi	r24, 0xFB	; 251
    19a4:	85 bd       	out	0x25, r24	; 37
    19a6:	85 b5       	in	r24, 0x25	; 37
    19a8:	82 60       	ori	r24, 0x02	; 2
    19aa:	85 bd       	out	0x25, r24	; 37
    19ac:	85 b5       	in	r24, 0x25	; 37
    19ae:	8e 7f       	andi	r24, 0xFE	; 254
    19b0:	85 bd       	out	0x25, r24	; 37
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	08 95       	ret
    19b6:	85 b5       	in	r24, 0x25	; 37
    19b8:	84 60       	ori	r24, 0x04	; 4
    19ba:	85 bd       	out	0x25, r24	; 37
    19bc:	85 b5       	in	r24, 0x25	; 37
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	85 bd       	out	0x25, r24	; 37
    19c2:	85 b5       	in	r24, 0x25	; 37
    19c4:	8e 7f       	andi	r24, 0xFE	; 254
    19c6:	85 bd       	out	0x25, r24	; 37
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	08 95       	ret
    19cc:	85 b5       	in	r24, 0x25	; 37
    19ce:	8b 7f       	andi	r24, 0xFB	; 251
    19d0:	85 bd       	out	0x25, r24	; 37
    19d2:	85 b5       	in	r24, 0x25	; 37
    19d4:	8d 7f       	andi	r24, 0xFD	; 253
    19d6:	85 bd       	out	0x25, r24	; 37
    19d8:	85 b5       	in	r24, 0x25	; 37
    19da:	81 60       	ori	r24, 0x01	; 1
    19dc:	85 bd       	out	0x25, r24	; 37
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	08 95       	ret
    19e2:	85 b5       	in	r24, 0x25	; 37
    19e4:	84 60       	ori	r24, 0x04	; 4
    19e6:	85 bd       	out	0x25, r24	; 37
    19e8:	85 b5       	in	r24, 0x25	; 37
    19ea:	8d 7f       	andi	r24, 0xFD	; 253
    19ec:	85 bd       	out	0x25, r24	; 37
    19ee:	85 b5       	in	r24, 0x25	; 37
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	85 bd       	out	0x25, r24	; 37
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	08 95       	ret
    19f8:	85 b5       	in	r24, 0x25	; 37
    19fa:	8b 7f       	andi	r24, 0xFB	; 251
    19fc:	85 bd       	out	0x25, r24	; 37
    19fe:	85 b5       	in	r24, 0x25	; 37
    1a00:	82 60       	ori	r24, 0x02	; 2
    1a02:	85 bd       	out	0x25, r24	; 37
    1a04:	85 b5       	in	r24, 0x25	; 37
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	85 bd       	out	0x25, r24	; 37
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	08 95       	ret
    1a0e:	85 b5       	in	r24, 0x25	; 37
    1a10:	84 60       	ori	r24, 0x04	; 4
    1a12:	85 bd       	out	0x25, r24	; 37
    1a14:	85 b5       	in	r24, 0x25	; 37
    1a16:	82 60       	ori	r24, 0x02	; 2
    1a18:	85 bd       	out	0x25, r24	; 37
    1a1a:	85 b5       	in	r24, 0x25	; 37
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	85 bd       	out	0x25, r24	; 37
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	08 95       	ret
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	08 95       	ret
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	08 95       	ret
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	08 95       	ret
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	08 95       	ret
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	08 95       	ret
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	08 95       	ret
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	08 95       	ret

00001a40 <TIMER_stop>:
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	38 f5       	brcc	.+78     	; 0x1a92 <TIMER_stop+0x52>
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <TIMER_stop+0x26>
    1a48:	18 f0       	brcs	.+6      	; 0x1a50 <TIMER_stop+0x10>
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	b9 f0       	breq	.+46     	; 0x1a7c <TIMER_stop+0x3c>
    1a4e:	23 c0       	rjmp	.+70     	; 0x1a96 <TIMER_stop+0x56>
    1a50:	83 b7       	in	r24, 0x33	; 51
    1a52:	8e 7f       	andi	r24, 0xFE	; 254
    1a54:	83 bf       	out	0x33, r24	; 51
    1a56:	83 b7       	in	r24, 0x33	; 51
    1a58:	8d 7f       	andi	r24, 0xFD	; 253
    1a5a:	83 bf       	out	0x33, r24	; 51
    1a5c:	83 b7       	in	r24, 0x33	; 51
    1a5e:	8b 7f       	andi	r24, 0xFB	; 251
    1a60:	83 bf       	out	0x33, r24	; 51
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	08 95       	ret
    1a66:	8e b5       	in	r24, 0x2e	; 46
    1a68:	8e 7f       	andi	r24, 0xFE	; 254
    1a6a:	8e bd       	out	0x2e, r24	; 46
    1a6c:	8e b5       	in	r24, 0x2e	; 46
    1a6e:	8d 7f       	andi	r24, 0xFD	; 253
    1a70:	8e bd       	out	0x2e, r24	; 46
    1a72:	8e b5       	in	r24, 0x2e	; 46
    1a74:	8b 7f       	andi	r24, 0xFB	; 251
    1a76:	8e bd       	out	0x2e, r24	; 46
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	08 95       	ret
    1a7c:	85 b5       	in	r24, 0x25	; 37
    1a7e:	8b 7f       	andi	r24, 0xFB	; 251
    1a80:	85 bd       	out	0x25, r24	; 37
    1a82:	85 b5       	in	r24, 0x25	; 37
    1a84:	8d 7f       	andi	r24, 0xFD	; 253
    1a86:	85 bd       	out	0x25, r24	; 37
    1a88:	85 b5       	in	r24, 0x25	; 37
    1a8a:	8e 7f       	andi	r24, 0xFE	; 254
    1a8c:	85 bd       	out	0x25, r24	; 37
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	08 95       	ret
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	08 95       	ret
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	08 95       	ret

00001a9a <TIMER_reset>:
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	f1 f0       	breq	.+60     	; 0x1ada <TIMER_reset+0x40>
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 81       	ld	r18, Z
    1aa2:	23 30       	cpi	r18, 0x03	; 3
    1aa4:	e0 f4       	brcc	.+56     	; 0x1ade <TIMER_reset+0x44>
    1aa6:	31 81       	ldd	r19, Z+1	; 0x01
    1aa8:	3a 30       	cpi	r19, 0x0A	; 10
    1aaa:	d8 f4       	brcc	.+54     	; 0x1ae2 <TIMER_reset+0x48>
    1aac:	21 30       	cpi	r18, 0x01	; 1
    1aae:	49 f0       	breq	.+18     	; 0x1ac2 <TIMER_reset+0x28>
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <TIMER_reset+0x1e>
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	69 f0       	breq	.+26     	; 0x1ad0 <TIMER_reset+0x36>
    1ab6:	17 c0       	rjmp	.+46     	; 0x1ae6 <TIMER_reset+0x4c>
    1ab8:	fc 01       	movw	r30, r24
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	82 bf       	out	0x32, r24	; 50
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	08 95       	ret
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	9d bd       	out	0x2d, r25	; 45
    1aca:	8c bd       	out	0x2c, r24	; 44
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	08 95       	ret
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	84 bd       	out	0x24, r24	; 36
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	08 95       	ret
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	08 95       	ret
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	08 95       	ret
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	08 95       	ret
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	08 95       	ret

00001aea <TIMER_setCallBack>:
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	a9 f0       	breq	.+42     	; 0x1b18 <TIMER_setCallBack+0x2e>
    1aee:	63 30       	cpi	r22, 0x03	; 3
    1af0:	a8 f4       	brcc	.+42     	; 0x1b1c <TIMER_setCallBack+0x32>
    1af2:	61 30       	cpi	r22, 0x01	; 1
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <TIMER_setCallBack+0x22>
    1af6:	20 f0       	brcs	.+8      	; 0x1b00 <TIMER_setCallBack+0x16>
    1af8:	62 30       	cpi	r22, 0x02	; 2
    1afa:	91 f0       	breq	.+36     	; 0x1b20 <TIMER_setCallBack+0x36>
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	08 95       	ret
    1b00:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <sg_Timer0_callBackPtr+0x1>
    1b04:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <sg_Timer0_callBackPtr>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	08 95       	ret
    1b0c:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <sg_Timer1_callBackPtr+0x1>
    1b10:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <sg_Timer1_callBackPtr>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	08 95       	ret
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	08 95       	ret
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	08 95       	ret
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	08 95       	ret

00001b24 <enuTimer2_init>:
    1b24:	84 30       	cpi	r24, 0x04	; 4
    1b26:	48 f5       	brcc	.+82     	; 0x1b7a <enuTimer2_init+0x56>
    1b28:	14 bc       	out	0x24, r1	; 36
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	71 f0       	breq	.+28     	; 0x1b4a <enuTimer2_init+0x26>
    1b2e:	28 f0       	brcs	.+10     	; 0x1b3a <enuTimer2_init+0x16>
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	99 f0       	breq	.+38     	; 0x1b5a <enuTimer2_init+0x36>
    1b34:	83 30       	cpi	r24, 0x03	; 3
    1b36:	c9 f0       	breq	.+50     	; 0x1b6a <enuTimer2_init+0x46>
    1b38:	22 c0       	rjmp	.+68     	; 0x1b7e <enuTimer2_init+0x5a>
    1b3a:	85 b5       	in	r24, 0x25	; 37
    1b3c:	87 7f       	andi	r24, 0xF7	; 247
    1b3e:	85 bd       	out	0x25, r24	; 37
    1b40:	85 b5       	in	r24, 0x25	; 37
    1b42:	8f 7b       	andi	r24, 0xBF	; 191
    1b44:	85 bd       	out	0x25, r24	; 37
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	08 95       	ret
    1b4a:	85 b5       	in	r24, 0x25	; 37
    1b4c:	87 7f       	andi	r24, 0xF7	; 247
    1b4e:	85 bd       	out	0x25, r24	; 37
    1b50:	85 b5       	in	r24, 0x25	; 37
    1b52:	80 64       	ori	r24, 0x40	; 64
    1b54:	85 bd       	out	0x25, r24	; 37
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret
    1b5a:	85 b5       	in	r24, 0x25	; 37
    1b5c:	88 60       	ori	r24, 0x08	; 8
    1b5e:	85 bd       	out	0x25, r24	; 37
    1b60:	85 b5       	in	r24, 0x25	; 37
    1b62:	8f 7b       	andi	r24, 0xBF	; 191
    1b64:	85 bd       	out	0x25, r24	; 37
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	08 95       	ret
    1b6a:	85 b5       	in	r24, 0x25	; 37
    1b6c:	88 60       	ori	r24, 0x08	; 8
    1b6e:	85 bd       	out	0x25, r24	; 37
    1b70:	85 b5       	in	r24, 0x25	; 37
    1b72:	80 64       	ori	r24, 0x40	; 64
    1b74:	85 bd       	out	0x25, r24	; 37
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	08 95       	ret
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	08 95       	ret
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	08 95       	ret

00001b82 <u8Timer2_setPrescallar>:
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	70 f4       	brcc	.+28     	; 0x1ba2 <u8Timer2_setPrescallar+0x20>
    1b86:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <global_prescaller>
    1b8a:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <global_timerStatus>
    1b8e:	91 30       	cpi	r25, 0x01	; 1
    1b90:	51 f4       	brne	.+20     	; 0x1ba6 <u8Timer2_setPrescallar+0x24>
    1b92:	95 b5       	in	r25, 0x25	; 37
    1b94:	98 7f       	andi	r25, 0xF8	; 248
    1b96:	89 2b       	or	r24, r25
    1b98:	95 b5       	in	r25, 0x25	; 37
    1b9a:	89 2b       	or	r24, r25
    1b9c:	85 bd       	out	0x25, r24	; 37
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	08 95       	ret
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	08 95       	ret
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	08 95       	ret

00001baa <vidTimer2_OvfIrqEnable>:
    1baa:	88 b7       	in	r24, 0x38	; 56
    1bac:	80 64       	ori	r24, 0x40	; 64
    1bae:	88 bf       	out	0x38, r24	; 56
    1bb0:	89 b7       	in	r24, 0x39	; 57
    1bb2:	80 64       	ori	r24, 0x40	; 64
    1bb4:	89 bf       	out	0x39, r24	; 57
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	08 95       	ret

00001bba <vidTimer2_OvfIrqDisable>:
    1bba:	89 b7       	in	r24, 0x39	; 57
    1bbc:	8f 7b       	andi	r24, 0xBF	; 191
    1bbe:	89 bf       	out	0x39, r24	; 57
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	08 95       	ret

00001bc4 <vidTimer2_start>:
    1bc4:	95 b5       	in	r25, 0x25	; 37
    1bc6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <global_prescaller>
    1bca:	89 2b       	or	r24, r25
    1bcc:	85 bd       	out	0x25, r24	; 37
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <global_timerStatus>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	08 95       	ret

00001bd8 <vidTimer2_stop>:
    1bd8:	85 b5       	in	r24, 0x25	; 37
    1bda:	88 7f       	andi	r24, 0xF8	; 248
    1bdc:	85 bd       	out	0x25, r24	; 37
    1bde:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <global_timerStatus>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	08 95       	ret

00001be6 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	21 f0       	breq	.+8      	; 0x1bf2 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1bea:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <globalCallFunc+0x1>
    1bee:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <globalCallFunc>
    1bf2:	08 95       	ret

00001bf4 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    1bf4:	14 bc       	out	0x24, r1	; 36
    1bf6:	08 95       	ret

00001bf8 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    1bf8:	84 b5       	in	r24, 0x24	; 36
}
    1bfa:	08 95       	ret

00001bfc <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    1bfc:	8f b7       	in	r24, 0x3f	; 63
    1bfe:	80 68       	ori	r24, 0x80	; 128
    1c00:	8f bf       	out	0x3f, r24	; 63
    1c02:	08 95       	ret

00001c04 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    1c04:	1f 92       	push	r1
    1c06:	0f 92       	push	r0
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	0f 92       	push	r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	2f 93       	push	r18
    1c10:	3f 93       	push	r19
    1c12:	4f 93       	push	r20
    1c14:	5f 93       	push	r21
    1c16:	6f 93       	push	r22
    1c18:	7f 93       	push	r23
    1c1a:	8f 93       	push	r24
    1c1c:	9f 93       	push	r25
    1c1e:	af 93       	push	r26
    1c20:	bf 93       	push	r27
    1c22:	ef 93       	push	r30
    1c24:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    1c26:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <counter.1817>
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <counter.1817>
	if(counter == global_ovf)
    1c30:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <global_ovf>
    1c34:	89 13       	cpse	r24, r25
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1c38:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <globalCallFunc>
    1c3c:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <globalCallFunc+0x1>
    1c40:	30 97       	sbiw	r30, 0x00	; 0
    1c42:	19 f0       	breq	.+6      	; 0x1c4a <__vector_5+0x46>
		{
			counter = 0;
    1c44:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <counter.1817>

			globalCallFunc();
    1c48:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	bf 91       	pop	r27
    1c50:	af 91       	pop	r26
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	7f 91       	pop	r23
    1c58:	6f 91       	pop	r22
    1c5a:	5f 91       	pop	r21
    1c5c:	4f 91       	pop	r20
    1c5e:	3f 91       	pop	r19
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	0f 90       	pop	r0
    1c68:	1f 90       	pop	r1
    1c6a:	18 95       	reti

00001c6c <__cmpsf2>:
    1c6c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__fp_cmp>
    1c70:	08 f4       	brcc	.+2      	; 0x1c74 <__cmpsf2+0x8>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	08 95       	ret

00001c76 <__divsf3>:
    1c76:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__divsf3x>
    1c7a:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__fp_round>
    1c7e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fp_pscB>
    1c82:	58 f0       	brcs	.+22     	; 0x1c9a <__divsf3+0x24>
    1c84:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fp_pscA>
    1c88:	40 f0       	brcs	.+16     	; 0x1c9a <__divsf3+0x24>
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <__divsf3+0x20>
    1c8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c8e:	29 f0       	breq	.+10     	; 0x1c9a <__divsf3+0x24>
    1c90:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_inf>
    1c94:	51 11       	cpse	r21, r1
    1c96:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__fp_szero>
    1c9a:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__fp_nan>

00001c9e <__divsf3x>:
    1c9e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__fp_split3>
    1ca2:	68 f3       	brcs	.-38     	; 0x1c7e <__divsf3+0x8>

00001ca4 <__divsf3_pse>:
    1ca4:	99 23       	and	r25, r25
    1ca6:	b1 f3       	breq	.-20     	; 0x1c94 <__divsf3+0x1e>
    1ca8:	55 23       	and	r21, r21
    1caa:	91 f3       	breq	.-28     	; 0x1c90 <__divsf3+0x1a>
    1cac:	95 1b       	sub	r25, r21
    1cae:	55 0b       	sbc	r21, r21
    1cb0:	bb 27       	eor	r27, r27
    1cb2:	aa 27       	eor	r26, r26
    1cb4:	62 17       	cp	r22, r18
    1cb6:	73 07       	cpc	r23, r19
    1cb8:	84 07       	cpc	r24, r20
    1cba:	38 f0       	brcs	.+14     	; 0x1cca <__divsf3_pse+0x26>
    1cbc:	9f 5f       	subi	r25, 0xFF	; 255
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	44 1f       	adc	r20, r20
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	a9 f3       	breq	.-22     	; 0x1cb4 <__divsf3_pse+0x10>
    1cca:	35 d0       	rcall	.+106    	; 0x1d36 <__divsf3_pse+0x92>
    1ccc:	0e 2e       	mov	r0, r30
    1cce:	3a f0       	brmi	.+14     	; 0x1cde <__divsf3_pse+0x3a>
    1cd0:	e0 e8       	ldi	r30, 0x80	; 128
    1cd2:	32 d0       	rcall	.+100    	; 0x1d38 <__divsf3_pse+0x94>
    1cd4:	91 50       	subi	r25, 0x01	; 1
    1cd6:	50 40       	sbci	r21, 0x00	; 0
    1cd8:	e6 95       	lsr	r30
    1cda:	00 1c       	adc	r0, r0
    1cdc:	ca f7       	brpl	.-14     	; 0x1cd0 <__divsf3_pse+0x2c>
    1cde:	2b d0       	rcall	.+86     	; 0x1d36 <__divsf3_pse+0x92>
    1ce0:	fe 2f       	mov	r31, r30
    1ce2:	29 d0       	rcall	.+82     	; 0x1d36 <__divsf3_pse+0x92>
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	88 1f       	adc	r24, r24
    1cea:	bb 1f       	adc	r27, r27
    1cec:	26 17       	cp	r18, r22
    1cee:	37 07       	cpc	r19, r23
    1cf0:	48 07       	cpc	r20, r24
    1cf2:	ab 07       	cpc	r26, r27
    1cf4:	b0 e8       	ldi	r27, 0x80	; 128
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <__divsf3_pse+0x56>
    1cf8:	bb 0b       	sbc	r27, r27
    1cfa:	80 2d       	mov	r24, r0
    1cfc:	bf 01       	movw	r22, r30
    1cfe:	ff 27       	eor	r31, r31
    1d00:	93 58       	subi	r25, 0x83	; 131
    1d02:	5f 4f       	sbci	r21, 0xFF	; 255
    1d04:	3a f0       	brmi	.+14     	; 0x1d14 <__divsf3_pse+0x70>
    1d06:	9e 3f       	cpi	r25, 0xFE	; 254
    1d08:	51 05       	cpc	r21, r1
    1d0a:	78 f0       	brcs	.+30     	; 0x1d2a <__divsf3_pse+0x86>
    1d0c:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_inf>
    1d10:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__fp_szero>
    1d14:	5f 3f       	cpi	r21, 0xFF	; 255
    1d16:	e4 f3       	brlt	.-8      	; 0x1d10 <__divsf3_pse+0x6c>
    1d18:	98 3e       	cpi	r25, 0xE8	; 232
    1d1a:	d4 f3       	brlt	.-12     	; 0x1d10 <__divsf3_pse+0x6c>
    1d1c:	86 95       	lsr	r24
    1d1e:	77 95       	ror	r23
    1d20:	67 95       	ror	r22
    1d22:	b7 95       	ror	r27
    1d24:	f7 95       	ror	r31
    1d26:	9f 5f       	subi	r25, 0xFF	; 255
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <__divsf3_pse+0x78>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	91 1d       	adc	r25, r1
    1d2e:	96 95       	lsr	r25
    1d30:	87 95       	ror	r24
    1d32:	97 f9       	bld	r25, 7
    1d34:	08 95       	ret
    1d36:	e1 e0       	ldi	r30, 0x01	; 1
    1d38:	66 0f       	add	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	bb 1f       	adc	r27, r27
    1d40:	62 17       	cp	r22, r18
    1d42:	73 07       	cpc	r23, r19
    1d44:	84 07       	cpc	r24, r20
    1d46:	ba 07       	cpc	r27, r26
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__divsf3_pse+0xae>
    1d4a:	62 1b       	sub	r22, r18
    1d4c:	73 0b       	sbc	r23, r19
    1d4e:	84 0b       	sbc	r24, r20
    1d50:	ba 0b       	sbc	r27, r26
    1d52:	ee 1f       	adc	r30, r30
    1d54:	88 f7       	brcc	.-30     	; 0x1d38 <__divsf3_pse+0x94>
    1d56:	e0 95       	com	r30
    1d58:	08 95       	ret

00001d5a <__fixunssfsi>:
    1d5a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fp_splitA>
    1d5e:	88 f0       	brcs	.+34     	; 0x1d82 <__fixunssfsi+0x28>
    1d60:	9f 57       	subi	r25, 0x7F	; 127
    1d62:	98 f0       	brcs	.+38     	; 0x1d8a <__fixunssfsi+0x30>
    1d64:	b9 2f       	mov	r27, r25
    1d66:	99 27       	eor	r25, r25
    1d68:	b7 51       	subi	r27, 0x17	; 23
    1d6a:	b0 f0       	brcs	.+44     	; 0x1d98 <__fixunssfsi+0x3e>
    1d6c:	e1 f0       	breq	.+56     	; 0x1da6 <__fixunssfsi+0x4c>
    1d6e:	66 0f       	add	r22, r22
    1d70:	77 1f       	adc	r23, r23
    1d72:	88 1f       	adc	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	1a f0       	brmi	.+6      	; 0x1d7e <__fixunssfsi+0x24>
    1d78:	ba 95       	dec	r27
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <__fixunssfsi+0x14>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <__fixunssfsi+0x4c>
    1d7e:	b1 30       	cpi	r27, 0x01	; 1
    1d80:	91 f0       	breq	.+36     	; 0x1da6 <__fixunssfsi+0x4c>
    1d82:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__fp_zero>
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	08 95       	ret
    1d8a:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__fp_zero>
    1d8e:	67 2f       	mov	r22, r23
    1d90:	78 2f       	mov	r23, r24
    1d92:	88 27       	eor	r24, r24
    1d94:	b8 5f       	subi	r27, 0xF8	; 248
    1d96:	39 f0       	breq	.+14     	; 0x1da6 <__fixunssfsi+0x4c>
    1d98:	b9 3f       	cpi	r27, 0xF9	; 249
    1d9a:	cc f3       	brlt	.-14     	; 0x1d8e <__fixunssfsi+0x34>
    1d9c:	86 95       	lsr	r24
    1d9e:	77 95       	ror	r23
    1da0:	67 95       	ror	r22
    1da2:	b3 95       	inc	r27
    1da4:	d9 f7       	brne	.-10     	; 0x1d9c <__fixunssfsi+0x42>
    1da6:	3e f4       	brtc	.+14     	; 0x1db6 <__fixunssfsi+0x5c>
    1da8:	90 95       	com	r25
    1daa:	80 95       	com	r24
    1dac:	70 95       	com	r23
    1dae:	61 95       	neg	r22
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	8f 4f       	sbci	r24, 0xFF	; 255
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	08 95       	ret

00001db8 <__floatunsisf>:
    1db8:	e8 94       	clt
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <__floatsisf+0x12>

00001dbc <__floatsisf>:
    1dbc:	97 fb       	bst	r25, 7
    1dbe:	3e f4       	brtc	.+14     	; 0x1dce <__floatsisf+0x12>
    1dc0:	90 95       	com	r25
    1dc2:	80 95       	com	r24
    1dc4:	70 95       	com	r23
    1dc6:	61 95       	neg	r22
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dca:	8f 4f       	sbci	r24, 0xFF	; 255
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	99 23       	and	r25, r25
    1dd0:	a9 f0       	breq	.+42     	; 0x1dfc <__floatsisf+0x40>
    1dd2:	f9 2f       	mov	r31, r25
    1dd4:	96 e9       	ldi	r25, 0x96	; 150
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	93 95       	inc	r25
    1dda:	f6 95       	lsr	r31
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	b7 95       	ror	r27
    1de4:	f1 11       	cpse	r31, r1
    1de6:	f8 cf       	rjmp	.-16     	; 0x1dd8 <__floatsisf+0x1c>
    1de8:	fa f4       	brpl	.+62     	; 0x1e28 <__floatsisf+0x6c>
    1dea:	bb 0f       	add	r27, r27
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <__floatsisf+0x36>
    1dee:	60 ff       	sbrs	r22, 0
    1df0:	1b c0       	rjmp	.+54     	; 0x1e28 <__floatsisf+0x6c>
    1df2:	6f 5f       	subi	r22, 0xFF	; 255
    1df4:	7f 4f       	sbci	r23, 0xFF	; 255
    1df6:	8f 4f       	sbci	r24, 0xFF	; 255
    1df8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfa:	16 c0       	rjmp	.+44     	; 0x1e28 <__floatsisf+0x6c>
    1dfc:	88 23       	and	r24, r24
    1dfe:	11 f0       	breq	.+4      	; 0x1e04 <__floatsisf+0x48>
    1e00:	96 e9       	ldi	r25, 0x96	; 150
    1e02:	11 c0       	rjmp	.+34     	; 0x1e26 <__floatsisf+0x6a>
    1e04:	77 23       	and	r23, r23
    1e06:	21 f0       	breq	.+8      	; 0x1e10 <__floatsisf+0x54>
    1e08:	9e e8       	ldi	r25, 0x8E	; 142
    1e0a:	87 2f       	mov	r24, r23
    1e0c:	76 2f       	mov	r23, r22
    1e0e:	05 c0       	rjmp	.+10     	; 0x1e1a <__floatsisf+0x5e>
    1e10:	66 23       	and	r22, r22
    1e12:	71 f0       	breq	.+28     	; 0x1e30 <__floatsisf+0x74>
    1e14:	96 e8       	ldi	r25, 0x86	; 134
    1e16:	86 2f       	mov	r24, r22
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	2a f0       	brmi	.+10     	; 0x1e28 <__floatsisf+0x6c>
    1e1e:	9a 95       	dec	r25
    1e20:	66 0f       	add	r22, r22
    1e22:	77 1f       	adc	r23, r23
    1e24:	88 1f       	adc	r24, r24
    1e26:	da f7       	brpl	.-10     	; 0x1e1e <__floatsisf+0x62>
    1e28:	88 0f       	add	r24, r24
    1e2a:	96 95       	lsr	r25
    1e2c:	87 95       	ror	r24
    1e2e:	97 f9       	bld	r25, 7
    1e30:	08 95       	ret

00001e32 <__fp_cmp>:
    1e32:	99 0f       	add	r25, r25
    1e34:	00 08       	sbc	r0, r0
    1e36:	55 0f       	add	r21, r21
    1e38:	aa 0b       	sbc	r26, r26
    1e3a:	e0 e8       	ldi	r30, 0x80	; 128
    1e3c:	fe ef       	ldi	r31, 0xFE	; 254
    1e3e:	16 16       	cp	r1, r22
    1e40:	17 06       	cpc	r1, r23
    1e42:	e8 07       	cpc	r30, r24
    1e44:	f9 07       	cpc	r31, r25
    1e46:	c0 f0       	brcs	.+48     	; 0x1e78 <__fp_cmp+0x46>
    1e48:	12 16       	cp	r1, r18
    1e4a:	13 06       	cpc	r1, r19
    1e4c:	e4 07       	cpc	r30, r20
    1e4e:	f5 07       	cpc	r31, r21
    1e50:	98 f0       	brcs	.+38     	; 0x1e78 <__fp_cmp+0x46>
    1e52:	62 1b       	sub	r22, r18
    1e54:	73 0b       	sbc	r23, r19
    1e56:	84 0b       	sbc	r24, r20
    1e58:	95 0b       	sbc	r25, r21
    1e5a:	39 f4       	brne	.+14     	; 0x1e6a <__fp_cmp+0x38>
    1e5c:	0a 26       	eor	r0, r26
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <__fp_cmp+0x46>
    1e60:	23 2b       	or	r18, r19
    1e62:	24 2b       	or	r18, r20
    1e64:	25 2b       	or	r18, r21
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <__fp_cmp+0x3e>
    1e68:	08 95       	ret
    1e6a:	0a 26       	eor	r0, r26
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <__fp_cmp+0x3e>
    1e6e:	a1 40       	sbci	r26, 0x01	; 1
    1e70:	a6 95       	lsr	r26
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	81 1d       	adc	r24, r1
    1e76:	81 1d       	adc	r24, r1
    1e78:	08 95       	ret

00001e7a <__fp_inf>:
    1e7a:	97 f9       	bld	r25, 7
    1e7c:	9f 67       	ori	r25, 0x7F	; 127
    1e7e:	80 e8       	ldi	r24, 0x80	; 128
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	08 95       	ret

00001e86 <__fp_nan>:
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	80 ec       	ldi	r24, 0xC0	; 192
    1e8a:	08 95       	ret

00001e8c <__fp_pscA>:
    1e8c:	00 24       	eor	r0, r0
    1e8e:	0a 94       	dec	r0
    1e90:	16 16       	cp	r1, r22
    1e92:	17 06       	cpc	r1, r23
    1e94:	18 06       	cpc	r1, r24
    1e96:	09 06       	cpc	r0, r25
    1e98:	08 95       	ret

00001e9a <__fp_pscB>:
    1e9a:	00 24       	eor	r0, r0
    1e9c:	0a 94       	dec	r0
    1e9e:	12 16       	cp	r1, r18
    1ea0:	13 06       	cpc	r1, r19
    1ea2:	14 06       	cpc	r1, r20
    1ea4:	05 06       	cpc	r0, r21
    1ea6:	08 95       	ret

00001ea8 <__fp_round>:
    1ea8:	09 2e       	mov	r0, r25
    1eaa:	03 94       	inc	r0
    1eac:	00 0c       	add	r0, r0
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <__fp_round+0xc>
    1eb0:	88 23       	and	r24, r24
    1eb2:	52 f0       	brmi	.+20     	; 0x1ec8 <__fp_round+0x20>
    1eb4:	bb 0f       	add	r27, r27
    1eb6:	40 f4       	brcc	.+16     	; 0x1ec8 <__fp_round+0x20>
    1eb8:	bf 2b       	or	r27, r31
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <__fp_round+0x18>
    1ebc:	60 ff       	sbrs	r22, 0
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <__fp_round+0x20>
    1ec0:	6f 5f       	subi	r22, 0xFF	; 255
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	08 95       	ret

00001eca <__fp_split3>:
    1eca:	57 fd       	sbrc	r21, 7
    1ecc:	90 58       	subi	r25, 0x80	; 128
    1ece:	44 0f       	add	r20, r20
    1ed0:	55 1f       	adc	r21, r21
    1ed2:	59 f0       	breq	.+22     	; 0x1eea <__fp_splitA+0x10>
    1ed4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed6:	71 f0       	breq	.+28     	; 0x1ef4 <__fp_splitA+0x1a>
    1ed8:	47 95       	ror	r20

00001eda <__fp_splitA>:
    1eda:	88 0f       	add	r24, r24
    1edc:	97 fb       	bst	r25, 7
    1ede:	99 1f       	adc	r25, r25
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <__fp_splitA+0x20>
    1ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee4:	79 f0       	breq	.+30     	; 0x1f04 <__fp_splitA+0x2a>
    1ee6:	87 95       	ror	r24
    1ee8:	08 95       	ret
    1eea:	12 16       	cp	r1, r18
    1eec:	13 06       	cpc	r1, r19
    1eee:	14 06       	cpc	r1, r20
    1ef0:	55 1f       	adc	r21, r21
    1ef2:	f2 cf       	rjmp	.-28     	; 0x1ed8 <__fp_split3+0xe>
    1ef4:	46 95       	lsr	r20
    1ef6:	f1 df       	rcall	.-30     	; 0x1eda <__fp_splitA>
    1ef8:	08 c0       	rjmp	.+16     	; 0x1f0a <__fp_splitA+0x30>
    1efa:	16 16       	cp	r1, r22
    1efc:	17 06       	cpc	r1, r23
    1efe:	18 06       	cpc	r1, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	f1 cf       	rjmp	.-30     	; 0x1ee6 <__fp_splitA+0xc>
    1f04:	86 95       	lsr	r24
    1f06:	71 05       	cpc	r23, r1
    1f08:	61 05       	cpc	r22, r1
    1f0a:	08 94       	sec
    1f0c:	08 95       	ret

00001f0e <__fp_zero>:
    1f0e:	e8 94       	clt

00001f10 <__fp_szero>:
    1f10:	bb 27       	eor	r27, r27
    1f12:	66 27       	eor	r22, r22
    1f14:	77 27       	eor	r23, r23
    1f16:	cb 01       	movw	r24, r22
    1f18:	97 f9       	bld	r25, 7
    1f1a:	08 95       	ret

00001f1c <__gesf2>:
    1f1c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__fp_cmp>
    1f20:	08 f4       	brcc	.+2      	; 0x1f24 <__gesf2+0x8>
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	08 95       	ret

00001f26 <__divmodhi4>:
    1f26:	97 fb       	bst	r25, 7
    1f28:	07 2e       	mov	r0, r23
    1f2a:	16 f4       	brtc	.+4      	; 0x1f30 <__divmodhi4+0xa>
    1f2c:	00 94       	com	r0
    1f2e:	07 d0       	rcall	.+14     	; 0x1f3e <__divmodhi4_neg1>
    1f30:	77 fd       	sbrc	r23, 7
    1f32:	09 d0       	rcall	.+18     	; 0x1f46 <__divmodhi4_neg2>
    1f34:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__udivmodhi4>
    1f38:	07 fc       	sbrc	r0, 7
    1f3a:	05 d0       	rcall	.+10     	; 0x1f46 <__divmodhi4_neg2>
    1f3c:	3e f4       	brtc	.+14     	; 0x1f4c <__divmodhi4_exit>

00001f3e <__divmodhi4_neg1>:
    1f3e:	90 95       	com	r25
    1f40:	81 95       	neg	r24
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	08 95       	ret

00001f46 <__divmodhi4_neg2>:
    1f46:	70 95       	com	r23
    1f48:	61 95       	neg	r22
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f4c <__divmodhi4_exit>:
    1f4c:	08 95       	ret

00001f4e <__tablejump2__>:
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	05 90       	lpm	r0, Z+
    1f54:	f4 91       	lpm	r31, Z
    1f56:	e0 2d       	mov	r30, r0
    1f58:	09 94       	ijmp

00001f5a <__udivmodhi4>:
    1f5a:	aa 1b       	sub	r26, r26
    1f5c:	bb 1b       	sub	r27, r27
    1f5e:	51 e1       	ldi	r21, 0x11	; 17
    1f60:	07 c0       	rjmp	.+14     	; 0x1f70 <__udivmodhi4_ep>

00001f62 <__udivmodhi4_loop>:
    1f62:	aa 1f       	adc	r26, r26
    1f64:	bb 1f       	adc	r27, r27
    1f66:	a6 17       	cp	r26, r22
    1f68:	b7 07       	cpc	r27, r23
    1f6a:	10 f0       	brcs	.+4      	; 0x1f70 <__udivmodhi4_ep>
    1f6c:	a6 1b       	sub	r26, r22
    1f6e:	b7 0b       	sbc	r27, r23

00001f70 <__udivmodhi4_ep>:
    1f70:	88 1f       	adc	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	5a 95       	dec	r21
    1f76:	a9 f7       	brne	.-22     	; 0x1f62 <__udivmodhi4_loop>
    1f78:	80 95       	com	r24
    1f7a:	90 95       	com	r25
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	08 95       	ret

00001f82 <__itoa_ncheck>:
    1f82:	bb 27       	eor	r27, r27
    1f84:	4a 30       	cpi	r20, 0x0A	; 10
    1f86:	31 f4       	brne	.+12     	; 0x1f94 <__itoa_ncheck+0x12>
    1f88:	99 23       	and	r25, r25
    1f8a:	22 f4       	brpl	.+8      	; 0x1f94 <__itoa_ncheck+0x12>
    1f8c:	bd e2       	ldi	r27, 0x2D	; 45
    1f8e:	90 95       	com	r25
    1f90:	81 95       	neg	r24
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__utoa_common>

00001f98 <__utoa_ncheck>:
    1f98:	bb 27       	eor	r27, r27

00001f9a <__utoa_common>:
    1f9a:	fb 01       	movw	r30, r22
    1f9c:	55 27       	eor	r21, r21
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	a4 17       	cp	r26, r20
    1fa8:	10 f0       	brcs	.+4      	; 0x1fae <__utoa_common+0x14>
    1faa:	a4 1b       	sub	r26, r20
    1fac:	83 95       	inc	r24
    1fae:	50 51       	subi	r21, 0x10	; 16
    1fb0:	b9 f7       	brne	.-18     	; 0x1fa0 <__utoa_common+0x6>
    1fb2:	a0 5d       	subi	r26, 0xD0	; 208
    1fb4:	aa 33       	cpi	r26, 0x3A	; 58
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <__utoa_common+0x20>
    1fb8:	a9 5d       	subi	r26, 0xD9	; 217
    1fba:	a1 93       	st	Z+, r26
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	79 f7       	brne	.-34     	; 0x1f9e <__utoa_common+0x4>
    1fc0:	b1 11       	cpse	r27, r1
    1fc2:	b1 93       	st	Z+, r27
    1fc4:	11 92       	st	Z+, r1
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <strrev>

00001fcc <strrev>:
    1fcc:	dc 01       	movw	r26, r24
    1fce:	fc 01       	movw	r30, r24
    1fd0:	67 2f       	mov	r22, r23
    1fd2:	71 91       	ld	r23, Z+
    1fd4:	77 23       	and	r23, r23
    1fd6:	e1 f7       	brne	.-8      	; 0x1fd0 <strrev+0x4>
    1fd8:	32 97       	sbiw	r30, 0x02	; 2
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <strrev+0x18>
    1fdc:	7c 91       	ld	r23, X
    1fde:	6d 93       	st	X+, r22
    1fe0:	70 83       	st	Z, r23
    1fe2:	62 91       	ld	r22, -Z
    1fe4:	ae 17       	cp	r26, r30
    1fe6:	bf 07       	cpc	r27, r31
    1fe8:	c8 f3       	brcs	.-14     	; 0x1fdc <strrev+0x10>
    1fea:	08 95       	ret

00001fec <_exit>:
    1fec:	f8 94       	cli

00001fee <__stop_program>:
    1fee:	ff cf       	rjmp	.-2      	; 0x1fee <__stop_program>
