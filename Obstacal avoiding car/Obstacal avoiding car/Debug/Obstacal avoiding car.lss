
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  00001f30  00001fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  0080011c  0080011c  00002080  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004925  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001631  00000000  00000000  00006e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b78  00000000  00000000  00008432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000988  00000000  00000000  0000afac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000150b  00000000  00000000  0000b934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b94  00000000  00000000  0000ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000f9d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_1>
       8:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_2>
       c:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	94 0b       	sbc	r25, r20
      56:	9f 0b       	sbc	r25, r31
      58:	aa 0b       	sbc	r26, r26
      5a:	ba 0c       	add	r11, r10
      5c:	b5 0b       	sbc	r27, r21
      5e:	ba 0c       	add	r11, r10
      60:	c0 0b       	sbc	r28, r16
      62:	cb 0b       	sbc	r28, r27
      64:	d6 0b       	sbc	r29, r22
      66:	e1 0b       	sbc	r30, r17
      68:	f7 0b       	sbc	r31, r23
      6a:	02 0c       	add	r0, r2
      6c:	0d 0c       	add	r0, r13
      6e:	bc 0c       	add	r11, r12
      70:	18 0c       	add	r1, r8
      72:	bc 0c       	add	r11, r12
      74:	23 0c       	add	r2, r3
      76:	2e 0c       	add	r2, r14
      78:	39 0c       	add	r3, r9
      7a:	44 0c       	add	r4, r4
      7c:	5a 0c       	add	r5, r10
      7e:	65 0c       	add	r6, r5
      80:	70 0c       	add	r7, r0
      82:	7b 0c       	add	r7, r11
      84:	86 0c       	add	r8, r6
      86:	91 0c       	add	r9, r1
      88:	9c 0c       	add	r9, r12
      8a:	a7 0c       	add	r10, r7

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 31       	cpi	r26, 0x1C	; 28
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	ac e1       	ldi	r26, 0x1C	; 28
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ab 34       	cpi	r26, 0x4B	; 75
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 54 08 	call	0x10a8	; 0x10a8 <main>
      c2:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <BUTTON_vidChangeDir>:
/*									Static Function Implementation                				*/
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	u8_g_dirStateCounter ^= 1 ;
      ca:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <u8_g_dirStateCounter>
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	89 27       	eor	r24, r25
      d2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_g_dirStateCounter>
      d6:	08 95       	ret

000000d8 <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      d8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_g_OneSecTicks>
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 7a 07 	call	0xef4	; 0xef4 <TIMER_Manager_reset>
      ea:	08 95       	ret

000000ec <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      ec:	0e 94 1d 08 	call	0x103a	; 0x103a <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
      f0:	0e 94 37 08 	call	0x106e	; 0x106e <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
      f4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
      f8:	87 e6       	ldi	r24, 0x67	; 103
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 c0 05 	call	0xb80	; 0xb80 <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     108:	80 e6       	ldi	r24, 0x60	; 96
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 41 07 	call	0xe82	; 0xe82 <TIMER_Manager_init>
	(void) PWM_init();
     110:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <PWM_init>
	(void) CAR_init();
     114:	0e 94 64 03 	call	0x6c8	; 0x6c8 <CAR_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     118:	8b e9       	ldi	r24, 0x9B	; 155
     11a:	97 e0       	ldi	r25, 0x07	; 7
     11c:	0e 94 4e 08 	call	0x109c	; 0x109c <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     120:	8f ea       	ldi	r24, 0xAF	; 175
     122:	97 e0       	ldi	r25, 0x07	; 7
     124:	0e 94 51 08 	call	0x10a2	; 0x10a2 <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     128:	85 e6       	ldi	r24, 0x65	; 101
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <HExtInt_enCBFInt0>
     130:	08 95       	ret

00000132 <APP_updateDirection>:
	TIMER_Manager_reset(&st_timer1Config);
}

void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     132:	0e 94 3e 08 	call	0x107c	; 0x107c <HULTRASONIC_vidInterruptDisable>
	u8_g_OneSecTicks = 0;
     136:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <u8_g_OneSecTicks>
	TIMER_Manager_start (&st_timer1Config);
     13a:	80 e6       	ldi	r24, 0x60	; 96
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 61 07 	call	0xec2	; 0xec2 <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     142:	0e 94 fd 03 	call	0x7fa	; 0x7fa <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 2)
     146:	1d c0       	rjmp	.+58     	; 0x182 <APP_updateDirection+0x50>
	{
		if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     148:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_g_dirStateCounter>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	79 f4       	brne	.+30     	; 0x16e <APP_updateDirection+0x3c>
		{
			HLCD_gotoXY(1,4);
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
			HLCD_vidWriteChar(' ');
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	0e 94 db 04 	call	0x9b6	; 0x9b6 <HLCD_vidWriteChar>
			HLCD_gotoXY(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
			HLCD_WriteString("Left");
     164:	8d e8       	ldi	r24, 0x8D	; 141
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
     16c:	0a c0       	rjmp	.+20     	; 0x182 <APP_updateDirection+0x50>
		}
		else if(u8_g_dirStateCounter == MOTOR_TURN_RIGHT){
     16e:	81 11       	cpse	r24, r1
     170:	08 c0       	rjmp	.+16     	; 0x182 <APP_updateDirection+0x50>
			HLCD_gotoXY(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
			HLCD_WriteString("Right");
     17a:	82 e9       	ldi	r24, 0x92	; 146
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
{
	HULTRASONIC_vidInterruptDisable();
	u8_g_OneSecTicks = 0;
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 2)
     182:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_g_OneSecTicks>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	f8 f2       	brcs	.-66     	; 0x148 <APP_updateDirection+0x16>
		else {
			/* do nothing  */
		}
	}
	//while(u8_g_OneSecTicks <= 7);
	HLCD_ClrDisplay();
     18a:	0e 94 55 05 	call	0xaaa	; 0xaaa <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     192:	0e 94 73 07 	call	0xee6	; 0xee6 <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     196:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <HExtInt0_enIntDisable>
	HULTRASONIC_vidInterruptEnable();
     19a:	0e 94 37 08 	call	0x106e	; 0x106e <HULTRASONIC_vidInterruptEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	83 ed       	ldi	r24, 0xD3	; 211
     1a2:	90 e3       	ldi	r25, 0x30	; 48
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	80 40       	sbci	r24, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <APP_updateDirection+0x72>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <APP_updateDirection+0x7c>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <APP_vidStart>:
/*	sei();*/
	//DDRA = 0xFF;
}

void APP_vidStart(void)
{
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
// 	if (en_motorSel == EN_MOTOR_IDLE)
// 	{
		(void) KEYPAD_read(&u8KeyRead);
     1ba:	81 e4       	ldi	r24, 0x41	; 65
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 fd 05 	call	0xbfa	; 0xbfa <KEYPAD_read>
		
		if (u8KeyRead != 'N')
     1c2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <u8KeyRead>
     1c6:	8e 34       	cpi	r24, 0x4E	; 78
     1c8:	59 f0       	breq	.+22     	; 0x1e0 <APP_vidStart+0x2e>
		{
			switch(u8KeyRead)
     1ca:	81 33       	cpi	r24, 0x31	; 49
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <APP_vidStart+0x22>
     1ce:	82 33       	cpi	r24, 0x32	; 50
     1d0:	21 f0       	breq	.+8      	; 0x1da <APP_vidStart+0x28>
     1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <APP_vidStart+0x2e>
			{
				case '1' : {
					en_motorSel = EN_MOTOR_START;
     1d4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
					break;
     1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <APP_vidStart+0x2e>
				}
				case '2' : {
					en_motorSel = EN_MOTOR_STOP;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					break;
				}
			}
		}
/*	}*/
	if (en_motorSel == EN_MOTOR_START)
     1e0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     1e4:	81 11       	cpse	r24, r1
     1e6:	2c c2       	rjmp	.+1112   	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
	 { 				
		if (en_start_state == EN_UPDATE_DIR)
     1e8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_start_state>
     1ec:	81 11       	cpse	r24, r1
     1ee:	10 c0       	rjmp	.+32     	; 0x210 <APP_vidStart+0x5e>
		{
			HLCD_ClrDisplay();
     1f0:	0e 94 55 05 	call	0xaaa	; 0xaaa <HLCD_ClrDisplay>
			HLCD_gotoXY(0,0);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
			HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     1fc:	88 e9       	ldi	r24, 0x98	; 152
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
			APP_updateDirection();
     204:	0e 94 99 00 	call	0x132	; 0x132 <APP_updateDirection>
			en_start_state = UPDATE_OBISTICAL_STATE;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <en_start_state>
     20e:	66 c0       	rjmp	.+204    	; 0x2dc <APP_vidStart+0x12a>
		}
		else if (en_start_state == UPDATE_OBISTICAL_STATE )
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	09 f0       	breq	.+2      	; 0x216 <APP_vidStart+0x64>
     214:	63 c0       	rjmp	.+198    	; 0x2dc <APP_vidStart+0x12a>
		{
		  global_f64Dist = HULTRASONIC_u8Read();
     216:	0e 94 43 08 	call	0x1086	; 0x1086 <HULTRASONIC_u8Read>
     21a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <global_f64Dist>
     21e:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <global_f64Dist+0x1>
     222:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <global_f64Dist+0x2>
     226:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <global_f64Dist+0x3>
     22a:	8f e2       	ldi	r24, 0x2F	; 47
     22c:	95 e7       	ldi	r25, 0x75	; 117
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <APP_vidStart+0x7c>
     232:	00 c0       	rjmp	.+0      	; 0x234 <APP_vidStart+0x82>
     234:	00 00       	nop
		  _delay_ms(15);
		  
			if		(global_f64Dist > 70.0 )							{ en_Dist_states = NO_OBISTICALS;  }		
     236:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <global_f64Dist>
     23a:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <global_f64Dist+0x1>
     23e:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <global_f64Dist+0x2>
     242:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <global_f64Dist+0x3>
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	4c e8       	ldi	r20, 0x8C	; 140
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	24 f4       	brge	.+8      	; 0x262 <APP_vidStart+0xb0>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     260:	3d c0       	rjmp	.+122    	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist > 30.0 && global_f64Dist <= 70.0)	{ en_Dist_states = OBISTICAL_70_30; }	
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 ef       	ldi	r20, 0xF0	; 240
     268:	51 e4       	ldi	r21, 0x41	; 65
     26a:	c7 01       	movw	r24, r14
     26c:	b6 01       	movw	r22, r12
     26e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	74 f4       	brge	.+28     	; 0x292 <APP_vidStart+0xe0>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	4c e8       	ldi	r20, 0x8C	; 140
     27c:	52 e4       	ldi	r21, 0x42	; 66
     27e:	c7 01       	movw	r24, r14
     280:	b6 01       	movw	r22, r12
     282:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     286:	18 16       	cp	r1, r24
     288:	24 f0       	brlt	.+8      	; 0x292 <APP_vidStart+0xe0>
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     290:	25 c0       	rjmp	.+74     	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist >= 20.0 && global_f64Dist <= 30)	{ en_Dist_states = OBISTICAL_30_20;}	
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 ea       	ldi	r20, 0xA0	; 160
     298:	51 e4       	ldi	r21, 0x41	; 65
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__gesf2>
     2a2:	88 23       	and	r24, r24
     2a4:	74 f0       	brlt	.+28     	; 0x2c2 <APP_vidStart+0x110>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 ef       	ldi	r20, 0xF0	; 240
     2ac:	51 e4       	ldi	r21, 0x41	; 65
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     2b6:	18 16       	cp	r1, r24
     2b8:	24 f0       	brlt	.+8      	; 0x2c2 <APP_vidStart+0x110>
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     2c0:	0d c0       	rjmp	.+26     	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist < 20.0)								{ en_Dist_states = OBISTICAL_LESS_20;}	
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 ea       	ldi	r20, 0xA0	; 160
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	c7 01       	movw	r24, r14
     2cc:	b6 01       	movw	r22, r12
     2ce:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     2d2:	88 23       	and	r24, r24
     2d4:	1c f4       	brge	.+6      	; 0x2dc <APP_vidStart+0x12a>
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			else{  /* do nothing */ }	
				
			}	else { /*do nothing*/}
				
		if (en_Dist_states == NO_OBISTICALS)
     2dc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <APP_vidStart+0x134>
     2e4:	50 c0       	rjmp	.+160    	; 0x386 <APP_vidStart+0x1d4>
		{
				HLCD_gotoXY(1,0);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     2ec:	86 ea       	ldi	r24, 0xA6	; 166
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     2f4:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     2f8:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     2fc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     300:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     304:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__fixunssfsi>
     308:	0e 94 a1 05 	call	0xb42	; 0xb42 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     30c:	8d ea       	ldi	r24, 0xAD	; 173
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
     314:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <u8_g_OneSecTicks>
				TIMER_Manager_start (&st_timer1Config);
     318:	80 e6       	ldi	r24, 0x60	; 96
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 61 07 	call	0xec2	; 0xec2 <TIMER_Manager_start>
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     320:	11 c0       	rjmp	.+34     	; 0x344 <APP_vidStart+0x192>
				{
					HLCD_gotoXY(0,0);
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
					HLCD_WriteString("Speed:30% ");
     32a:	81 eb       	ldi	r24, 0xB1	; 177
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
					HLCD_WriteString("Dir:F");
     332:	8c eb       	ldi	r24, 0xBC	; 188
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
					PWM_start(30,20,FORWARD);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	64 e1       	ldi	r22, 0x14	; 20
     33e:	8e e1       	ldi	r24, 0x1E	; 30
     340:	0e 94 f3 06 	call	0xde6	; 0xde6 <PWM_start>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
				TIMER_Manager_start (&st_timer1Config);
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     344:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_g_OneSecTicks>
     348:	86 30       	cpi	r24, 0x06	; 6
     34a:	20 f4       	brcc	.+8      	; 0x354 <APP_vidStart+0x1a2>
     34c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <flag4>
     350:	88 23       	and	r24, r24
     352:	39 f3       	breq	.-50     	; 0x322 <APP_vidStart+0x170>
					HLCD_gotoXY(0,0);
					HLCD_WriteString("Speed:30% ");
					HLCD_WriteString("Dir:F");
					PWM_start(30,20,FORWARD);
				}
				flag4=1;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <flag4>
				(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     35a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     35e:	0e 94 73 07 	call	0xee6	; 0xee6 <TIMER_Manager_stop>
				/* Motor move forward with duty cycle 50%  */
				HLCD_gotoXY(0,0);
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Speed:50% ");
     36a:	82 ec       	ldi	r24, 0xC2	; 194
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				PWM_start(50,20,FORWARD);
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	64 e1       	ldi	r22, 0x14	; 20
     37e:	82 e3       	ldi	r24, 0x32	; 50
     380:	0e 94 f3 06 	call	0xde6	; 0xde6 <PWM_start>
     384:	9c c1       	rjmp	.+824    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
				
		}
		else if (en_Dist_states == OBISTICAL_70_30)
     386:	82 30       	cpi	r24, 0x02	; 2
     388:	61 f5       	brne	.+88     	; 0x3e2 <APP_vidStart+0x230>
		{
				flag4=0;
     38a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <flag4>
				HLCD_gotoXY(1,0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     396:	86 ea       	ldi	r24, 0xA6	; 166
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     39e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     3a2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     3a6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     3aa:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     3ae:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__fixunssfsi>
     3b2:	0e 94 a1 05 	call	0xb42	; 0xb42 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     3b6:	8d ea       	ldi	r24, 0xAD	; 173
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     3c6:	81 eb       	ldi	r24, 0xB1	; 177
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     3ce:	8c eb       	ldi	r24, 0xBC	; 188
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				/* Motor move forward with duty cycle 30% */		
				PWM_start(30,20,FORWARD);
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	64 e1       	ldi	r22, 0x14	; 20
     3da:	8e e1       	ldi	r24, 0x1E	; 30
     3dc:	0e 94 f3 06 	call	0xde6	; 0xde6 <PWM_start>
     3e0:	6e c1       	rjmp	.+732    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
		}
		else if (en_Dist_states == OBISTICAL_30_20)
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <APP_vidStart+0x236>
     3e6:	b3 c0       	rjmp	.+358    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		{
			flag4=0;
     3e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <flag4>
				HLCD_gotoXY(1,0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     3f4:	86 ea       	ldi	r24, 0xA6	; 166
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     3fc:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     400:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     404:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     408:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     40c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__fixunssfsi>
     410:	0e 94 a1 05 	call	0xb42	; 0xb42 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     414:	8d ea       	ldi	r24, 0xAD	; 173
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Speed:0%");
     424:	8d ec       	ldi	r24, 0xCD	; 205
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     42c:	86 ed       	ldi	r24, 0xD6	; 214
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				/* Motor Stop Implementation  */
				CAR_stop();
     434:	0e 94 c8 03 	call	0x790	; 0x790 <CAR_stop>
     438:	9f ef       	ldi	r25, 0xFF	; 255
     43a:	24 e3       	ldi	r18, 0x34	; 52
     43c:	8c e0       	ldi	r24, 0x0C	; 12
     43e:	91 50       	subi	r25, 0x01	; 1
     440:	20 40       	sbci	r18, 0x00	; 0
     442:	80 40       	sbci	r24, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     448:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Speed:100%");
     452:	8c ed       	ldi	r24, 0xDC	; 220
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteString("Dir:R");
     45a:	87 ee       	ldi	r24, 0xE7	; 231
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				while (global_f64Dist <= 30.0)
     462:	63 c0       	rjmp	.+198    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
				{
					/* rotate depend on u8_g_dirStateCounter  */
					if (u8_gs_rotate_counter <= 4)
     464:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     468:	85 30       	cpi	r24, 0x05	; 5
     46a:	40 f5       	brcc	.+80     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					{
						if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     46c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_g_dirStateCounter>
     470:	81 30       	cpi	r24, 0x01	; 1
     472:	89 f4       	brne	.+34     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
						{
							CAR_reverse_left();
     474:	0e 94 b4 03 	call	0x768	; 0x768 <CAR_reverse_left>
     478:	9f ef       	ldi	r25, 0xFF	; 255
     47a:	29 e6       	ldi	r18, 0x69	; 105
     47c:	88 e1       	ldi	r24, 0x18	; 24
     47e:	91 50       	subi	r25, 0x01	; 1
     480:	20 40       	sbci	r18, 0x00	; 0
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     488:	00 00       	nop
							_delay_ms(1000);
							u8_gs_rotate_counter++;
     48a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     494:	17 c0       	rjmp	.+46     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
						}
						else if (u8_g_dirStateCounter == MOTOR_TURN_RIGHT)
     496:	81 11       	cpse	r24, r1
     498:	15 c0       	rjmp	.+42     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
						{
							CAR_reverse_right();
     49a:	0e 94 a0 03 	call	0x740	; 0x740 <CAR_reverse_right>
     49e:	9f ef       	ldi	r25, 0xFF	; 255
     4a0:	29 e6       	ldi	r18, 0x69	; 105
     4a2:	88 e1       	ldi	r24, 0x18	; 24
     4a4:	91 50       	subi	r25, 0x01	; 1
     4a6:	20 40       	sbci	r18, 0x00	; 0
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4ae:	00 00       	nop
							_delay_ms(1000);
							u8_gs_rotate_counter++;
     4b0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
							// do nothing
						}
						/*u8_gs_rotate_counter++;*/
					}
					else{
						en_motorSel = EN_MOTOR_STOP_V2;
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
						break;
     4c2:	fd c0       	rjmp	.+506    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
					}
					global_f64Dist = HULTRASONIC_u8Read();
     4c4:	0e 94 43 08 	call	0x1086	; 0x1086 <HULTRASONIC_u8Read>
     4c8:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <global_f64Dist>
     4cc:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <global_f64Dist+0x1>
     4d0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <global_f64Dist+0x2>
     4d4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     4e0:	86 ea       	ldi	r24, 0xA6	; 166
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     4e8:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     4ec:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     4f0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     4f4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     4f8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__fixunssfsi>
     4fc:	0e 94 a1 05 	call	0xb42	; 0xb42 <HLCD_WriteInt>
					HLCD_WriteString(" cm");
     500:	8d ea       	ldi	r24, 0xAD	; 173
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
					if (global_f64Dist <= 20.0) break;
     508:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     50c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     510:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     514:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 ea       	ldi	r20, 0xA0	; 160
     51e:	51 e4       	ldi	r21, 0x41	; 65
     520:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     524:	18 16       	cp	r1, r24
     526:	0c f0       	brlt	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     528:	ca c0       	rjmp	.+404    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:100%");
				HLCD_WriteString("Dir:R");
				while (global_f64Dist <= 30.0)
     52a:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     52e:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     532:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     536:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 ef       	ldi	r20, 0xF0	; 240
     540:	51 e4       	ldi	r21, 0x41	; 65
     542:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     546:	18 16       	cp	r1, r24
     548:	0c f0       	brlt	.+2      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
     54a:	8c cf       	rjmp	.-232    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     54c:	b8 c0       	rjmp	.+368    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
					HLCD_WriteString(" cm");
					if (global_f64Dist <= 20.0) break;
				}

		}
		else if (en_Dist_states == OBISTICAL_LESS_20)
     54e:	84 30       	cpi	r24, 0x04	; 4
     550:	09 f0       	breq	.+2      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     552:	b5 c0       	rjmp	.+362    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
		{
			flag4=0;
     554:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <flag4>
				HLCD_gotoXY(1,0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     560:	86 ea       	ldi	r24, 0xA6	; 166
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     568:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     56c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     570:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     574:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     578:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__fixunssfsi>
     57c:	0e 94 a1 05 	call	0xb42	; 0xb42 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     580:	8d ea       	ldi	r24, 0xAD	; 173
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     590:	81 eb       	ldi	r24, 0xB1	; 177
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     598:	86 ed       	ldi	r24, 0xD6	; 214
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				/*  Motor Stop Implementation  */
				CAR_stop();
     5a0:	0e 94 c8 03 	call	0x790	; 0x790 <CAR_stop>
     5a4:	9f ef       	ldi	r25, 0xFF	; 255
     5a6:	24 e3       	ldi	r18, 0x34	; 52
     5a8:	8c e0       	ldi	r24, 0x0C	; 12
     5aa:	91 50       	subi	r25, 0x01	; 1
     5ac:	20 40       	sbci	r18, 0x00	; 0
     5ae:	80 40       	sbci	r24, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
     5b4:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     5be:	81 eb       	ldi	r24, 0xB1	; 177
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				HLCD_WriteString("Dir:b");
     5c6:	8d ee       	ldi	r24, 0xED	; 237
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				while (global_f64Dist <= 20.0)
     5ce:	27 c0       	rjmp	.+78     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
				{
					/* Motor move backward with duty cycle 30%  */
					PWM_start(30,20,BACKWARD);
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	64 e1       	ldi	r22, 0x14	; 20
     5d4:	8e e1       	ldi	r24, 0x1E	; 30
     5d6:	0e 94 f3 06 	call	0xde6	; 0xde6 <PWM_start>
					/*CAR_backword();*/
					global_f64Dist = HULTRASONIC_u8Read();
     5da:	0e 94 43 08 	call	0x1086	; 0x1086 <HULTRASONIC_u8Read>
     5de:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <global_f64Dist>
     5e2:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <global_f64Dist+0x1>
     5e6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <global_f64Dist+0x2>
     5ea:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     5f6:	86 ea       	ldi	r24, 0xA6	; 166
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     5fe:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     602:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     606:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     60a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     60e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__fixunssfsi>
     612:	0e 94 a1 05 	call	0xb42	; 0xb42 <HLCD_WriteInt>
					HLCD_WriteString(" cm");						
     616:	8d ea       	ldi	r24, 0xAD	; 173
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:30% ");
				HLCD_WriteString("Dir:b");
				while (global_f64Dist <= 20.0)
     61e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <global_f64Dist>
     622:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <global_f64Dist+0x1>
     626:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <global_f64Dist+0x2>
     62a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <global_f64Dist+0x3>
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 ea       	ldi	r20, 0xA0	; 160
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     63a:	18 16       	cp	r1, r24
     63c:	4c f6       	brge	.-110    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
     63e:	3f c0       	rjmp	.+126    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
				}
		}
	 }
	 
	 
	else if (en_motorSel == EN_MOTOR_STOP)
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	b1 f4       	brne	.+44     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     644:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <flag2>
     648:	81 11       	cpse	r24, r1
     64a:	09 c0       	rjmp	.+18     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
     64c:	0e 94 55 05 	call	0xaaa	; 0xaaa <HLCD_ClrDisplay>
     650:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <flag1>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <flag2>
     65a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <flag3>
		  HLCD_gotoXY(0,0);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     666:	83 ef       	ldi	r24, 0xF3	; 243
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
     66e:	27 c0       	rjmp	.+78     	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
	  }
	  else if (en_motorSel == EN_MOTOR_STOP_V2)
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	81 f4       	brne	.+32     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
	  {
		  CAR_stop();
     674:	0e 94 c8 03 	call	0x790	; 0x790 <CAR_stop>
     678:	9f ef       	ldi	r25, 0xFF	; 255
     67a:	2d e3       	ldi	r18, 0x3D	; 61
     67c:	89 e4       	ldi	r24, 0x49	; 73
     67e:	91 50       	subi	r25, 0x01	; 1
     680:	20 40       	sbci	r18, 0x00	; 0
     682:	80 40       	sbci	r24, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
     686:	00 c0       	rjmp	.+0      	; 0x688 <__EEPROM_REGION_LENGTH__+0x288>
     688:	00 00       	nop
		  _delay_ms(3000);
		  u8_gs_rotate_counter=0;
     68a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <u8_gs_rotate_counter>
		  en_motorSel = EN_MOTOR_START;
     68e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     692:	15 c0       	rjmp	.+42     	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     694:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <flag1>
     698:	81 11       	cpse	r24, r1
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
     69c:	0e 94 55 05 	call	0xaaa	; 0xaaa <HLCD_ClrDisplay>
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <flag1>
     6a6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <flag2>
     6aa:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <flag3>
		  HLCD_gotoXY(0,0);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 6c 05 	call	0xad8	; 0xad8 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
	  }
}
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	08 95       	ret

000006c8 <CAR_init>:
     6c8:	cf 93       	push	r28
     6ca:	8a e7       	ldi	r24, 0x7A	; 122
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <MOTOR_INIT>
     6d2:	c8 2f       	mov	r28, r24
     6d4:	87 e7       	ldi	r24, 0x77	; 119
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <MOTOR_INIT>
     6dc:	c1 11       	cpse	r28, r1
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <CAR_init+0x1e>
     6e0:	81 11       	cpse	r24, r1
     6e2:	03 c0       	rjmp	.+6      	; 0x6ea <CAR_init+0x22>
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <CAR_init+0x24>
     6e6:	8b e0       	ldi	r24, 0x0B	; 11
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <CAR_init+0x24>
     6ea:	8b e0       	ldi	r24, 0x0B	; 11
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <CAR_forward>:
     6f0:	cf 93       	push	r28
     6f2:	8a e7       	ldi	r24, 0x7A	; 122
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 92 06 	call	0xd24	; 0xd24 <MOTOR_FORWARD>
     6fa:	c8 2f       	mov	r28, r24
     6fc:	87 e7       	ldi	r24, 0x77	; 119
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 92 06 	call	0xd24	; 0xd24 <MOTOR_FORWARD>
     704:	c1 11       	cpse	r28, r1
     706:	03 c0       	rjmp	.+6      	; 0x70e <CAR_forward+0x1e>
     708:	81 11       	cpse	r24, r1
     70a:	03 c0       	rjmp	.+6      	; 0x712 <CAR_forward+0x22>
     70c:	03 c0       	rjmp	.+6      	; 0x714 <CAR_forward+0x24>
     70e:	8b e0       	ldi	r24, 0x0B	; 11
     710:	01 c0       	rjmp	.+2      	; 0x714 <CAR_forward+0x24>
     712:	8b e0       	ldi	r24, 0x0B	; 11
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <CAR_backword>:
     718:	cf 93       	push	r28
     71a:	8a e7       	ldi	r24, 0x7A	; 122
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 aa 06 	call	0xd54	; 0xd54 <MOTOR_BACKWARD>
     722:	c8 2f       	mov	r28, r24
     724:	87 e7       	ldi	r24, 0x77	; 119
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 aa 06 	call	0xd54	; 0xd54 <MOTOR_BACKWARD>
     72c:	c1 11       	cpse	r28, r1
     72e:	03 c0       	rjmp	.+6      	; 0x736 <CAR_backword+0x1e>
     730:	81 11       	cpse	r24, r1
     732:	03 c0       	rjmp	.+6      	; 0x73a <CAR_backword+0x22>
     734:	03 c0       	rjmp	.+6      	; 0x73c <CAR_backword+0x24>
     736:	8b e0       	ldi	r24, 0x0B	; 11
     738:	01 c0       	rjmp	.+2      	; 0x73c <CAR_backword+0x24>
     73a:	8b e0       	ldi	r24, 0x0B	; 11
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <CAR_reverse_right>:
     740:	cf 93       	push	r28
     742:	8a e7       	ldi	r24, 0x7A	; 122
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 92 06 	call	0xd24	; 0xd24 <MOTOR_FORWARD>
     74a:	c8 2f       	mov	r28, r24
     74c:	87 e7       	ldi	r24, 0x77	; 119
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 aa 06 	call	0xd54	; 0xd54 <MOTOR_BACKWARD>
     754:	c1 11       	cpse	r28, r1
     756:	03 c0       	rjmp	.+6      	; 0x75e <CAR_reverse_right+0x1e>
     758:	81 11       	cpse	r24, r1
     75a:	03 c0       	rjmp	.+6      	; 0x762 <CAR_reverse_right+0x22>
     75c:	03 c0       	rjmp	.+6      	; 0x764 <CAR_reverse_right+0x24>
     75e:	8b e0       	ldi	r24, 0x0B	; 11
     760:	01 c0       	rjmp	.+2      	; 0x764 <CAR_reverse_right+0x24>
     762:	8b e0       	ldi	r24, 0x0B	; 11
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <CAR_reverse_left>:
     768:	cf 93       	push	r28
     76a:	8a e7       	ldi	r24, 0x7A	; 122
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 92 06 	call	0xd24	; 0xd24 <MOTOR_FORWARD>
     772:	c8 2f       	mov	r28, r24
     774:	87 e7       	ldi	r24, 0x77	; 119
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 aa 06 	call	0xd54	; 0xd54 <MOTOR_BACKWARD>
     77c:	81 11       	cpse	r24, r1
     77e:	03 c0       	rjmp	.+6      	; 0x786 <CAR_reverse_left+0x1e>
     780:	c1 11       	cpse	r28, r1
     782:	03 c0       	rjmp	.+6      	; 0x78a <CAR_reverse_left+0x22>
     784:	03 c0       	rjmp	.+6      	; 0x78c <CAR_reverse_left+0x24>
     786:	8b e0       	ldi	r24, 0x0B	; 11
     788:	01 c0       	rjmp	.+2      	; 0x78c <CAR_reverse_left+0x24>
     78a:	8b e0       	ldi	r24, 0x0B	; 11
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <CAR_stop>:
     790:	cf 93       	push	r28
     792:	8a e7       	ldi	r24, 0x7A	; 122
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 c2 06 	call	0xd84	; 0xd84 <MOTOR_STOP>
     79a:	c8 2f       	mov	r28, r24
     79c:	87 e7       	ldi	r24, 0x77	; 119
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 c2 06 	call	0xd84	; 0xd84 <MOTOR_STOP>
     7a4:	c1 11       	cpse	r28, r1
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <CAR_stop+0x1e>
     7a8:	81 11       	cpse	r24, r1
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <CAR_stop+0x22>
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <CAR_stop+0x24>
     7ae:	8b e0       	ldi	r24, 0x0B	; 11
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <CAR_stop+0x24>
     7b2:	8b e0       	ldi	r24, 0x0B	; 11
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <HExtInt_enInit>:
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	c8 2f       	mov	r28, r24
     7be:	d6 2f       	mov	r29, r22
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     7d4:	6d 2f       	mov	r22, r29
     7d6:	8c 2f       	mov	r24, r28
     7d8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vidExtInt_init>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <HExtInt_enCBFInt0>:
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	21 f0       	breq	.+8      	; 0x7f0 <HExtInt_enCBFInt0+0xc>
     7e8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <MEXTINT_vidCallBackFuncInt0>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	08 95       	ret
     7f0:	85 e0       	ldi	r24, 0x05	; 5
     7f2:	08 95       	ret

000007f4 <HExtInt0_enIntDisable>:
     7f4:	0e 94 00 0a 	call	0x1400	; 0x1400 <MEXTINT_vidDisableInterrupt>
     7f8:	08 95       	ret

000007fa <HExtInt0_enIntEnable>:
     7fa:	0e 94 04 0a 	call	0x1408	; 0x1408 <MEXTINT_vidEnableInterrupt>
     7fe:	08 95       	ret

00000800 <HLCD_vidWritecmd>:
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	18 2f       	mov	r17, r24
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     814:	c8 2f       	mov	r28, r24
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	67 e0       	ldi	r22, 0x07	; 7
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     820:	c8 2b       	or	r28, r24
     822:	01 2f       	mov	r16, r17
     824:	02 95       	swap	r16
     826:	0f 70       	andi	r16, 0x0F	; 15
     828:	d0 e0       	ldi	r29, 0x00	; 0
     82a:	15 c0       	rjmp	.+42     	; 0x856 <HLCD_vidWritecmd+0x56>
     82c:	ed 2f       	mov	r30, r29
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	40 2f       	mov	r20, r16
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	0d 2e       	mov	r0, r29
     836:	02 c0       	rjmp	.+4      	; 0x83c <HLCD_vidWritecmd+0x3c>
     838:	55 95       	asr	r21
     83a:	47 95       	ror	r20
     83c:	0a 94       	dec	r0
     83e:	e2 f7       	brpl	.-8      	; 0x838 <HLCD_vidWritecmd+0x38>
     840:	41 70       	andi	r20, 0x01	; 1
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	e3 58       	subi	r30, 0x83	; 131
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	61 81       	ldd	r22, Z+1	; 0x01
     84c:	80 81       	ld	r24, Z
     84e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     852:	c8 2b       	or	r28, r24
     854:	df 5f       	subi	r29, 0xFF	; 255
     856:	d4 30       	cpi	r29, 0x04	; 4
     858:	48 f3       	brcs	.-46     	; 0x82c <HLCD_vidWritecmd+0x2c>
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     864:	c8 2b       	or	r28, r24
     866:	89 ef       	ldi	r24, 0xF9	; 249
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     87c:	c8 2b       	or	r28, r24
     87e:	92 e4       	ldi	r25, 0x42	; 66
     880:	9a 95       	dec	r25
     882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x21>
     884:	00 c0       	rjmp	.+0      	; 0x886 <__stack+0x27>
     886:	1f 70       	andi	r17, 0x0F	; 15
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	15 c0       	rjmp	.+42     	; 0x8b6 <__stack+0x57>
     88c:	ed 2f       	mov	r30, r29
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	41 2f       	mov	r20, r17
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	0d 2e       	mov	r0, r29
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	55 95       	asr	r21
     89a:	47 95       	ror	r20
     89c:	0a 94       	dec	r0
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	41 70       	andi	r20, 0x01	; 1
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	e3 58       	subi	r30, 0x83	; 131
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	61 81       	ldd	r22, Z+1	; 0x01
     8ac:	80 81       	ld	r24, Z
     8ae:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     8b2:	c8 2b       	or	r28, r24
     8b4:	df 5f       	subi	r29, 0xFF	; 255
     8b6:	d4 30       	cpi	r29, 0x04	; 4
     8b8:	48 f3       	brcs	.-46     	; 0x88c <__stack+0x2d>
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     8c4:	c8 2b       	or	r28, r24
     8c6:	e9 ef       	ldi	r30, 0xF9	; 249
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <__stack+0x6b>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
     8d0:	00 00       	nop
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     8dc:	8c 2b       	or	r24, r28
     8de:	e3 ef       	ldi	r30, 0xF3	; 243
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <__stack+0x83>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__stack+0x89>
     8e8:	00 00       	nop
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <HLCD_vidInit>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
     8fc:	0d c0       	rjmp	.+26     	; 0x918 <HLCD_vidInit+0x24>
     8fe:	ed 2f       	mov	r30, r29
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e3 58       	subi	r30, 0x83	; 131
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	61 81       	ldd	r22, Z+1	; 0x01
     90e:	80 81       	ld	r24, Z
     910:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     914:	c8 2b       	or	r28, r24
     916:	df 5f       	subi	r29, 0xFF	; 255
     918:	d4 30       	cpi	r29, 0x04	; 4
     91a:	88 f3       	brcs	.-30     	; 0x8fe <HLCD_vidInit+0xa>
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	67 e0       	ldi	r22, 0x07	; 7
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     926:	c8 2b       	or	r28, r24
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     932:	c8 2b       	or	r28, r24
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     93e:	c8 2b       	or	r28, r24
     940:	8f e0       	ldi	r24, 0x0F	; 15
     942:	97 e2       	ldi	r25, 0x27	; 39
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <HLCD_vidInit+0x50>
     948:	00 c0       	rjmp	.+0      	; 0x94a <HLCD_vidInit+0x56>
     94a:	00 00       	nop
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     952:	c8 2b       	or	r28, r24
     954:	e9 ef       	ldi	r30, 0xF9	; 249
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <HLCD_vidInit+0x64>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <HLCD_vidInit+0x6a>
     95e:	00 00       	nop
     960:	88 e2       	ldi	r24, 0x28	; 40
     962:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     966:	c8 2b       	or	r28, r24
     968:	89 ef       	ldi	r24, 0xF9	; 249
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <HLCD_vidInit+0x78>
     970:	00 c0       	rjmp	.+0      	; 0x972 <HLCD_vidInit+0x7e>
     972:	00 00       	nop
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     97a:	c8 2b       	or	r28, r24
     97c:	e7 ee       	ldi	r30, 0xE7	; 231
     97e:	f3 e0       	ldi	r31, 0x03	; 3
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <HLCD_vidInit+0x8c>
     984:	00 c0       	rjmp	.+0      	; 0x986 <HLCD_vidInit+0x92>
     986:	00 00       	nop
     988:	86 e0       	ldi	r24, 0x06	; 6
     98a:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     98e:	c8 2b       	or	r28, r24
     990:	89 ef       	ldi	r24, 0xF9	; 249
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <HLCD_vidInit+0xa0>
     998:	00 c0       	rjmp	.+0      	; 0x99a <HLCD_vidInit+0xa6>
     99a:	00 00       	nop
     99c:	8c e0       	ldi	r24, 0x0C	; 12
     99e:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     9a2:	8c 2b       	or	r24, r28
     9a4:	e9 ef       	ldi	r30, 0xF9	; 249
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <HLCD_vidInit+0xb4>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <HLCD_vidInit+0xba>
     9ae:	00 00       	nop
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <HLCD_vidWriteChar>:
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	18 2f       	mov	r17, r24
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     9ca:	c8 2f       	mov	r28, r24
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	67 e0       	ldi	r22, 0x07	; 7
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     9d6:	c8 2b       	or	r28, r24
     9d8:	01 2f       	mov	r16, r17
     9da:	02 95       	swap	r16
     9dc:	0f 70       	andi	r16, 0x0F	; 15
     9de:	d0 e0       	ldi	r29, 0x00	; 0
     9e0:	15 c0       	rjmp	.+42     	; 0xa0c <HLCD_vidWriteChar+0x56>
     9e2:	ed 2f       	mov	r30, r29
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	40 2f       	mov	r20, r16
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	0d 2e       	mov	r0, r29
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <HLCD_vidWriteChar+0x3c>
     9ee:	55 95       	asr	r21
     9f0:	47 95       	ror	r20
     9f2:	0a 94       	dec	r0
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <HLCD_vidWriteChar+0x38>
     9f6:	41 70       	andi	r20, 0x01	; 1
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	e3 58       	subi	r30, 0x83	; 131
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	61 81       	ldd	r22, Z+1	; 0x01
     a02:	80 81       	ld	r24, Z
     a04:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     a08:	c8 2b       	or	r28, r24
     a0a:	df 5f       	subi	r29, 0xFF	; 255
     a0c:	d4 30       	cpi	r29, 0x04	; 4
     a0e:	48 f3       	brcs	.-46     	; 0x9e2 <HLCD_vidWriteChar+0x2c>
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     a1a:	c8 2b       	or	r28, r24
     a1c:	89 ef       	ldi	r24, 0xF9	; 249
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <HLCD_vidWriteChar+0x6a>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <HLCD_vidWriteChar+0x70>
     a26:	00 00       	nop
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     a32:	c8 2b       	or	r28, r24
     a34:	92 e4       	ldi	r25, 0x42	; 66
     a36:	9a 95       	dec	r25
     a38:	f1 f7       	brne	.-4      	; 0xa36 <HLCD_vidWriteChar+0x80>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <HLCD_vidWriteChar+0x86>
     a3c:	1f 70       	andi	r17, 0x0F	; 15
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	15 c0       	rjmp	.+42     	; 0xa6c <HLCD_vidWriteChar+0xb6>
     a42:	ed 2f       	mov	r30, r29
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	41 2f       	mov	r20, r17
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	0d 2e       	mov	r0, r29
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <HLCD_vidWriteChar+0x9c>
     a4e:	55 95       	asr	r21
     a50:	47 95       	ror	r20
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <HLCD_vidWriteChar+0x98>
     a56:	41 70       	andi	r20, 0x01	; 1
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e3 58       	subi	r30, 0x83	; 131
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
     a60:	61 81       	ldd	r22, Z+1	; 0x01
     a62:	80 81       	ld	r24, Z
     a64:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     a68:	c8 2b       	or	r28, r24
     a6a:	df 5f       	subi	r29, 0xFF	; 255
     a6c:	d4 30       	cpi	r29, 0x04	; 4
     a6e:	48 f3       	brcs	.-46     	; 0xa42 <HLCD_vidWriteChar+0x8c>
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     a7a:	c8 2b       	or	r28, r24
     a7c:	e9 ef       	ldi	r30, 0xF9	; 249
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <HLCD_vidWriteChar+0xca>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <HLCD_vidWriteChar+0xd0>
     a86:	00 00       	nop
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     a92:	8c 2b       	or	r24, r28
     a94:	e3 ef       	ldi	r30, 0xF3	; 243
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <HLCD_vidWriteChar+0xe2>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <HLCD_vidWriteChar+0xe8>
     a9e:	00 00       	nop
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <HLCD_ClrDisplay>:
     aaa:	cf 93       	push	r28
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     ab2:	c8 2f       	mov	r28, r24
     ab4:	87 ee       	ldi	r24, 0xE7	; 231
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <HLCD_ClrDisplay+0xe>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <HLCD_ClrDisplay+0x14>
     abe:	00 00       	nop
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     ac6:	8c 2b       	or	r24, r28
     ac8:	e7 ee       	ldi	r30, 0xE7	; 231
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <HLCD_ClrDisplay+0x22>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <HLCD_ClrDisplay+0x28>
     ad2:	00 00       	nop
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <HLCD_gotoXY>:
     ad8:	81 11       	cpse	r24, r1
     ada:	08 c0       	rjmp	.+16     	; 0xaec <HLCD_gotoXY+0x14>
     adc:	60 31       	cpi	r22, 0x10	; 16
     ade:	30 f4       	brcc	.+12     	; 0xaec <HLCD_gotoXY+0x14>
     ae0:	86 2f       	mov	r24, r22
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	80 68       	ori	r24, 0x80	; 128
     ae6:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     aea:	08 95       	ret
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	41 f4       	brne	.+16     	; 0xb00 <HLCD_gotoXY+0x28>
     af0:	60 31       	cpi	r22, 0x10	; 16
     af2:	40 f4       	brcc	.+16     	; 0xb04 <HLCD_gotoXY+0x2c>
     af4:	86 2f       	mov	r24, r22
     af6:	8f 70       	andi	r24, 0x0F	; 15
     af8:	80 6c       	ori	r24, 0xC0	; 192
     afa:	0e 94 00 04 	call	0x800	; 0x800 <HLCD_vidWritecmd>
     afe:	08 95       	ret
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	08 95       	ret
     b04:	88 e0       	ldi	r24, 0x08	; 8
     b06:	08 95       	ret

00000b08 <HLCD_WriteString>:
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	7c 01       	movw	r14, r24
     b14:	fc 01       	movw	r30, r24
     b16:	80 81       	ld	r24, Z
     b18:	c0 e0       	ldi	r28, 0x00	; 0
     b1a:	d0 e0       	ldi	r29, 0x00	; 0
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	08 c0       	rjmp	.+16     	; 0xb30 <HLCD_WriteString+0x28>
     b20:	0e 94 db 04 	call	0x9b6	; 0x9b6 <HLCD_vidWriteChar>
     b24:	18 2b       	or	r17, r24
     b26:	21 96       	adiw	r28, 0x01	; 1
     b28:	f7 01       	movw	r30, r14
     b2a:	ec 0f       	add	r30, r28
     b2c:	fd 1f       	adc	r31, r29
     b2e:	80 81       	ld	r24, Z
     b30:	81 11       	cpse	r24, r1
     b32:	f6 cf       	rjmp	.-20     	; 0xb20 <HLCD_WriteString+0x18>
     b34:	81 2f       	mov	r24, r17
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <HLCD_WriteInt>:
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	2a 97       	sbiw	r28, 0x0a	; 10
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b5a:	4a e0       	ldi	r20, 0x0A	; 10
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__itoa_ncheck>
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	0e 94 84 05 	call	0xb08	; 0xb08 <HLCD_WriteString>
     b6e:	2a 96       	adiw	r28, 0x0a	; 10
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	a9 f1       	breq	.+106    	; 0xbf2 <KEYPAD_init+0x72>
     b88:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     b8a:	69 81       	ldd	r22, Y+1	; 0x01
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	88 81       	ld	r24, Y
     b90:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     b94:	6b 81       	ldd	r22, Y+3	; 0x03
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     b9e:	6d 81       	ldd	r22, Y+5	; 0x05
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	8c 81       	ldd	r24, Y+4	; 0x04
     ba4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     ba8:	69 81       	ldd	r22, Y+1	; 0x01
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	88 81       	ld	r24, Y
     bae:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     bb2:	6b 81       	ldd	r22, Y+3	; 0x03
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     bbc:	6d 81       	ldd	r22, Y+5	; 0x05
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     bc6:	6f 81       	ldd	r22, Y+7	; 0x07
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	8e 81       	ldd	r24, Y+6	; 0x06
     bcc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     bd0:	69 85       	ldd	r22, Y+9	; 0x09
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	88 85       	ldd	r24, Y+8	; 0x08
     bd6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     bda:	6b 85       	ldd	r22, Y+11	; 0x0b
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	8a 85       	ldd	r24, Y+10	; 0x0a
     be0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     be4:	6d 85       	ldd	r22, Y+13	; 0x0d
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bea:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     bf2:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	1f 92       	push	r1
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     c10:	07 e6       	ldi	r16, 0x67	; 103
     c12:	10 e0       	ldi	r17, 0x00	; 0
     c14:	f8 01       	movw	r30, r16
     c16:	67 81       	ldd	r22, Z+7	; 0x07
     c18:	41 e0       	ldi	r20, 0x01	; 1
     c1a:	86 81       	ldd	r24, Z+6	; 0x06
     c1c:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     c20:	f8 01       	movw	r30, r16
     c22:	61 85       	ldd	r22, Z+9	; 0x09
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	80 85       	ldd	r24, Z+8	; 0x08
     c28:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     c2c:	f8 01       	movw	r30, r16
     c2e:	63 85       	ldd	r22, Z+11	; 0x0b
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	82 85       	ldd	r24, Z+10	; 0x0a
     c34:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     c38:	f8 01       	movw	r30, r16
     c3a:	65 85       	ldd	r22, Z+13	; 0x0d
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	84 85       	ldd	r24, Z+12	; 0x0c
     c40:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     c44:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     c46:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     c48:	42 c0       	rjmp	.+132    	; 0xcce <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     c4a:	e7 e6       	ldi	r30, 0x67	; 103
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	67 81       	ldd	r22, Z+7	; 0x07
     c50:	60 0f       	add	r22, r16
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	86 81       	ldd	r24, Z+6	; 0x06
     c56:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
		for(j=0;j<3;j++)
     c5a:	10 e0       	ldi	r17, 0x00	; 0
     c5c:	2d c0       	rjmp	.+90     	; 0xcb8 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     c5e:	e7 e6       	ldi	r30, 0x67	; 103
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	61 81       	ldd	r22, Z+1	; 0x01
     c64:	61 0f       	add	r22, r17
     c66:	ae 01       	movw	r20, r28
     c68:	4f 5f       	subi	r20, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	80 81       	ld	r24, Z
     c6e:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_readPIN>
			if(value==0)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	81 11       	cpse	r24, r1
     c76:	1f c0       	rjmp	.+62     	; 0xcb6 <KEYPAD_read+0xbc>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     c7a:	e7 e6       	ldi	r30, 0x67	; 103
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	61 81       	ldd	r22, Z+1	; 0x01
     c80:	61 0f       	add	r22, r17
     c82:	ae 01       	movw	r20, r28
     c84:	4f 5f       	subi	r20, 0xFF	; 255
     c86:	5f 4f       	sbci	r21, 0xFF	; 255
     c88:	80 81       	ld	r24, Z
     c8a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	88 23       	and	r24, r24
     c92:	99 f3       	breq	.-26     	; 0xc7a <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     c94:	80 2f       	mov	r24, r16
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	fc 01       	movw	r30, r24
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
     ca2:	e1 5f       	subi	r30, 0xF1	; 241
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	e1 0f       	add	r30, r17
     ca8:	f1 1d       	adc	r31, r1
     caa:	80 81       	ld	r24, Z
     cac:	f7 01       	movw	r30, r14
     cae:	80 83       	st	Z, r24
				flag=1;
     cb0:	dd 24       	eor	r13, r13
     cb2:	d3 94       	inc	r13
				
				break;
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     cb6:	1f 5f       	subi	r17, 0xFF	; 255
     cb8:	13 30       	cpi	r17, 0x03	; 3
     cba:	88 f2       	brcs	.-94     	; 0xc5e <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     cbc:	e7 e6       	ldi	r30, 0x67	; 103
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	67 81       	ldd	r22, Z+7	; 0x07
     cc2:	60 0f       	add	r22, r16
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	86 81       	ldd	r24, Z+6	; 0x06
     cc8:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     ccc:	0f 5f       	subi	r16, 0xFF	; 255
     cce:	04 30       	cpi	r16, 0x04	; 4
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <KEYPAD_read+0xda>
     cd2:	bb cf       	rjmp	.-138    	; 0xc4a <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	df 16       	cp	r13, r31
     cd8:	19 f0       	breq	.+6      	; 0xce0 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     cda:	8e e4       	ldi	r24, 0x4E	; 78
     cdc:	f7 01       	movw	r30, r14
     cde:	80 83       	st	Z, r24
		return ret_val;
	}
	
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	08 95       	ret

00000cf4 <MOTOR_INIT>:
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	69 81       	ldd	r22, Y+1	; 0x01
     cfe:	88 81       	ld	r24, Y
     d00:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     d04:	81 11       	cpse	r24, r1
     d06:	08 c0       	rjmp	.+16     	; 0xd18 <MOTOR_INIT+0x24>
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	6a 81       	ldd	r22, Y+2	; 0x02
     d0c:	88 81       	ld	r24, Y
     d0e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
     d12:	81 11       	cpse	r24, r1
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <MOTOR_INIT+0x28>
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <MOTOR_INIT+0x2a>
     d18:	89 e0       	ldi	r24, 0x09	; 9
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <MOTOR_INIT+0x2a>
     d1c:	89 e0       	ldi	r24, 0x09	; 9
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <MOTOR_FORWARD>:
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ec 01       	movw	r28, r24
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	69 81       	ldd	r22, Y+1	; 0x01
     d2e:	88 81       	ld	r24, Y
     d30:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     d34:	81 11       	cpse	r24, r1
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <MOTOR_FORWARD+0x24>
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	6a 81       	ldd	r22, Y+2	; 0x02
     d3c:	88 81       	ld	r24, Y
     d3e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     d42:	81 11       	cpse	r24, r1
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <MOTOR_FORWARD+0x28>
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <MOTOR_FORWARD+0x2a>
     d48:	89 e0       	ldi	r24, 0x09	; 9
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <MOTOR_FORWARD+0x2a>
     d4c:	89 e0       	ldi	r24, 0x09	; 9
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <MOTOR_BACKWARD>:
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	69 81       	ldd	r22, Y+1	; 0x01
     d5e:	88 81       	ld	r24, Y
     d60:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     d64:	81 11       	cpse	r24, r1
     d66:	08 c0       	rjmp	.+16     	; 0xd78 <MOTOR_BACKWARD+0x24>
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	6a 81       	ldd	r22, Y+2	; 0x02
     d6c:	88 81       	ld	r24, Y
     d6e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     d72:	81 11       	cpse	r24, r1
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <MOTOR_BACKWARD+0x28>
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <MOTOR_BACKWARD+0x2a>
     d78:	89 e0       	ldi	r24, 0x09	; 9
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <MOTOR_BACKWARD+0x2a>
     d7c:	89 e0       	ldi	r24, 0x09	; 9
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <MOTOR_STOP>:
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	69 81       	ldd	r22, Y+1	; 0x01
     d8e:	88 81       	ld	r24, Y
     d90:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     d94:	81 11       	cpse	r24, r1
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <MOTOR_STOP+0x24>
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	6a 81       	ldd	r22, Y+2	; 0x02
     d9c:	88 81       	ld	r24, Y
     d9e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     da2:	81 11       	cpse	r24, r1
     da4:	03 c0       	rjmp	.+6      	; 0xdac <MOTOR_STOP+0x28>
     da6:	03 c0       	rjmp	.+6      	; 0xdae <MOTOR_STOP+0x2a>
     da8:	89 e0       	ldi	r24, 0x09	; 9
     daa:	01 c0       	rjmp	.+2      	; 0xdae <MOTOR_STOP+0x2a>
     dac:	89 e0       	ldi	r24, 0x09	; 9
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <TIMER0_callBackFunc>:



void TIMER0_callBackFunc(void)
{
	u8_gs_pwm_counter++;
     db4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <u8_gs_pwm_counter>
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <u8_gs_pwm_counter>
	TIMER_Manager_reset(&st_timer0Config);
     dbe:	85 e8       	ldi	r24, 0x85	; 133
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 7a 07 	call	0xef4	; 0xef4 <TIMER_Manager_reset>
     dc6:	08 95       	ret

00000dc8 <PWM_init>:
static uint8_t u8_gs_duty = 0;
static uint8_t u8_gs_cycle = 0;
static uint8_t u8_gs_dir = 0;

u8_pwmErrorType PWM_init(void)
{
     dc8:	cf 93       	push	r28
	uint8_t u8_retVal = PWM_ERROR_OK;
	u8_retVal = TIMER_Manager_init(&st_timer0Config);
     dca:	85 e8       	ldi	r24, 0x85	; 133
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 41 07 	call	0xe82	; 0xe82 <TIMER_Manager_init>
     dd2:	c8 2f       	mov	r28, r24
	u8_retVal |= CAR_init();
     dd4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <CAR_init>
     dd8:	8c 2b       	or	r24, r28
	if (u8_retVal == PWM_ERROR_OK)
     dda:	19 f4       	brne	.+6      	; 0xde2 <PWM_init+0x1a>
	{
		u8_gs_pwm_state = INIT;
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <u8_gs_pwm_state>
	}
	return u8_retVal;
}
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <PWM_start>:
u8_pwmErrorType PWM_start(uint8_t u8_duty , uint8_t u8_cycle , en_motor_dir_t u8_motor_dir)
{
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state != NOT_INIT)
     df0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <u8_gs_pwm_state>
     df4:	99 23       	and	r25, r25
     df6:	e9 f1       	breq	.+122    	; 0xe72 <PWM_start+0x8c>
	{
		if (u8_gs_pwm_state == START &&  (u8_gs_duty != u8_duty || u8_gs_cycle != u8_cycle || u8_gs_dir != u8_motor_dir ))
     df8:	92 30       	cpi	r25, 0x02	; 2
     dfa:	69 f4       	brne	.+26     	; 0xe16 <PWM_start+0x30>
     dfc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <u8_gs_duty>
     e00:	98 13       	cpse	r25, r24
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <PWM_start+0x2c>
     e04:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <u8_gs_cycle>
     e08:	96 13       	cpse	r25, r22
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <PWM_start+0x2c>
     e0c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <u8_gs_dir>
     e10:	94 13       	cpse	r25, r20
		{
			u8_gs_pwm_counter = 0;
     e12:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <u8_gs_pwm_counter>
     e16:	d4 2f       	mov	r29, r20
     e18:	c6 2f       	mov	r28, r22
		}
		u8_duty = (u8_cycle * u8_duty) / 100;
     e1a:	68 9f       	mul	r22, r24
     e1c:	c0 01       	movw	r24, r0
     e1e:	11 24       	eor	r1, r1
     e20:	64 e6       	ldi	r22, 0x64	; 100
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__divmodhi4>
     e28:	06 2f       	mov	r16, r22
		u8_retVal |= TIMER_Manager_start(&st_timer0Config);
     e2a:	85 e8       	ldi	r24, 0x85	; 133
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 61 07 	call	0xec2	; 0xec2 <TIMER_Manager_start>
     e32:	18 2f       	mov	r17, r24
		if (u8_gs_pwm_counter < u8_duty)
     e34:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <u8_gs_pwm_counter>
     e38:	80 17       	cp	r24, r16
     e3a:	60 f4       	brcc	.+24     	; 0xe54 <PWM_start+0x6e>
		{
			if (u8_motor_dir == FORWARD)
     e3c:	d1 11       	cpse	r29, r1
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <PWM_start+0x62>
			{
				u8_retVal |= CAR_forward();
     e40:	0e 94 78 03 	call	0x6f0	; 0x6f0 <CAR_forward>
     e44:	18 2b       	or	r17, r24
     e46:	0b c0       	rjmp	.+22     	; 0xe5e <PWM_start+0x78>
			}
			else if (u8_motor_dir == BACKWARD)
     e48:	d1 30       	cpi	r29, 0x01	; 1
     e4a:	49 f4       	brne	.+18     	; 0xe5e <PWM_start+0x78>
			{
				u8_retVal |= CAR_backword();
     e4c:	0e 94 8c 03 	call	0x718	; 0x718 <CAR_backword>
     e50:	18 2b       	or	r17, r24
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <PWM_start+0x78>
			}
			else{
				// do nothing
			}
		}
		else if (u8_gs_pwm_counter < u8_cycle)
     e54:	8c 17       	cp	r24, r28
     e56:	18 f4       	brcc	.+6      	; 0xe5e <PWM_start+0x78>
		{
			u8_retVal |= CAR_stop();
     e58:	0e 94 c8 03 	call	0x790	; 0x790 <CAR_stop>
     e5c:	18 2b       	or	r17, r24
		}
		u8_gs_pwm_state = START;
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <u8_gs_pwm_state>
		u8_gs_duty = u8_duty;
     e64:	00 93 26 01 	sts	0x0126, r16	; 0x800126 <u8_gs_duty>
		u8_gs_cycle = u8_cycle;
     e68:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <u8_gs_cycle>
		u8_gs_dir = u8_motor_dir;
     e6c:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <u8_gs_dir>
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <PWM_start+0x8e>
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     e72:	1a e0       	ldi	r17, 0x0A	; 10
	}
	
	return u8_retVal;
}
     e74:	81 2f       	mov	r24, r17
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	08 95       	ret

00000e82 <TIMER_Manager_init>:
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	91 f0       	breq	.+36     	; 0xeb0 <TIMER_Manager_init+0x2e>
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 81       	ld	r18, Z
     e90:	23 30       	cpi	r18, 0x03	; 3
     e92:	80 f4       	brcc	.+32     	; 0xeb4 <TIMER_Manager_init+0x32>
     e94:	21 81       	ldd	r18, Z+1	; 0x01
     e96:	2a 30       	cpi	r18, 0x0A	; 10
     e98:	78 f4       	brcc	.+30     	; 0xeb8 <TIMER_Manager_init+0x36>
     e9a:	ec 01       	movw	r28, r24
     e9c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <TIMER_init>
     ea0:	18 2f       	mov	r17, r24
     ea2:	68 81       	ld	r22, Y
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <TIMER_setCallBack>
     eac:	81 2b       	or	r24, r17
     eae:	05 c0       	rjmp	.+10     	; 0xeba <TIMER_Manager_init+0x38>
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <TIMER_Manager_init+0x38>
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <TIMER_Manager_init+0x38>
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	08 95       	ret

00000ec2 <TIMER_Manager_start>:
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	51 f0       	breq	.+20     	; 0xeda <TIMER_Manager_start+0x18>
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 81       	ld	r18, Z
     eca:	23 30       	cpi	r18, 0x03	; 3
     ecc:	40 f4       	brcc	.+16     	; 0xede <TIMER_Manager_start+0x1c>
     ece:	21 81       	ldd	r18, Z+1	; 0x01
     ed0:	2a 30       	cpi	r18, 0x0A	; 10
     ed2:	38 f4       	brcc	.+14     	; 0xee2 <TIMER_Manager_start+0x20>
     ed4:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <TIMER_start>
     ed8:	08 95       	ret
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	08 95       	ret
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	08 95       	ret
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	08 95       	ret

00000ee6 <TIMER_Manager_stop>:
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <TIMER_Manager_stop+0xa>
     eea:	0e 94 c0 0c 	call	0x1980	; 0x1980 <TIMER_stop>
     eee:	08 95       	ret
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	08 95       	ret

00000ef4 <TIMER_Manager_reset>:
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	51 f0       	breq	.+20     	; 0xf0c <TIMER_Manager_reset+0x18>
     ef8:	fc 01       	movw	r30, r24
     efa:	20 81       	ld	r18, Z
     efc:	23 30       	cpi	r18, 0x03	; 3
     efe:	40 f4       	brcc	.+16     	; 0xf10 <TIMER_Manager_reset+0x1c>
     f00:	21 81       	ldd	r18, Z+1	; 0x01
     f02:	2a 30       	cpi	r18, 0x0A	; 10
     f04:	38 f4       	brcc	.+14     	; 0xf14 <TIMER_Manager_reset+0x20>
     f06:	0e 94 ed 0c 	call	0x19da	; 0x19da <TIMER_reset>
     f0a:	08 95       	ret
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	08 95       	ret
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	08 95       	ret
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	08 95       	ret

00000f18 <HULTRASONIC_vidTrigger>:
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	63 e0       	ldi	r22, 0x03	; 3
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f22:	8a e1       	ldi	r24, 0x1A	; 26
     f24:	8a 95       	dec	r24
     f26:	f1 f7       	brne	.-4      	; 0xf24 <HULTRASONIC_vidTrigger+0xc>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <HULTRASONIC_vidTrigger+0x12>
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	63 e0       	ldi	r22, 0x03	; 3
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
     f34:	08 95       	ret

00000f36 <HULTRASONIC_vidTimerCBF>:
     f36:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_v_u16_ovfCounts>
     f3a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <g_v_u16_ovfCounts+0x1>
     f3e:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <g_v_u16_ovfCounts+0x2>
     f42:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <g_v_u16_ovfCounts+0x3>
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	a1 1d       	adc	r26, r1
     f4a:	b1 1d       	adc	r27, r1
     f4c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <g_v_u16_ovfCounts>
     f50:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <g_v_u16_ovfCounts+0x1>
     f54:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <g_v_u16_ovfCounts+0x2>
     f58:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <g_v_u16_ovfCounts+0x3>
     f5c:	08 95       	ret

00000f5e <HULTRASONIC_vidSigCalc>:
     f5e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <g_v_u8_flag>
     f62:	81 11       	cpse	r24, r1
     f64:	14 c0       	rjmp	.+40     	; 0xf8e <HULTRASONIC_vidSigCalc+0x30>
     f66:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <MTIMER_vidResetTCNT>
     f6a:	62 e0       	ldi	r22, 0x02	; 2
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vidExtInt_init>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <g_v_u8_flag>
     f78:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <g_v_u16_ovfCounts>
     f7c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <g_v_u16_ovfCounts+0x1>
     f80:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <g_v_u16_ovfCounts+0x2>
     f84:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_v_u16_ovfCounts+0x3>
     f88:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <vidTimer2_start>
     f8c:	08 95       	ret
     f8e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <g_v_u8_flag>
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	09 f0       	breq	.+2      	; 0xf98 <HULTRASONIC_vidSigCalc+0x3a>
     f96:	50 c0       	rjmp	.+160    	; 0x1038 <HULTRASONIC_vidSigCalc+0xda>
     f98:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <vidTimer2_stop>
     f9c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MTIMER_u8GetTCNT>
     fa0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <g_v_u8_cap>
     fa4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_v_u16_ovfCounts>
     fa8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <g_v_u16_ovfCounts+0x1>
     fac:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <g_v_u16_ovfCounts+0x2>
     fb0:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <g_v_u16_ovfCounts+0x3>
     fb4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <g_v_u16_ovf>
     fb8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <g_v_u16_ovf+0x1>
     fbc:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <g_v_u16_ovf+0x2>
     fc0:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <g_v_u16_ovf+0x3>
     fc4:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <g_v_u8_cap>
     fc8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <g_v_u16_ovf>
     fcc:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <g_v_u16_ovf+0x1>
     fd0:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <g_v_u16_ovf+0x2>
     fd4:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <g_v_u16_ovf+0x3>
     fd8:	ba 2f       	mov	r27, r26
     fda:	a9 2f       	mov	r26, r25
     fdc:	98 2f       	mov	r25, r24
     fde:	88 27       	eor	r24, r24
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	62 0f       	add	r22, r18
     fe6:	71 1d       	adc	r23, r1
     fe8:	81 1d       	adc	r24, r1
     fea:	91 1d       	adc	r25, r1
     fec:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__floatunsisf>
     ff0:	2d ec       	ldi	r18, 0xCD	; 205
     ff2:	3c e3       	ldi	r19, 0x3C	; 60
     ff4:	49 e6       	ldi	r20, 0x69	; 105
     ff6:	54 e4       	ldi	r21, 0x44	; 68
     ff8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__divsf3>
     ffc:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <global_f64distance>
    1000:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <global_f64distance+0x1>
    1004:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <global_f64distance+0x2>
    1008:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <global_f64distance+0x3>
    100c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <g_v_u16_ovf>
    1010:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <g_v_u16_ovf+0x1>
    1014:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <g_v_u16_ovf+0x2>
    1018:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <g_v_u16_ovf+0x3>
    101c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <g_v_u16_ovfCounts>
    1020:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <g_v_u16_ovfCounts+0x1>
    1024:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <g_v_u16_ovfCounts+0x2>
    1028:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_v_u16_ovfCounts+0x3>
    102c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <g_v_u8_flag>
    1030:	63 e0       	ldi	r22, 0x03	; 3
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vidExtInt_init>
    1038:	08 95       	ret

0000103a <HULTRASONIC_vidInit>:
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	63 e0       	ldi	r22, 0x03	; 3
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_init>
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_writePIN>
    1058:	63 e0       	ldi	r22, 0x03	; 3
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vidExtInt_init>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <enuTimer2_init>
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <u8Timer2_setPrescallar>
    106c:	08 95       	ret

0000106e <HULTRASONIC_vidInterruptEnable>:
    106e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <vidTimer2_OvfIrqEnable>
    1072:	0e 94 0f 0a 	call	0x141e	; 0x141e <MEXTINT2_vidEnableInterrupt>
    1076:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <MTIMER_vidEnableGlobalInterrupt>
    107a:	08 95       	ret

0000107c <HULTRASONIC_vidInterruptDisable>:
    107c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <vidTimer2_OvfIrqDisable>
    1080:	0e 94 0b 0a 	call	0x1416	; 0x1416 <MEXTINT2_vidDisableInterrupt>
    1084:	08 95       	ret

00001086 <HULTRASONIC_u8Read>:
    1086:	0e 94 8c 07 	call	0xf18	; 0xf18 <HULTRASONIC_vidTrigger>
    108a:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <global_f64distance>
    108e:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <global_f64distance+0x1>
    1092:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <global_f64distance+0x2>
    1096:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <global_f64distance+0x3>
    109a:	08 95       	ret

0000109c <HULTRASONIC_vidCBF_TIM>:
    109c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <vidTimer2_setcbf_OVF>
    10a0:	08 95       	ret

000010a2 <HULTRASONIC_vidCBF_INT>:
    10a2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <MEXTINT_vidCallBackFunc>
    10a6:	08 95       	ret

000010a8 <main>:
    10a8:	0e 94 76 00 	call	0xec	; 0xec <APP_vidInit>
    10ac:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <APP_vidStart>
    10b0:	fd cf       	rjmp	.-6      	; 0x10ac <main+0x4>

000010b2 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
    10b2:	68 30       	cpi	r22, 0x08	; 8
    10b4:	a0 f5       	brcc	.+104    	; 0x111e <DIO_init+0x6c>
	{
		if (port == porta)
    10b6:	81 11       	cpse	r24, r1
    10b8:	0b c0       	rjmp	.+22     	; 0x10d0 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
    10ba:	8a b3       	in	r24, 0x1a	; 26
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_init+0x12>
    10c0:	44 0f       	add	r20, r20
    10c2:	55 1f       	adc	r21, r21
    10c4:	6a 95       	dec	r22
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_init+0xe>
    10c8:	48 2b       	or	r20, r24
    10ca:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	08 95       	ret
		}
		else if (port == portb)
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	59 f4       	brne	.+22     	; 0x10ea <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
    10d4:	87 b3       	in	r24, 0x17	; 23
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_init+0x2c>
    10da:	44 0f       	add	r20, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	6a 95       	dec	r22
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_init+0x28>
    10e2:	48 2b       	or	r20, r24
    10e4:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret
		}
		else if (port == portc)
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	59 f4       	brne	.+22     	; 0x1104 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
    10ee:	84 b3       	in	r24, 0x14	; 20
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_init+0x46>
    10f4:	44 0f       	add	r20, r20
    10f6:	55 1f       	adc	r21, r21
    10f8:	6a 95       	dec	r22
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_init+0x42>
    10fc:	48 2b       	or	r20, r24
    10fe:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	08 95       	ret
		}
		else if (port == portd)
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	69 f4       	brne	.+26     	; 0x1122 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
    1108:	81 b3       	in	r24, 0x11	; 17
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_init+0x60>
    110e:	44 0f       	add	r20, r20
    1110:	55 1f       	adc	r21, r21
    1112:	6a 95       	dec	r22
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_init+0x5c>
    1116:	48 2b       	or	r20, r24
    1118:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    1122:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    1124:	08 95       	ret

00001126 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
    1126:	68 30       	cpi	r22, 0x08	; 8
    1128:	08 f0       	brcs	.+2      	; 0x112c <DIO_writePIN+0x6>
    112a:	74 c0       	rjmp	.+232    	; 0x1214 <DIO_writePIN+0xee>
	{
		if (port == porta)
    112c:	81 11       	cpse	r24, r1
    112e:	1b c0       	rjmp	.+54     	; 0x1166 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
    1130:	41 30       	cpi	r20, 0x01	; 1
    1132:	61 f4       	brne	.+24     	; 0x114c <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
    1134:	2b b3       	in	r18, 0x1b	; 27
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_writePIN+0x1a>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	6a 95       	dec	r22
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_writePIN+0x16>
    1144:	82 2b       	or	r24, r18
    1146:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
    114c:	2b b3       	in	r18, 0x1b	; 27
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_writePIN+0x32>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	6a 95       	dec	r22
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_writePIN+0x2e>
    115c:	80 95       	com	r24
    115e:	82 23       	and	r24, r18
    1160:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	08 95       	ret
		}
		else if (port == portb)
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	d9 f4       	brne	.+54     	; 0x11a0 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
    116a:	41 30       	cpi	r20, 0x01	; 1
    116c:	61 f4       	brne	.+24     	; 0x1186 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
    116e:	28 b3       	in	r18, 0x18	; 24
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_writePIN+0x54>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	6a 95       	dec	r22
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_writePIN+0x50>
    117e:	82 2b       	or	r24, r18
    1180:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
    1186:	28 b3       	in	r18, 0x18	; 24
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_writePIN+0x6c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	6a 95       	dec	r22
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_writePIN+0x68>
    1196:	80 95       	com	r24
    1198:	82 23       	and	r24, r18
    119a:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	08 95       	ret
		}
		else if (port == portc)
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	d9 f4       	brne	.+54     	; 0x11da <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
    11a4:	41 30       	cpi	r20, 0x01	; 1
    11a6:	61 f4       	brne	.+24     	; 0x11c0 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
    11a8:	25 b3       	in	r18, 0x15	; 21
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_writePIN+0x8e>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	6a 95       	dec	r22
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_writePIN+0x8a>
    11b8:	82 2b       	or	r24, r18
    11ba:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
    11c0:	25 b3       	in	r18, 0x15	; 21
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_writePIN+0xa6>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	6a 95       	dec	r22
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_writePIN+0xa2>
    11d0:	80 95       	com	r24
    11d2:	82 23       	and	r24, r18
    11d4:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	08 95       	ret
		}
		else if (port == portd)
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	e9 f4       	brne	.+58     	; 0x1218 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
    11de:	41 30       	cpi	r20, 0x01	; 1
    11e0:	61 f4       	brne	.+24     	; 0x11fa <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
    11e2:	22 b3       	in	r18, 0x12	; 18
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_writePIN+0xc8>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	6a 95       	dec	r22
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_writePIN+0xc4>
    11f2:	82 2b       	or	r24, r18
    11f4:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
    11fa:	22 b3       	in	r18, 0x12	; 18
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_writePIN+0xe0>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	6a 95       	dec	r22
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_writePIN+0xdc>
    120a:	80 95       	com	r24
    120c:	82 23       	and	r24, r18
    120e:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    1218:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    121a:	08 95       	ret

0000121c <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
    121c:	68 30       	cpi	r22, 0x08	; 8
    121e:	08 f0       	brcs	.+2      	; 0x1222 <DIO_readPIN+0x6>
    1220:	64 c0       	rjmp	.+200    	; 0x12ea <DIO_readPIN+0xce>
	{
		if (port == porta)
    1222:	81 11       	cpse	r24, r1
    1224:	17 c0       	rjmp	.+46     	; 0x1254 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
    1226:	79 b3       	in	r23, 0x19	; 25
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9c 01       	movw	r18, r24
    122e:	06 2e       	mov	r0, r22
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_readPIN+0x1a>
    1232:	22 0f       	add	r18, r18
    1234:	33 1f       	adc	r19, r19
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_readPIN+0x16>
    123a:	87 2f       	mov	r24, r23
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	82 23       	and	r24, r18
    1240:	93 23       	and	r25, r19
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_readPIN+0x2c>
    1244:	96 95       	lsr	r25
    1246:	87 95       	ror	r24
    1248:	6a 95       	dec	r22
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_readPIN+0x28>
    124c:	fa 01       	movw	r30, r20
    124e:	80 83       	st	Z, r24
			return DIO_E_OK;
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	08 95       	ret
		}
		else if (port == portb)
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	b9 f4       	brne	.+46     	; 0x1286 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
    1258:	76 b3       	in	r23, 0x16	; 22
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 01       	movw	r18, r24
    1260:	06 2e       	mov	r0, r22
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_readPIN+0x4c>
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_readPIN+0x48>
    126c:	87 2f       	mov	r24, r23
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	82 23       	and	r24, r18
    1272:	93 23       	and	r25, r19
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_readPIN+0x5e>
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	6a 95       	dec	r22
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_readPIN+0x5a>
    127e:	fa 01       	movw	r30, r20
    1280:	80 83       	st	Z, r24
			return DIO_E_OK;
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
		}
		else if (port == portc)
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	b9 f4       	brne	.+46     	; 0x12b8 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
    128a:	73 b3       	in	r23, 0x13	; 19
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9c 01       	movw	r18, r24
    1292:	06 2e       	mov	r0, r22
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_readPIN+0x7e>
    1296:	22 0f       	add	r18, r18
    1298:	33 1f       	adc	r19, r19
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_readPIN+0x7a>
    129e:	87 2f       	mov	r24, r23
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	82 23       	and	r24, r18
    12a4:	93 23       	and	r25, r19
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_readPIN+0x90>
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	6a 95       	dec	r22
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_readPIN+0x8c>
    12b0:	fa 01       	movw	r30, r20
    12b2:	80 83       	st	Z, r24
			return DIO_E_OK;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 95       	ret
		}
		else if (port == portd)
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	c9 f4       	brne	.+50     	; 0x12ee <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
    12bc:	70 b3       	in	r23, 0x10	; 16
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9c 01       	movw	r18, r24
    12c4:	06 2e       	mov	r0, r22
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_readPIN+0xb0>
    12c8:	22 0f       	add	r18, r18
    12ca:	33 1f       	adc	r19, r19
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_readPIN+0xac>
    12d0:	87 2f       	mov	r24, r23
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	82 23       	and	r24, r18
    12d6:	93 23       	and	r25, r19
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_readPIN+0xc2>
    12da:	96 95       	lsr	r25
    12dc:	87 95       	ror	r24
    12de:	6a 95       	dec	r22
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_readPIN+0xbe>
    12e2:	fa 01       	movw	r30, r20
    12e4:	80 83       	st	Z, r24
			return DIO_E_OK;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
    12f0:	08 95       	ret

000012f2 <vidExtInt_init>:
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <vidExtInt_init+0x6>
    12f6:	70 c0       	rjmp	.+224    	; 0x13d8 <vidExtInt_init+0xe6>
    12f8:	64 30       	cpi	r22, 0x04	; 4
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <vidExtInt_init+0xc>
    12fc:	6f c0       	rjmp	.+222    	; 0x13dc <vidExtInt_init+0xea>
    12fe:	81 11       	cpse	r24, r1
    1300:	28 c0       	rjmp	.+80     	; 0x1352 <vidExtInt_init+0x60>
    1302:	61 30       	cpi	r22, 0x01	; 1
    1304:	71 f0       	breq	.+28     	; 0x1322 <vidExtInt_init+0x30>
    1306:	28 f0       	brcs	.+10     	; 0x1312 <vidExtInt_init+0x20>
    1308:	62 30       	cpi	r22, 0x02	; 2
    130a:	99 f0       	breq	.+38     	; 0x1332 <vidExtInt_init+0x40>
    130c:	63 30       	cpi	r22, 0x03	; 3
    130e:	c9 f0       	breq	.+50     	; 0x1342 <vidExtInt_init+0x50>
    1310:	67 c0       	rjmp	.+206    	; 0x13e0 <vidExtInt_init+0xee>
    1312:	85 b7       	in	r24, 0x35	; 53
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	85 bf       	out	0x35, r24	; 53
    1318:	85 b7       	in	r24, 0x35	; 53
    131a:	8d 7f       	andi	r24, 0xFD	; 253
    131c:	85 bf       	out	0x35, r24	; 53
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	08 95       	ret
    1322:	85 b7       	in	r24, 0x35	; 53
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	85 bf       	out	0x35, r24	; 53
    1328:	85 b7       	in	r24, 0x35	; 53
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	85 bf       	out	0x35, r24	; 53
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	08 95       	ret
    1332:	85 b7       	in	r24, 0x35	; 53
    1334:	8e 7f       	andi	r24, 0xFE	; 254
    1336:	85 bf       	out	0x35, r24	; 53
    1338:	85 b7       	in	r24, 0x35	; 53
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	85 bf       	out	0x35, r24	; 53
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret
    1342:	85 b7       	in	r24, 0x35	; 53
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	85 bf       	out	0x35, r24	; 53
    1348:	85 b7       	in	r24, 0x35	; 53
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	85 bf       	out	0x35, r24	; 53
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	81 f5       	brne	.+96     	; 0x13b6 <vidExtInt_init+0xc4>
    1356:	61 30       	cpi	r22, 0x01	; 1
    1358:	71 f0       	breq	.+28     	; 0x1376 <vidExtInt_init+0x84>
    135a:	28 f0       	brcs	.+10     	; 0x1366 <vidExtInt_init+0x74>
    135c:	62 30       	cpi	r22, 0x02	; 2
    135e:	99 f0       	breq	.+38     	; 0x1386 <vidExtInt_init+0x94>
    1360:	63 30       	cpi	r22, 0x03	; 3
    1362:	c9 f0       	breq	.+50     	; 0x1396 <vidExtInt_init+0xa4>
    1364:	20 c0       	rjmp	.+64     	; 0x13a6 <vidExtInt_init+0xb4>
    1366:	85 b7       	in	r24, 0x35	; 53
    1368:	8b 7f       	andi	r24, 0xFB	; 251
    136a:	85 bf       	out	0x35, r24	; 53
    136c:	85 b7       	in	r24, 0x35	; 53
    136e:	87 7f       	andi	r24, 0xF7	; 247
    1370:	85 bf       	out	0x35, r24	; 53
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	19 c0       	rjmp	.+50     	; 0x13a8 <vidExtInt_init+0xb6>
    1376:	85 b7       	in	r24, 0x35	; 53
    1378:	84 60       	ori	r24, 0x04	; 4
    137a:	85 bf       	out	0x35, r24	; 53
    137c:	85 b7       	in	r24, 0x35	; 53
    137e:	87 7f       	andi	r24, 0xF7	; 247
    1380:	85 bf       	out	0x35, r24	; 53
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	11 c0       	rjmp	.+34     	; 0x13a8 <vidExtInt_init+0xb6>
    1386:	85 b7       	in	r24, 0x35	; 53
    1388:	8b 7f       	andi	r24, 0xFB	; 251
    138a:	85 bf       	out	0x35, r24	; 53
    138c:	85 b7       	in	r24, 0x35	; 53
    138e:	88 60       	ori	r24, 0x08	; 8
    1390:	85 bf       	out	0x35, r24	; 53
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <vidExtInt_init+0xb6>
    1396:	85 b7       	in	r24, 0x35	; 53
    1398:	84 60       	ori	r24, 0x04	; 4
    139a:	85 bf       	out	0x35, r24	; 53
    139c:	85 b7       	in	r24, 0x35	; 53
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	85 bf       	out	0x35, r24	; 53
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <vidExtInt_init+0xb6>
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	9b b7       	in	r25, 0x3b	; 59
    13aa:	90 68       	ori	r25, 0x80	; 128
    13ac:	9b bf       	out	0x3b, r25	; 59
    13ae:	9a b7       	in	r25, 0x3a	; 58
    13b0:	90 68       	ori	r25, 0x80	; 128
    13b2:	9a bf       	out	0x3a, r25	; 58
    13b4:	08 95       	ret
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	a9 f4       	brne	.+42     	; 0x13e4 <vidExtInt_init+0xf2>
    13ba:	62 30       	cpi	r22, 0x02	; 2
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <vidExtInt_init+0xd2>
    13be:	63 30       	cpi	r22, 0x03	; 3
    13c0:	31 f0       	breq	.+12     	; 0x13ce <vidExtInt_init+0xdc>
    13c2:	12 c0       	rjmp	.+36     	; 0x13e8 <vidExtInt_init+0xf6>
    13c4:	84 b7       	in	r24, 0x34	; 52
    13c6:	8f 7b       	andi	r24, 0xBF	; 191
    13c8:	84 bf       	out	0x34, r24	; 52
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
    13ce:	84 b7       	in	r24, 0x34	; 52
    13d0:	80 64       	ori	r24, 0x40	; 64
    13d2:	84 bf       	out	0x34, r24	; 52
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	08 95       	ret
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	08 95       	ret
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	08 95       	ret
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	08 95       	ret
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	08 95       	ret

000013ec <MEXTINT_vidCallBackFuncInt0>:
    13ec:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <callBackFuncInt0+0x1>
    13f0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <callBackFuncInt0>
    13f4:	08 95       	ret

000013f6 <MEXTINT_vidCallBackFunc>:
    13f6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <callBack+0x1>
    13fa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <callBack>
    13fe:	08 95       	ret

00001400 <MEXTINT_vidDisableInterrupt>:
    1400:	8b b7       	in	r24, 0x3b	; 59
    1402:	8f 7b       	andi	r24, 0xBF	; 191
    1404:	8b bf       	out	0x3b, r24	; 59
    1406:	08 95       	ret

00001408 <MEXTINT_vidEnableInterrupt>:
    1408:	8a b7       	in	r24, 0x3a	; 58
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	8a bf       	out	0x3a, r24	; 58
    140e:	8b b7       	in	r24, 0x3b	; 59
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	8b bf       	out	0x3b, r24	; 59
    1414:	08 95       	ret

00001416 <MEXTINT2_vidDisableInterrupt>:
    1416:	8b b7       	in	r24, 0x3b	; 59
    1418:	8f 7d       	andi	r24, 0xDF	; 223
    141a:	8b bf       	out	0x3b, r24	; 59
    141c:	08 95       	ret

0000141e <MEXTINT2_vidEnableInterrupt>:
    141e:	8b b7       	in	r24, 0x3b	; 59
    1420:	80 62       	ori	r24, 0x20	; 32
    1422:	8b bf       	out	0x3b, r24	; 59
    1424:	8a b7       	in	r24, 0x3a	; 58
    1426:	80 62       	ori	r24, 0x20	; 32
    1428:	8a bf       	out	0x3a, r24	; 58
    142a:	08 95       	ret

0000142c <__vector_1>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
    144e:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <callBackFuncInt0>
    1452:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <callBackFuncInt0+0x1>
    1456:	09 95       	icall
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_2>:
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
    149c:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <callBackFunc>
    14a0:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <callBackFunc+0x1>
    14a4:	09 95       	icall
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <__vector_3>:
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <callBack>
    14ee:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <callBack+0x1>
    14f2:	09 95       	icall
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_Timer0_callBackPtr>
    153c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_Timer0_callBackPtr+0x1>
    1540:	89 2b       	or	r24, r25
    1542:	41 f0       	breq	.+16     	; 0x1554 <__vector_11+0x3e>
    1544:	88 b7       	in	r24, 0x38	; 56
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	88 bf       	out	0x38, r24	; 56
    154a:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <sg_Timer0_callBackPtr>
    154e:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <sg_Timer0_callBackPtr+0x1>
    1552:	09 95       	icall
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	0f 90       	pop	r0
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	0f 90       	pop	r0
    1572:	1f 90       	pop	r1
    1574:	18 95       	reti

00001576 <__vector_9>:
    1576:	1f 92       	push	r1
    1578:	0f 92       	push	r0
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	0f 92       	push	r0
    157e:	11 24       	eor	r1, r1
    1580:	2f 93       	push	r18
    1582:	3f 93       	push	r19
    1584:	4f 93       	push	r20
    1586:	5f 93       	push	r21
    1588:	6f 93       	push	r22
    158a:	7f 93       	push	r23
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	af 93       	push	r26
    1592:	bf 93       	push	r27
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
    1598:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_Timer1_callBackPtr>
    159c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <sg_Timer1_callBackPtr+0x1>
    15a0:	89 2b       	or	r24, r25
    15a2:	41 f0       	breq	.+16     	; 0x15b4 <__vector_9+0x3e>
    15a4:	88 b7       	in	r24, 0x38	; 56
    15a6:	8b 7f       	andi	r24, 0xFB	; 251
    15a8:	88 bf       	out	0x38, r24	; 56
    15aa:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <sg_Timer1_callBackPtr>
    15ae:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <sg_Timer1_callBackPtr+0x1>
    15b2:	09 95       	icall
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <TIMER_init>:
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	09 f4       	brne	.+2      	; 0x15dc <TIMER_init+0x6>
    15da:	78 c0       	rjmp	.+240    	; 0x16cc <TIMER_init+0xf6>
    15dc:	fc 01       	movw	r30, r24
    15de:	20 81       	ld	r18, Z
    15e0:	23 30       	cpi	r18, 0x03	; 3
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <TIMER_init+0x10>
    15e4:	75 c0       	rjmp	.+234    	; 0x16d0 <TIMER_init+0xfa>
    15e6:	31 81       	ldd	r19, Z+1	; 0x01
    15e8:	3a 30       	cpi	r19, 0x0A	; 10
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <TIMER_init+0x18>
    15ec:	73 c0       	rjmp	.+230    	; 0x16d4 <TIMER_init+0xfe>
    15ee:	21 30       	cpi	r18, 0x01	; 1
    15f0:	19 f1       	breq	.+70     	; 0x1638 <TIMER_init+0x62>
    15f2:	20 f0       	brcs	.+8      	; 0x15fc <TIMER_init+0x26>
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	09 f4       	brne	.+2      	; 0x15fa <TIMER_init+0x24>
    15f8:	50 c0       	rjmp	.+160    	; 0x169a <TIMER_init+0xc4>
    15fa:	6e c0       	rjmp	.+220    	; 0x16d8 <TIMER_init+0x102>
    15fc:	12 be       	out	0x32, r1	; 50
    15fe:	13 be       	out	0x33, r1	; 51
    1600:	1c be       	out	0x3c, r1	; 60
    1602:	fc 01       	movw	r30, r24
    1604:	22 81       	ldd	r18, Z+2	; 0x02
    1606:	22 bf       	out	0x32, r18	; 50
    1608:	23 b7       	in	r18, 0x33	; 51
    160a:	20 68       	ori	r18, 0x80	; 128
    160c:	23 bf       	out	0x33, r18	; 51
    160e:	23 b7       	in	r18, 0x33	; 51
    1610:	2f 7b       	andi	r18, 0xBF	; 191
    1612:	23 bf       	out	0x33, r18	; 51
    1614:	23 b7       	in	r18, 0x33	; 51
    1616:	27 7f       	andi	r18, 0xF7	; 247
    1618:	23 bf       	out	0x33, r18	; 51
    161a:	23 b7       	in	r18, 0x33	; 51
    161c:	2f 7e       	andi	r18, 0xEF	; 239
    161e:	23 bf       	out	0x33, r18	; 51
    1620:	23 b7       	in	r18, 0x33	; 51
    1622:	2f 7d       	andi	r18, 0xDF	; 223
    1624:	23 bf       	out	0x33, r18	; 51
    1626:	84 81       	ldd	r24, Z+4	; 0x04
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	09 f0       	breq	.+2      	; 0x162e <TIMER_init+0x58>
    162c:	57 c0       	rjmp	.+174    	; 0x16dc <TIMER_init+0x106>
    162e:	89 b7       	in	r24, 0x39	; 57
    1630:	81 60       	ori	r24, 0x01	; 1
    1632:	89 bf       	out	0x39, r24	; 57
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
    1638:	1c bc       	out	0x2c, r1	; 44
    163a:	1d bc       	out	0x2d, r1	; 45
    163c:	1f bc       	out	0x2f, r1	; 47
    163e:	1e bc       	out	0x2e, r1	; 46
    1640:	1b bc       	out	0x2b, r1	; 43
    1642:	1a bc       	out	0x2a, r1	; 42
    1644:	fc 01       	movw	r30, r24
    1646:	22 81       	ldd	r18, Z+2	; 0x02
    1648:	33 81       	ldd	r19, Z+3	; 0x03
    164a:	3d bd       	out	0x2d, r19	; 45
    164c:	2c bd       	out	0x2c, r18	; 44
    164e:	2f b5       	in	r18, 0x2f	; 47
    1650:	28 60       	ori	r18, 0x08	; 8
    1652:	2f bd       	out	0x2f, r18	; 47
    1654:	2f b5       	in	r18, 0x2f	; 47
    1656:	24 60       	ori	r18, 0x04	; 4
    1658:	2f bd       	out	0x2f, r18	; 47
    165a:	2f b5       	in	r18, 0x2f	; 47
    165c:	2e 7f       	andi	r18, 0xFE	; 254
    165e:	2f bd       	out	0x2f, r18	; 47
    1660:	2f b5       	in	r18, 0x2f	; 47
    1662:	2d 7f       	andi	r18, 0xFD	; 253
    1664:	2f bd       	out	0x2f, r18	; 47
    1666:	2e b5       	in	r18, 0x2e	; 46
    1668:	2f 7e       	andi	r18, 0xEF	; 239
    166a:	2e bd       	out	0x2e, r18	; 46
    166c:	2e b5       	in	r18, 0x2e	; 46
    166e:	27 7f       	andi	r18, 0xF7	; 247
    1670:	2e bd       	out	0x2e, r18	; 46
    1672:	2f b5       	in	r18, 0x2f	; 47
    1674:	2f 7b       	andi	r18, 0xBF	; 191
    1676:	2f bd       	out	0x2f, r18	; 47
    1678:	2f b5       	in	r18, 0x2f	; 47
    167a:	2f 77       	andi	r18, 0x7F	; 127
    167c:	2f bd       	out	0x2f, r18	; 47
    167e:	2f b5       	in	r18, 0x2f	; 47
    1680:	2f 7e       	andi	r18, 0xEF	; 239
    1682:	2f bd       	out	0x2f, r18	; 47
    1684:	2f b5       	in	r18, 0x2f	; 47
    1686:	2f 7d       	andi	r18, 0xDF	; 223
    1688:	2f bd       	out	0x2f, r18	; 47
    168a:	84 81       	ldd	r24, Z+4	; 0x04
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	41 f5       	brne	.+80     	; 0x16e0 <TIMER_init+0x10a>
    1690:	89 b7       	in	r24, 0x39	; 57
    1692:	84 60       	ori	r24, 0x04	; 4
    1694:	89 bf       	out	0x39, r24	; 57
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	08 95       	ret
    169a:	14 bc       	out	0x24, r1	; 36
    169c:	15 bc       	out	0x25, r1	; 37
    169e:	13 bc       	out	0x23, r1	; 35
    16a0:	14 bc       	out	0x24, r1	; 36
    16a2:	25 b5       	in	r18, 0x25	; 37
    16a4:	2f 7b       	andi	r18, 0xBF	; 191
    16a6:	25 bd       	out	0x25, r18	; 37
    16a8:	25 b5       	in	r18, 0x25	; 37
    16aa:	27 7f       	andi	r18, 0xF7	; 247
    16ac:	25 bd       	out	0x25, r18	; 37
    16ae:	25 b5       	in	r18, 0x25	; 37
    16b0:	2f 7e       	andi	r18, 0xEF	; 239
    16b2:	25 bd       	out	0x25, r18	; 37
    16b4:	25 b5       	in	r18, 0x25	; 37
    16b6:	2f 7d       	andi	r18, 0xDF	; 223
    16b8:	25 bd       	out	0x25, r18	; 37
    16ba:	fc 01       	movw	r30, r24
    16bc:	84 81       	ldd	r24, Z+4	; 0x04
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	89 f4       	brne	.+34     	; 0x16e4 <TIMER_init+0x10e>
    16c2:	89 b7       	in	r24, 0x39	; 57
    16c4:	80 64       	ori	r24, 0x40	; 64
    16c6:	89 bf       	out	0x39, r24	; 57
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	08 95       	ret
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	08 95       	ret
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	08 95       	ret
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	08 95       	ret
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	08 95       	ret
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	08 95       	ret

000016e8 <TIMER_start>:
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	09 f4       	brne	.+2      	; 0x16ee <TIMER_start+0x6>
    16ec:	3b c1       	rjmp	.+630    	; 0x1964 <TIMER_start+0x27c>
    16ee:	dc 01       	movw	r26, r24
    16f0:	2c 91       	ld	r18, X
    16f2:	23 30       	cpi	r18, 0x03	; 3
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <TIMER_start+0x10>
    16f6:	38 c1       	rjmp	.+624    	; 0x1968 <TIMER_start+0x280>
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	ec 91       	ld	r30, X
    16fc:	ea 30       	cpi	r30, 0x0A	; 10
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <TIMER_start+0x1a>
    1700:	35 c1       	rjmp	.+618    	; 0x196c <TIMER_start+0x284>
    1702:	21 30       	cpi	r18, 0x01	; 1
    1704:	09 f4       	brne	.+2      	; 0x1708 <TIMER_start+0x20>
    1706:	68 c0       	rjmp	.+208    	; 0x17d8 <TIMER_start+0xf0>
    1708:	20 f0       	brcs	.+8      	; 0x1712 <TIMER_start+0x2a>
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	09 f4       	brne	.+2      	; 0x1710 <TIMER_start+0x28>
    170e:	c7 c0       	rjmp	.+398    	; 0x189e <TIMER_start+0x1b6>
    1710:	2f c1       	rjmp	.+606    	; 0x1970 <TIMER_start+0x288>
    1712:	8e 2f       	mov	r24, r30
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	8a 30       	cpi	r24, 0x0A	; 10
    1718:	91 05       	cpc	r25, r1
    171a:	08 f0       	brcs	.+2      	; 0x171e <TIMER_start+0x36>
    171c:	2b c1       	rjmp	.+598    	; 0x1974 <TIMER_start+0x28c>
    171e:	fc 01       	movw	r30, r24
    1720:	e6 5d       	subi	r30, 0xD6	; 214
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__tablejump2__>
    1728:	83 b7       	in	r24, 0x33	; 51
    172a:	8e 7f       	andi	r24, 0xFE	; 254
    172c:	83 bf       	out	0x33, r24	; 51
    172e:	83 b7       	in	r24, 0x33	; 51
    1730:	8d 7f       	andi	r24, 0xFD	; 253
    1732:	83 bf       	out	0x33, r24	; 51
    1734:	83 b7       	in	r24, 0x33	; 51
    1736:	8b 7f       	andi	r24, 0xFB	; 251
    1738:	83 bf       	out	0x33, r24	; 51
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	08 95       	ret
    173e:	83 b7       	in	r24, 0x33	; 51
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	83 bf       	out	0x33, r24	; 51
    1744:	83 b7       	in	r24, 0x33	; 51
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	83 bf       	out	0x33, r24	; 51
    174a:	83 b7       	in	r24, 0x33	; 51
    174c:	8b 7f       	andi	r24, 0xFB	; 251
    174e:	83 bf       	out	0x33, r24	; 51
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
    1754:	83 b7       	in	r24, 0x33	; 51
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	83 bf       	out	0x33, r24	; 51
    175a:	83 b7       	in	r24, 0x33	; 51
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	83 bf       	out	0x33, r24	; 51
    1760:	83 b7       	in	r24, 0x33	; 51
    1762:	8b 7f       	andi	r24, 0xFB	; 251
    1764:	83 bf       	out	0x33, r24	; 51
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	08 95       	ret
    176a:	83 b7       	in	r24, 0x33	; 51
    176c:	81 60       	ori	r24, 0x01	; 1
    176e:	83 bf       	out	0x33, r24	; 51
    1770:	83 b7       	in	r24, 0x33	; 51
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	83 bf       	out	0x33, r24	; 51
    1776:	83 b7       	in	r24, 0x33	; 51
    1778:	8b 7f       	andi	r24, 0xFB	; 251
    177a:	83 bf       	out	0x33, r24	; 51
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	08 95       	ret
    1780:	83 b7       	in	r24, 0x33	; 51
    1782:	8e 7f       	andi	r24, 0xFE	; 254
    1784:	83 bf       	out	0x33, r24	; 51
    1786:	83 b7       	in	r24, 0x33	; 51
    1788:	8d 7f       	andi	r24, 0xFD	; 253
    178a:	83 bf       	out	0x33, r24	; 51
    178c:	83 b7       	in	r24, 0x33	; 51
    178e:	84 60       	ori	r24, 0x04	; 4
    1790:	83 bf       	out	0x33, r24	; 51
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	08 95       	ret
    1796:	83 b7       	in	r24, 0x33	; 51
    1798:	81 60       	ori	r24, 0x01	; 1
    179a:	83 bf       	out	0x33, r24	; 51
    179c:	83 b7       	in	r24, 0x33	; 51
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	83 bf       	out	0x33, r24	; 51
    17a2:	83 b7       	in	r24, 0x33	; 51
    17a4:	84 60       	ori	r24, 0x04	; 4
    17a6:	83 bf       	out	0x33, r24	; 51
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret
    17ac:	83 b7       	in	r24, 0x33	; 51
    17ae:	8e 7f       	andi	r24, 0xFE	; 254
    17b0:	83 bf       	out	0x33, r24	; 51
    17b2:	83 b7       	in	r24, 0x33	; 51
    17b4:	82 60       	ori	r24, 0x02	; 2
    17b6:	83 bf       	out	0x33, r24	; 51
    17b8:	83 b7       	in	r24, 0x33	; 51
    17ba:	84 60       	ori	r24, 0x04	; 4
    17bc:	83 bf       	out	0x33, r24	; 51
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
    17c2:	83 b7       	in	r24, 0x33	; 51
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	83 bf       	out	0x33, r24	; 51
    17c8:	83 b7       	in	r24, 0x33	; 51
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	83 bf       	out	0x33, r24	; 51
    17ce:	83 b7       	in	r24, 0x33	; 51
    17d0:	84 60       	ori	r24, 0x04	; 4
    17d2:	83 bf       	out	0x33, r24	; 51
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	08 95       	ret
    17d8:	8e 2f       	mov	r24, r30
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	8a 30       	cpi	r24, 0x0A	; 10
    17de:	91 05       	cpc	r25, r1
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <TIMER_start+0xfc>
    17e2:	ca c0       	rjmp	.+404    	; 0x1978 <TIMER_start+0x290>
    17e4:	fc 01       	movw	r30, r24
    17e6:	ec 5c       	subi	r30, 0xCC	; 204
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__tablejump2__>
    17ee:	8e b5       	in	r24, 0x2e	; 46
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	8e bd       	out	0x2e, r24	; 46
    17f4:	8e b5       	in	r24, 0x2e	; 46
    17f6:	8d 7f       	andi	r24, 0xFD	; 253
    17f8:	8e bd       	out	0x2e, r24	; 46
    17fa:	8e b5       	in	r24, 0x2e	; 46
    17fc:	8b 7f       	andi	r24, 0xFB	; 251
    17fe:	8e bd       	out	0x2e, r24	; 46
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	08 95       	ret
    1804:	8e b5       	in	r24, 0x2e	; 46
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	8e bd       	out	0x2e, r24	; 46
    180a:	8e b5       	in	r24, 0x2e	; 46
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	8e bd       	out	0x2e, r24	; 46
    1810:	8e b5       	in	r24, 0x2e	; 46
    1812:	8b 7f       	andi	r24, 0xFB	; 251
    1814:	8e bd       	out	0x2e, r24	; 46
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	08 95       	ret
    181a:	8e b5       	in	r24, 0x2e	; 46
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	8e bd       	out	0x2e, r24	; 46
    1820:	8e b5       	in	r24, 0x2e	; 46
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	8e bd       	out	0x2e, r24	; 46
    1826:	8e b5       	in	r24, 0x2e	; 46
    1828:	8b 7f       	andi	r24, 0xFB	; 251
    182a:	8e bd       	out	0x2e, r24	; 46
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	08 95       	ret
    1830:	8e b5       	in	r24, 0x2e	; 46
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	8e bd       	out	0x2e, r24	; 46
    1836:	8e b5       	in	r24, 0x2e	; 46
    1838:	82 60       	ori	r24, 0x02	; 2
    183a:	8e bd       	out	0x2e, r24	; 46
    183c:	8e b5       	in	r24, 0x2e	; 46
    183e:	8b 7f       	andi	r24, 0xFB	; 251
    1840:	8e bd       	out	0x2e, r24	; 46
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	08 95       	ret
    1846:	8e b5       	in	r24, 0x2e	; 46
    1848:	8e 7f       	andi	r24, 0xFE	; 254
    184a:	8e bd       	out	0x2e, r24	; 46
    184c:	8e b5       	in	r24, 0x2e	; 46
    184e:	8d 7f       	andi	r24, 0xFD	; 253
    1850:	8e bd       	out	0x2e, r24	; 46
    1852:	8e b5       	in	r24, 0x2e	; 46
    1854:	84 60       	ori	r24, 0x04	; 4
    1856:	8e bd       	out	0x2e, r24	; 46
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	08 95       	ret
    185c:	8e b5       	in	r24, 0x2e	; 46
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	8e bd       	out	0x2e, r24	; 46
    1862:	8e b5       	in	r24, 0x2e	; 46
    1864:	8d 7f       	andi	r24, 0xFD	; 253
    1866:	8e bd       	out	0x2e, r24	; 46
    1868:	8e b5       	in	r24, 0x2e	; 46
    186a:	84 60       	ori	r24, 0x04	; 4
    186c:	8e bd       	out	0x2e, r24	; 46
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret
    1872:	8e b5       	in	r24, 0x2e	; 46
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	8e bd       	out	0x2e, r24	; 46
    1878:	8e b5       	in	r24, 0x2e	; 46
    187a:	82 60       	ori	r24, 0x02	; 2
    187c:	8e bd       	out	0x2e, r24	; 46
    187e:	8e b5       	in	r24, 0x2e	; 46
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	8e bd       	out	0x2e, r24	; 46
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	08 95       	ret
    1888:	8e b5       	in	r24, 0x2e	; 46
    188a:	81 60       	ori	r24, 0x01	; 1
    188c:	8e bd       	out	0x2e, r24	; 46
    188e:	8e b5       	in	r24, 0x2e	; 46
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	8e bd       	out	0x2e, r24	; 46
    1894:	8e b5       	in	r24, 0x2e	; 46
    1896:	84 60       	ori	r24, 0x04	; 4
    1898:	8e bd       	out	0x2e, r24	; 46
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	08 95       	ret
    189e:	8e 2f       	mov	r24, r30
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	91 05       	cpc	r25, r1
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <TIMER_start+0x1c2>
    18a8:	69 c0       	rjmp	.+210    	; 0x197c <TIMER_start+0x294>
    18aa:	fc 01       	movw	r30, r24
    18ac:	e2 5c       	subi	r30, 0xC2	; 194
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__tablejump2__>
    18b4:	85 b5       	in	r24, 0x25	; 37
    18b6:	8b 7f       	andi	r24, 0xFB	; 251
    18b8:	85 bd       	out	0x25, r24	; 37
    18ba:	85 b5       	in	r24, 0x25	; 37
    18bc:	8d 7f       	andi	r24, 0xFD	; 253
    18be:	85 bd       	out	0x25, r24	; 37
    18c0:	85 b5       	in	r24, 0x25	; 37
    18c2:	8e 7f       	andi	r24, 0xFE	; 254
    18c4:	85 bd       	out	0x25, r24	; 37
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret
    18ca:	85 b5       	in	r24, 0x25	; 37
    18cc:	84 60       	ori	r24, 0x04	; 4
    18ce:	85 bd       	out	0x25, r24	; 37
    18d0:	85 b5       	in	r24, 0x25	; 37
    18d2:	8d 7f       	andi	r24, 0xFD	; 253
    18d4:	85 bd       	out	0x25, r24	; 37
    18d6:	85 b5       	in	r24, 0x25	; 37
    18d8:	8e 7f       	andi	r24, 0xFE	; 254
    18da:	85 bd       	out	0x25, r24	; 37
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	08 95       	ret
    18e0:	85 b5       	in	r24, 0x25	; 37
    18e2:	8b 7f       	andi	r24, 0xFB	; 251
    18e4:	85 bd       	out	0x25, r24	; 37
    18e6:	85 b5       	in	r24, 0x25	; 37
    18e8:	82 60       	ori	r24, 0x02	; 2
    18ea:	85 bd       	out	0x25, r24	; 37
    18ec:	85 b5       	in	r24, 0x25	; 37
    18ee:	8e 7f       	andi	r24, 0xFE	; 254
    18f0:	85 bd       	out	0x25, r24	; 37
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	08 95       	ret
    18f6:	85 b5       	in	r24, 0x25	; 37
    18f8:	84 60       	ori	r24, 0x04	; 4
    18fa:	85 bd       	out	0x25, r24	; 37
    18fc:	85 b5       	in	r24, 0x25	; 37
    18fe:	82 60       	ori	r24, 0x02	; 2
    1900:	85 bd       	out	0x25, r24	; 37
    1902:	85 b5       	in	r24, 0x25	; 37
    1904:	8e 7f       	andi	r24, 0xFE	; 254
    1906:	85 bd       	out	0x25, r24	; 37
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	08 95       	ret
    190c:	85 b5       	in	r24, 0x25	; 37
    190e:	8b 7f       	andi	r24, 0xFB	; 251
    1910:	85 bd       	out	0x25, r24	; 37
    1912:	85 b5       	in	r24, 0x25	; 37
    1914:	8d 7f       	andi	r24, 0xFD	; 253
    1916:	85 bd       	out	0x25, r24	; 37
    1918:	85 b5       	in	r24, 0x25	; 37
    191a:	81 60       	ori	r24, 0x01	; 1
    191c:	85 bd       	out	0x25, r24	; 37
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	08 95       	ret
    1922:	85 b5       	in	r24, 0x25	; 37
    1924:	84 60       	ori	r24, 0x04	; 4
    1926:	85 bd       	out	0x25, r24	; 37
    1928:	85 b5       	in	r24, 0x25	; 37
    192a:	8d 7f       	andi	r24, 0xFD	; 253
    192c:	85 bd       	out	0x25, r24	; 37
    192e:	85 b5       	in	r24, 0x25	; 37
    1930:	81 60       	ori	r24, 0x01	; 1
    1932:	85 bd       	out	0x25, r24	; 37
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	08 95       	ret
    1938:	85 b5       	in	r24, 0x25	; 37
    193a:	8b 7f       	andi	r24, 0xFB	; 251
    193c:	85 bd       	out	0x25, r24	; 37
    193e:	85 b5       	in	r24, 0x25	; 37
    1940:	82 60       	ori	r24, 0x02	; 2
    1942:	85 bd       	out	0x25, r24	; 37
    1944:	85 b5       	in	r24, 0x25	; 37
    1946:	81 60       	ori	r24, 0x01	; 1
    1948:	85 bd       	out	0x25, r24	; 37
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
    194e:	85 b5       	in	r24, 0x25	; 37
    1950:	84 60       	ori	r24, 0x04	; 4
    1952:	85 bd       	out	0x25, r24	; 37
    1954:	85 b5       	in	r24, 0x25	; 37
    1956:	82 60       	ori	r24, 0x02	; 2
    1958:	85 bd       	out	0x25, r24	; 37
    195a:	85 b5       	in	r24, 0x25	; 37
    195c:	81 60       	ori	r24, 0x01	; 1
    195e:	85 bd       	out	0x25, r24	; 37
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	08 95       	ret
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	08 95       	ret
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	08 95       	ret
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	08 95       	ret
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	08 95       	ret
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	08 95       	ret
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	08 95       	ret

00001980 <TIMER_stop>:
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	38 f5       	brcc	.+78     	; 0x19d2 <TIMER_stop+0x52>
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	79 f0       	breq	.+30     	; 0x19a6 <TIMER_stop+0x26>
    1988:	18 f0       	brcs	.+6      	; 0x1990 <TIMER_stop+0x10>
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	b9 f0       	breq	.+46     	; 0x19bc <TIMER_stop+0x3c>
    198e:	23 c0       	rjmp	.+70     	; 0x19d6 <TIMER_stop+0x56>
    1990:	83 b7       	in	r24, 0x33	; 51
    1992:	8e 7f       	andi	r24, 0xFE	; 254
    1994:	83 bf       	out	0x33, r24	; 51
    1996:	83 b7       	in	r24, 0x33	; 51
    1998:	8d 7f       	andi	r24, 0xFD	; 253
    199a:	83 bf       	out	0x33, r24	; 51
    199c:	83 b7       	in	r24, 0x33	; 51
    199e:	8b 7f       	andi	r24, 0xFB	; 251
    19a0:	83 bf       	out	0x33, r24	; 51
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	08 95       	ret
    19a6:	8e b5       	in	r24, 0x2e	; 46
    19a8:	8e 7f       	andi	r24, 0xFE	; 254
    19aa:	8e bd       	out	0x2e, r24	; 46
    19ac:	8e b5       	in	r24, 0x2e	; 46
    19ae:	8d 7f       	andi	r24, 0xFD	; 253
    19b0:	8e bd       	out	0x2e, r24	; 46
    19b2:	8e b5       	in	r24, 0x2e	; 46
    19b4:	8b 7f       	andi	r24, 0xFB	; 251
    19b6:	8e bd       	out	0x2e, r24	; 46
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	08 95       	ret
    19bc:	85 b5       	in	r24, 0x25	; 37
    19be:	8b 7f       	andi	r24, 0xFB	; 251
    19c0:	85 bd       	out	0x25, r24	; 37
    19c2:	85 b5       	in	r24, 0x25	; 37
    19c4:	8d 7f       	andi	r24, 0xFD	; 253
    19c6:	85 bd       	out	0x25, r24	; 37
    19c8:	85 b5       	in	r24, 0x25	; 37
    19ca:	8e 7f       	andi	r24, 0xFE	; 254
    19cc:	85 bd       	out	0x25, r24	; 37
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	08 95       	ret
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	08 95       	ret
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	08 95       	ret

000019da <TIMER_reset>:
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	f1 f0       	breq	.+60     	; 0x1a1a <TIMER_reset+0x40>
    19de:	fc 01       	movw	r30, r24
    19e0:	20 81       	ld	r18, Z
    19e2:	23 30       	cpi	r18, 0x03	; 3
    19e4:	e0 f4       	brcc	.+56     	; 0x1a1e <TIMER_reset+0x44>
    19e6:	31 81       	ldd	r19, Z+1	; 0x01
    19e8:	3a 30       	cpi	r19, 0x0A	; 10
    19ea:	d8 f4       	brcc	.+54     	; 0x1a22 <TIMER_reset+0x48>
    19ec:	21 30       	cpi	r18, 0x01	; 1
    19ee:	49 f0       	breq	.+18     	; 0x1a02 <TIMER_reset+0x28>
    19f0:	18 f0       	brcs	.+6      	; 0x19f8 <TIMER_reset+0x1e>
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	69 f0       	breq	.+26     	; 0x1a10 <TIMER_reset+0x36>
    19f6:	17 c0       	rjmp	.+46     	; 0x1a26 <TIMER_reset+0x4c>
    19f8:	fc 01       	movw	r30, r24
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	82 bf       	out	0x32, r24	; 50
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 95       	ret
    1a02:	fc 01       	movw	r30, r24
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	9d bd       	out	0x2d, r25	; 45
    1a0a:	8c bd       	out	0x2c, r24	; 44
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	08 95       	ret
    1a10:	fc 01       	movw	r30, r24
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	84 bd       	out	0x24, r24	; 36
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	08 95       	ret
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	08 95       	ret
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	08 95       	ret
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	08 95       	ret
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	08 95       	ret

00001a2a <TIMER_setCallBack>:
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	a9 f0       	breq	.+42     	; 0x1a58 <TIMER_setCallBack+0x2e>
    1a2e:	63 30       	cpi	r22, 0x03	; 3
    1a30:	a8 f4       	brcc	.+42     	; 0x1a5c <TIMER_setCallBack+0x32>
    1a32:	61 30       	cpi	r22, 0x01	; 1
    1a34:	59 f0       	breq	.+22     	; 0x1a4c <TIMER_setCallBack+0x22>
    1a36:	20 f0       	brcs	.+8      	; 0x1a40 <TIMER_setCallBack+0x16>
    1a38:	62 30       	cpi	r22, 0x02	; 2
    1a3a:	91 f0       	breq	.+36     	; 0x1a60 <TIMER_setCallBack+0x36>
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	08 95       	ret
    1a40:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <sg_Timer0_callBackPtr+0x1>
    1a44:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sg_Timer0_callBackPtr>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	08 95       	ret
    1a4c:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <sg_Timer1_callBackPtr+0x1>
    1a50:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <sg_Timer1_callBackPtr>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	08 95       	ret
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	08 95       	ret
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	08 95       	ret
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	08 95       	ret

00001a64 <enuTimer2_init>:
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	48 f5       	brcc	.+82     	; 0x1aba <enuTimer2_init+0x56>
    1a68:	14 bc       	out	0x24, r1	; 36
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	71 f0       	breq	.+28     	; 0x1a8a <enuTimer2_init+0x26>
    1a6e:	28 f0       	brcs	.+10     	; 0x1a7a <enuTimer2_init+0x16>
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	99 f0       	breq	.+38     	; 0x1a9a <enuTimer2_init+0x36>
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	c9 f0       	breq	.+50     	; 0x1aaa <enuTimer2_init+0x46>
    1a78:	22 c0       	rjmp	.+68     	; 0x1abe <enuTimer2_init+0x5a>
    1a7a:	85 b5       	in	r24, 0x25	; 37
    1a7c:	87 7f       	andi	r24, 0xF7	; 247
    1a7e:	85 bd       	out	0x25, r24	; 37
    1a80:	85 b5       	in	r24, 0x25	; 37
    1a82:	8f 7b       	andi	r24, 0xBF	; 191
    1a84:	85 bd       	out	0x25, r24	; 37
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	08 95       	ret
    1a8a:	85 b5       	in	r24, 0x25	; 37
    1a8c:	87 7f       	andi	r24, 0xF7	; 247
    1a8e:	85 bd       	out	0x25, r24	; 37
    1a90:	85 b5       	in	r24, 0x25	; 37
    1a92:	80 64       	ori	r24, 0x40	; 64
    1a94:	85 bd       	out	0x25, r24	; 37
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	08 95       	ret
    1a9a:	85 b5       	in	r24, 0x25	; 37
    1a9c:	88 60       	ori	r24, 0x08	; 8
    1a9e:	85 bd       	out	0x25, r24	; 37
    1aa0:	85 b5       	in	r24, 0x25	; 37
    1aa2:	8f 7b       	andi	r24, 0xBF	; 191
    1aa4:	85 bd       	out	0x25, r24	; 37
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	08 95       	ret
    1aaa:	85 b5       	in	r24, 0x25	; 37
    1aac:	88 60       	ori	r24, 0x08	; 8
    1aae:	85 bd       	out	0x25, r24	; 37
    1ab0:	85 b5       	in	r24, 0x25	; 37
    1ab2:	80 64       	ori	r24, 0x40	; 64
    1ab4:	85 bd       	out	0x25, r24	; 37
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	08 95       	ret
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	08 95       	ret
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	08 95       	ret

00001ac2 <u8Timer2_setPrescallar>:
    1ac2:	88 30       	cpi	r24, 0x08	; 8
    1ac4:	70 f4       	brcc	.+28     	; 0x1ae2 <u8Timer2_setPrescallar+0x20>
    1ac6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <global_prescaller>
    1aca:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <global_timerStatus>
    1ace:	91 30       	cpi	r25, 0x01	; 1
    1ad0:	51 f4       	brne	.+20     	; 0x1ae6 <u8Timer2_setPrescallar+0x24>
    1ad2:	95 b5       	in	r25, 0x25	; 37
    1ad4:	98 7f       	andi	r25, 0xF8	; 248
    1ad6:	89 2b       	or	r24, r25
    1ad8:	95 b5       	in	r25, 0x25	; 37
    1ada:	89 2b       	or	r24, r25
    1adc:	85 bd       	out	0x25, r24	; 37
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	08 95       	ret
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	08 95       	ret

00001aea <vidTimer2_OvfIrqEnable>:
    1aea:	88 b7       	in	r24, 0x38	; 56
    1aec:	80 64       	ori	r24, 0x40	; 64
    1aee:	88 bf       	out	0x38, r24	; 56
    1af0:	89 b7       	in	r24, 0x39	; 57
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	89 bf       	out	0x39, r24	; 57
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	08 95       	ret

00001afa <vidTimer2_OvfIrqDisable>:
    1afa:	89 b7       	in	r24, 0x39	; 57
    1afc:	8f 7b       	andi	r24, 0xBF	; 191
    1afe:	89 bf       	out	0x39, r24	; 57
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	08 95       	ret

00001b04 <vidTimer2_start>:
    1b04:	95 b5       	in	r25, 0x25	; 37
    1b06:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <global_prescaller>
    1b0a:	89 2b       	or	r24, r25
    1b0c:	85 bd       	out	0x25, r24	; 37
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <global_timerStatus>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	08 95       	ret

00001b18 <vidTimer2_stop>:
    1b18:	85 b5       	in	r24, 0x25	; 37
    1b1a:	88 7f       	andi	r24, 0xF8	; 248
    1b1c:	85 bd       	out	0x25, r24	; 37
    1b1e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <global_timerStatus>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	08 95       	ret

00001b26 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1b2a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <globalCallFunc+0x1>
    1b2e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <globalCallFunc>
    1b32:	08 95       	ret

00001b34 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    1b34:	14 bc       	out	0x24, r1	; 36
    1b36:	08 95       	ret

00001b38 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    1b38:	84 b5       	in	r24, 0x24	; 36
}
    1b3a:	08 95       	ret

00001b3c <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    1b3c:	8f b7       	in	r24, 0x3f	; 63
    1b3e:	80 68       	ori	r24, 0x80	; 128
    1b40:	8f bf       	out	0x3f, r24	; 63
    1b42:	08 95       	ret

00001b44 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	2f 93       	push	r18
    1b50:	3f 93       	push	r19
    1b52:	4f 93       	push	r20
    1b54:	5f 93       	push	r21
    1b56:	6f 93       	push	r22
    1b58:	7f 93       	push	r23
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	af 93       	push	r26
    1b60:	bf 93       	push	r27
    1b62:	ef 93       	push	r30
    1b64:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    1b66:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter.1817>
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter.1817>
	if(counter == global_ovf)
    1b70:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <global_ovf>
    1b74:	89 13       	cpse	r24, r25
    1b76:	09 c0       	rjmp	.+18     	; 0x1b8a <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1b78:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <globalCallFunc>
    1b7c:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <globalCallFunc+0x1>
    1b80:	30 97       	sbiw	r30, 0x00	; 0
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <__vector_5+0x46>
		{
			counter = 0;
    1b84:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter.1817>

			globalCallFunc();
    1b88:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <__cmpsf2>:
    1bac:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_cmp>
    1bb0:	08 f4       	brcc	.+2      	; 0x1bb4 <__cmpsf2+0x8>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	08 95       	ret

00001bb6 <__divsf3>:
    1bb6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divsf3x>
    1bba:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_round>
    1bbe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__fp_pscB>
    1bc2:	58 f0       	brcs	.+22     	; 0x1bda <__divsf3+0x24>
    1bc4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__fp_pscA>
    1bc8:	40 f0       	brcs	.+16     	; 0x1bda <__divsf3+0x24>
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <__divsf3+0x20>
    1bcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bce:	29 f0       	breq	.+10     	; 0x1bda <__divsf3+0x24>
    1bd0:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>
    1bd4:	51 11       	cpse	r21, r1
    1bd6:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>
    1bda:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_nan>

00001bde <__divsf3x>:
    1bde:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__fp_split3>
    1be2:	68 f3       	brcs	.-38     	; 0x1bbe <__divsf3+0x8>

00001be4 <__divsf3_pse>:
    1be4:	99 23       	and	r25, r25
    1be6:	b1 f3       	breq	.-20     	; 0x1bd4 <__divsf3+0x1e>
    1be8:	55 23       	and	r21, r21
    1bea:	91 f3       	breq	.-28     	; 0x1bd0 <__divsf3+0x1a>
    1bec:	95 1b       	sub	r25, r21
    1bee:	55 0b       	sbc	r21, r21
    1bf0:	bb 27       	eor	r27, r27
    1bf2:	aa 27       	eor	r26, r26
    1bf4:	62 17       	cp	r22, r18
    1bf6:	73 07       	cpc	r23, r19
    1bf8:	84 07       	cpc	r24, r20
    1bfa:	38 f0       	brcs	.+14     	; 0x1c0a <__divsf3_pse+0x26>
    1bfc:	9f 5f       	subi	r25, 0xFF	; 255
    1bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1c00:	22 0f       	add	r18, r18
    1c02:	33 1f       	adc	r19, r19
    1c04:	44 1f       	adc	r20, r20
    1c06:	aa 1f       	adc	r26, r26
    1c08:	a9 f3       	breq	.-22     	; 0x1bf4 <__divsf3_pse+0x10>
    1c0a:	35 d0       	rcall	.+106    	; 0x1c76 <__divsf3_pse+0x92>
    1c0c:	0e 2e       	mov	r0, r30
    1c0e:	3a f0       	brmi	.+14     	; 0x1c1e <__divsf3_pse+0x3a>
    1c10:	e0 e8       	ldi	r30, 0x80	; 128
    1c12:	32 d0       	rcall	.+100    	; 0x1c78 <__divsf3_pse+0x94>
    1c14:	91 50       	subi	r25, 0x01	; 1
    1c16:	50 40       	sbci	r21, 0x00	; 0
    1c18:	e6 95       	lsr	r30
    1c1a:	00 1c       	adc	r0, r0
    1c1c:	ca f7       	brpl	.-14     	; 0x1c10 <__divsf3_pse+0x2c>
    1c1e:	2b d0       	rcall	.+86     	; 0x1c76 <__divsf3_pse+0x92>
    1c20:	fe 2f       	mov	r31, r30
    1c22:	29 d0       	rcall	.+82     	; 0x1c76 <__divsf3_pse+0x92>
    1c24:	66 0f       	add	r22, r22
    1c26:	77 1f       	adc	r23, r23
    1c28:	88 1f       	adc	r24, r24
    1c2a:	bb 1f       	adc	r27, r27
    1c2c:	26 17       	cp	r18, r22
    1c2e:	37 07       	cpc	r19, r23
    1c30:	48 07       	cpc	r20, r24
    1c32:	ab 07       	cpc	r26, r27
    1c34:	b0 e8       	ldi	r27, 0x80	; 128
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <__divsf3_pse+0x56>
    1c38:	bb 0b       	sbc	r27, r27
    1c3a:	80 2d       	mov	r24, r0
    1c3c:	bf 01       	movw	r22, r30
    1c3e:	ff 27       	eor	r31, r31
    1c40:	93 58       	subi	r25, 0x83	; 131
    1c42:	5f 4f       	sbci	r21, 0xFF	; 255
    1c44:	3a f0       	brmi	.+14     	; 0x1c54 <__divsf3_pse+0x70>
    1c46:	9e 3f       	cpi	r25, 0xFE	; 254
    1c48:	51 05       	cpc	r21, r1
    1c4a:	78 f0       	brcs	.+30     	; 0x1c6a <__divsf3_pse+0x86>
    1c4c:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_inf>
    1c50:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__fp_szero>
    1c54:	5f 3f       	cpi	r21, 0xFF	; 255
    1c56:	e4 f3       	brlt	.-8      	; 0x1c50 <__divsf3_pse+0x6c>
    1c58:	98 3e       	cpi	r25, 0xE8	; 232
    1c5a:	d4 f3       	brlt	.-12     	; 0x1c50 <__divsf3_pse+0x6c>
    1c5c:	86 95       	lsr	r24
    1c5e:	77 95       	ror	r23
    1c60:	67 95       	ror	r22
    1c62:	b7 95       	ror	r27
    1c64:	f7 95       	ror	r31
    1c66:	9f 5f       	subi	r25, 0xFF	; 255
    1c68:	c9 f7       	brne	.-14     	; 0x1c5c <__divsf3_pse+0x78>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	91 1d       	adc	r25, r1
    1c6e:	96 95       	lsr	r25
    1c70:	87 95       	ror	r24
    1c72:	97 f9       	bld	r25, 7
    1c74:	08 95       	ret
    1c76:	e1 e0       	ldi	r30, 0x01	; 1
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	bb 1f       	adc	r27, r27
    1c80:	62 17       	cp	r22, r18
    1c82:	73 07       	cpc	r23, r19
    1c84:	84 07       	cpc	r24, r20
    1c86:	ba 07       	cpc	r27, r26
    1c88:	20 f0       	brcs	.+8      	; 0x1c92 <__divsf3_pse+0xae>
    1c8a:	62 1b       	sub	r22, r18
    1c8c:	73 0b       	sbc	r23, r19
    1c8e:	84 0b       	sbc	r24, r20
    1c90:	ba 0b       	sbc	r27, r26
    1c92:	ee 1f       	adc	r30, r30
    1c94:	88 f7       	brcc	.-30     	; 0x1c78 <__divsf3_pse+0x94>
    1c96:	e0 95       	com	r30
    1c98:	08 95       	ret

00001c9a <__fixunssfsi>:
    1c9a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fp_splitA>
    1c9e:	88 f0       	brcs	.+34     	; 0x1cc2 <__fixunssfsi+0x28>
    1ca0:	9f 57       	subi	r25, 0x7F	; 127
    1ca2:	98 f0       	brcs	.+38     	; 0x1cca <__fixunssfsi+0x30>
    1ca4:	b9 2f       	mov	r27, r25
    1ca6:	99 27       	eor	r25, r25
    1ca8:	b7 51       	subi	r27, 0x17	; 23
    1caa:	b0 f0       	brcs	.+44     	; 0x1cd8 <__fixunssfsi+0x3e>
    1cac:	e1 f0       	breq	.+56     	; 0x1ce6 <__fixunssfsi+0x4c>
    1cae:	66 0f       	add	r22, r22
    1cb0:	77 1f       	adc	r23, r23
    1cb2:	88 1f       	adc	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	1a f0       	brmi	.+6      	; 0x1cbe <__fixunssfsi+0x24>
    1cb8:	ba 95       	dec	r27
    1cba:	c9 f7       	brne	.-14     	; 0x1cae <__fixunssfsi+0x14>
    1cbc:	14 c0       	rjmp	.+40     	; 0x1ce6 <__fixunssfsi+0x4c>
    1cbe:	b1 30       	cpi	r27, 0x01	; 1
    1cc0:	91 f0       	breq	.+36     	; 0x1ce6 <__fixunssfsi+0x4c>
    1cc2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_zero>
    1cc6:	b1 e0       	ldi	r27, 0x01	; 1
    1cc8:	08 95       	ret
    1cca:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__fp_zero>
    1cce:	67 2f       	mov	r22, r23
    1cd0:	78 2f       	mov	r23, r24
    1cd2:	88 27       	eor	r24, r24
    1cd4:	b8 5f       	subi	r27, 0xF8	; 248
    1cd6:	39 f0       	breq	.+14     	; 0x1ce6 <__fixunssfsi+0x4c>
    1cd8:	b9 3f       	cpi	r27, 0xF9	; 249
    1cda:	cc f3       	brlt	.-14     	; 0x1cce <__fixunssfsi+0x34>
    1cdc:	86 95       	lsr	r24
    1cde:	77 95       	ror	r23
    1ce0:	67 95       	ror	r22
    1ce2:	b3 95       	inc	r27
    1ce4:	d9 f7       	brne	.-10     	; 0x1cdc <__fixunssfsi+0x42>
    1ce6:	3e f4       	brtc	.+14     	; 0x1cf6 <__fixunssfsi+0x5c>
    1ce8:	90 95       	com	r25
    1cea:	80 95       	com	r24
    1cec:	70 95       	com	r23
    1cee:	61 95       	neg	r22
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	08 95       	ret

00001cf8 <__floatunsisf>:
    1cf8:	e8 94       	clt
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <__floatsisf+0x12>

00001cfc <__floatsisf>:
    1cfc:	97 fb       	bst	r25, 7
    1cfe:	3e f4       	brtc	.+14     	; 0x1d0e <__floatsisf+0x12>
    1d00:	90 95       	com	r25
    1d02:	80 95       	com	r24
    1d04:	70 95       	com	r23
    1d06:	61 95       	neg	r22
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	99 23       	and	r25, r25
    1d10:	a9 f0       	breq	.+42     	; 0x1d3c <__floatsisf+0x40>
    1d12:	f9 2f       	mov	r31, r25
    1d14:	96 e9       	ldi	r25, 0x96	; 150
    1d16:	bb 27       	eor	r27, r27
    1d18:	93 95       	inc	r25
    1d1a:	f6 95       	lsr	r31
    1d1c:	87 95       	ror	r24
    1d1e:	77 95       	ror	r23
    1d20:	67 95       	ror	r22
    1d22:	b7 95       	ror	r27
    1d24:	f1 11       	cpse	r31, r1
    1d26:	f8 cf       	rjmp	.-16     	; 0x1d18 <__floatsisf+0x1c>
    1d28:	fa f4       	brpl	.+62     	; 0x1d68 <__floatsisf+0x6c>
    1d2a:	bb 0f       	add	r27, r27
    1d2c:	11 f4       	brne	.+4      	; 0x1d32 <__floatsisf+0x36>
    1d2e:	60 ff       	sbrs	r22, 0
    1d30:	1b c0       	rjmp	.+54     	; 0x1d68 <__floatsisf+0x6c>
    1d32:	6f 5f       	subi	r22, 0xFF	; 255
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	8f 4f       	sbci	r24, 0xFF	; 255
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	16 c0       	rjmp	.+44     	; 0x1d68 <__floatsisf+0x6c>
    1d3c:	88 23       	and	r24, r24
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <__floatsisf+0x48>
    1d40:	96 e9       	ldi	r25, 0x96	; 150
    1d42:	11 c0       	rjmp	.+34     	; 0x1d66 <__floatsisf+0x6a>
    1d44:	77 23       	and	r23, r23
    1d46:	21 f0       	breq	.+8      	; 0x1d50 <__floatsisf+0x54>
    1d48:	9e e8       	ldi	r25, 0x8E	; 142
    1d4a:	87 2f       	mov	r24, r23
    1d4c:	76 2f       	mov	r23, r22
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <__floatsisf+0x5e>
    1d50:	66 23       	and	r22, r22
    1d52:	71 f0       	breq	.+28     	; 0x1d70 <__floatsisf+0x74>
    1d54:	96 e8       	ldi	r25, 0x86	; 134
    1d56:	86 2f       	mov	r24, r22
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	2a f0       	brmi	.+10     	; 0x1d68 <__floatsisf+0x6c>
    1d5e:	9a 95       	dec	r25
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	da f7       	brpl	.-10     	; 0x1d5e <__floatsisf+0x62>
    1d68:	88 0f       	add	r24, r24
    1d6a:	96 95       	lsr	r25
    1d6c:	87 95       	ror	r24
    1d6e:	97 f9       	bld	r25, 7
    1d70:	08 95       	ret

00001d72 <__fp_cmp>:
    1d72:	99 0f       	add	r25, r25
    1d74:	00 08       	sbc	r0, r0
    1d76:	55 0f       	add	r21, r21
    1d78:	aa 0b       	sbc	r26, r26
    1d7a:	e0 e8       	ldi	r30, 0x80	; 128
    1d7c:	fe ef       	ldi	r31, 0xFE	; 254
    1d7e:	16 16       	cp	r1, r22
    1d80:	17 06       	cpc	r1, r23
    1d82:	e8 07       	cpc	r30, r24
    1d84:	f9 07       	cpc	r31, r25
    1d86:	c0 f0       	brcs	.+48     	; 0x1db8 <__fp_cmp+0x46>
    1d88:	12 16       	cp	r1, r18
    1d8a:	13 06       	cpc	r1, r19
    1d8c:	e4 07       	cpc	r30, r20
    1d8e:	f5 07       	cpc	r31, r21
    1d90:	98 f0       	brcs	.+38     	; 0x1db8 <__fp_cmp+0x46>
    1d92:	62 1b       	sub	r22, r18
    1d94:	73 0b       	sbc	r23, r19
    1d96:	84 0b       	sbc	r24, r20
    1d98:	95 0b       	sbc	r25, r21
    1d9a:	39 f4       	brne	.+14     	; 0x1daa <__fp_cmp+0x38>
    1d9c:	0a 26       	eor	r0, r26
    1d9e:	61 f0       	breq	.+24     	; 0x1db8 <__fp_cmp+0x46>
    1da0:	23 2b       	or	r18, r19
    1da2:	24 2b       	or	r18, r20
    1da4:	25 2b       	or	r18, r21
    1da6:	21 f4       	brne	.+8      	; 0x1db0 <__fp_cmp+0x3e>
    1da8:	08 95       	ret
    1daa:	0a 26       	eor	r0, r26
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <__fp_cmp+0x3e>
    1dae:	a1 40       	sbci	r26, 0x01	; 1
    1db0:	a6 95       	lsr	r26
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	81 1d       	adc	r24, r1
    1db6:	81 1d       	adc	r24, r1
    1db8:	08 95       	ret

00001dba <__fp_inf>:
    1dba:	97 f9       	bld	r25, 7
    1dbc:	9f 67       	ori	r25, 0x7F	; 127
    1dbe:	80 e8       	ldi	r24, 0x80	; 128
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	08 95       	ret

00001dc6 <__fp_nan>:
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
    1dc8:	80 ec       	ldi	r24, 0xC0	; 192
    1dca:	08 95       	ret

00001dcc <__fp_pscA>:
    1dcc:	00 24       	eor	r0, r0
    1dce:	0a 94       	dec	r0
    1dd0:	16 16       	cp	r1, r22
    1dd2:	17 06       	cpc	r1, r23
    1dd4:	18 06       	cpc	r1, r24
    1dd6:	09 06       	cpc	r0, r25
    1dd8:	08 95       	ret

00001dda <__fp_pscB>:
    1dda:	00 24       	eor	r0, r0
    1ddc:	0a 94       	dec	r0
    1dde:	12 16       	cp	r1, r18
    1de0:	13 06       	cpc	r1, r19
    1de2:	14 06       	cpc	r1, r20
    1de4:	05 06       	cpc	r0, r21
    1de6:	08 95       	ret

00001de8 <__fp_round>:
    1de8:	09 2e       	mov	r0, r25
    1dea:	03 94       	inc	r0
    1dec:	00 0c       	add	r0, r0
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <__fp_round+0xc>
    1df0:	88 23       	and	r24, r24
    1df2:	52 f0       	brmi	.+20     	; 0x1e08 <__fp_round+0x20>
    1df4:	bb 0f       	add	r27, r27
    1df6:	40 f4       	brcc	.+16     	; 0x1e08 <__fp_round+0x20>
    1df8:	bf 2b       	or	r27, r31
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__fp_round+0x18>
    1dfc:	60 ff       	sbrs	r22, 0
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <__fp_round+0x20>
    1e00:	6f 5f       	subi	r22, 0xFF	; 255
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	8f 4f       	sbci	r24, 0xFF	; 255
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	08 95       	ret

00001e0a <__fp_split3>:
    1e0a:	57 fd       	sbrc	r21, 7
    1e0c:	90 58       	subi	r25, 0x80	; 128
    1e0e:	44 0f       	add	r20, r20
    1e10:	55 1f       	adc	r21, r21
    1e12:	59 f0       	breq	.+22     	; 0x1e2a <__fp_splitA+0x10>
    1e14:	5f 3f       	cpi	r21, 0xFF	; 255
    1e16:	71 f0       	breq	.+28     	; 0x1e34 <__fp_splitA+0x1a>
    1e18:	47 95       	ror	r20

00001e1a <__fp_splitA>:
    1e1a:	88 0f       	add	r24, r24
    1e1c:	97 fb       	bst	r25, 7
    1e1e:	99 1f       	adc	r25, r25
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <__fp_splitA+0x20>
    1e22:	9f 3f       	cpi	r25, 0xFF	; 255
    1e24:	79 f0       	breq	.+30     	; 0x1e44 <__fp_splitA+0x2a>
    1e26:	87 95       	ror	r24
    1e28:	08 95       	ret
    1e2a:	12 16       	cp	r1, r18
    1e2c:	13 06       	cpc	r1, r19
    1e2e:	14 06       	cpc	r1, r20
    1e30:	55 1f       	adc	r21, r21
    1e32:	f2 cf       	rjmp	.-28     	; 0x1e18 <__fp_split3+0xe>
    1e34:	46 95       	lsr	r20
    1e36:	f1 df       	rcall	.-30     	; 0x1e1a <__fp_splitA>
    1e38:	08 c0       	rjmp	.+16     	; 0x1e4a <__fp_splitA+0x30>
    1e3a:	16 16       	cp	r1, r22
    1e3c:	17 06       	cpc	r1, r23
    1e3e:	18 06       	cpc	r1, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	f1 cf       	rjmp	.-30     	; 0x1e26 <__fp_splitA+0xc>
    1e44:	86 95       	lsr	r24
    1e46:	71 05       	cpc	r23, r1
    1e48:	61 05       	cpc	r22, r1
    1e4a:	08 94       	sec
    1e4c:	08 95       	ret

00001e4e <__fp_zero>:
    1e4e:	e8 94       	clt

00001e50 <__fp_szero>:
    1e50:	bb 27       	eor	r27, r27
    1e52:	66 27       	eor	r22, r22
    1e54:	77 27       	eor	r23, r23
    1e56:	cb 01       	movw	r24, r22
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret

00001e5c <__gesf2>:
    1e5c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_cmp>
    1e60:	08 f4       	brcc	.+2      	; 0x1e64 <__gesf2+0x8>
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	08 95       	ret

00001e66 <__divmodhi4>:
    1e66:	97 fb       	bst	r25, 7
    1e68:	07 2e       	mov	r0, r23
    1e6a:	16 f4       	brtc	.+4      	; 0x1e70 <__divmodhi4+0xa>
    1e6c:	00 94       	com	r0
    1e6e:	07 d0       	rcall	.+14     	; 0x1e7e <__divmodhi4_neg1>
    1e70:	77 fd       	sbrc	r23, 7
    1e72:	09 d0       	rcall	.+18     	; 0x1e86 <__divmodhi4_neg2>
    1e74:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__udivmodhi4>
    1e78:	07 fc       	sbrc	r0, 7
    1e7a:	05 d0       	rcall	.+10     	; 0x1e86 <__divmodhi4_neg2>
    1e7c:	3e f4       	brtc	.+14     	; 0x1e8c <__divmodhi4_exit>

00001e7e <__divmodhi4_neg1>:
    1e7e:	90 95       	com	r25
    1e80:	81 95       	neg	r24
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	08 95       	ret

00001e86 <__divmodhi4_neg2>:
    1e86:	70 95       	com	r23
    1e88:	61 95       	neg	r22
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001e8c <__divmodhi4_exit>:
    1e8c:	08 95       	ret

00001e8e <__tablejump2__>:
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	05 90       	lpm	r0, Z+
    1e94:	f4 91       	lpm	r31, Z
    1e96:	e0 2d       	mov	r30, r0
    1e98:	09 94       	ijmp

00001e9a <__udivmodhi4>:
    1e9a:	aa 1b       	sub	r26, r26
    1e9c:	bb 1b       	sub	r27, r27
    1e9e:	51 e1       	ldi	r21, 0x11	; 17
    1ea0:	07 c0       	rjmp	.+14     	; 0x1eb0 <__udivmodhi4_ep>

00001ea2 <__udivmodhi4_loop>:
    1ea2:	aa 1f       	adc	r26, r26
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	a6 17       	cp	r26, r22
    1ea8:	b7 07       	cpc	r27, r23
    1eaa:	10 f0       	brcs	.+4      	; 0x1eb0 <__udivmodhi4_ep>
    1eac:	a6 1b       	sub	r26, r22
    1eae:	b7 0b       	sbc	r27, r23

00001eb0 <__udivmodhi4_ep>:
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	5a 95       	dec	r21
    1eb6:	a9 f7       	brne	.-22     	; 0x1ea2 <__udivmodhi4_loop>
    1eb8:	80 95       	com	r24
    1eba:	90 95       	com	r25
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	08 95       	ret

00001ec2 <__itoa_ncheck>:
    1ec2:	bb 27       	eor	r27, r27
    1ec4:	4a 30       	cpi	r20, 0x0A	; 10
    1ec6:	31 f4       	brne	.+12     	; 0x1ed4 <__itoa_ncheck+0x12>
    1ec8:	99 23       	and	r25, r25
    1eca:	22 f4       	brpl	.+8      	; 0x1ed4 <__itoa_ncheck+0x12>
    1ecc:	bd e2       	ldi	r27, 0x2D	; 45
    1ece:	90 95       	com	r25
    1ed0:	81 95       	neg	r24
    1ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed4:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__utoa_common>

00001ed8 <__utoa_ncheck>:
    1ed8:	bb 27       	eor	r27, r27

00001eda <__utoa_common>:
    1eda:	fb 01       	movw	r30, r22
    1edc:	55 27       	eor	r21, r21
    1ede:	aa 27       	eor	r26, r26
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	a4 17       	cp	r26, r20
    1ee8:	10 f0       	brcs	.+4      	; 0x1eee <__utoa_common+0x14>
    1eea:	a4 1b       	sub	r26, r20
    1eec:	83 95       	inc	r24
    1eee:	50 51       	subi	r21, 0x10	; 16
    1ef0:	b9 f7       	brne	.-18     	; 0x1ee0 <__utoa_common+0x6>
    1ef2:	a0 5d       	subi	r26, 0xD0	; 208
    1ef4:	aa 33       	cpi	r26, 0x3A	; 58
    1ef6:	08 f0       	brcs	.+2      	; 0x1efa <__utoa_common+0x20>
    1ef8:	a9 5d       	subi	r26, 0xD9	; 217
    1efa:	a1 93       	st	Z+, r26
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	79 f7       	brne	.-34     	; 0x1ede <__utoa_common+0x4>
    1f00:	b1 11       	cpse	r27, r1
    1f02:	b1 93       	st	Z+, r27
    1f04:	11 92       	st	Z+, r1
    1f06:	cb 01       	movw	r24, r22
    1f08:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <strrev>

00001f0c <strrev>:
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	fc 01       	movw	r30, r24
    1f10:	67 2f       	mov	r22, r23
    1f12:	71 91       	ld	r23, Z+
    1f14:	77 23       	and	r23, r23
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <strrev+0x4>
    1f18:	32 97       	sbiw	r30, 0x02	; 2
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <strrev+0x18>
    1f1c:	7c 91       	ld	r23, X
    1f1e:	6d 93       	st	X+, r22
    1f20:	70 83       	st	Z, r23
    1f22:	62 91       	ld	r22, -Z
    1f24:	ae 17       	cp	r26, r30
    1f26:	bf 07       	cpc	r27, r31
    1f28:	c8 f3       	brcs	.-14     	; 0x1f1c <strrev+0x10>
    1f2a:	08 95       	ret

00001f2c <_exit>:
    1f2c:	f8 94       	cli

00001f2e <__stop_program>:
    1f2e:	ff cf       	rjmp	.-2      	; 0x1f2e <__stop_program>
