
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a5e  00000af2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800062  00800062  00000af4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c1  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be5  00000000  00000000  00002509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155a  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00004648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c12  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e0  00000000  00000000  000056f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000067d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_1>
   8:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  8a:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
  92:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <HULTRASONIC_vidInit>
    HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
  96:	84 e7       	ldi	r24, 0x74	; 116
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 25 01 	call	0x24a	; 0x24a <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
  9e:	88 e8       	ldi	r24, 0x88	; 136
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 28 01 	call	0x250	; 0x250 <HULTRASONIC_vidCBF_INT>
  a6:	08 95       	ret

000000a8 <APP_vidStart>:
}

void APP_vidStart(void)
{
    global_f64Dist = HULTRASONIC_u8Read();
  a8:	0e 94 1a 01 	call	0x234	; 0x234 <HULTRASONIC_u8Read>
  ac:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <global_f64Dist>
  b0:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <global_f64Dist+0x1>
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <global_f64Dist+0x2>
  b8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e2       	ldi	r24, 0x2F	; 47
  be:	95 e7       	ldi	r25, 0x75	; 117
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <APP_vidStart+0x18>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <APP_vidStart+0x1e>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <HULTRASONIC_vidTrigger+0xc>
  da:	00 c0       	rjmp	.+0      	; 0xdc <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_writePIN>
  e6:	08 95       	ret

000000e8 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
  e8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_v_u16_ovfCounts>
  ec:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <g_v_u16_ovfCounts+0x1>
  f0:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <g_v_u16_ovfCounts+0x2>
  f4:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <g_v_u16_ovfCounts+0x3>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	a1 1d       	adc	r26, r1
  fc:	b1 1d       	adc	r27, r1
  fe:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_v_u16_ovfCounts>
 102:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <g_v_u16_ovfCounts+0x1>
 106:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <g_v_u16_ovfCounts+0x2>
 10a:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <g_v_u16_ovfCounts+0x3>
 10e:	08 95       	ret

00000110 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
 110:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_v_u8_flag>
 114:	81 11       	cpse	r24, r1
 116:	14 c0       	rjmp	.+40     	; 0x140 <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
 118:	0e 94 84 03 	call	0x708	; 0x708 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_0 , FALL_EDGE);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vidExtInt_init>
		g_v_u8_flag = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
 12a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_v_u16_ovfCounts>
 12e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <g_v_u16_ovfCounts+0x1>
 132:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <g_v_u16_ovfCounts+0x2>
 136:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
 13a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <vidTimer2_start>
 13e:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
 140:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_v_u8_flag>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	09 f0       	breq	.+2      	; 0x14a <HULTRASONIC_vidSigCalc+0x3a>
 148:	56 c0       	rjmp	.+172    	; 0x1f6 <HULTRASONIC_vidSigCalc+0xe6>
	{
		vidTimer2_stop();
 14a:	0e 94 76 03 	call	0x6ec	; 0x6ec <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
 14e:	0e 94 86 03 	call	0x70c	; 0x70c <MTIMER_u8GetTCNT>
 152:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
 156:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_v_u16_ovfCounts>
 15a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <g_v_u16_ovfCounts+0x1>
 15e:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <g_v_u16_ovfCounts+0x2>
 162:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <g_v_u16_ovfCounts+0x3>
 166:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <g_v_u16_ovf>
 16a:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <g_v_u16_ovf+0x1>
 16e:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <g_v_u16_ovf+0x2>
 172:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
 176:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <g_v_u8_cap>
 17a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_v_u16_ovf>
 17e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <g_v_u16_ovf+0x1>
 182:	a0 91 7f 00 	lds	r26, 0x007F	; 0x80007f <g_v_u16_ovf+0x2>
 186:	b0 91 80 00 	lds	r27, 0x0080	; 0x800080 <g_v_u16_ovf+0x3>
 18a:	ba 2f       	mov	r27, r26
 18c:	a9 2f       	mov	r26, r25
 18e:	98 2f       	mov	r25, r24
 190:	88 27       	eor	r24, r24
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	62 0f       	add	r22, r18
 198:	71 1d       	adc	r23, r1
 19a:	81 1d       	adc	r24, r1
 19c:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = ((float64_t)global_u32Ticks / 932.95)-2.0;
 19e:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatunsisf>
 1a2:	2d ec       	ldi	r18, 0xCD	; 205
 1a4:	3c e3       	ldi	r19, 0x3C	; 60
 1a6:	49 e6       	ldi	r20, 0x69	; 105
 1a8:	54 e4       	ldi	r21, 0x44	; 68
 1aa:	0e 94 2d 04 	call	0x85a	; 0x85a <__divsf3>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e4       	ldi	r21, 0x40	; 64
 1b6:	0e 94 c0 03 	call	0x780	; 0x780 <__subsf3>
 1ba:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
 1be:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
 1c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
 1c6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
 1ca:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <g_v_u16_ovf>
 1ce:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <g_v_u16_ovf+0x1>
 1d2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <g_v_u16_ovf+0x2>
 1d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <g_v_u16_ovf+0x3>
 1da:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <g_v_u16_ovfCounts>
 1de:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <g_v_u16_ovfCounts+0x1>
 1e2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <g_v_u16_ovfCounts+0x2>
 1e6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <g_v_u16_ovfCounts+0x3>
 1ea:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_0 , RISE_EDGE);
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vidExtInt_init>
 1f6:	08 95       	ret

000001f8 <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 30 01 	call	0x260	; 0x260 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 30 01 	call	0x260	; 0x260 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_writePIN>

	(void) vidExtInt_init(INT_0 , RISE_EDGE);
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 21 03 	call	0x642	; 0x642 <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 50 03 	call	0x6a0	; 0x6a0 <u8Timer2_setPrescallar>
	(void) vidTimer2_OvfIrqEnable();
 22a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <vidTimer2_OvfIrqEnable>

	 MTIMER_vidEnableGlobalInterrupt();
 22e:	0e 94 88 03 	call	0x710	; 0x710 <MTIMER_vidEnableGlobalInterrupt>
 232:	08 95       	ret

00000234 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
 234:	0e 94 65 00 	call	0xca	; 0xca <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
 238:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 23c:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 240:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
 244:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
}
 248:	08 95       	ret

0000024a <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
 24a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vidTimer2_setcbf_OVF>
 24e:	08 95       	ret

00000250 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
 250:	0e 94 6e 02 	call	0x4dc	; 0x4dc <MEXTINT_vidCallBackFunc>
 254:	08 95       	ret

00000256 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
 256:	0e 94 49 00 	call	0x92	; 0x92 <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
 25a:	0e 94 54 00 	call	0xa8	; 0xa8 <APP_vidStart>
 25e:	fd cf       	rjmp	.-6      	; 0x25a <main+0x4>

00000260 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 260:	68 30       	cpi	r22, 0x08	; 8
 262:	a0 f5       	brcc	.+104    	; 0x2cc <DIO_init+0x6c>
	{
		if (port == porta)
 264:	81 11       	cpse	r24, r1
 266:	0b c0       	rjmp	.+22     	; 0x27e <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 268:	8a b3       	in	r24, 0x1a	; 26
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_init+0x12>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_init+0xe>
 276:	48 2b       	or	r20, r24
 278:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
		}
		else if (port == portb)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 282:	87 b3       	in	r24, 0x17	; 23
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_init+0x2c>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_init+0x28>
 290:	48 2b       	or	r20, r24
 292:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
		}
		else if (port == portc)
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	59 f4       	brne	.+22     	; 0x2b2 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 29c:	84 b3       	in	r24, 0x14	; 20
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_init+0x46>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_init+0x42>
 2aa:	48 2b       	or	r20, r24
 2ac:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
		}
		else if (port == portd)
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	69 f4       	brne	.+26     	; 0x2d0 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 2b6:	81 b3       	in	r24, 0x11	; 17
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_init+0x60>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_init+0x5c>
 2c4:	48 2b       	or	r20, r24
 2c6:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 2d2:	08 95       	ret

000002d4 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 2d4:	68 30       	cpi	r22, 0x08	; 8
 2d6:	08 f0       	brcs	.+2      	; 0x2da <DIO_writePIN+0x6>
 2d8:	74 c0       	rjmp	.+232    	; 0x3c2 <DIO_writePIN+0xee>
	{
		if (port == porta)
 2da:	81 11       	cpse	r24, r1
 2dc:	1b c0       	rjmp	.+54     	; 0x314 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 2de:	41 30       	cpi	r20, 0x01	; 1
 2e0:	61 f4       	brne	.+24     	; 0x2fa <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 2e2:	2b b3       	in	r18, 0x1b	; 27
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_writePIN+0x1a>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_writePIN+0x16>
 2f2:	82 2b       	or	r24, r18
 2f4:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 2fa:	2b b3       	in	r18, 0x1b	; 27
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_writePIN+0x32>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_writePIN+0x2e>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
		}
		else if (port == portb)
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	d9 f4       	brne	.+54     	; 0x34e <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	61 f4       	brne	.+24     	; 0x334 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 31c:	28 b3       	in	r18, 0x18	; 24
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_writePIN+0x54>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_writePIN+0x50>
 32c:	82 2b       	or	r24, r18
 32e:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 334:	28 b3       	in	r18, 0x18	; 24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_writePIN+0x6c>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_writePIN+0x68>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
		}
		else if (port == portc)
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	d9 f4       	brne	.+54     	; 0x388 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	61 f4       	brne	.+24     	; 0x36e <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 356:	25 b3       	in	r18, 0x15	; 21
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_writePIN+0x8e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_writePIN+0x8a>
 366:	82 2b       	or	r24, r18
 368:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 36e:	25 b3       	in	r18, 0x15	; 21
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_writePIN+0xa6>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_writePIN+0xa2>
 37e:	80 95       	com	r24
 380:	82 23       	and	r24, r18
 382:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
		}
		else if (port == portd)
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	e9 f4       	brne	.+58     	; 0x3c6 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	61 f4       	brne	.+24     	; 0x3a8 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 390:	22 b3       	in	r18, 0x12	; 18
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_writePIN+0xc8>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_writePIN+0xc4>
 3a0:	82 2b       	or	r24, r18
 3a2:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 3a8:	22 b3       	in	r18, 0x12	; 18
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_writePIN+0xe0>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_writePIN+0xdc>
 3b8:	80 95       	com	r24
 3ba:	82 23       	and	r24, r18
 3bc:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 3c6:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 3c8:	08 95       	ret

000003ca <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF1);
	SET_BIT(GICR_REG, INT0);
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	08 f0       	brcs	.+2      	; 0x3d0 <vidExtInt_init+0x6>
 3ce:	80 c0       	rjmp	.+256    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 3d0:	64 30       	cpi	r22, 0x04	; 4
 3d2:	08 f0       	brcs	.+2      	; 0x3d6 <vidExtInt_init+0xc>
 3d4:	7f c0       	rjmp	.+254    	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 3d6:	81 11       	cpse	r24, r1
 3d8:	30 c0       	rjmp	.+96     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3da:	61 30       	cpi	r22, 0x01	; 1
 3dc:	71 f0       	breq	.+28     	; 0x3fa <vidExtInt_init+0x30>
 3de:	28 f0       	brcs	.+10     	; 0x3ea <vidExtInt_init+0x20>
 3e0:	62 30       	cpi	r22, 0x02	; 2
 3e2:	99 f0       	breq	.+38     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3e4:	63 30       	cpi	r22, 0x03	; 3
 3e6:	c9 f0       	breq	.+50     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3e8:	20 c0       	rjmp	.+64     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3ea:	85 b7       	in	r24, 0x35	; 53
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	85 bf       	out	0x35, r24	; 53
 3f0:	85 b7       	in	r24, 0x35	; 53
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	85 bf       	out	0x35, r24	; 53
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	19 c0       	rjmp	.+50     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3fa:	85 b7       	in	r24, 0x35	; 53
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	85 bf       	out	0x35, r24	; 53
 400:	85 b7       	in	r24, 0x35	; 53
 402:	8d 7f       	andi	r24, 0xFD	; 253
 404:	85 bf       	out	0x35, r24	; 53
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	11 c0       	rjmp	.+34     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 40a:	85 b7       	in	r24, 0x35	; 53
 40c:	8e 7f       	andi	r24, 0xFE	; 254
 40e:	85 bf       	out	0x35, r24	; 53
 410:	85 b7       	in	r24, 0x35	; 53
 412:	82 60       	ori	r24, 0x02	; 2
 414:	85 bf       	out	0x35, r24	; 53
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	09 c0       	rjmp	.+18     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41a:	85 b7       	in	r24, 0x35	; 53
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	85 bf       	out	0x35, r24	; 53
 420:	85 b7       	in	r24, 0x35	; 53
 422:	82 60       	ori	r24, 0x02	; 2
 424:	85 bf       	out	0x35, r24	; 53
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	01 c0       	rjmp	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	9a b7       	in	r25, 0x3a	; 58
 42e:	90 64       	ori	r25, 0x40	; 64
 430:	9a bf       	out	0x3a, r25	; 58
 432:	9b b7       	in	r25, 0x3b	; 59
 434:	90 64       	ori	r25, 0x40	; 64
 436:	9b bf       	out	0x3b, r25	; 59
 438:	08 95       	ret
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	81 f5       	brne	.+96     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	71 f0       	breq	.+28     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 442:	28 f0       	brcs	.+10     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 444:	62 30       	cpi	r22, 0x02	; 2
 446:	99 f0       	breq	.+38     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 448:	63 30       	cpi	r22, 0x03	; 3
 44a:	c9 f0       	breq	.+50     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 44c:	20 c0       	rjmp	.+64     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 44e:	85 b7       	in	r24, 0x35	; 53
 450:	8b 7f       	andi	r24, 0xFB	; 251
 452:	85 bf       	out	0x35, r24	; 53
 454:	85 b7       	in	r24, 0x35	; 53
 456:	87 7f       	andi	r24, 0xF7	; 247
 458:	85 bf       	out	0x35, r24	; 53
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	19 c0       	rjmp	.+50     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 45e:	85 b7       	in	r24, 0x35	; 53
 460:	84 60       	ori	r24, 0x04	; 4
 462:	85 bf       	out	0x35, r24	; 53
 464:	85 b7       	in	r24, 0x35	; 53
 466:	87 7f       	andi	r24, 0xF7	; 247
 468:	85 bf       	out	0x35, r24	; 53
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	11 c0       	rjmp	.+34     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 46e:	85 b7       	in	r24, 0x35	; 53
 470:	8b 7f       	andi	r24, 0xFB	; 251
 472:	85 bf       	out	0x35, r24	; 53
 474:	85 b7       	in	r24, 0x35	; 53
 476:	88 60       	ori	r24, 0x08	; 8
 478:	85 bf       	out	0x35, r24	; 53
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	09 c0       	rjmp	.+18     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 47e:	85 b7       	in	r24, 0x35	; 53
 480:	84 60       	ori	r24, 0x04	; 4
 482:	85 bf       	out	0x35, r24	; 53
 484:	85 b7       	in	r24, 0x35	; 53
 486:	88 60       	ori	r24, 0x08	; 8
 488:	85 bf       	out	0x35, r24	; 53
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	01 c0       	rjmp	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	9b b7       	in	r25, 0x3b	; 59
 492:	90 68       	ori	r25, 0x80	; 128
 494:	9b bf       	out	0x3b, r25	; 59
 496:	9a b7       	in	r25, 0x3a	; 58
 498:	90 68       	ori	r25, 0x80	; 128
 49a:	9a bf       	out	0x3a, r25	; 58
 49c:	08 95       	ret
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	d9 f4       	brne	.+54     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4a2:	62 30       	cpi	r22, 0x02	; 2
 4a4:	19 f0       	breq	.+6      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a6:	63 30       	cpi	r22, 0x03	; 3
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4ac:	84 b7       	in	r24, 0x34	; 52
 4ae:	8f 7b       	andi	r24, 0xBF	; 191
 4b0:	84 bf       	out	0x34, r24	; 52
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b6:	84 b7       	in	r24, 0x34	; 52
 4b8:	80 64       	ori	r24, 0x40	; 64
 4ba:	84 bf       	out	0x34, r24	; 52
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	9b b7       	in	r25, 0x3b	; 59
 4c4:	90 62       	ori	r25, 0x20	; 32
 4c6:	9b bf       	out	0x3b, r25	; 59
 4c8:	9a b7       	in	r25, 0x3a	; 58
 4ca:	90 62       	ori	r25, 0x20	; 32
 4cc:	9a bf       	out	0x3a, r25	; 58
 4ce:	08 95       	ret
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	08 95       	ret

000004dc <MEXTINT_vidCallBackFunc>:
 4dc:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <callBack+0x1>
 4e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <callBack>
 4e4:	08 95       	ret

000004e6 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	callBack();
 508:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <callBack>
 50c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <callBack+0x1>
 510:	09 95       	icall
}
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_2>:

ISR(INT1_vect)
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	callBackFunc();
 556:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <callBackFunc>
 55a:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <callBackFunc+0x1>
 55e:	09 95       	icall
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_11>:
static timerCallBack sg_Timer0_callBackPtr = NULL;
static timerCallBack sg_Timer1_callBackPtr = NULL;
static timerCallBack sg_Timer2_callBackPtr = NULL;

ISR(TIMER0_OVF)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
	if(sg_Timer0_callBackPtr != NULL)
 5a4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sg_Timer0_callBackPtr>
 5a8:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <sg_Timer0_callBackPtr+0x1>
 5ac:	89 2b       	or	r24, r25
 5ae:	41 f0       	breq	.+16     	; 0x5c0 <__vector_11+0x3e>
	{
		// The timer0 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV0);
 5b0:	88 b7       	in	r24, 0x38	; 56
 5b2:	8e 7f       	andi	r24, 0xFE	; 254
 5b4:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer0_callBackPtr)();
 5b6:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <sg_Timer0_callBackPtr>
 5ba:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <sg_Timer0_callBackPtr+0x1>
 5be:	09 95       	icall
	}
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_9>:

ISR(TIMER1_OVF)
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
	if(sg_Timer1_callBackPtr != NULL)
 604:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sg_Timer1_callBackPtr>
 608:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <sg_Timer1_callBackPtr+0x1>
 60c:	89 2b       	or	r24, r25
 60e:	41 f0       	breq	.+16     	; 0x620 <__vector_9+0x3e>
	{
		// The timer1 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV1);
 610:	88 b7       	in	r24, 0x38	; 56
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	88 bf       	out	0x38, r24	; 56
		// Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer1_callBackPtr)();
 616:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <sg_Timer1_callBackPtr>
 61a:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <sg_Timer1_callBackPtr+0x1>
 61e:	09 95       	icall
	}
}
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <enuTimer2_init>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
 642:	84 30       	cpi	r24, 0x04	; 4
 644:	48 f5       	brcc	.+82     	; 0x698 <enuTimer2_init+0x56>
 646:	14 bc       	out	0x24, r1	; 36
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	71 f0       	breq	.+28     	; 0x668 <enuTimer2_init+0x26>
 64c:	28 f0       	brcs	.+10     	; 0x658 <enuTimer2_init+0x16>
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	99 f0       	breq	.+38     	; 0x678 <enuTimer2_init+0x36>
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	c9 f0       	breq	.+50     	; 0x688 <enuTimer2_init+0x46>
 656:	22 c0       	rjmp	.+68     	; 0x69c <enuTimer2_init+0x5a>
 658:	85 b5       	in	r24, 0x25	; 37
 65a:	87 7f       	andi	r24, 0xF7	; 247
 65c:	85 bd       	out	0x25, r24	; 37
 65e:	85 b5       	in	r24, 0x25	; 37
 660:	8f 7b       	andi	r24, 0xBF	; 191
 662:	85 bd       	out	0x25, r24	; 37
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret
 668:	85 b5       	in	r24, 0x25	; 37
 66a:	87 7f       	andi	r24, 0xF7	; 247
 66c:	85 bd       	out	0x25, r24	; 37
 66e:	85 b5       	in	r24, 0x25	; 37
 670:	80 64       	ori	r24, 0x40	; 64
 672:	85 bd       	out	0x25, r24	; 37
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret
 678:	85 b5       	in	r24, 0x25	; 37
 67a:	88 60       	ori	r24, 0x08	; 8
 67c:	85 bd       	out	0x25, r24	; 37
 67e:	85 b5       	in	r24, 0x25	; 37
 680:	8f 7b       	andi	r24, 0xBF	; 191
 682:	85 bd       	out	0x25, r24	; 37
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret
 688:	85 b5       	in	r24, 0x25	; 37
 68a:	88 60       	ori	r24, 0x08	; 8
 68c:	85 bd       	out	0x25, r24	; 37
 68e:	85 b5       	in	r24, 0x25	; 37
 690:	80 64       	ori	r24, 0x40	; 64
 692:	85 bd       	out	0x25, r24	; 37
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	08 95       	ret
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret

000006a0 <u8Timer2_setPrescallar>:
 6a0:	88 30       	cpi	r24, 0x08	; 8
 6a2:	70 f4       	brcc	.+28     	; 0x6c0 <u8Timer2_setPrescallar+0x20>
 6a4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <global_prescaller>
 6a8:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <global_timerStatus>
 6ac:	91 30       	cpi	r25, 0x01	; 1
 6ae:	51 f4       	brne	.+20     	; 0x6c4 <u8Timer2_setPrescallar+0x24>
 6b0:	95 b5       	in	r25, 0x25	; 37
 6b2:	98 7f       	andi	r25, 0xF8	; 248
 6b4:	89 2b       	or	r24, r25
 6b6:	95 b5       	in	r25, 0x25	; 37
 6b8:	89 2b       	or	r24, r25
 6ba:	85 bd       	out	0x25, r24	; 37
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 95       	ret
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	08 95       	ret
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret

000006c8 <vidTimer2_OvfIrqEnable>:
 6c8:	88 b7       	in	r24, 0x38	; 56
 6ca:	80 64       	ori	r24, 0x40	; 64
 6cc:	88 bf       	out	0x38, r24	; 56
 6ce:	89 b7       	in	r24, 0x39	; 57
 6d0:	80 64       	ori	r24, 0x40	; 64
 6d2:	89 bf       	out	0x39, r24	; 57
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret

000006d8 <vidTimer2_start>:
 6d8:	95 b5       	in	r25, 0x25	; 37
 6da:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <global_prescaller>
 6de:	89 2b       	or	r24, r25
 6e0:	85 bd       	out	0x25, r24	; 37
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <global_timerStatus>
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret

000006ec <vidTimer2_stop>:
 6ec:	85 b5       	in	r24, 0x25	; 37
 6ee:	88 7f       	andi	r24, 0xF8	; 248
 6f0:	85 bd       	out	0x25, r24	; 37
 6f2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <global_timerStatus>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret

000006fa <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	21 f0       	breq	.+8      	; 0x706 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
 6fe:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <globalCallFunc+0x1>
 702:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <globalCallFunc>
 706:	08 95       	ret

00000708 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
 708:	14 bc       	out	0x24, r1	; 36
 70a:	08 95       	ret

0000070c <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
 70c:	84 b5       	in	r24, 0x24	; 36
}
 70e:	08 95       	ret

00000710 <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
 710:	8f b7       	in	r24, 0x3f	; 63
 712:	80 68       	ori	r24, 0x80	; 128
 714:	8f bf       	out	0x3f, r24	; 63
 716:	08 95       	ret

00000718 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	2f 93       	push	r18
 724:	3f 93       	push	r19
 726:	4f 93       	push	r20
 728:	5f 93       	push	r21
 72a:	6f 93       	push	r22
 72c:	7f 93       	push	r23
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	af 93       	push	r26
 734:	bf 93       	push	r27
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
 73a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter.1736>
 73e:	8f 5f       	subi	r24, 0xFF	; 255
 740:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter.1736>
	if(counter == global_ovf)
 744:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 748:	89 13       	cpse	r24, r25
 74a:	09 c0       	rjmp	.+18     	; 0x75e <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
 74c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <globalCallFunc>
 750:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <globalCallFunc+0x1>
 754:	30 97       	sbiw	r30, 0x00	; 0
 756:	19 f0       	breq	.+6      	; 0x75e <__vector_5+0x46>
		{
			counter = 0;
 758:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter.1736>

			globalCallFunc();
 75c:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <__subsf3>:
 780:	50 58       	subi	r21, 0x80	; 128

00000782 <__addsf3>:
 782:	bb 27       	eor	r27, r27
 784:	aa 27       	eor	r26, r26
 786:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__addsf3x>
 78a:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_round>
 78e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscA>
 792:	38 f0       	brcs	.+14     	; 0x7a2 <__addsf3+0x20>
 794:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscB>
 798:	20 f0       	brcs	.+8      	; 0x7a2 <__addsf3+0x20>
 79a:	39 f4       	brne	.+14     	; 0x7aa <__addsf3+0x28>
 79c:	9f 3f       	cpi	r25, 0xFF	; 255
 79e:	19 f4       	brne	.+6      	; 0x7a6 <__addsf3+0x24>
 7a0:	26 f4       	brtc	.+8      	; 0x7aa <__addsf3+0x28>
 7a2:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_nan>
 7a6:	0e f4       	brtc	.+2      	; 0x7aa <__addsf3+0x28>
 7a8:	e0 95       	com	r30
 7aa:	e7 fb       	bst	r30, 7
 7ac:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>

000007b0 <__addsf3x>:
 7b0:	e9 2f       	mov	r30, r25
 7b2:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_split3>
 7b6:	58 f3       	brcs	.-42     	; 0x78e <__addsf3+0xc>
 7b8:	ba 17       	cp	r27, r26
 7ba:	62 07       	cpc	r22, r18
 7bc:	73 07       	cpc	r23, r19
 7be:	84 07       	cpc	r24, r20
 7c0:	95 07       	cpc	r25, r21
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3x+0x1c>
 7c4:	79 f4       	brne	.+30     	; 0x7e4 <__addsf3x+0x34>
 7c6:	a6 f5       	brtc	.+104    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7c8:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_zero>
 7cc:	0e f4       	brtc	.+2      	; 0x7d0 <__addsf3x+0x20>
 7ce:	e0 95       	com	r30
 7d0:	0b 2e       	mov	r0, r27
 7d2:	ba 2f       	mov	r27, r26
 7d4:	a0 2d       	mov	r26, r0
 7d6:	0b 01       	movw	r0, r22
 7d8:	b9 01       	movw	r22, r18
 7da:	90 01       	movw	r18, r0
 7dc:	0c 01       	movw	r0, r24
 7de:	ca 01       	movw	r24, r20
 7e0:	a0 01       	movw	r20, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	ff 27       	eor	r31, r31
 7e6:	59 1b       	sub	r21, r25
 7e8:	99 f0       	breq	.+38     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ea:	59 3f       	cpi	r21, 0xF9	; 249
 7ec:	50 f4       	brcc	.+20     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ee:	50 3e       	cpi	r21, 0xE0	; 224
 7f0:	68 f1       	brcs	.+90     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7f2:	1a 16       	cp	r1, r26
 7f4:	f0 40       	sbci	r31, 0x00	; 0
 7f6:	a2 2f       	mov	r26, r18
 7f8:	23 2f       	mov	r18, r19
 7fa:	34 2f       	mov	r19, r20
 7fc:	44 27       	eor	r20, r20
 7fe:	58 5f       	subi	r21, 0xF8	; 248
 800:	f3 cf       	rjmp	.-26     	; 0x7e8 <__addsf3x+0x38>
 802:	46 95       	lsr	r20
 804:	37 95       	ror	r19
 806:	27 95       	ror	r18
 808:	a7 95       	ror	r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	53 95       	inc	r21
 80e:	c9 f7       	brne	.-14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 810:	7e f4       	brtc	.+30     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 812:	1f 16       	cp	r1, r31
 814:	ba 0b       	sbc	r27, r26
 816:	62 0b       	sbc	r22, r18
 818:	73 0b       	sbc	r23, r19
 81a:	84 0b       	sbc	r24, r20
 81c:	ba f0       	brmi	.+46     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	a1 f0       	breq	.+40     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 822:	ff 0f       	add	r31, r31
 824:	bb 1f       	adc	r27, r27
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	c2 f7       	brpl	.-16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 82e:	0e c0       	rjmp	.+28     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 830:	ba 0f       	add	r27, r26
 832:	62 1f       	adc	r22, r18
 834:	73 1f       	adc	r23, r19
 836:	84 1f       	adc	r24, r20
 838:	48 f4       	brcc	.+18     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	9e 3f       	cpi	r25, 0xFE	; 254
 846:	08 f0       	brcs	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	b0 cf       	rjmp	.-160    	; 0x7aa <__addsf3+0x28>
 84a:	93 95       	inc	r25
 84c:	88 0f       	add	r24, r24
 84e:	08 f0       	brcs	.+2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 850:	99 27       	eor	r25, r25
 852:	ee 0f       	add	r30, r30
 854:	97 95       	ror	r25
 856:	87 95       	ror	r24
 858:	08 95       	ret

0000085a <__divsf3>:
 85a:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3x>
 85e:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_round>
 862:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscB>
 866:	58 f0       	brcs	.+22     	; 0x87e <__stack+0x1f>
 868:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscA>
 86c:	40 f0       	brcs	.+16     	; 0x87e <__stack+0x1f>
 86e:	29 f4       	brne	.+10     	; 0x87a <__stack+0x1b>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	29 f0       	breq	.+10     	; 0x87e <__stack+0x1f>
 874:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>
 878:	51 11       	cpse	r21, r1
 87a:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_szero>
 87e:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_nan>

00000882 <__divsf3x>:
 882:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_split3>
 886:	68 f3       	brcs	.-38     	; 0x862 <__stack+0x3>

00000888 <__divsf3_pse>:
 888:	99 23       	and	r25, r25
 88a:	b1 f3       	breq	.-20     	; 0x878 <__stack+0x19>
 88c:	55 23       	and	r21, r21
 88e:	91 f3       	breq	.-28     	; 0x874 <__stack+0x15>
 890:	95 1b       	sub	r25, r21
 892:	55 0b       	sbc	r21, r21
 894:	bb 27       	eor	r27, r27
 896:	aa 27       	eor	r26, r26
 898:	62 17       	cp	r22, r18
 89a:	73 07       	cpc	r23, r19
 89c:	84 07       	cpc	r24, r20
 89e:	38 f0       	brcs	.+14     	; 0x8ae <__divsf3_pse+0x26>
 8a0:	9f 5f       	subi	r25, 0xFF	; 255
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	44 1f       	adc	r20, r20
 8aa:	aa 1f       	adc	r26, r26
 8ac:	a9 f3       	breq	.-22     	; 0x898 <__divsf3_pse+0x10>
 8ae:	35 d0       	rcall	.+106    	; 0x91a <__divsf3_pse+0x92>
 8b0:	0e 2e       	mov	r0, r30
 8b2:	3a f0       	brmi	.+14     	; 0x8c2 <__divsf3_pse+0x3a>
 8b4:	e0 e8       	ldi	r30, 0x80	; 128
 8b6:	32 d0       	rcall	.+100    	; 0x91c <__divsf3_pse+0x94>
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	50 40       	sbci	r21, 0x00	; 0
 8bc:	e6 95       	lsr	r30
 8be:	00 1c       	adc	r0, r0
 8c0:	ca f7       	brpl	.-14     	; 0x8b4 <__divsf3_pse+0x2c>
 8c2:	2b d0       	rcall	.+86     	; 0x91a <__divsf3_pse+0x92>
 8c4:	fe 2f       	mov	r31, r30
 8c6:	29 d0       	rcall	.+82     	; 0x91a <__divsf3_pse+0x92>
 8c8:	66 0f       	add	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	bb 1f       	adc	r27, r27
 8d0:	26 17       	cp	r18, r22
 8d2:	37 07       	cpc	r19, r23
 8d4:	48 07       	cpc	r20, r24
 8d6:	ab 07       	cpc	r26, r27
 8d8:	b0 e8       	ldi	r27, 0x80	; 128
 8da:	09 f0       	breq	.+2      	; 0x8de <__divsf3_pse+0x56>
 8dc:	bb 0b       	sbc	r27, r27
 8de:	80 2d       	mov	r24, r0
 8e0:	bf 01       	movw	r22, r30
 8e2:	ff 27       	eor	r31, r31
 8e4:	93 58       	subi	r25, 0x83	; 131
 8e6:	5f 4f       	sbci	r21, 0xFF	; 255
 8e8:	3a f0       	brmi	.+14     	; 0x8f8 <__divsf3_pse+0x70>
 8ea:	9e 3f       	cpi	r25, 0xFE	; 254
 8ec:	51 05       	cpc	r21, r1
 8ee:	78 f0       	brcs	.+30     	; 0x90e <__divsf3_pse+0x86>
 8f0:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_inf>
 8f4:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_szero>
 8f8:	5f 3f       	cpi	r21, 0xFF	; 255
 8fa:	e4 f3       	brlt	.-8      	; 0x8f4 <__divsf3_pse+0x6c>
 8fc:	98 3e       	cpi	r25, 0xE8	; 232
 8fe:	d4 f3       	brlt	.-12     	; 0x8f4 <__divsf3_pse+0x6c>
 900:	86 95       	lsr	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b7 95       	ror	r27
 908:	f7 95       	ror	r31
 90a:	9f 5f       	subi	r25, 0xFF	; 255
 90c:	c9 f7       	brne	.-14     	; 0x900 <__divsf3_pse+0x78>
 90e:	88 0f       	add	r24, r24
 910:	91 1d       	adc	r25, r1
 912:	96 95       	lsr	r25
 914:	87 95       	ror	r24
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret
 91a:	e1 e0       	ldi	r30, 0x01	; 1
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	bb 1f       	adc	r27, r27
 924:	62 17       	cp	r22, r18
 926:	73 07       	cpc	r23, r19
 928:	84 07       	cpc	r24, r20
 92a:	ba 07       	cpc	r27, r26
 92c:	20 f0       	brcs	.+8      	; 0x936 <__divsf3_pse+0xae>
 92e:	62 1b       	sub	r22, r18
 930:	73 0b       	sbc	r23, r19
 932:	84 0b       	sbc	r24, r20
 934:	ba 0b       	sbc	r27, r26
 936:	ee 1f       	adc	r30, r30
 938:	88 f7       	brcc	.-30     	; 0x91c <__divsf3_pse+0x94>
 93a:	e0 95       	com	r30
 93c:	08 95       	ret

0000093e <__floatunsisf>:
 93e:	e8 94       	clt
 940:	09 c0       	rjmp	.+18     	; 0x954 <__floatsisf+0x12>

00000942 <__floatsisf>:
 942:	97 fb       	bst	r25, 7
 944:	3e f4       	brtc	.+14     	; 0x954 <__floatsisf+0x12>
 946:	90 95       	com	r25
 948:	80 95       	com	r24
 94a:	70 95       	com	r23
 94c:	61 95       	neg	r22
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	99 23       	and	r25, r25
 956:	a9 f0       	breq	.+42     	; 0x982 <__floatsisf+0x40>
 958:	f9 2f       	mov	r31, r25
 95a:	96 e9       	ldi	r25, 0x96	; 150
 95c:	bb 27       	eor	r27, r27
 95e:	93 95       	inc	r25
 960:	f6 95       	lsr	r31
 962:	87 95       	ror	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f1 11       	cpse	r31, r1
 96c:	f8 cf       	rjmp	.-16     	; 0x95e <__floatsisf+0x1c>
 96e:	fa f4       	brpl	.+62     	; 0x9ae <__floatsisf+0x6c>
 970:	bb 0f       	add	r27, r27
 972:	11 f4       	brne	.+4      	; 0x978 <__floatsisf+0x36>
 974:	60 ff       	sbrs	r22, 0
 976:	1b c0       	rjmp	.+54     	; 0x9ae <__floatsisf+0x6c>
 978:	6f 5f       	subi	r22, 0xFF	; 255
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	16 c0       	rjmp	.+44     	; 0x9ae <__floatsisf+0x6c>
 982:	88 23       	and	r24, r24
 984:	11 f0       	breq	.+4      	; 0x98a <__floatsisf+0x48>
 986:	96 e9       	ldi	r25, 0x96	; 150
 988:	11 c0       	rjmp	.+34     	; 0x9ac <__floatsisf+0x6a>
 98a:	77 23       	and	r23, r23
 98c:	21 f0       	breq	.+8      	; 0x996 <__floatsisf+0x54>
 98e:	9e e8       	ldi	r25, 0x8E	; 142
 990:	87 2f       	mov	r24, r23
 992:	76 2f       	mov	r23, r22
 994:	05 c0       	rjmp	.+10     	; 0x9a0 <__floatsisf+0x5e>
 996:	66 23       	and	r22, r22
 998:	71 f0       	breq	.+28     	; 0x9b6 <__floatsisf+0x74>
 99a:	96 e8       	ldi	r25, 0x86	; 134
 99c:	86 2f       	mov	r24, r22
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	2a f0       	brmi	.+10     	; 0x9ae <__floatsisf+0x6c>
 9a4:	9a 95       	dec	r25
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	da f7       	brpl	.-10     	; 0x9a4 <__floatsisf+0x62>
 9ae:	88 0f       	add	r24, r24
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <__fp_inf>:
 9b8:	97 f9       	bld	r25, 7
 9ba:	9f 67       	ori	r25, 0x7F	; 127
 9bc:	80 e8       	ldi	r24, 0x80	; 128
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	60 e0       	ldi	r22, 0x00	; 0
 9c2:	08 95       	ret

000009c4 <__fp_nan>:
 9c4:	9f ef       	ldi	r25, 0xFF	; 255
 9c6:	80 ec       	ldi	r24, 0xC0	; 192
 9c8:	08 95       	ret

000009ca <__fp_pscA>:
 9ca:	00 24       	eor	r0, r0
 9cc:	0a 94       	dec	r0
 9ce:	16 16       	cp	r1, r22
 9d0:	17 06       	cpc	r1, r23
 9d2:	18 06       	cpc	r1, r24
 9d4:	09 06       	cpc	r0, r25
 9d6:	08 95       	ret

000009d8 <__fp_pscB>:
 9d8:	00 24       	eor	r0, r0
 9da:	0a 94       	dec	r0
 9dc:	12 16       	cp	r1, r18
 9de:	13 06       	cpc	r1, r19
 9e0:	14 06       	cpc	r1, r20
 9e2:	05 06       	cpc	r0, r21
 9e4:	08 95       	ret

000009e6 <__fp_round>:
 9e6:	09 2e       	mov	r0, r25
 9e8:	03 94       	inc	r0
 9ea:	00 0c       	add	r0, r0
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__fp_round+0xc>
 9ee:	88 23       	and	r24, r24
 9f0:	52 f0       	brmi	.+20     	; 0xa06 <__fp_round+0x20>
 9f2:	bb 0f       	add	r27, r27
 9f4:	40 f4       	brcc	.+16     	; 0xa06 <__fp_round+0x20>
 9f6:	bf 2b       	or	r27, r31
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__fp_round+0x18>
 9fa:	60 ff       	sbrs	r22, 0
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fp_round+0x20>
 9fe:	6f 5f       	subi	r22, 0xFF	; 255
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	08 95       	ret

00000a08 <__fp_split3>:
 a08:	57 fd       	sbrc	r21, 7
 a0a:	90 58       	subi	r25, 0x80	; 128
 a0c:	44 0f       	add	r20, r20
 a0e:	55 1f       	adc	r21, r21
 a10:	59 f0       	breq	.+22     	; 0xa28 <__fp_splitA+0x10>
 a12:	5f 3f       	cpi	r21, 0xFF	; 255
 a14:	71 f0       	breq	.+28     	; 0xa32 <__fp_splitA+0x1a>
 a16:	47 95       	ror	r20

00000a18 <__fp_splitA>:
 a18:	88 0f       	add	r24, r24
 a1a:	97 fb       	bst	r25, 7
 a1c:	99 1f       	adc	r25, r25
 a1e:	61 f0       	breq	.+24     	; 0xa38 <__fp_splitA+0x20>
 a20:	9f 3f       	cpi	r25, 0xFF	; 255
 a22:	79 f0       	breq	.+30     	; 0xa42 <__fp_splitA+0x2a>
 a24:	87 95       	ror	r24
 a26:	08 95       	ret
 a28:	12 16       	cp	r1, r18
 a2a:	13 06       	cpc	r1, r19
 a2c:	14 06       	cpc	r1, r20
 a2e:	55 1f       	adc	r21, r21
 a30:	f2 cf       	rjmp	.-28     	; 0xa16 <__fp_split3+0xe>
 a32:	46 95       	lsr	r20
 a34:	f1 df       	rcall	.-30     	; 0xa18 <__fp_splitA>
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <__fp_splitA+0x30>
 a38:	16 16       	cp	r1, r22
 a3a:	17 06       	cpc	r1, r23
 a3c:	18 06       	cpc	r1, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	f1 cf       	rjmp	.-30     	; 0xa24 <__fp_splitA+0xc>
 a42:	86 95       	lsr	r24
 a44:	71 05       	cpc	r23, r1
 a46:	61 05       	cpc	r22, r1
 a48:	08 94       	sec
 a4a:	08 95       	ret

00000a4c <__fp_zero>:
 a4c:	e8 94       	clt

00000a4e <__fp_szero>:
 a4e:	bb 27       	eor	r27, r27
 a50:	66 27       	eor	r22, r22
 a52:	77 27       	eor	r23, r23
 a54:	cb 01       	movw	r24, r22
 a56:	97 f9       	bld	r25, 7
 a58:	08 95       	ret

00000a5a <_exit>:
 a5a:	f8 94       	cli

00000a5c <__stop_program>:
 a5c:	ff cf       	rjmp	.-2      	; 0xa5c <__stop_program>
