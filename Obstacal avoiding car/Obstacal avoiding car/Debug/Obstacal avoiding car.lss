
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001730  000017c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000c2  008000c2  00001826  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003574  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fa  00000000  00000000  00005120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000225f  00000000  00000000  0000641a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  0000867c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001089  00000000  00000000  00008e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000237e  00000000  00000000  00009e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000c217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_1>
       8:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_2>
       c:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0e 08       	sbc	r0, r14
      56:	19 08       	sbc	r1, r9
      58:	24 08       	sbc	r2, r4
      5a:	34 09       	sbc	r19, r4
      5c:	2f 08       	sbc	r2, r15
      5e:	34 09       	sbc	r19, r4
      60:	3a 08       	sbc	r3, r10
      62:	45 08       	sbc	r4, r5
      64:	50 08       	sbc	r5, r0
      66:	5b 08       	sbc	r5, r11
      68:	71 08       	sbc	r7, r1
      6a:	7c 08       	sbc	r7, r12
      6c:	87 08       	sbc	r8, r7
      6e:	36 09       	sbc	r19, r6
      70:	92 08       	sbc	r9, r2
      72:	36 09       	sbc	r19, r6
      74:	9d 08       	sbc	r9, r13
      76:	a8 08       	sbc	r10, r8
      78:	b3 08       	sbc	r11, r3
      7a:	be 08       	sbc	r11, r14
      7c:	d4 08       	sbc	r13, r4
      7e:	df 08       	sbc	r13, r15
      80:	ea 08       	sbc	r14, r10
      82:	f5 08       	sbc	r15, r5
      84:	00 09       	sbc	r16, r0
      86:	0b 09       	sbc	r16, r11
      88:	16 09       	sbc	r17, r6
      8a:	21 09       	sbc	r18, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 3c       	cpi	r26, 0xC2	; 194
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a2 ec       	ldi	r26, 0xC2	; 194
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ac 3e       	cpi	r26, 0xEC	; 236
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <main>
      c2:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <u8_g_OneSecTicks>
      ce:	8f 5f       	subi	r24, 0xFF	; 255
      d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <u8_g_OneSecTicks>
      d4:	08 95       	ret

000000d6 <BUTTON_vidChangeDir>:
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	static Uint16_t counter = 0, L_flag = 0;
	counter += 2;
      d6:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <counter.1958>
      da:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <counter.1958+0x1>
      de:	02 96       	adiw	r24, 0x02	; 2
      e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <counter.1958+0x1>
      e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <counter.1958>
	if (counter % 2 == 0) {HLCD_ClrDisplay();}
      e8:	80 ff       	sbrs	r24, 0
      ea:	0e 94 ce 02 	call	0x59c	; 0x59c <HLCD_ClrDisplay>
		
		if (L_flag == 0)
      ee:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
      f2:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	69 f4       	brne	.+26     	; 0x114 <BUTTON_vidChangeDir+0x3e>
			{g_u8_motorDir = "Left"; L_flag = 1;}
      fa:	81 e8       	ldi	r24, 0x81	; 129
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
     102:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <__data_end+0x1>
     10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
     112:	08 95       	ret
		else if (L_flag == 1)
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	51 f4       	brne	.+20     	; 0x12c <BUTTON_vidChangeDir+0x56>
		{
			g_u8_motorDir = "Right"; L_flag = 0;
     118:	86 e8       	ldi	r24, 0x86	; 134
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
     120:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
     124:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <__data_end+0x1>
     128:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__data_end>
     12c:	08 95       	ret

0000012e <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
     12e:	0e 94 a4 04 	call	0x948	; 0x948 <HULTRASONIC_vidInit>
	(void) HLCD_vidInit();
     132:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
     136:	87 e6       	ldi	r24, 0x67	; 103
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 1a 03 	call	0x634	; 0x634 <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 55 01 	call	0x2aa	; 0x2aa <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     146:	80 e6       	ldi	r24, 0x60	; 96
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <TIMER_Manager_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     14e:	8c e1       	ldi	r24, 0x1C	; 28
     150:	94 e0       	ldi	r25, 0x04	; 4
     152:	0e 94 cd 04 	call	0x99a	; 0x99a <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     156:	80 e3       	ldi	r24, 0x30	; 48
     158:	94 e0       	ldi	r25, 0x04	; 4
     15a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     15e:	8b e6       	ldi	r24, 0x6B	; 107
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <HExtInt_enCBFInt0>
	
	DDRA = 0xFF;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	8a bb       	out	0x1a, r24	; 26
     16a:	08 95       	ret

0000016c <APP_updateDirection>:
	u8_g_OneSecTicks++;
}

void APP_updateDirection(void)
{
	TIMER_Manager_start (&st_timer1Config);
     16c:	80 e6       	ldi	r24, 0x60	; 96
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     174:	0e 94 76 01 	call	0x2ec	; 0x2ec <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 5)
     178:	12 c0       	rjmp	.+36     	; 0x19e <APP_updateDirection+0x32>
	{
		HLCD_gotoXY(0,0);
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_gotoXY>
		HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     182:	8c e8       	ldi	r24, 0x8C	; 140
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 fd 02 	call	0x5fa	; 0x5fa <HLCD_WriteString>
		HLCD_gotoXY(1,0);
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_gotoXY>
		HLCD_WriteString(g_u8_motorDir);
     192:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_u8_motorDir>
     196:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <g_u8_motorDir+0x1>
     19a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <HLCD_WriteString>

void APP_updateDirection(void)
{
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 5)
     19e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <u8_g_OneSecTicks>
     1a2:	86 30       	cpi	r24, 0x06	; 6
     1a4:	50 f3       	brcs	.-44     	; 0x17a <APP_updateDirection+0xe>
		HLCD_gotoXY(0,0);
		HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
		HLCD_gotoXY(1,0);
		HLCD_WriteString(g_u8_motorDir);
	}
	PORTA = u8_g_OneSecTicks;
     1a6:	8b bb       	out	0x1b, r24	; 27
	HLCD_ClrDisplay();
     1a8:	0e 94 ce 02 	call	0x59c	; 0x59c <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     1ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1b0:	0e 94 06 04 	call	0x80c	; 0x80c <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     1b4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <HExtInt0_enIntDisable>
     1b8:	08 95       	ret

000001ba <APP_vidStart>:
	DDRA = 0xFF;
}

void APP_vidStart(void)
{
	(void) KEYPAD_read(&u8KeyRead);
     1ba:	82 ee       	ldi	r24, 0xE2	; 226
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 57 03 	call	0x6ae	; 0x6ae <KEYPAD_read>
	
	 if (u8KeyRead != 'N')
     1c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <u8KeyRead>
     1c6:	8e 34       	cpi	r24, 0x4E	; 78
     1c8:	f1 f0       	breq	.+60     	; 0x206 <APP_vidStart+0x4c>
	 {
		 switch(u8KeyRead)
     1ca:	81 33       	cpi	r24, 0x31	; 49
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <APP_vidStart+0x1a>
     1ce:	82 33       	cpi	r24, 0x32	; 50
     1d0:	61 f0       	breq	.+24     	; 0x1ea <APP_vidStart+0x30>
     1d2:	16 c0       	rjmp	.+44     	; 0x200 <APP_vidStart+0x46>
		 {
			 case '1' : {
				 en_motorSel = EN_MOTOR_START; HLCD_gotoXY(1,0); HLCD_vidWriteChar(u8KeyRead); 				 
     1d4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_gotoXY>
     1e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <u8KeyRead>
     1e4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <HLCD_vidWriteChar>
				 break;
     1e8:	0e c0       	rjmp	.+28     	; 0x206 <APP_vidStart+0x4c>
				 }	 
			 case '2' : {
				 en_motorSel = EN_MOTOR_STOP; HLCD_gotoXY(1,0); HLCD_vidWriteChar(u8KeyRead); 
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_gotoXY>
     1f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <u8KeyRead>
     1fa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <HLCD_vidWriteChar>
				 break;
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <APP_vidStart+0x4c>
				 }
				 default :
				 {
					 en_motorSel = EN_MOTOR_IDLE;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					 break;
				 }
		 } 
	 }
	 
	  if (en_motorSel == EN_MOTOR_START)
     206:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     20a:	81 11       	cpse	r24, r1
     20c:	20 c0       	rjmp	.+64     	; 0x24e <APP_vidStart+0x94>
	  {
		global_f64Dist = HULTRASONIC_u8Read();
     20e:	0e 94 c2 04 	call	0x984	; 0x984 <HULTRASONIC_u8Read>
     212:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <global_f64Dist>
     216:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <global_f64Dist+0x1>
     21a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <global_f64Dist+0x2>
     21e:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     222:	8f e2       	ldi	r24, 0x2F	; 47
     224:	95 e7       	ldi	r25, 0x75	; 117
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <APP_vidStart+0x6c>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <APP_vidStart+0x72>
     22c:	00 00       	nop
		_delay_ms(15);
		if (flag3 == 0) {HLCD_ClrDisplay();  flag1 = 0; flag2 = 0; flag3 = 1; }		
     22e:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <flag3>
     232:	81 11       	cpse	r24, r1
     234:	09 c0       	rjmp	.+18     	; 0x248 <APP_vidStart+0x8e>
     236:	0e 94 ce 02 	call	0x59c	; 0x59c <HLCD_ClrDisplay>
     23a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <flag1>
     23e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <flag2>
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <flag3>
		APP_updateDirection();
     248:	0e 94 b6 00 	call	0x16c	; 0x16c <APP_updateDirection>
     24c:	08 95       	ret
		
		
		
		
	  }
	  else if (en_motorSel == EN_MOTOR_STOP)
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	b1 f4       	brne	.+44     	; 0x27e <APP_vidStart+0xc4>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     252:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <flag2>
     256:	81 11       	cpse	r24, r1
     258:	09 c0       	rjmp	.+18     	; 0x26c <APP_vidStart+0xb2>
     25a:	0e 94 ce 02 	call	0x59c	; 0x59c <HLCD_ClrDisplay>
     25e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <flag1>
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <flag2>
     268:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <flag3>
		  HLCD_gotoXY(0,0);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     274:	8a e9       	ldi	r24, 0x9A	; 154
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 fd 02 	call	0x5fa	; 0x5fa <HLCD_WriteString>
     27c:	08 95       	ret
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     27e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <flag1>
     282:	81 11       	cpse	r24, r1
     284:	09 c0       	rjmp	.+18     	; 0x298 <APP_vidStart+0xde>
     286:	0e 94 ce 02 	call	0x59c	; 0x59c <HLCD_ClrDisplay>
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <flag1>
     290:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <flag2>
     294:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <flag3>
		  HLCD_gotoXY(0,0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     2a0:	88 ea       	ldi	r24, 0xA8	; 168
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <HLCD_WriteString>
     2a8:	08 95       	ret

000002aa <HExtInt_enInit>:
		errorStatus = HEXTINT_NOK;
	}


	return errorStatus;
}
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	c8 2f       	mov	r28, r24
     2b0:	d6 2f       	mov	r29, r22
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	62 e0       	ldi	r22, 0x02	; 2
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     2c6:	6d 2f       	mov	r22, r29
     2c8:	8c 2f       	mov	r24, r28
     2ca:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vidExtInt_init>
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <HExtInt_enCBFInt0>:
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	21 f0       	breq	.+8      	; 0x2e2 <HExtInt_enCBFInt0+0xc>
     2da:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <MEXTINT_vidCallBackFuncInt0>
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	08 95       	ret
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	08 95       	ret

000002e6 <HExtInt0_enIntDisable>:

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     2e6:	0e 94 85 06 	call	0xd0a	; 0xd0a <MEXTINT_vidDisableInterrupt>
     2ea:	08 95       	ret

000002ec <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     2ec:	0e 94 89 06 	call	0xd12	; 0xd12 <MEXTINT_vidEnableInterrupt>
     2f0:	08 95       	ret

000002f2 <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	18 2f       	mov	r17, r24
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     306:	c8 2f       	mov	r28, r24
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	67 e0       	ldi	r22, 0x07	; 7
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     312:	c8 2b       	or	r28, r24
     314:	01 2f       	mov	r16, r17
     316:	02 95       	swap	r16
     318:	0f 70       	andi	r16, 0x0F	; 15
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	15 c0       	rjmp	.+42     	; 0x348 <HLCD_vidWritecmd+0x56>
     31e:	ed 2f       	mov	r30, r29
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	40 2f       	mov	r20, r16
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	0d 2e       	mov	r0, r29
     328:	02 c0       	rjmp	.+4      	; 0x32e <HLCD_vidWritecmd+0x3c>
     32a:	55 95       	asr	r21
     32c:	47 95       	ror	r20
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <HLCD_vidWritecmd+0x38>
     332:	41 70       	andi	r20, 0x01	; 1
     334:	ee 0f       	add	r30, r30
     336:	ff 1f       	adc	r31, r31
     338:	e8 58       	subi	r30, 0x88	; 136
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	61 81       	ldd	r22, Z+1	; 0x01
     33e:	80 81       	ld	r24, Z
     340:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     344:	c8 2b       	or	r28, r24
     346:	df 5f       	subi	r29, 0xFF	; 255
     348:	d4 30       	cpi	r29, 0x04	; 4
     34a:	48 f3       	brcs	.-46     	; 0x31e <HLCD_vidWritecmd+0x2c>
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     356:	c8 2b       	or	r28, r24
     358:	89 ef       	ldi	r24, 0xF9	; 249
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <HLCD_vidWritecmd+0x6a>
     360:	00 c0       	rjmp	.+0      	; 0x362 <HLCD_vidWritecmd+0x70>
     362:	00 00       	nop
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     36e:	c8 2b       	or	r28, r24
     370:	92 e4       	ldi	r25, 0x42	; 66
     372:	9a 95       	dec	r25
     374:	f1 f7       	brne	.-4      	; 0x372 <HLCD_vidWritecmd+0x80>
     376:	00 c0       	rjmp	.+0      	; 0x378 <HLCD_vidWritecmd+0x86>
     378:	1f 70       	andi	r17, 0x0F	; 15
     37a:	d0 e0       	ldi	r29, 0x00	; 0
     37c:	15 c0       	rjmp	.+42     	; 0x3a8 <HLCD_vidWritecmd+0xb6>
     37e:	ed 2f       	mov	r30, r29
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	41 2f       	mov	r20, r17
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	0d 2e       	mov	r0, r29
     388:	02 c0       	rjmp	.+4      	; 0x38e <HLCD_vidWritecmd+0x9c>
     38a:	55 95       	asr	r21
     38c:	47 95       	ror	r20
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <HLCD_vidWritecmd+0x98>
     392:	41 70       	andi	r20, 0x01	; 1
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	e8 58       	subi	r30, 0x88	; 136
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	61 81       	ldd	r22, Z+1	; 0x01
     39e:	80 81       	ld	r24, Z
     3a0:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     3a4:	c8 2b       	or	r28, r24
     3a6:	df 5f       	subi	r29, 0xFF	; 255
     3a8:	d4 30       	cpi	r29, 0x04	; 4
     3aa:	48 f3       	brcs	.-46     	; 0x37e <HLCD_vidWritecmd+0x8c>
     3ac:	41 e0       	ldi	r20, 0x01	; 1
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     3b6:	c8 2b       	or	r28, r24
     3b8:	e9 ef       	ldi	r30, 0xF9	; 249
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	31 97       	sbiw	r30, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <HLCD_vidWritecmd+0xca>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <HLCD_vidWritecmd+0xd0>
     3c2:	00 00       	nop
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     3ce:	8c 2b       	or	r24, r28
     3d0:	e3 ef       	ldi	r30, 0xF3	; 243
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <HLCD_vidWritecmd+0xe2>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <HLCD_vidWritecmd+0xe8>
     3da:	00 00       	nop
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	08 95       	ret

000003e6 <HLCD_vidInit>:
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	d0 e0       	ldi	r29, 0x00	; 0
     3ec:	c0 e0       	ldi	r28, 0x00	; 0
     3ee:	0d c0       	rjmp	.+26     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     3f0:	ed 2f       	mov	r30, r29
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e8 58       	subi	r30, 0x88	; 136
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	61 81       	ldd	r22, Z+1	; 0x01
     400:	80 81       	ld	r24, Z
     402:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
     406:	c8 2b       	or	r28, r24
     408:	df 5f       	subi	r29, 0xFF	; 255
     40a:	d4 30       	cpi	r29, 0x04	; 4
     40c:	88 f3       	brcs	.-30     	; 0x3f0 <HLCD_vidInit+0xa>
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	67 e0       	ldi	r22, 0x07	; 7
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
     418:	c8 2b       	or	r28, r24
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
     424:	c8 2b       	or	r28, r24
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
     430:	c8 2b       	or	r28, r24
     432:	8f e0       	ldi	r24, 0x0F	; 15
     434:	97 e2       	ldi	r25, 0x27	; 39
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     43c:	00 00       	nop
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     444:	c8 2b       	or	r28, r24
     446:	e9 ef       	ldi	r30, 0xF9	; 249
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	31 97       	sbiw	r30, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     450:	00 00       	nop
     452:	88 e2       	ldi	r24, 0x28	; 40
     454:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     458:	c8 2b       	or	r28, r24
     45a:	89 ef       	ldi	r24, 0xF9	; 249
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     464:	00 00       	nop
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     46c:	c8 2b       	or	r28, r24
     46e:	e7 ee       	ldi	r30, 0xE7	; 231
     470:	f3 e0       	ldi	r31, 0x03	; 3
     472:	31 97       	sbiw	r30, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     478:	00 00       	nop
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     480:	c8 2b       	or	r28, r24
     482:	89 ef       	ldi	r24, 0xF9	; 249
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     48c:	00 00       	nop
     48e:	8c e0       	ldi	r24, 0x0C	; 12
     490:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     494:	8c 2b       	or	r24, r28
     496:	e9 ef       	ldi	r30, 0xF9	; 249
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4a0:	00 00       	nop
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <HLCD_vidWriteChar>:
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	18 2f       	mov	r17, r24
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     4bc:	c8 2f       	mov	r28, r24
     4be:	41 e0       	ldi	r20, 0x01	; 1
     4c0:	67 e0       	ldi	r22, 0x07	; 7
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     4c8:	c8 2b       	or	r28, r24
     4ca:	01 2f       	mov	r16, r17
     4cc:	02 95       	swap	r16
     4ce:	0f 70       	andi	r16, 0x0F	; 15
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	15 c0       	rjmp	.+42     	; 0x4fe <HLCD_vidWriteChar+0x56>
     4d4:	ed 2f       	mov	r30, r29
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	40 2f       	mov	r20, r16
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	0d 2e       	mov	r0, r29
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <HLCD_vidWriteChar+0x3c>
     4e0:	55 95       	asr	r21
     4e2:	47 95       	ror	r20
     4e4:	0a 94       	dec	r0
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <HLCD_vidWriteChar+0x38>
     4e8:	41 70       	andi	r20, 0x01	; 1
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e8 58       	subi	r30, 0x88	; 136
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	61 81       	ldd	r22, Z+1	; 0x01
     4f4:	80 81       	ld	r24, Z
     4f6:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     4fa:	c8 2b       	or	r28, r24
     4fc:	df 5f       	subi	r29, 0xFF	; 255
     4fe:	d4 30       	cpi	r29, 0x04	; 4
     500:	48 f3       	brcs	.-46     	; 0x4d4 <HLCD_vidWriteChar+0x2c>
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     50c:	c8 2b       	or	r28, r24
     50e:	89 ef       	ldi	r24, 0xF9	; 249
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <HLCD_vidWriteChar+0x6a>
     516:	00 c0       	rjmp	.+0      	; 0x518 <HLCD_vidWriteChar+0x70>
     518:	00 00       	nop
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     524:	c8 2b       	or	r28, r24
     526:	92 e4       	ldi	r25, 0x42	; 66
     528:	9a 95       	dec	r25
     52a:	f1 f7       	brne	.-4      	; 0x528 <HLCD_vidWriteChar+0x80>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <HLCD_vidWriteChar+0x86>
     52e:	1f 70       	andi	r17, 0x0F	; 15
     530:	d0 e0       	ldi	r29, 0x00	; 0
     532:	15 c0       	rjmp	.+42     	; 0x55e <HLCD_vidWriteChar+0xb6>
     534:	ed 2f       	mov	r30, r29
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	41 2f       	mov	r20, r17
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	0d 2e       	mov	r0, r29
     53e:	02 c0       	rjmp	.+4      	; 0x544 <HLCD_vidWriteChar+0x9c>
     540:	55 95       	asr	r21
     542:	47 95       	ror	r20
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <HLCD_vidWriteChar+0x98>
     548:	41 70       	andi	r20, 0x01	; 1
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e8 58       	subi	r30, 0x88	; 136
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	61 81       	ldd	r22, Z+1	; 0x01
     554:	80 81       	ld	r24, Z
     556:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     55a:	c8 2b       	or	r28, r24
     55c:	df 5f       	subi	r29, 0xFF	; 255
     55e:	d4 30       	cpi	r29, 0x04	; 4
     560:	48 f3       	brcs	.-46     	; 0x534 <HLCD_vidWriteChar+0x8c>
     562:	41 e0       	ldi	r20, 0x01	; 1
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     56c:	c8 2b       	or	r28, r24
     56e:	e9 ef       	ldi	r30, 0xF9	; 249
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <HLCD_vidWriteChar+0xca>
     576:	00 c0       	rjmp	.+0      	; 0x578 <HLCD_vidWriteChar+0xd0>
     578:	00 00       	nop
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     584:	8c 2b       	or	r24, r28
     586:	e3 ef       	ldi	r30, 0xF3	; 243
     588:	f1 e0       	ldi	r31, 0x01	; 1
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <HLCD_vidWriteChar+0xe2>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <HLCD_vidWriteChar+0xe8>
     590:	00 00       	nop
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <HLCD_ClrDisplay>:
     59c:	cf 93       	push	r28
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     5a4:	c8 2f       	mov	r28, r24
     5a6:	87 ee       	ldi	r24, 0xE7	; 231
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <HLCD_ClrDisplay+0xe>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <HLCD_ClrDisplay+0x14>
     5b0:	00 00       	nop
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     5b8:	8c 2b       	or	r24, r28
     5ba:	e7 ee       	ldi	r30, 0xE7	; 231
     5bc:	f3 e0       	ldi	r31, 0x03	; 3
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <HLCD_ClrDisplay+0x22>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <HLCD_ClrDisplay+0x28>
     5c4:	00 00       	nop
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     5ca:	81 11       	cpse	r24, r1
     5cc:	08 c0       	rjmp	.+16     	; 0x5de <HLCD_gotoXY+0x14>
     5ce:	60 31       	cpi	r22, 0x10	; 16
     5d0:	30 f4       	brcc	.+12     	; 0x5de <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     5d2:	86 2f       	mov	r24, r22
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	80 68       	ori	r24, 0x80	; 128
     5d8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     5dc:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	41 f4       	brne	.+16     	; 0x5f2 <HLCD_gotoXY+0x28>
     5e2:	60 31       	cpi	r22, 0x10	; 16
     5e4:	40 f4       	brcc	.+16     	; 0x5f6 <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     5e6:	86 2f       	mov	r24, r22
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	80 6c       	ori	r24, 0xC0	; 192
     5ec:	0e 94 79 01 	call	0x2f2	; 0x2f2 <HLCD_vidWritecmd>
     5f0:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     5f2:	85 e0       	ldi	r24, 0x05	; 5
     5f4:	08 95       	ret
     5f6:	85 e0       	ldi	r24, 0x05	; 5
	}
	return errorStatus;
}
     5f8:	08 95       	ret

000005fa <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     606:	fc 01       	movw	r30, r24
     608:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     60a:	c0 e0       	ldi	r28, 0x00	; 0
     60c:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     60e:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     610:	08 c0       	rjmp	.+16     	; 0x622 <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     612:	0e 94 54 02 	call	0x4a8	; 0x4a8 <HLCD_vidWriteChar>
     616:	18 2b       	or	r17, r24
		string = str[++count];
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	f7 01       	movw	r30, r14
     61c:	ec 0f       	add	r30, r28
     61e:	fd 1f       	adc	r31, r29
     620:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     622:	81 11       	cpse	r24, r1
     624:	f6 cf       	rjmp	.-20     	; 0x612 <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     626:	81 2f       	mov	r24, r17
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	08 95       	ret

00000634 <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     638:	00 97       	sbiw	r24, 0x00	; 0
     63a:	a9 f1       	breq	.+106    	; 0x6a6 <KEYPAD_init+0x72>
     63c:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     63e:	69 81       	ldd	r22, Y+1	; 0x01
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	88 81       	ld	r24, Y
     644:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     648:	6b 81       	ldd	r22, Y+3	; 0x03
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     652:	6d 81       	ldd	r22, Y+5	; 0x05
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     65c:	69 81       	ldd	r22, Y+1	; 0x01
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	88 81       	ld	r24, Y
     662:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     666:	6b 81       	ldd	r22, Y+3	; 0x03
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     670:	6d 81       	ldd	r22, Y+5	; 0x05
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     67a:	6f 81       	ldd	r22, Y+7	; 0x07
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	8e 81       	ldd	r24, Y+6	; 0x06
     680:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     684:	69 85       	ldd	r22, Y+9	; 0x09
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	88 85       	ldd	r24, Y+8	; 0x08
     68a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     68e:	6b 85       	ldd	r22, Y+11	; 0x0b
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	8a 85       	ldd	r24, Y+10	; 0x0a
     694:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     698:	6d 85       	ldd	r22, Y+13	; 0x0d
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	8c 85       	ldd	r24, Y+12	; 0x0c
     69e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     6a6:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	1f 92       	push	r1
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     6c4:	07 e6       	ldi	r16, 0x67	; 103
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	f8 01       	movw	r30, r16
     6ca:	67 81       	ldd	r22, Z+7	; 0x07
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	86 81       	ldd	r24, Z+6	; 0x06
     6d0:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     6d4:	f8 01       	movw	r30, r16
     6d6:	61 85       	ldd	r22, Z+9	; 0x09
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	80 85       	ldd	r24, Z+8	; 0x08
     6dc:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     6e0:	f8 01       	movw	r30, r16
     6e2:	63 85       	ldd	r22, Z+11	; 0x0b
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	82 85       	ldd	r24, Z+10	; 0x0a
     6e8:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     6ec:	f8 01       	movw	r30, r16
     6ee:	65 85       	ldd	r22, Z+13	; 0x0d
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	84 85       	ldd	r24, Z+12	; 0x0c
     6f4:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     6f8:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     6fa:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     6fc:	42 c0       	rjmp	.+132    	; 0x782 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     6fe:	e7 e6       	ldi	r30, 0x67	; 103
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	67 81       	ldd	r22, Z+7	; 0x07
     704:	60 0f       	add	r22, r16
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	86 81       	ldd	r24, Z+6	; 0x06
     70a:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
		for(j=0;j<3;j++)
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	2d c0       	rjmp	.+90     	; 0x76c <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     712:	e7 e6       	ldi	r30, 0x67	; 103
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	61 81       	ldd	r22, Z+1	; 0x01
     718:	61 0f       	add	r22, r17
     71a:	ae 01       	movw	r20, r28
     71c:	4f 5f       	subi	r20, 0xFF	; 255
     71e:	5f 4f       	sbci	r21, 0xFF	; 255
     720:	80 81       	ld	r24, Z
     722:	0e 94 8d 05 	call	0xb1a	; 0xb1a <DIO_readPIN>
			if(value==0)
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	81 11       	cpse	r24, r1
     72a:	1f c0       	rjmp	.+62     	; 0x76a <KEYPAD_read+0xbc>
     72c:	0a c0       	rjmp	.+20     	; 0x742 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     72e:	e7 e6       	ldi	r30, 0x67	; 103
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	61 81       	ldd	r22, Z+1	; 0x01
     734:	61 0f       	add	r22, r17
     736:	ae 01       	movw	r20, r28
     738:	4f 5f       	subi	r20, 0xFF	; 255
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	80 81       	ld	r24, Z
     73e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	88 23       	and	r24, r24
     746:	99 f3       	breq	.-26     	; 0x72e <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     748:	80 2f       	mov	r24, r16
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	e8 0f       	add	r30, r24
     754:	f9 1f       	adc	r31, r25
     756:	ea 54       	subi	r30, 0x4A	; 74
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	e1 0f       	add	r30, r17
     75c:	f1 1d       	adc	r31, r1
     75e:	80 81       	ld	r24, Z
     760:	f7 01       	movw	r30, r14
     762:	80 83       	st	Z, r24
				flag=1;
     764:	dd 24       	eor	r13, r13
     766:	d3 94       	inc	r13
				
				break;
     768:	03 c0       	rjmp	.+6      	; 0x770 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     76a:	1f 5f       	subi	r17, 0xFF	; 255
     76c:	13 30       	cpi	r17, 0x03	; 3
     76e:	88 f2       	brcs	.-94     	; 0x712 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     770:	e7 e6       	ldi	r30, 0x67	; 103
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	67 81       	ldd	r22, Z+7	; 0x07
     776:	60 0f       	add	r22, r16
     778:	41 e0       	ldi	r20, 0x01	; 1
     77a:	86 81       	ldd	r24, Z+6	; 0x06
     77c:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     780:	0f 5f       	subi	r16, 0xFF	; 255
     782:	04 30       	cpi	r16, 0x04	; 4
     784:	08 f4       	brcc	.+2      	; 0x788 <KEYPAD_read+0xda>
     786:	bb cf       	rjmp	.-138    	; 0x6fe <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	df 16       	cp	r13, r31
     78c:	19 f0       	breq	.+6      	; 0x794 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     78e:	8e e4       	ldi	r24, 0x4E	; 78
     790:	f7 01       	movw	r30, r14
     792:	80 83       	st	Z, r24
		return ret_val;
	}
	
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	08 95       	ret

000007a8 <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	91 f0       	breq	.+36     	; 0x7d6 <TIMER_Manager_init+0x2e>
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 81       	ld	r18, Z
     7b6:	23 30       	cpi	r18, 0x03	; 3
     7b8:	80 f4       	brcc	.+32     	; 0x7da <TIMER_Manager_init+0x32>
     7ba:	21 81       	ldd	r18, Z+1	; 0x01
     7bc:	2a 30       	cpi	r18, 0x0A	; 10
     7be:	78 f4       	brcc	.+30     	; 0x7de <TIMER_Manager_init+0x36>
     7c0:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     7c2:	0e 94 65 07 	call	0xeca	; 0xeca <TIMER_init>
     7c6:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     7c8:	68 81       	ld	r22, Y
     7ca:	8d 81       	ldd	r24, Y+5	; 0x05
     7cc:	9e 81       	ldd	r25, Y+6	; 0x06
     7ce:	0e 94 67 09 	call	0x12ce	; 0x12ce <TIMER_setCallBack>
     7d2:	81 2b       	or	r24, r17
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <TIMER_Manager_init+0x38>
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <TIMER_Manager_init+0x38>
     7de:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	08 95       	ret

000007e8 <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	51 f0       	breq	.+20     	; 0x800 <__DATA_REGION_LENGTH__>
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 81       	ld	r18, Z
     7f0:	23 30       	cpi	r18, 0x03	; 3
     7f2:	40 f4       	brcc	.+16     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7f4:	21 81       	ldd	r18, Z+1	; 0x01
     7f6:	2a 30       	cpi	r18, 0x0A	; 10
     7f8:	38 f4       	brcc	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
     7fa:	0e 94 ee 07 	call	0xfdc	; 0xfdc <TIMER_start>
     7fe:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	08 95       	ret
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	08 95       	ret
     808:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
     80a:	08 95       	ret

0000080c <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
     80c:	83 30       	cpi	r24, 0x03	; 3
     80e:	18 f4       	brcc	.+6      	; 0x816 <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
     810:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIMER_stop>
     814:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     816:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     818:	08 95       	ret

0000081a <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	63 e0       	ldi	r22, 0x03	; 3
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     824:	8a e1       	ldi	r24, 0x1A	; 26
     826:	8a 95       	dec	r24
     828:	f1 f7       	brne	.-4      	; 0x826 <HULTRASONIC_vidTrigger+0xc>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	63 e0       	ldi	r22, 0x03	; 3
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>
     836:	08 95       	ret

00000838 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     838:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <g_v_u16_ovfCounts>
     83c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     840:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     844:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	a1 1d       	adc	r26, r1
     84c:	b1 1d       	adc	r27, r1
     84e:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <g_v_u16_ovfCounts>
     852:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     856:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     85a:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     85e:	08 95       	ret

00000860 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
     860:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <g_v_u8_flag>
     864:	81 11       	cpse	r24, r1
     866:	14 c0       	rjmp	.+40     	; 0x890 <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
     868:	0e 94 e7 09 	call	0x13ce	; 0x13ce <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
     86c:	62 e0       	ldi	r22, 0x02	; 2
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vidExtInt_init>
		g_v_u8_flag = 1;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
     87a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <g_v_u16_ovfCounts>
     87e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     882:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     886:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
     88a:	0e 94 cf 09 	call	0x139e	; 0x139e <vidTimer2_start>
     88e:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
     890:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <g_v_u8_flag>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	09 f0       	breq	.+2      	; 0x89a <HULTRASONIC_vidSigCalc+0x3a>
     898:	56 c0       	rjmp	.+172    	; 0x946 <HULTRASONIC_vidSigCalc+0xe6>
	{
		vidTimer2_stop();
     89a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
     89e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <MTIMER_u8GetTCNT>
     8a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
     8a6:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <g_v_u16_ovfCounts>
     8aa:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     8ae:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     8b2:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     8b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <g_v_u16_ovf>
     8ba:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <g_v_u16_ovf+0x1>
     8be:	a0 93 ea 00 	sts	0x00EA, r26	; 0x8000ea <g_v_u16_ovf+0x2>
     8c2:	b0 93 eb 00 	sts	0x00EB, r27	; 0x8000eb <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
     8c6:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <g_v_u8_cap>
     8ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_v_u16_ovf>
     8ce:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_v_u16_ovf+0x1>
     8d2:	a0 91 ea 00 	lds	r26, 0x00EA	; 0x8000ea <g_v_u16_ovf+0x2>
     8d6:	b0 91 eb 00 	lds	r27, 0x00EB	; 0x8000eb <g_v_u16_ovf+0x3>
     8da:	ba 2f       	mov	r27, r26
     8dc:	a9 2f       	mov	r26, r25
     8de:	98 2f       	mov	r25, r24
     8e0:	88 27       	eor	r24, r24
     8e2:	bc 01       	movw	r22, r24
     8e4:	cd 01       	movw	r24, r26
     8e6:	62 0f       	add	r22, r18
     8e8:	71 1d       	adc	r23, r1
     8ea:	81 1d       	adc	r24, r1
     8ec:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = ((float64_t)global_u32Ticks / 932.95)-2.0;
     8ee:	0e 94 02 0b 	call	0x1604	; 0x1604 <__floatunsisf>
     8f2:	2d ec       	ldi	r18, 0xCD	; 205
     8f4:	3c e3       	ldi	r19, 0x3C	; 60
     8f6:	49 e6       	ldi	r20, 0x69	; 105
     8f8:	54 e4       	ldi	r21, 0x44	; 68
     8fa:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divsf3>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	50 e4       	ldi	r21, 0x40	; 64
     906:	0e 94 23 0a 	call	0x1446	; 0x1446 <__subsf3>
     90a:	60 93 ca 00 	sts	0x00CA, r22	; 0x8000ca <global_f64distance>
     90e:	70 93 cb 00 	sts	0x00CB, r23	; 0x8000cb <global_f64distance+0x1>
     912:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <global_f64distance+0x2>
     916:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
     91a:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <g_v_u16_ovf>
     91e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <g_v_u16_ovf+0x1>
     922:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <g_v_u16_ovf+0x2>
     926:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <g_v_u16_ovf+0x3>
     92a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <g_v_u16_ovfCounts>
     92e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     932:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     936:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     93a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
     93e:	63 e0       	ldi	r22, 0x03	; 3
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vidExtInt_init>
     946:	08 95       	ret

00000948 <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	63 e0       	ldi	r22, 0x03	; 3
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	62 e0       	ldi	r22, 0x02	; 2
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 12 05 	call	0xa24	; 0xa24 <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
     966:	63 e0       	ldi	r22, 0x03	; 3
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 84 09 	call	0x1308	; 0x1308 <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 b3 09 	call	0x1366	; 0x1366 <u8Timer2_setPrescallar>
	(void) vidTimer2_OvfIrqEnable();
     97a:	0e 94 c7 09 	call	0x138e	; 0x138e <vidTimer2_OvfIrqEnable>

	 MTIMER_vidEnableGlobalInterrupt();
     97e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MTIMER_vidEnableGlobalInterrupt>
     982:	08 95       	ret

00000984 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
     984:	0e 94 0d 04 	call	0x81a	; 0x81a <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
     988:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <global_f64distance>
     98c:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <global_f64distance+0x1>
     990:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <global_f64distance+0x2>
     994:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <global_f64distance+0x3>
}
     998:	08 95       	ret

0000099a <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
     99a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <vidTimer2_setcbf_OVF>
     99e:	08 95       	ret

000009a0 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
     9a0:	0e 94 80 06 	call	0xd00	; 0xd00 <MEXTINT_vidCallBackFunc>
     9a4:	08 95       	ret

000009a6 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
     9a6:	0e 94 97 00 	call	0x12e	; 0x12e <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
     9aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <APP_vidStart>
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <main+0x4>

000009b0 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     9b0:	68 30       	cpi	r22, 0x08	; 8
     9b2:	a0 f5       	brcc	.+104    	; 0xa1c <DIO_init+0x6c>
	{
		if (port == porta)
     9b4:	81 11       	cpse	r24, r1
     9b6:	0b c0       	rjmp	.+22     	; 0x9ce <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     9b8:	8a b3       	in	r24, 0x1a	; 26
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_init+0x12>
     9be:	44 0f       	add	r20, r20
     9c0:	55 1f       	adc	r21, r21
     9c2:	6a 95       	dec	r22
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_init+0xe>
     9c6:	48 2b       	or	r20, r24
     9c8:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
		}
		else if (port == portb)
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	59 f4       	brne	.+22     	; 0x9e8 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     9d2:	87 b3       	in	r24, 0x17	; 23
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_init+0x2c>
     9d8:	44 0f       	add	r20, r20
     9da:	55 1f       	adc	r21, r21
     9dc:	6a 95       	dec	r22
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_init+0x28>
     9e0:	48 2b       	or	r20, r24
     9e2:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	08 95       	ret
		}
		else if (port == portc)
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	59 f4       	brne	.+22     	; 0xa02 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     9ec:	84 b3       	in	r24, 0x14	; 20
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <DIO_init+0x46>
     9f2:	44 0f       	add	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	6a 95       	dec	r22
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <DIO_init+0x42>
     9fa:	48 2b       	or	r20, r24
     9fc:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret
		}
		else if (port == portd)
     a02:	83 30       	cpi	r24, 0x03	; 3
     a04:	69 f4       	brne	.+26     	; 0xa20 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     a06:	81 b3       	in	r24, 0x11	; 17
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_init+0x60>
     a0c:	44 0f       	add	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	6a 95       	dec	r22
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_init+0x5c>
     a14:	48 2b       	or	r20, r24
     a16:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     a20:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     a22:	08 95       	ret

00000a24 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     a24:	68 30       	cpi	r22, 0x08	; 8
     a26:	08 f0       	brcs	.+2      	; 0xa2a <DIO_writePIN+0x6>
     a28:	74 c0       	rjmp	.+232    	; 0xb12 <DIO_writePIN+0xee>
	{
		if (port == porta)
     a2a:	81 11       	cpse	r24, r1
     a2c:	1b c0       	rjmp	.+54     	; 0xa64 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     a2e:	41 30       	cpi	r20, 0x01	; 1
     a30:	61 f4       	brne	.+24     	; 0xa4a <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     a32:	2b b3       	in	r18, 0x1b	; 27
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_writePIN+0x1a>
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	6a 95       	dec	r22
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_writePIN+0x16>
     a42:	82 2b       	or	r24, r18
     a44:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     a4a:	2b b3       	in	r18, 0x1b	; 27
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_writePIN+0x32>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	6a 95       	dec	r22
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_writePIN+0x2e>
     a5a:	80 95       	com	r24
     a5c:	82 23       	and	r24, r18
     a5e:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	08 95       	ret
		}
		else if (port == portb)
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	d9 f4       	brne	.+54     	; 0xa9e <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     a68:	41 30       	cpi	r20, 0x01	; 1
     a6a:	61 f4       	brne	.+24     	; 0xa84 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     a6c:	28 b3       	in	r18, 0x18	; 24
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_writePIN+0x54>
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_writePIN+0x50>
     a7c:	82 2b       	or	r24, r18
     a7e:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     a84:	28 b3       	in	r18, 0x18	; 24
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_writePIN+0x6c>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_writePIN+0x68>
     a94:	80 95       	com	r24
     a96:	82 23       	and	r24, r18
     a98:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	08 95       	ret
		}
		else if (port == portc)
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	d9 f4       	brne	.+54     	; 0xad8 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     aa2:	41 30       	cpi	r20, 0x01	; 1
     aa4:	61 f4       	brne	.+24     	; 0xabe <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     aa6:	25 b3       	in	r18, 0x15	; 21
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_writePIN+0x8e>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	6a 95       	dec	r22
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_writePIN+0x8a>
     ab6:	82 2b       	or	r24, r18
     ab8:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     abe:	25 b3       	in	r18, 0x15	; 21
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_writePIN+0xa6>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	6a 95       	dec	r22
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <DIO_writePIN+0xa2>
     ace:	80 95       	com	r24
     ad0:	82 23       	and	r24, r18
     ad2:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
		}
		else if (port == portd)
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	e9 f4       	brne	.+58     	; 0xb16 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     adc:	41 30       	cpi	r20, 0x01	; 1
     ade:	61 f4       	brne	.+24     	; 0xaf8 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     ae0:	22 b3       	in	r18, 0x12	; 18
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <DIO_writePIN+0xc8>
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	6a 95       	dec	r22
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <DIO_writePIN+0xc4>
     af0:	82 2b       	or	r24, r18
     af2:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     af8:	22 b3       	in	r18, 0x12	; 18
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <DIO_writePIN+0xe0>
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	6a 95       	dec	r22
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <DIO_writePIN+0xdc>
     b08:	80 95       	com	r24
     b0a:	82 23       	and	r24, r18
     b0c:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     b16:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     b18:	08 95       	ret

00000b1a <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     b1a:	68 30       	cpi	r22, 0x08	; 8
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <DIO_readPIN+0x6>
     b1e:	64 c0       	rjmp	.+200    	; 0xbe8 <DIO_readPIN+0xce>
	{
		if (port == porta)
     b20:	81 11       	cpse	r24, r1
     b22:	17 c0       	rjmp	.+46     	; 0xb52 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     b24:	79 b3       	in	r23, 0x19	; 25
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9c 01       	movw	r18, r24
     b2c:	06 2e       	mov	r0, r22
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_readPIN+0x1a>
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	0a 94       	dec	r0
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_readPIN+0x16>
     b38:	87 2f       	mov	r24, r23
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	82 23       	and	r24, r18
     b3e:	93 23       	and	r25, r19
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_readPIN+0x2c>
     b42:	96 95       	lsr	r25
     b44:	87 95       	ror	r24
     b46:	6a 95       	dec	r22
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_readPIN+0x28>
     b4a:	fa 01       	movw	r30, r20
     b4c:	80 83       	st	Z, r24
			return DIO_E_OK;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	08 95       	ret
		}
		else if (port == portb)
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	b9 f4       	brne	.+46     	; 0xb84 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     b56:	76 b3       	in	r23, 0x16	; 22
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	9c 01       	movw	r18, r24
     b5e:	06 2e       	mov	r0, r22
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_readPIN+0x4c>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_readPIN+0x48>
     b6a:	87 2f       	mov	r24, r23
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	82 23       	and	r24, r18
     b70:	93 23       	and	r25, r19
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <DIO_readPIN+0x5e>
     b74:	96 95       	lsr	r25
     b76:	87 95       	ror	r24
     b78:	6a 95       	dec	r22
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <DIO_readPIN+0x5a>
     b7c:	fa 01       	movw	r30, r20
     b7e:	80 83       	st	Z, r24
			return DIO_E_OK;
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 95       	ret
		}
		else if (port == portc)
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	b9 f4       	brne	.+46     	; 0xbb6 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     b88:	73 b3       	in	r23, 0x13	; 19
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	9c 01       	movw	r18, r24
     b90:	06 2e       	mov	r0, r22
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <DIO_readPIN+0x7e>
     b94:	22 0f       	add	r18, r18
     b96:	33 1f       	adc	r19, r19
     b98:	0a 94       	dec	r0
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <DIO_readPIN+0x7a>
     b9c:	87 2f       	mov	r24, r23
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	82 23       	and	r24, r18
     ba2:	93 23       	and	r25, r19
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_readPIN+0x90>
     ba6:	96 95       	lsr	r25
     ba8:	87 95       	ror	r24
     baa:	6a 95       	dec	r22
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_readPIN+0x8c>
     bae:	fa 01       	movw	r30, r20
     bb0:	80 83       	st	Z, r24
			return DIO_E_OK;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	08 95       	ret
		}
		else if (port == portd)
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	c9 f4       	brne	.+50     	; 0xbec <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     bba:	70 b3       	in	r23, 0x10	; 16
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9c 01       	movw	r18, r24
     bc2:	06 2e       	mov	r0, r22
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <DIO_readPIN+0xb0>
     bc6:	22 0f       	add	r18, r18
     bc8:	33 1f       	adc	r19, r19
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DIO_readPIN+0xac>
     bce:	87 2f       	mov	r24, r23
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	82 23       	and	r24, r18
     bd4:	93 23       	and	r25, r19
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_readPIN+0xc2>
     bd8:	96 95       	lsr	r25
     bda:	87 95       	ror	r24
     bdc:	6a 95       	dec	r22
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_readPIN+0xbe>
     be0:	fa 01       	movw	r30, r20
     be2:	80 83       	st	Z, r24
			return DIO_E_OK;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     bec:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     bee:	08 95       	ret

00000bf0 <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <vidExtInt_init+0x6>
     bf4:	78 c0       	rjmp	.+240    	; 0xce6 <vidExtInt_init+0xf6>
     bf6:	64 30       	cpi	r22, 0x04	; 4
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <vidExtInt_init+0xc>
     bfa:	77 c0       	rjmp	.+238    	; 0xcea <vidExtInt_init+0xfa>
     bfc:	81 11       	cpse	r24, r1
     bfe:	28 c0       	rjmp	.+80     	; 0xc50 <vidExtInt_init+0x60>
     c00:	61 30       	cpi	r22, 0x01	; 1
     c02:	71 f0       	breq	.+28     	; 0xc20 <vidExtInt_init+0x30>
     c04:	28 f0       	brcs	.+10     	; 0xc10 <vidExtInt_init+0x20>
     c06:	62 30       	cpi	r22, 0x02	; 2
     c08:	99 f0       	breq	.+38     	; 0xc30 <vidExtInt_init+0x40>
     c0a:	63 30       	cpi	r22, 0x03	; 3
     c0c:	c9 f0       	breq	.+50     	; 0xc40 <vidExtInt_init+0x50>
     c0e:	6f c0       	rjmp	.+222    	; 0xcee <vidExtInt_init+0xfe>
     c10:	85 b7       	in	r24, 0x35	; 53
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	85 bf       	out	0x35, r24	; 53
     c16:	85 b7       	in	r24, 0x35	; 53
     c18:	8d 7f       	andi	r24, 0xFD	; 253
     c1a:	85 bf       	out	0x35, r24	; 53
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	08 95       	ret
     c20:	85 b7       	in	r24, 0x35	; 53
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	85 bf       	out	0x35, r24	; 53
     c26:	85 b7       	in	r24, 0x35	; 53
     c28:	8d 7f       	andi	r24, 0xFD	; 253
     c2a:	85 bf       	out	0x35, r24	; 53
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	08 95       	ret
     c30:	85 b7       	in	r24, 0x35	; 53
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	85 bf       	out	0x35, r24	; 53
     c36:	85 b7       	in	r24, 0x35	; 53
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	85 bf       	out	0x35, r24	; 53
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	08 95       	ret
     c40:	85 b7       	in	r24, 0x35	; 53
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	85 bf       	out	0x35, r24	; 53
     c46:	85 b7       	in	r24, 0x35	; 53
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	85 bf       	out	0x35, r24	; 53
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	08 95       	ret
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	81 f5       	brne	.+96     	; 0xcb4 <vidExtInt_init+0xc4>
     c54:	61 30       	cpi	r22, 0x01	; 1
     c56:	71 f0       	breq	.+28     	; 0xc74 <vidExtInt_init+0x84>
     c58:	28 f0       	brcs	.+10     	; 0xc64 <vidExtInt_init+0x74>
     c5a:	62 30       	cpi	r22, 0x02	; 2
     c5c:	99 f0       	breq	.+38     	; 0xc84 <vidExtInt_init+0x94>
     c5e:	63 30       	cpi	r22, 0x03	; 3
     c60:	c9 f0       	breq	.+50     	; 0xc94 <vidExtInt_init+0xa4>
     c62:	20 c0       	rjmp	.+64     	; 0xca4 <vidExtInt_init+0xb4>
     c64:	85 b7       	in	r24, 0x35	; 53
     c66:	8b 7f       	andi	r24, 0xFB	; 251
     c68:	85 bf       	out	0x35, r24	; 53
     c6a:	85 b7       	in	r24, 0x35	; 53
     c6c:	87 7f       	andi	r24, 0xF7	; 247
     c6e:	85 bf       	out	0x35, r24	; 53
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	19 c0       	rjmp	.+50     	; 0xca6 <vidExtInt_init+0xb6>
     c74:	85 b7       	in	r24, 0x35	; 53
     c76:	84 60       	ori	r24, 0x04	; 4
     c78:	85 bf       	out	0x35, r24	; 53
     c7a:	85 b7       	in	r24, 0x35	; 53
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	85 bf       	out	0x35, r24	; 53
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	11 c0       	rjmp	.+34     	; 0xca6 <vidExtInt_init+0xb6>
     c84:	85 b7       	in	r24, 0x35	; 53
     c86:	8b 7f       	andi	r24, 0xFB	; 251
     c88:	85 bf       	out	0x35, r24	; 53
     c8a:	85 b7       	in	r24, 0x35	; 53
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	85 bf       	out	0x35, r24	; 53
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <vidExtInt_init+0xb6>
     c94:	85 b7       	in	r24, 0x35	; 53
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	85 bf       	out	0x35, r24	; 53
     c9a:	85 b7       	in	r24, 0x35	; 53
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	85 bf       	out	0x35, r24	; 53
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <vidExtInt_init+0xb6>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	9b b7       	in	r25, 0x3b	; 59
     ca8:	90 68       	ori	r25, 0x80	; 128
     caa:	9b bf       	out	0x3b, r25	; 59
     cac:	9a b7       	in	r25, 0x3a	; 58
     cae:	90 68       	ori	r25, 0x80	; 128
     cb0:	9a bf       	out	0x3a, r25	; 58
     cb2:	08 95       	ret
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	e9 f4       	brne	.+58     	; 0xcf2 <vidExtInt_init+0x102>
     cb8:	62 30       	cpi	r22, 0x02	; 2
     cba:	19 f0       	breq	.+6      	; 0xcc2 <vidExtInt_init+0xd2>
     cbc:	63 30       	cpi	r22, 0x03	; 3
     cbe:	31 f0       	breq	.+12     	; 0xccc <vidExtInt_init+0xdc>
     cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <vidExtInt_init+0xe6>
     cc2:	84 b7       	in	r24, 0x34	; 52
     cc4:	8f 7b       	andi	r24, 0xBF	; 191
     cc6:	84 bf       	out	0x34, r24	; 52
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	06 c0       	rjmp	.+12     	; 0xcd8 <vidExtInt_init+0xe8>
     ccc:	84 b7       	in	r24, 0x34	; 52
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	84 bf       	out	0x34, r24	; 52
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <vidExtInt_init+0xe8>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	9b b7       	in	r25, 0x3b	; 59
     cda:	90 62       	ori	r25, 0x20	; 32
     cdc:	9b bf       	out	0x3b, r25	; 59
     cde:	9a b7       	in	r25, 0x3a	; 58
     ce0:	90 62       	ori	r25, 0x20	; 32
     ce2:	9a bf       	out	0x3a, r25	; 58
     ce4:	08 95       	ret
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	08 95       	ret
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	08 95       	ret
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	08 95       	ret

00000cf6 <MEXTINT_vidCallBackFuncInt0>:
     cf6:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <callBackFuncInt0+0x1>
     cfa:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <callBackFuncInt0>
     cfe:	08 95       	ret

00000d00 <MEXTINT_vidCallBackFunc>:
     d00:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <callBack+0x1>
     d04:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <callBack>
     d08:	08 95       	ret

00000d0a <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
     d0a:	8b b7       	in	r24, 0x3b	; 59
     d0c:	8f 7b       	andi	r24, 0xBF	; 191
     d0e:	8b bf       	out	0x3b, r24	; 59
     d10:	08 95       	ret

00000d12 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
     d12:	8a b7       	in	r24, 0x3a	; 58
     d14:	80 64       	ori	r24, 0x40	; 64
     d16:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
     d18:	8b b7       	in	r24, 0x3b	; 59
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	8b bf       	out	0x3b, r24	; 59
     d1e:	08 95       	ret

00000d20 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
	callBackFuncInt0();
     d42:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <callBackFuncInt0>
     d46:	f0 91 d8 00 	lds	r31, 0x00D8	; 0x8000d8 <callBackFuncInt0+0x1>
     d4a:	09 95       	icall
}
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_2>:

ISR(INT1_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
	callBackFunc();
     d90:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <callBackFunc>
     d94:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <callBackFunc+0x1>
     d98:	09 95       	icall
}
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_3>:

ISR(INT2_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	callBack();
     dde:	e0 91 d5 00 	lds	r30, 0x00D5	; 0x8000d5 <callBack>
     de2:	f0 91 d6 00 	lds	r31, 0x00D6	; 0x8000d6 <callBack+0x1>
     de6:	09 95       	icall
}
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <sg_Timer0_callBackPtr>
     e30:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <sg_Timer0_callBackPtr+0x1>
     e34:	89 2b       	or	r24, r25
     e36:	41 f0       	breq	.+16     	; 0xe48 <__vector_11+0x3e>
     e38:	88 b7       	in	r24, 0x38	; 56
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	88 bf       	out	0x38, r24	; 56
     e3e:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <sg_Timer0_callBackPtr>
     e42:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <sg_Timer0_callBackPtr+0x1>
     e46:	09 95       	icall
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__vector_9>:
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	2f 93       	push	r18
     e76:	3f 93       	push	r19
     e78:	4f 93       	push	r20
     e7a:	5f 93       	push	r21
     e7c:	6f 93       	push	r22
     e7e:	7f 93       	push	r23
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	af 93       	push	r26
     e86:	bf 93       	push	r27
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
     e8c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <sg_Timer1_callBackPtr>
     e90:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <sg_Timer1_callBackPtr+0x1>
     e94:	89 2b       	or	r24, r25
     e96:	41 f0       	breq	.+16     	; 0xea8 <__vector_9+0x3e>
     e98:	88 b7       	in	r24, 0x38	; 56
     e9a:	8b 7f       	andi	r24, 0xFB	; 251
     e9c:	88 bf       	out	0x38, r24	; 56
     e9e:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <sg_Timer1_callBackPtr>
     ea2:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <sg_Timer1_callBackPtr+0x1>
     ea6:	09 95       	icall
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <TIMER_init>:
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	09 f4       	brne	.+2      	; 0xed0 <TIMER_init+0x6>
     ece:	78 c0       	rjmp	.+240    	; 0xfc0 <TIMER_init+0xf6>
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 81       	ld	r18, Z
     ed4:	23 30       	cpi	r18, 0x03	; 3
     ed6:	08 f0       	brcs	.+2      	; 0xeda <TIMER_init+0x10>
     ed8:	75 c0       	rjmp	.+234    	; 0xfc4 <TIMER_init+0xfa>
     eda:	31 81       	ldd	r19, Z+1	; 0x01
     edc:	3a 30       	cpi	r19, 0x0A	; 10
     ede:	08 f0       	brcs	.+2      	; 0xee2 <TIMER_init+0x18>
     ee0:	73 c0       	rjmp	.+230    	; 0xfc8 <TIMER_init+0xfe>
     ee2:	21 30       	cpi	r18, 0x01	; 1
     ee4:	19 f1       	breq	.+70     	; 0xf2c <TIMER_init+0x62>
     ee6:	20 f0       	brcs	.+8      	; 0xef0 <TIMER_init+0x26>
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	09 f4       	brne	.+2      	; 0xeee <TIMER_init+0x24>
     eec:	50 c0       	rjmp	.+160    	; 0xf8e <TIMER_init+0xc4>
     eee:	6e c0       	rjmp	.+220    	; 0xfcc <TIMER_init+0x102>
     ef0:	12 be       	out	0x32, r1	; 50
     ef2:	13 be       	out	0x33, r1	; 51
     ef4:	1c be       	out	0x3c, r1	; 60
     ef6:	fc 01       	movw	r30, r24
     ef8:	22 81       	ldd	r18, Z+2	; 0x02
     efa:	22 bf       	out	0x32, r18	; 50
     efc:	23 b7       	in	r18, 0x33	; 51
     efe:	20 68       	ori	r18, 0x80	; 128
     f00:	23 bf       	out	0x33, r18	; 51
     f02:	23 b7       	in	r18, 0x33	; 51
     f04:	2f 7b       	andi	r18, 0xBF	; 191
     f06:	23 bf       	out	0x33, r18	; 51
     f08:	23 b7       	in	r18, 0x33	; 51
     f0a:	27 7f       	andi	r18, 0xF7	; 247
     f0c:	23 bf       	out	0x33, r18	; 51
     f0e:	23 b7       	in	r18, 0x33	; 51
     f10:	2f 7e       	andi	r18, 0xEF	; 239
     f12:	23 bf       	out	0x33, r18	; 51
     f14:	23 b7       	in	r18, 0x33	; 51
     f16:	2f 7d       	andi	r18, 0xDF	; 223
     f18:	23 bf       	out	0x33, r18	; 51
     f1a:	84 81       	ldd	r24, Z+4	; 0x04
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	09 f0       	breq	.+2      	; 0xf22 <TIMER_init+0x58>
     f20:	57 c0       	rjmp	.+174    	; 0xfd0 <TIMER_init+0x106>
     f22:	89 b7       	in	r24, 0x39	; 57
     f24:	81 60       	ori	r24, 0x01	; 1
     f26:	89 bf       	out	0x39, r24	; 57
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	08 95       	ret
     f2c:	1c bc       	out	0x2c, r1	; 44
     f2e:	1d bc       	out	0x2d, r1	; 45
     f30:	1f bc       	out	0x2f, r1	; 47
     f32:	1e bc       	out	0x2e, r1	; 46
     f34:	1b bc       	out	0x2b, r1	; 43
     f36:	1a bc       	out	0x2a, r1	; 42
     f38:	fc 01       	movw	r30, r24
     f3a:	22 81       	ldd	r18, Z+2	; 0x02
     f3c:	33 81       	ldd	r19, Z+3	; 0x03
     f3e:	3d bd       	out	0x2d, r19	; 45
     f40:	2c bd       	out	0x2c, r18	; 44
     f42:	2f b5       	in	r18, 0x2f	; 47
     f44:	28 60       	ori	r18, 0x08	; 8
     f46:	2f bd       	out	0x2f, r18	; 47
     f48:	2f b5       	in	r18, 0x2f	; 47
     f4a:	24 60       	ori	r18, 0x04	; 4
     f4c:	2f bd       	out	0x2f, r18	; 47
     f4e:	2f b5       	in	r18, 0x2f	; 47
     f50:	2e 7f       	andi	r18, 0xFE	; 254
     f52:	2f bd       	out	0x2f, r18	; 47
     f54:	2f b5       	in	r18, 0x2f	; 47
     f56:	2d 7f       	andi	r18, 0xFD	; 253
     f58:	2f bd       	out	0x2f, r18	; 47
     f5a:	2e b5       	in	r18, 0x2e	; 46
     f5c:	2f 7e       	andi	r18, 0xEF	; 239
     f5e:	2e bd       	out	0x2e, r18	; 46
     f60:	2e b5       	in	r18, 0x2e	; 46
     f62:	27 7f       	andi	r18, 0xF7	; 247
     f64:	2e bd       	out	0x2e, r18	; 46
     f66:	2f b5       	in	r18, 0x2f	; 47
     f68:	2f 7b       	andi	r18, 0xBF	; 191
     f6a:	2f bd       	out	0x2f, r18	; 47
     f6c:	2f b5       	in	r18, 0x2f	; 47
     f6e:	2f 77       	andi	r18, 0x7F	; 127
     f70:	2f bd       	out	0x2f, r18	; 47
     f72:	2f b5       	in	r18, 0x2f	; 47
     f74:	2f 7e       	andi	r18, 0xEF	; 239
     f76:	2f bd       	out	0x2f, r18	; 47
     f78:	2f b5       	in	r18, 0x2f	; 47
     f7a:	2f 7d       	andi	r18, 0xDF	; 223
     f7c:	2f bd       	out	0x2f, r18	; 47
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	41 f5       	brne	.+80     	; 0xfd4 <TIMER_init+0x10a>
     f84:	89 b7       	in	r24, 0x39	; 57
     f86:	84 60       	ori	r24, 0x04	; 4
     f88:	89 bf       	out	0x39, r24	; 57
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	08 95       	ret
     f8e:	14 bc       	out	0x24, r1	; 36
     f90:	15 bc       	out	0x25, r1	; 37
     f92:	13 bc       	out	0x23, r1	; 35
     f94:	14 bc       	out	0x24, r1	; 36
     f96:	25 b5       	in	r18, 0x25	; 37
     f98:	2f 7b       	andi	r18, 0xBF	; 191
     f9a:	25 bd       	out	0x25, r18	; 37
     f9c:	25 b5       	in	r18, 0x25	; 37
     f9e:	27 7f       	andi	r18, 0xF7	; 247
     fa0:	25 bd       	out	0x25, r18	; 37
     fa2:	25 b5       	in	r18, 0x25	; 37
     fa4:	2f 7e       	andi	r18, 0xEF	; 239
     fa6:	25 bd       	out	0x25, r18	; 37
     fa8:	25 b5       	in	r18, 0x25	; 37
     faa:	2f 7d       	andi	r18, 0xDF	; 223
     fac:	25 bd       	out	0x25, r18	; 37
     fae:	fc 01       	movw	r30, r24
     fb0:	84 81       	ldd	r24, Z+4	; 0x04
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	89 f4       	brne	.+34     	; 0xfd8 <TIMER_init+0x10e>
     fb6:	89 b7       	in	r24, 0x39	; 57
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	89 bf       	out	0x39, r24	; 57
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	08 95       	ret
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	08 95       	ret
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	08 95       	ret
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	08 95       	ret
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 95       	ret
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	08 95       	ret
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	08 95       	ret

00000fdc <TIMER_start>:
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	09 f4       	brne	.+2      	; 0xfe2 <TIMER_start+0x6>
     fe0:	3b c1       	rjmp	.+630    	; 0x1258 <TIMER_start+0x27c>
     fe2:	dc 01       	movw	r26, r24
     fe4:	2c 91       	ld	r18, X
     fe6:	23 30       	cpi	r18, 0x03	; 3
     fe8:	08 f0       	brcs	.+2      	; 0xfec <TIMER_start+0x10>
     fea:	38 c1       	rjmp	.+624    	; 0x125c <TIMER_start+0x280>
     fec:	11 96       	adiw	r26, 0x01	; 1
     fee:	ec 91       	ld	r30, X
     ff0:	ea 30       	cpi	r30, 0x0A	; 10
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <TIMER_start+0x1a>
     ff4:	35 c1       	rjmp	.+618    	; 0x1260 <TIMER_start+0x284>
     ff6:	21 30       	cpi	r18, 0x01	; 1
     ff8:	09 f4       	brne	.+2      	; 0xffc <TIMER_start+0x20>
     ffa:	68 c0       	rjmp	.+208    	; 0x10cc <TIMER_start+0xf0>
     ffc:	20 f0       	brcs	.+8      	; 0x1006 <TIMER_start+0x2a>
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	09 f4       	brne	.+2      	; 0x1004 <TIMER_start+0x28>
    1002:	c7 c0       	rjmp	.+398    	; 0x1192 <TIMER_start+0x1b6>
    1004:	2f c1       	rjmp	.+606    	; 0x1264 <TIMER_start+0x288>
    1006:	8e 2f       	mov	r24, r30
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	8a 30       	cpi	r24, 0x0A	; 10
    100c:	91 05       	cpc	r25, r1
    100e:	08 f0       	brcs	.+2      	; 0x1012 <TIMER_start+0x36>
    1010:	2b c1       	rjmp	.+598    	; 0x1268 <TIMER_start+0x28c>
    1012:	fc 01       	movw	r30, r24
    1014:	e6 5d       	subi	r30, 0xD6	; 214
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__tablejump2__>
    101c:	83 b7       	in	r24, 0x33	; 51
    101e:	8e 7f       	andi	r24, 0xFE	; 254
    1020:	83 bf       	out	0x33, r24	; 51
    1022:	83 b7       	in	r24, 0x33	; 51
    1024:	8d 7f       	andi	r24, 0xFD	; 253
    1026:	83 bf       	out	0x33, r24	; 51
    1028:	83 b7       	in	r24, 0x33	; 51
    102a:	8b 7f       	andi	r24, 0xFB	; 251
    102c:	83 bf       	out	0x33, r24	; 51
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret
    1032:	83 b7       	in	r24, 0x33	; 51
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	83 bf       	out	0x33, r24	; 51
    1038:	83 b7       	in	r24, 0x33	; 51
    103a:	8d 7f       	andi	r24, 0xFD	; 253
    103c:	83 bf       	out	0x33, r24	; 51
    103e:	83 b7       	in	r24, 0x33	; 51
    1040:	8b 7f       	andi	r24, 0xFB	; 251
    1042:	83 bf       	out	0x33, r24	; 51
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret
    1048:	83 b7       	in	r24, 0x33	; 51
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	83 bf       	out	0x33, r24	; 51
    104e:	83 b7       	in	r24, 0x33	; 51
    1050:	82 60       	ori	r24, 0x02	; 2
    1052:	83 bf       	out	0x33, r24	; 51
    1054:	83 b7       	in	r24, 0x33	; 51
    1056:	8b 7f       	andi	r24, 0xFB	; 251
    1058:	83 bf       	out	0x33, r24	; 51
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret
    105e:	83 b7       	in	r24, 0x33	; 51
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	83 bf       	out	0x33, r24	; 51
    1064:	83 b7       	in	r24, 0x33	; 51
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	83 bf       	out	0x33, r24	; 51
    106a:	83 b7       	in	r24, 0x33	; 51
    106c:	8b 7f       	andi	r24, 0xFB	; 251
    106e:	83 bf       	out	0x33, r24	; 51
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	08 95       	ret
    1074:	83 b7       	in	r24, 0x33	; 51
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	83 bf       	out	0x33, r24	; 51
    107a:	83 b7       	in	r24, 0x33	; 51
    107c:	8d 7f       	andi	r24, 0xFD	; 253
    107e:	83 bf       	out	0x33, r24	; 51
    1080:	83 b7       	in	r24, 0x33	; 51
    1082:	84 60       	ori	r24, 0x04	; 4
    1084:	83 bf       	out	0x33, r24	; 51
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	08 95       	ret
    108a:	83 b7       	in	r24, 0x33	; 51
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	83 bf       	out	0x33, r24	; 51
    1090:	83 b7       	in	r24, 0x33	; 51
    1092:	8d 7f       	andi	r24, 0xFD	; 253
    1094:	83 bf       	out	0x33, r24	; 51
    1096:	83 b7       	in	r24, 0x33	; 51
    1098:	84 60       	ori	r24, 0x04	; 4
    109a:	83 bf       	out	0x33, r24	; 51
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 95       	ret
    10a0:	83 b7       	in	r24, 0x33	; 51
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	83 bf       	out	0x33, r24	; 51
    10a6:	83 b7       	in	r24, 0x33	; 51
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	83 bf       	out	0x33, r24	; 51
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	84 60       	ori	r24, 0x04	; 4
    10b0:	83 bf       	out	0x33, r24	; 51
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret
    10b6:	83 b7       	in	r24, 0x33	; 51
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	83 bf       	out	0x33, r24	; 51
    10bc:	83 b7       	in	r24, 0x33	; 51
    10be:	82 60       	ori	r24, 0x02	; 2
    10c0:	83 bf       	out	0x33, r24	; 51
    10c2:	83 b7       	in	r24, 0x33	; 51
    10c4:	84 60       	ori	r24, 0x04	; 4
    10c6:	83 bf       	out	0x33, r24	; 51
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret
    10cc:	8e 2f       	mov	r24, r30
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	8a 30       	cpi	r24, 0x0A	; 10
    10d2:	91 05       	cpc	r25, r1
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <TIMER_start+0xfc>
    10d6:	ca c0       	rjmp	.+404    	; 0x126c <TIMER_start+0x290>
    10d8:	fc 01       	movw	r30, r24
    10da:	ec 5c       	subi	r30, 0xCC	; 204
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__tablejump2__>
    10e2:	8e b5       	in	r24, 0x2e	; 46
    10e4:	8e 7f       	andi	r24, 0xFE	; 254
    10e6:	8e bd       	out	0x2e, r24	; 46
    10e8:	8e b5       	in	r24, 0x2e	; 46
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8e bd       	out	0x2e, r24	; 46
    10ee:	8e b5       	in	r24, 0x2e	; 46
    10f0:	8b 7f       	andi	r24, 0xFB	; 251
    10f2:	8e bd       	out	0x2e, r24	; 46
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	08 95       	ret
    10f8:	8e b5       	in	r24, 0x2e	; 46
    10fa:	81 60       	ori	r24, 0x01	; 1
    10fc:	8e bd       	out	0x2e, r24	; 46
    10fe:	8e b5       	in	r24, 0x2e	; 46
    1100:	8d 7f       	andi	r24, 0xFD	; 253
    1102:	8e bd       	out	0x2e, r24	; 46
    1104:	8e b5       	in	r24, 0x2e	; 46
    1106:	8b 7f       	andi	r24, 0xFB	; 251
    1108:	8e bd       	out	0x2e, r24	; 46
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	08 95       	ret
    110e:	8e b5       	in	r24, 0x2e	; 46
    1110:	8e 7f       	andi	r24, 0xFE	; 254
    1112:	8e bd       	out	0x2e, r24	; 46
    1114:	8e b5       	in	r24, 0x2e	; 46
    1116:	82 60       	ori	r24, 0x02	; 2
    1118:	8e bd       	out	0x2e, r24	; 46
    111a:	8e b5       	in	r24, 0x2e	; 46
    111c:	8b 7f       	andi	r24, 0xFB	; 251
    111e:	8e bd       	out	0x2e, r24	; 46
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret
    1124:	8e b5       	in	r24, 0x2e	; 46
    1126:	81 60       	ori	r24, 0x01	; 1
    1128:	8e bd       	out	0x2e, r24	; 46
    112a:	8e b5       	in	r24, 0x2e	; 46
    112c:	82 60       	ori	r24, 0x02	; 2
    112e:	8e bd       	out	0x2e, r24	; 46
    1130:	8e b5       	in	r24, 0x2e	; 46
    1132:	8b 7f       	andi	r24, 0xFB	; 251
    1134:	8e bd       	out	0x2e, r24	; 46
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	08 95       	ret
    113a:	8e b5       	in	r24, 0x2e	; 46
    113c:	8e 7f       	andi	r24, 0xFE	; 254
    113e:	8e bd       	out	0x2e, r24	; 46
    1140:	8e b5       	in	r24, 0x2e	; 46
    1142:	8d 7f       	andi	r24, 0xFD	; 253
    1144:	8e bd       	out	0x2e, r24	; 46
    1146:	8e b5       	in	r24, 0x2e	; 46
    1148:	84 60       	ori	r24, 0x04	; 4
    114a:	8e bd       	out	0x2e, r24	; 46
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	08 95       	ret
    1150:	8e b5       	in	r24, 0x2e	; 46
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	8e bd       	out	0x2e, r24	; 46
    1156:	8e b5       	in	r24, 0x2e	; 46
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	8e bd       	out	0x2e, r24	; 46
    115c:	8e b5       	in	r24, 0x2e	; 46
    115e:	84 60       	ori	r24, 0x04	; 4
    1160:	8e bd       	out	0x2e, r24	; 46
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	08 95       	ret
    1166:	8e b5       	in	r24, 0x2e	; 46
    1168:	8e 7f       	andi	r24, 0xFE	; 254
    116a:	8e bd       	out	0x2e, r24	; 46
    116c:	8e b5       	in	r24, 0x2e	; 46
    116e:	82 60       	ori	r24, 0x02	; 2
    1170:	8e bd       	out	0x2e, r24	; 46
    1172:	8e b5       	in	r24, 0x2e	; 46
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	8e bd       	out	0x2e, r24	; 46
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret
    117c:	8e b5       	in	r24, 0x2e	; 46
    117e:	81 60       	ori	r24, 0x01	; 1
    1180:	8e bd       	out	0x2e, r24	; 46
    1182:	8e b5       	in	r24, 0x2e	; 46
    1184:	82 60       	ori	r24, 0x02	; 2
    1186:	8e bd       	out	0x2e, r24	; 46
    1188:	8e b5       	in	r24, 0x2e	; 46
    118a:	84 60       	ori	r24, 0x04	; 4
    118c:	8e bd       	out	0x2e, r24	; 46
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	08 95       	ret
    1192:	8e 2f       	mov	r24, r30
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	88 30       	cpi	r24, 0x08	; 8
    1198:	91 05       	cpc	r25, r1
    119a:	08 f0       	brcs	.+2      	; 0x119e <TIMER_start+0x1c2>
    119c:	69 c0       	rjmp	.+210    	; 0x1270 <TIMER_start+0x294>
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 5c       	subi	r30, 0xC2	; 194
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__tablejump2__>
    11a8:	85 b5       	in	r24, 0x25	; 37
    11aa:	8b 7f       	andi	r24, 0xFB	; 251
    11ac:	85 bd       	out	0x25, r24	; 37
    11ae:	85 b5       	in	r24, 0x25	; 37
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	85 bd       	out	0x25, r24	; 37
    11b4:	85 b5       	in	r24, 0x25	; 37
    11b6:	8e 7f       	andi	r24, 0xFE	; 254
    11b8:	85 bd       	out	0x25, r24	; 37
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	08 95       	ret
    11be:	85 b5       	in	r24, 0x25	; 37
    11c0:	84 60       	ori	r24, 0x04	; 4
    11c2:	85 bd       	out	0x25, r24	; 37
    11c4:	85 b5       	in	r24, 0x25	; 37
    11c6:	8d 7f       	andi	r24, 0xFD	; 253
    11c8:	85 bd       	out	0x25, r24	; 37
    11ca:	85 b5       	in	r24, 0x25	; 37
    11cc:	8e 7f       	andi	r24, 0xFE	; 254
    11ce:	85 bd       	out	0x25, r24	; 37
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret
    11d4:	85 b5       	in	r24, 0x25	; 37
    11d6:	8b 7f       	andi	r24, 0xFB	; 251
    11d8:	85 bd       	out	0x25, r24	; 37
    11da:	85 b5       	in	r24, 0x25	; 37
    11dc:	82 60       	ori	r24, 0x02	; 2
    11de:	85 bd       	out	0x25, r24	; 37
    11e0:	85 b5       	in	r24, 0x25	; 37
    11e2:	8e 7f       	andi	r24, 0xFE	; 254
    11e4:	85 bd       	out	0x25, r24	; 37
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret
    11ea:	85 b5       	in	r24, 0x25	; 37
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	85 bd       	out	0x25, r24	; 37
    11f0:	85 b5       	in	r24, 0x25	; 37
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	85 bd       	out	0x25, r24	; 37
    11f6:	85 b5       	in	r24, 0x25	; 37
    11f8:	8e 7f       	andi	r24, 0xFE	; 254
    11fa:	85 bd       	out	0x25, r24	; 37
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret
    1200:	85 b5       	in	r24, 0x25	; 37
    1202:	8b 7f       	andi	r24, 0xFB	; 251
    1204:	85 bd       	out	0x25, r24	; 37
    1206:	85 b5       	in	r24, 0x25	; 37
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	85 bd       	out	0x25, r24	; 37
    120c:	85 b5       	in	r24, 0x25	; 37
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	85 bd       	out	0x25, r24	; 37
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	08 95       	ret
    1216:	85 b5       	in	r24, 0x25	; 37
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	85 bd       	out	0x25, r24	; 37
    121c:	85 b5       	in	r24, 0x25	; 37
    121e:	8d 7f       	andi	r24, 0xFD	; 253
    1220:	85 bd       	out	0x25, r24	; 37
    1222:	85 b5       	in	r24, 0x25	; 37
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	85 bd       	out	0x25, r24	; 37
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	08 95       	ret
    122c:	85 b5       	in	r24, 0x25	; 37
    122e:	8b 7f       	andi	r24, 0xFB	; 251
    1230:	85 bd       	out	0x25, r24	; 37
    1232:	85 b5       	in	r24, 0x25	; 37
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	85 bd       	out	0x25, r24	; 37
    1238:	85 b5       	in	r24, 0x25	; 37
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	85 bd       	out	0x25, r24	; 37
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	08 95       	ret
    1242:	85 b5       	in	r24, 0x25	; 37
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	85 bd       	out	0x25, r24	; 37
    1248:	85 b5       	in	r24, 0x25	; 37
    124a:	82 60       	ori	r24, 0x02	; 2
    124c:	85 bd       	out	0x25, r24	; 37
    124e:	85 b5       	in	r24, 0x25	; 37
    1250:	81 60       	ori	r24, 0x01	; 1
    1252:	85 bd       	out	0x25, r24	; 37
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	08 95       	ret
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	08 95       	ret
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	08 95       	ret
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	08 95       	ret
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	08 95       	ret
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	08 95       	ret
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	08 95       	ret
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	08 95       	ret

00001274 <TIMER_stop>:
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	38 f5       	brcc	.+78     	; 0x12c6 <TIMER_stop+0x52>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	79 f0       	breq	.+30     	; 0x129a <TIMER_stop+0x26>
    127c:	18 f0       	brcs	.+6      	; 0x1284 <TIMER_stop+0x10>
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	b9 f0       	breq	.+46     	; 0x12b0 <TIMER_stop+0x3c>
    1282:	23 c0       	rjmp	.+70     	; 0x12ca <TIMER_stop+0x56>
    1284:	83 b7       	in	r24, 0x33	; 51
    1286:	8e 7f       	andi	r24, 0xFE	; 254
    1288:	83 bf       	out	0x33, r24	; 51
    128a:	83 b7       	in	r24, 0x33	; 51
    128c:	8d 7f       	andi	r24, 0xFD	; 253
    128e:	83 bf       	out	0x33, r24	; 51
    1290:	83 b7       	in	r24, 0x33	; 51
    1292:	8b 7f       	andi	r24, 0xFB	; 251
    1294:	83 bf       	out	0x33, r24	; 51
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret
    129a:	8e b5       	in	r24, 0x2e	; 46
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	8e bd       	out	0x2e, r24	; 46
    12a0:	8e b5       	in	r24, 0x2e	; 46
    12a2:	8d 7f       	andi	r24, 0xFD	; 253
    12a4:	8e bd       	out	0x2e, r24	; 46
    12a6:	8e b5       	in	r24, 0x2e	; 46
    12a8:	8b 7f       	andi	r24, 0xFB	; 251
    12aa:	8e bd       	out	0x2e, r24	; 46
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	08 95       	ret
    12b0:	85 b5       	in	r24, 0x25	; 37
    12b2:	8b 7f       	andi	r24, 0xFB	; 251
    12b4:	85 bd       	out	0x25, r24	; 37
    12b6:	85 b5       	in	r24, 0x25	; 37
    12b8:	8d 7f       	andi	r24, 0xFD	; 253
    12ba:	85 bd       	out	0x25, r24	; 37
    12bc:	85 b5       	in	r24, 0x25	; 37
    12be:	8e 7f       	andi	r24, 0xFE	; 254
    12c0:	85 bd       	out	0x25, r24	; 37
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	08 95       	ret
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	08 95       	ret
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	08 95       	ret

000012ce <TIMER_setCallBack>:
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	a9 f0       	breq	.+42     	; 0x12fc <TIMER_setCallBack+0x2e>
    12d2:	63 30       	cpi	r22, 0x03	; 3
    12d4:	a8 f4       	brcc	.+42     	; 0x1300 <TIMER_setCallBack+0x32>
    12d6:	61 30       	cpi	r22, 0x01	; 1
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <TIMER_setCallBack+0x22>
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <TIMER_setCallBack+0x16>
    12dc:	62 30       	cpi	r22, 0x02	; 2
    12de:	91 f0       	breq	.+36     	; 0x1304 <TIMER_setCallBack+0x36>
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	08 95       	ret
    12e4:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <sg_Timer0_callBackPtr+0x1>
    12e8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <sg_Timer0_callBackPtr>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret
    12f0:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <sg_Timer1_callBackPtr+0x1>
    12f4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <sg_Timer1_callBackPtr>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	08 95       	ret
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	08 95       	ret
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	08 95       	ret
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	08 95       	ret

00001308 <enuTimer2_init>:
    1308:	84 30       	cpi	r24, 0x04	; 4
    130a:	48 f5       	brcc	.+82     	; 0x135e <enuTimer2_init+0x56>
    130c:	14 bc       	out	0x24, r1	; 36
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	71 f0       	breq	.+28     	; 0x132e <enuTimer2_init+0x26>
    1312:	28 f0       	brcs	.+10     	; 0x131e <enuTimer2_init+0x16>
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	99 f0       	breq	.+38     	; 0x133e <enuTimer2_init+0x36>
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	c9 f0       	breq	.+50     	; 0x134e <enuTimer2_init+0x46>
    131c:	22 c0       	rjmp	.+68     	; 0x1362 <enuTimer2_init+0x5a>
    131e:	85 b5       	in	r24, 0x25	; 37
    1320:	87 7f       	andi	r24, 0xF7	; 247
    1322:	85 bd       	out	0x25, r24	; 37
    1324:	85 b5       	in	r24, 0x25	; 37
    1326:	8f 7b       	andi	r24, 0xBF	; 191
    1328:	85 bd       	out	0x25, r24	; 37
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	08 95       	ret
    132e:	85 b5       	in	r24, 0x25	; 37
    1330:	87 7f       	andi	r24, 0xF7	; 247
    1332:	85 bd       	out	0x25, r24	; 37
    1334:	85 b5       	in	r24, 0x25	; 37
    1336:	80 64       	ori	r24, 0x40	; 64
    1338:	85 bd       	out	0x25, r24	; 37
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
    133e:	85 b5       	in	r24, 0x25	; 37
    1340:	88 60       	ori	r24, 0x08	; 8
    1342:	85 bd       	out	0x25, r24	; 37
    1344:	85 b5       	in	r24, 0x25	; 37
    1346:	8f 7b       	andi	r24, 0xBF	; 191
    1348:	85 bd       	out	0x25, r24	; 37
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	08 95       	ret
    134e:	85 b5       	in	r24, 0x25	; 37
    1350:	88 60       	ori	r24, 0x08	; 8
    1352:	85 bd       	out	0x25, r24	; 37
    1354:	85 b5       	in	r24, 0x25	; 37
    1356:	80 64       	ori	r24, 0x40	; 64
    1358:	85 bd       	out	0x25, r24	; 37
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	08 95       	ret
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	08 95       	ret
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	08 95       	ret

00001366 <u8Timer2_setPrescallar>:
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	70 f4       	brcc	.+28     	; 0x1386 <u8Timer2_setPrescallar+0x20>
    136a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <global_prescaller>
    136e:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <global_timerStatus>
    1372:	91 30       	cpi	r25, 0x01	; 1
    1374:	51 f4       	brne	.+20     	; 0x138a <u8Timer2_setPrescallar+0x24>
    1376:	95 b5       	in	r25, 0x25	; 37
    1378:	98 7f       	andi	r25, 0xF8	; 248
    137a:	89 2b       	or	r24, r25
    137c:	95 b5       	in	r25, 0x25	; 37
    137e:	89 2b       	or	r24, r25
    1380:	85 bd       	out	0x25, r24	; 37
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	08 95       	ret
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	08 95       	ret

0000138e <vidTimer2_OvfIrqEnable>:
    138e:	88 b7       	in	r24, 0x38	; 56
    1390:	80 64       	ori	r24, 0x40	; 64
    1392:	88 bf       	out	0x38, r24	; 56
    1394:	89 b7       	in	r24, 0x39	; 57
    1396:	80 64       	ori	r24, 0x40	; 64
    1398:	89 bf       	out	0x39, r24	; 57
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	08 95       	ret

0000139e <vidTimer2_start>:
    139e:	95 b5       	in	r25, 0x25	; 37
    13a0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <global_prescaller>
    13a4:	89 2b       	or	r24, r25
    13a6:	85 bd       	out	0x25, r24	; 37
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <global_timerStatus>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <vidTimer2_stop>:
    13b2:	85 b5       	in	r24, 0x25	; 37
    13b4:	88 7f       	andi	r24, 0xF8	; 248
    13b6:	85 bd       	out	0x25, r24	; 37
    13b8:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <global_timerStatus>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	08 95       	ret

000013c0 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	21 f0       	breq	.+8      	; 0x13cc <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    13c4:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <globalCallFunc+0x1>
    13c8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <globalCallFunc>
    13cc:	08 95       	ret

000013ce <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    13ce:	14 bc       	out	0x24, r1	; 36
    13d0:	08 95       	ret

000013d2 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    13d2:	84 b5       	in	r24, 0x24	; 36
}
    13d4:	08 95       	ret

000013d6 <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    13d6:	8f b7       	in	r24, 0x3f	; 63
    13d8:	80 68       	ori	r24, 0x80	; 128
    13da:	8f bf       	out	0x3f, r24	; 63
    13dc:	08 95       	ret

000013de <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    1400:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <counter.1821>
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <counter.1821>
	if(counter == global_ovf)
    140a:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <global_ovf>
    140e:	89 13       	cpse	r24, r25
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1412:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <globalCallFunc>
    1416:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <globalCallFunc+0x1>
    141a:	30 97       	sbiw	r30, 0x00	; 0
    141c:	19 f0       	breq	.+6      	; 0x1424 <__vector_5+0x46>
		{
			counter = 0;
    141e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <counter.1821>

			globalCallFunc();
    1422:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__subsf3>:
    1446:	50 58       	subi	r21, 0x80	; 128

00001448 <__addsf3>:
    1448:	bb 27       	eor	r27, r27
    144a:	aa 27       	eor	r26, r26
    144c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__addsf3x>
    1450:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__fp_round>
    1454:	0e 94 48 0b 	call	0x1690	; 0x1690 <__fp_pscA>
    1458:	38 f0       	brcs	.+14     	; 0x1468 <__addsf3+0x20>
    145a:	0e 94 4f 0b 	call	0x169e	; 0x169e <__fp_pscB>
    145e:	20 f0       	brcs	.+8      	; 0x1468 <__addsf3+0x20>
    1460:	39 f4       	brne	.+14     	; 0x1470 <__addsf3+0x28>
    1462:	9f 3f       	cpi	r25, 0xFF	; 255
    1464:	19 f4       	brne	.+6      	; 0x146c <__addsf3+0x24>
    1466:	26 f4       	brtc	.+8      	; 0x1470 <__addsf3+0x28>
    1468:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__fp_nan>
    146c:	0e f4       	brtc	.+2      	; 0x1470 <__addsf3+0x28>
    146e:	e0 95       	com	r30
    1470:	e7 fb       	bst	r30, 7
    1472:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_inf>

00001476 <__addsf3x>:
    1476:	e9 2f       	mov	r30, r25
    1478:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fp_split3>
    147c:	58 f3       	brcs	.-42     	; 0x1454 <__addsf3+0xc>
    147e:	ba 17       	cp	r27, r26
    1480:	62 07       	cpc	r22, r18
    1482:	73 07       	cpc	r23, r19
    1484:	84 07       	cpc	r24, r20
    1486:	95 07       	cpc	r25, r21
    1488:	20 f0       	brcs	.+8      	; 0x1492 <__addsf3x+0x1c>
    148a:	79 f4       	brne	.+30     	; 0x14aa <__addsf3x+0x34>
    148c:	a6 f5       	brtc	.+104    	; 0x14f6 <__addsf3x+0x80>
    148e:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__fp_zero>
    1492:	0e f4       	brtc	.+2      	; 0x1496 <__addsf3x+0x20>
    1494:	e0 95       	com	r30
    1496:	0b 2e       	mov	r0, r27
    1498:	ba 2f       	mov	r27, r26
    149a:	a0 2d       	mov	r26, r0
    149c:	0b 01       	movw	r0, r22
    149e:	b9 01       	movw	r22, r18
    14a0:	90 01       	movw	r18, r0
    14a2:	0c 01       	movw	r0, r24
    14a4:	ca 01       	movw	r24, r20
    14a6:	a0 01       	movw	r20, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	ff 27       	eor	r31, r31
    14ac:	59 1b       	sub	r21, r25
    14ae:	99 f0       	breq	.+38     	; 0x14d6 <__addsf3x+0x60>
    14b0:	59 3f       	cpi	r21, 0xF9	; 249
    14b2:	50 f4       	brcc	.+20     	; 0x14c8 <__addsf3x+0x52>
    14b4:	50 3e       	cpi	r21, 0xE0	; 224
    14b6:	68 f1       	brcs	.+90     	; 0x1512 <__addsf3x+0x9c>
    14b8:	1a 16       	cp	r1, r26
    14ba:	f0 40       	sbci	r31, 0x00	; 0
    14bc:	a2 2f       	mov	r26, r18
    14be:	23 2f       	mov	r18, r19
    14c0:	34 2f       	mov	r19, r20
    14c2:	44 27       	eor	r20, r20
    14c4:	58 5f       	subi	r21, 0xF8	; 248
    14c6:	f3 cf       	rjmp	.-26     	; 0x14ae <__addsf3x+0x38>
    14c8:	46 95       	lsr	r20
    14ca:	37 95       	ror	r19
    14cc:	27 95       	ror	r18
    14ce:	a7 95       	ror	r26
    14d0:	f0 40       	sbci	r31, 0x00	; 0
    14d2:	53 95       	inc	r21
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__addsf3x+0x52>
    14d6:	7e f4       	brtc	.+30     	; 0x14f6 <__addsf3x+0x80>
    14d8:	1f 16       	cp	r1, r31
    14da:	ba 0b       	sbc	r27, r26
    14dc:	62 0b       	sbc	r22, r18
    14de:	73 0b       	sbc	r23, r19
    14e0:	84 0b       	sbc	r24, r20
    14e2:	ba f0       	brmi	.+46     	; 0x1512 <__addsf3x+0x9c>
    14e4:	91 50       	subi	r25, 0x01	; 1
    14e6:	a1 f0       	breq	.+40     	; 0x1510 <__addsf3x+0x9a>
    14e8:	ff 0f       	add	r31, r31
    14ea:	bb 1f       	adc	r27, r27
    14ec:	66 1f       	adc	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	c2 f7       	brpl	.-16     	; 0x14e4 <__addsf3x+0x6e>
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <__addsf3x+0x9c>
    14f6:	ba 0f       	add	r27, r26
    14f8:	62 1f       	adc	r22, r18
    14fa:	73 1f       	adc	r23, r19
    14fc:	84 1f       	adc	r24, r20
    14fe:	48 f4       	brcc	.+18     	; 0x1512 <__addsf3x+0x9c>
    1500:	87 95       	ror	r24
    1502:	77 95       	ror	r23
    1504:	67 95       	ror	r22
    1506:	b7 95       	ror	r27
    1508:	f7 95       	ror	r31
    150a:	9e 3f       	cpi	r25, 0xFE	; 254
    150c:	08 f0       	brcs	.+2      	; 0x1510 <__addsf3x+0x9a>
    150e:	b0 cf       	rjmp	.-160    	; 0x1470 <__addsf3+0x28>
    1510:	93 95       	inc	r25
    1512:	88 0f       	add	r24, r24
    1514:	08 f0       	brcs	.+2      	; 0x1518 <__addsf3x+0xa2>
    1516:	99 27       	eor	r25, r25
    1518:	ee 0f       	add	r30, r30
    151a:	97 95       	ror	r25
    151c:	87 95       	ror	r24
    151e:	08 95       	ret

00001520 <__divsf3>:
    1520:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__divsf3x>
    1524:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__fp_round>
    1528:	0e 94 4f 0b 	call	0x169e	; 0x169e <__fp_pscB>
    152c:	58 f0       	brcs	.+22     	; 0x1544 <__divsf3+0x24>
    152e:	0e 94 48 0b 	call	0x1690	; 0x1690 <__fp_pscA>
    1532:	40 f0       	brcs	.+16     	; 0x1544 <__divsf3+0x24>
    1534:	29 f4       	brne	.+10     	; 0x1540 <__divsf3+0x20>
    1536:	5f 3f       	cpi	r21, 0xFF	; 255
    1538:	29 f0       	breq	.+10     	; 0x1544 <__divsf3+0x24>
    153a:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_inf>
    153e:	51 11       	cpse	r21, r1
    1540:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__fp_szero>
    1544:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__fp_nan>

00001548 <__divsf3x>:
    1548:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fp_split3>
    154c:	68 f3       	brcs	.-38     	; 0x1528 <__divsf3+0x8>

0000154e <__divsf3_pse>:
    154e:	99 23       	and	r25, r25
    1550:	b1 f3       	breq	.-20     	; 0x153e <__divsf3+0x1e>
    1552:	55 23       	and	r21, r21
    1554:	91 f3       	breq	.-28     	; 0x153a <__divsf3+0x1a>
    1556:	95 1b       	sub	r25, r21
    1558:	55 0b       	sbc	r21, r21
    155a:	bb 27       	eor	r27, r27
    155c:	aa 27       	eor	r26, r26
    155e:	62 17       	cp	r22, r18
    1560:	73 07       	cpc	r23, r19
    1562:	84 07       	cpc	r24, r20
    1564:	38 f0       	brcs	.+14     	; 0x1574 <__divsf3_pse+0x26>
    1566:	9f 5f       	subi	r25, 0xFF	; 255
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	44 1f       	adc	r20, r20
    1570:	aa 1f       	adc	r26, r26
    1572:	a9 f3       	breq	.-22     	; 0x155e <__divsf3_pse+0x10>
    1574:	35 d0       	rcall	.+106    	; 0x15e0 <__divsf3_pse+0x92>
    1576:	0e 2e       	mov	r0, r30
    1578:	3a f0       	brmi	.+14     	; 0x1588 <__divsf3_pse+0x3a>
    157a:	e0 e8       	ldi	r30, 0x80	; 128
    157c:	32 d0       	rcall	.+100    	; 0x15e2 <__divsf3_pse+0x94>
    157e:	91 50       	subi	r25, 0x01	; 1
    1580:	50 40       	sbci	r21, 0x00	; 0
    1582:	e6 95       	lsr	r30
    1584:	00 1c       	adc	r0, r0
    1586:	ca f7       	brpl	.-14     	; 0x157a <__divsf3_pse+0x2c>
    1588:	2b d0       	rcall	.+86     	; 0x15e0 <__divsf3_pse+0x92>
    158a:	fe 2f       	mov	r31, r30
    158c:	29 d0       	rcall	.+82     	; 0x15e0 <__divsf3_pse+0x92>
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	bb 1f       	adc	r27, r27
    1596:	26 17       	cp	r18, r22
    1598:	37 07       	cpc	r19, r23
    159a:	48 07       	cpc	r20, r24
    159c:	ab 07       	cpc	r26, r27
    159e:	b0 e8       	ldi	r27, 0x80	; 128
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <__divsf3_pse+0x56>
    15a2:	bb 0b       	sbc	r27, r27
    15a4:	80 2d       	mov	r24, r0
    15a6:	bf 01       	movw	r22, r30
    15a8:	ff 27       	eor	r31, r31
    15aa:	93 58       	subi	r25, 0x83	; 131
    15ac:	5f 4f       	sbci	r21, 0xFF	; 255
    15ae:	3a f0       	brmi	.+14     	; 0x15be <__divsf3_pse+0x70>
    15b0:	9e 3f       	cpi	r25, 0xFE	; 254
    15b2:	51 05       	cpc	r21, r1
    15b4:	78 f0       	brcs	.+30     	; 0x15d4 <__divsf3_pse+0x86>
    15b6:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_inf>
    15ba:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__fp_szero>
    15be:	5f 3f       	cpi	r21, 0xFF	; 255
    15c0:	e4 f3       	brlt	.-8      	; 0x15ba <__divsf3_pse+0x6c>
    15c2:	98 3e       	cpi	r25, 0xE8	; 232
    15c4:	d4 f3       	brlt	.-12     	; 0x15ba <__divsf3_pse+0x6c>
    15c6:	86 95       	lsr	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	b7 95       	ror	r27
    15ce:	f7 95       	ror	r31
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	c9 f7       	brne	.-14     	; 0x15c6 <__divsf3_pse+0x78>
    15d4:	88 0f       	add	r24, r24
    15d6:	91 1d       	adc	r25, r1
    15d8:	96 95       	lsr	r25
    15da:	87 95       	ror	r24
    15dc:	97 f9       	bld	r25, 7
    15de:	08 95       	ret
    15e0:	e1 e0       	ldi	r30, 0x01	; 1
    15e2:	66 0f       	add	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	bb 1f       	adc	r27, r27
    15ea:	62 17       	cp	r22, r18
    15ec:	73 07       	cpc	r23, r19
    15ee:	84 07       	cpc	r24, r20
    15f0:	ba 07       	cpc	r27, r26
    15f2:	20 f0       	brcs	.+8      	; 0x15fc <__divsf3_pse+0xae>
    15f4:	62 1b       	sub	r22, r18
    15f6:	73 0b       	sbc	r23, r19
    15f8:	84 0b       	sbc	r24, r20
    15fa:	ba 0b       	sbc	r27, r26
    15fc:	ee 1f       	adc	r30, r30
    15fe:	88 f7       	brcc	.-30     	; 0x15e2 <__divsf3_pse+0x94>
    1600:	e0 95       	com	r30
    1602:	08 95       	ret

00001604 <__floatunsisf>:
    1604:	e8 94       	clt
    1606:	09 c0       	rjmp	.+18     	; 0x161a <__floatsisf+0x12>

00001608 <__floatsisf>:
    1608:	97 fb       	bst	r25, 7
    160a:	3e f4       	brtc	.+14     	; 0x161a <__floatsisf+0x12>
    160c:	90 95       	com	r25
    160e:	80 95       	com	r24
    1610:	70 95       	com	r23
    1612:	61 95       	neg	r22
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	8f 4f       	sbci	r24, 0xFF	; 255
    1618:	9f 4f       	sbci	r25, 0xFF	; 255
    161a:	99 23       	and	r25, r25
    161c:	a9 f0       	breq	.+42     	; 0x1648 <__floatsisf+0x40>
    161e:	f9 2f       	mov	r31, r25
    1620:	96 e9       	ldi	r25, 0x96	; 150
    1622:	bb 27       	eor	r27, r27
    1624:	93 95       	inc	r25
    1626:	f6 95       	lsr	r31
    1628:	87 95       	ror	r24
    162a:	77 95       	ror	r23
    162c:	67 95       	ror	r22
    162e:	b7 95       	ror	r27
    1630:	f1 11       	cpse	r31, r1
    1632:	f8 cf       	rjmp	.-16     	; 0x1624 <__floatsisf+0x1c>
    1634:	fa f4       	brpl	.+62     	; 0x1674 <__floatsisf+0x6c>
    1636:	bb 0f       	add	r27, r27
    1638:	11 f4       	brne	.+4      	; 0x163e <__floatsisf+0x36>
    163a:	60 ff       	sbrs	r22, 0
    163c:	1b c0       	rjmp	.+54     	; 0x1674 <__floatsisf+0x6c>
    163e:	6f 5f       	subi	r22, 0xFF	; 255
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <__floatsisf+0x6c>
    1648:	88 23       	and	r24, r24
    164a:	11 f0       	breq	.+4      	; 0x1650 <__floatsisf+0x48>
    164c:	96 e9       	ldi	r25, 0x96	; 150
    164e:	11 c0       	rjmp	.+34     	; 0x1672 <__floatsisf+0x6a>
    1650:	77 23       	and	r23, r23
    1652:	21 f0       	breq	.+8      	; 0x165c <__floatsisf+0x54>
    1654:	9e e8       	ldi	r25, 0x8E	; 142
    1656:	87 2f       	mov	r24, r23
    1658:	76 2f       	mov	r23, r22
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <__floatsisf+0x5e>
    165c:	66 23       	and	r22, r22
    165e:	71 f0       	breq	.+28     	; 0x167c <__floatsisf+0x74>
    1660:	96 e8       	ldi	r25, 0x86	; 134
    1662:	86 2f       	mov	r24, r22
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	2a f0       	brmi	.+10     	; 0x1674 <__floatsisf+0x6c>
    166a:	9a 95       	dec	r25
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	da f7       	brpl	.-10     	; 0x166a <__floatsisf+0x62>
    1674:	88 0f       	add	r24, r24
    1676:	96 95       	lsr	r25
    1678:	87 95       	ror	r24
    167a:	97 f9       	bld	r25, 7
    167c:	08 95       	ret

0000167e <__fp_inf>:
    167e:	97 f9       	bld	r25, 7
    1680:	9f 67       	ori	r25, 0x7F	; 127
    1682:	80 e8       	ldi	r24, 0x80	; 128
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	08 95       	ret

0000168a <__fp_nan>:
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	80 ec       	ldi	r24, 0xC0	; 192
    168e:	08 95       	ret

00001690 <__fp_pscA>:
    1690:	00 24       	eor	r0, r0
    1692:	0a 94       	dec	r0
    1694:	16 16       	cp	r1, r22
    1696:	17 06       	cpc	r1, r23
    1698:	18 06       	cpc	r1, r24
    169a:	09 06       	cpc	r0, r25
    169c:	08 95       	ret

0000169e <__fp_pscB>:
    169e:	00 24       	eor	r0, r0
    16a0:	0a 94       	dec	r0
    16a2:	12 16       	cp	r1, r18
    16a4:	13 06       	cpc	r1, r19
    16a6:	14 06       	cpc	r1, r20
    16a8:	05 06       	cpc	r0, r21
    16aa:	08 95       	ret

000016ac <__fp_round>:
    16ac:	09 2e       	mov	r0, r25
    16ae:	03 94       	inc	r0
    16b0:	00 0c       	add	r0, r0
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <__fp_round+0xc>
    16b4:	88 23       	and	r24, r24
    16b6:	52 f0       	brmi	.+20     	; 0x16cc <__fp_round+0x20>
    16b8:	bb 0f       	add	r27, r27
    16ba:	40 f4       	brcc	.+16     	; 0x16cc <__fp_round+0x20>
    16bc:	bf 2b       	or	r27, r31
    16be:	11 f4       	brne	.+4      	; 0x16c4 <__fp_round+0x18>
    16c0:	60 ff       	sbrs	r22, 0
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <__fp_round+0x20>
    16c4:	6f 5f       	subi	r22, 0xFF	; 255
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	08 95       	ret

000016ce <__fp_split3>:
    16ce:	57 fd       	sbrc	r21, 7
    16d0:	90 58       	subi	r25, 0x80	; 128
    16d2:	44 0f       	add	r20, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	59 f0       	breq	.+22     	; 0x16ee <__fp_splitA+0x10>
    16d8:	5f 3f       	cpi	r21, 0xFF	; 255
    16da:	71 f0       	breq	.+28     	; 0x16f8 <__fp_splitA+0x1a>
    16dc:	47 95       	ror	r20

000016de <__fp_splitA>:
    16de:	88 0f       	add	r24, r24
    16e0:	97 fb       	bst	r25, 7
    16e2:	99 1f       	adc	r25, r25
    16e4:	61 f0       	breq	.+24     	; 0x16fe <__fp_splitA+0x20>
    16e6:	9f 3f       	cpi	r25, 0xFF	; 255
    16e8:	79 f0       	breq	.+30     	; 0x1708 <__fp_splitA+0x2a>
    16ea:	87 95       	ror	r24
    16ec:	08 95       	ret
    16ee:	12 16       	cp	r1, r18
    16f0:	13 06       	cpc	r1, r19
    16f2:	14 06       	cpc	r1, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	f2 cf       	rjmp	.-28     	; 0x16dc <__fp_split3+0xe>
    16f8:	46 95       	lsr	r20
    16fa:	f1 df       	rcall	.-30     	; 0x16de <__fp_splitA>
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <__fp_splitA+0x30>
    16fe:	16 16       	cp	r1, r22
    1700:	17 06       	cpc	r1, r23
    1702:	18 06       	cpc	r1, r24
    1704:	99 1f       	adc	r25, r25
    1706:	f1 cf       	rjmp	.-30     	; 0x16ea <__fp_splitA+0xc>
    1708:	86 95       	lsr	r24
    170a:	71 05       	cpc	r23, r1
    170c:	61 05       	cpc	r22, r1
    170e:	08 94       	sec
    1710:	08 95       	ret

00001712 <__fp_zero>:
    1712:	e8 94       	clt

00001714 <__fp_szero>:
    1714:	bb 27       	eor	r27, r27
    1716:	66 27       	eor	r22, r22
    1718:	77 27       	eor	r23, r23
    171a:	cb 01       	movw	r24, r22
    171c:	97 f9       	bld	r25, 7
    171e:	08 95       	ret

00001720 <__tablejump2__>:
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	05 90       	lpm	r0, Z+
    1726:	f4 91       	lpm	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	09 94       	ijmp

0000172c <_exit>:
    172c:	f8 94       	cli

0000172e <__stop_program>:
    172e:	ff cf       	rjmp	.-2      	; 0x172e <__stop_program>
