
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000010d2  00001166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800084  00800084  0000118a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b56  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109a  00000000  00000000  00003fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd6  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00006d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e50  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e15  00000000  00000000  00008150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00009f65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 03 	call	0x77a	; 0x77a <main>
      8a:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      92:	0e 94 8e 03 	call	0x71c	; 0x71c <HULTRASONIC_vidInit>
    HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
      96:	86 e0       	ldi	r24, 0x06	; 6
      98:	93 e0       	ldi	r25, 0x03	; 3
      9a:	0e 94 b7 03 	call	0x76e	; 0x76e <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
      9e:	8a e1       	ldi	r24, 0x1A	; 26
      a0:	93 e0       	ldi	r25, 0x03	; 3
      a2:	0e 94 ba 03 	call	0x774	; 0x774 <HULTRASONIC_vidCBF_INT>
	(void) HLCD_vidInit();
      a6:	0e 94 0e 01 	call	0x21c	; 0x21c <HLCD_vidInit>
		DDRA = 0xFF;
      aa:	8f ef       	ldi	r24, 0xFF	; 255
      ac:	8a bb       	out	0x1a, r24	; 26
	PORTA =  KEYPAD_init(&st_gs_keypadConfig);
      ae:	80 e6       	ldi	r24, 0x60	; 96
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 3d 02 	call	0x47a	; 0x47a <KEYPAD_init>
      b6:	8b bb       	out	0x1b, r24	; 27
      b8:	08 95       	ret

000000ba <APP_vidStart>:

}

void APP_vidStart(void)
{
	   global_f64Dist = HULTRASONIC_u8Read();
      ba:	0e 94 ac 03 	call	0x758	; 0x758 <HULTRASONIC_u8Read>
      be:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <global_f64Dist>
      c2:	70 93 9a 00 	sts	0x009A, r23	; 0x80009a <global_f64Dist+0x1>
      c6:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <global_f64Dist+0x2>
      ca:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ce:	8f e2       	ldi	r24, 0x2F	; 47
      d0:	95 e7       	ldi	r25, 0x75	; 117
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	f1 f7       	brne	.-4      	; 0xd2 <APP_vidStart+0x18>
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <APP_vidStart+0x1e>
      d8:	00 00       	nop
 	_delay_ms(15);
	
	(void) KEYPAD_read(&u8KeyRead);
      da:	88 e9       	ldi	r24, 0x98	; 152
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <KEYPAD_read>
	
 	HLCD_gotoXY(0,0);
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <HLCD_gotoXY>
 	HLCD_WriteInt((Uint32_t) global_f64Dist);
      ea:	60 91 99 00 	lds	r22, 0x0099	; 0x800099 <global_f64Dist>
      ee:	70 91 9a 00 	lds	r23, 0x009A	; 0x80009a <global_f64Dist+0x1>
      f2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <global_f64Dist+0x2>
      f6:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <global_f64Dist+0x3>
      fa:	0e 94 75 07 	call	0xeea	; 0xeea <__fixunssfsi>
      fe:	0e 94 1e 02 	call	0x43c	; 0x43c <HLCD_WriteInt>
	 
	 if (u8KeyRead != 'N')
     102:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <u8KeyRead>
     106:	8e 34       	cpi	r24, 0x4E	; 78
     108:	71 f0       	breq	.+28     	; 0x126 <APP_vidStart+0x6c>
	 {
		 HLCD_gotoXY(1,0);
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <HLCD_gotoXY>
		 HLCD_vidWriteChar(u8KeyRead);
     112:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <u8KeyRead>
     116:	0e 94 6f 01 	call	0x2de	; 0x2de <HLCD_vidWriteChar>
     11a:	8f e2       	ldi	r24, 0x2F	; 47
     11c:	95 e7       	ldi	r25, 0x75	; 117
     11e:	01 97       	sbiw	r24, 0x01	; 1
     120:	f1 f7       	brne	.-4      	; 0x11e <APP_vidStart+0x64>
     122:	00 c0       	rjmp	.+0      	; 0x124 <APP_vidStart+0x6a>
     124:	00 00       	nop
     126:	08 95       	ret

00000128 <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	18 2f       	mov	r17, r24
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     13c:	c8 2f       	mov	r28, r24
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	67 e0       	ldi	r22, 0x07	; 7
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     148:	c8 2b       	or	r28, r24
     14a:	01 2f       	mov	r16, r17
     14c:	02 95       	swap	r16
     14e:	0f 70       	andi	r16, 0x0F	; 15
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	15 c0       	rjmp	.+42     	; 0x17e <HLCD_vidWritecmd+0x56>
     154:	ed 2f       	mov	r30, r29
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	40 2f       	mov	r20, r16
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	0d 2e       	mov	r0, r29
     15e:	02 c0       	rjmp	.+4      	; 0x164 <HLCD_vidWritecmd+0x3c>
     160:	55 95       	asr	r21
     162:	47 95       	ror	r20
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <HLCD_vidWritecmd+0x38>
     168:	41 70       	andi	r20, 0x01	; 1
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	e2 59       	subi	r30, 0x92	; 146
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	61 81       	ldd	r22, Z+1	; 0x01
     174:	80 81       	ld	r24, Z
     176:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     17a:	c8 2b       	or	r28, r24
     17c:	df 5f       	subi	r29, 0xFF	; 255
     17e:	d4 30       	cpi	r29, 0x04	; 4
     180:	48 f3       	brcs	.-46     	; 0x154 <HLCD_vidWritecmd+0x2c>
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     18c:	c8 2b       	or	r28, r24
     18e:	89 ef       	ldi	r24, 0xF9	; 249
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <HLCD_vidWritecmd+0x6a>
     196:	00 c0       	rjmp	.+0      	; 0x198 <HLCD_vidWritecmd+0x70>
     198:	00 00       	nop
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     1a4:	c8 2b       	or	r28, r24
     1a6:	92 e4       	ldi	r25, 0x42	; 66
     1a8:	9a 95       	dec	r25
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <HLCD_vidWritecmd+0x80>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <HLCD_vidWritecmd+0x86>
     1ae:	1f 70       	andi	r17, 0x0F	; 15
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	15 c0       	rjmp	.+42     	; 0x1de <HLCD_vidWritecmd+0xb6>
     1b4:	ed 2f       	mov	r30, r29
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	41 2f       	mov	r20, r17
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	0d 2e       	mov	r0, r29
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <HLCD_vidWritecmd+0x9c>
     1c0:	55 95       	asr	r21
     1c2:	47 95       	ror	r20
     1c4:	0a 94       	dec	r0
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <HLCD_vidWritecmd+0x98>
     1c8:	41 70       	andi	r20, 0x01	; 1
     1ca:	ee 0f       	add	r30, r30
     1cc:	ff 1f       	adc	r31, r31
     1ce:	e2 59       	subi	r30, 0x92	; 146
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	61 81       	ldd	r22, Z+1	; 0x01
     1d4:	80 81       	ld	r24, Z
     1d6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     1da:	c8 2b       	or	r28, r24
     1dc:	df 5f       	subi	r29, 0xFF	; 255
     1de:	d4 30       	cpi	r29, 0x04	; 4
     1e0:	48 f3       	brcs	.-46     	; 0x1b4 <HLCD_vidWritecmd+0x8c>
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     1ec:	c8 2b       	or	r28, r24
     1ee:	e9 ef       	ldi	r30, 0xF9	; 249
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <HLCD_vidWritecmd+0xca>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <HLCD_vidWritecmd+0xd0>
     1f8:	00 00       	nop
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     204:	8c 2b       	or	r24, r28
     206:	e3 ef       	ldi	r30, 0xF3	; 243
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <HLCD_vidWritecmd+0xe2>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <HLCD_vidWritecmd+0xe8>
     210:	00 00       	nop
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	08 95       	ret

0000021c <HLCD_vidInit>:
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	d0 e0       	ldi	r29, 0x00	; 0
     222:	c0 e0       	ldi	r28, 0x00	; 0
     224:	0d c0       	rjmp	.+26     	; 0x240 <HLCD_vidInit+0x24>
     226:	ed 2f       	mov	r30, r29
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	e2 59       	subi	r30, 0x92	; 146
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	61 81       	ldd	r22, Z+1	; 0x01
     236:	80 81       	ld	r24, Z
     238:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
     23c:	c8 2b       	or	r28, r24
     23e:	df 5f       	subi	r29, 0xFF	; 255
     240:	d4 30       	cpi	r29, 0x04	; 4
     242:	88 f3       	brcs	.-30     	; 0x226 <HLCD_vidInit+0xa>
     244:	41 e0       	ldi	r20, 0x01	; 1
     246:	67 e0       	ldi	r22, 0x07	; 7
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
     24e:	c8 2b       	or	r28, r24
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
     25a:	c8 2b       	or	r28, r24
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
     266:	c8 2b       	or	r28, r24
     268:	8f e0       	ldi	r24, 0x0F	; 15
     26a:	97 e2       	ldi	r25, 0x27	; 39
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <HLCD_vidInit+0x50>
     270:	00 c0       	rjmp	.+0      	; 0x272 <HLCD_vidInit+0x56>
     272:	00 00       	nop
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     27a:	c8 2b       	or	r28, r24
     27c:	e9 ef       	ldi	r30, 0xF9	; 249
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <HLCD_vidInit+0x64>
     284:	00 c0       	rjmp	.+0      	; 0x286 <HLCD_vidInit+0x6a>
     286:	00 00       	nop
     288:	88 e2       	ldi	r24, 0x28	; 40
     28a:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     28e:	c8 2b       	or	r28, r24
     290:	89 ef       	ldi	r24, 0xF9	; 249
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <HLCD_vidInit+0x78>
     298:	00 c0       	rjmp	.+0      	; 0x29a <HLCD_vidInit+0x7e>
     29a:	00 00       	nop
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     2a2:	c8 2b       	or	r28, r24
     2a4:	e7 ee       	ldi	r30, 0xE7	; 231
     2a6:	f3 e0       	ldi	r31, 0x03	; 3
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <HLCD_vidInit+0x8c>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <HLCD_vidInit+0x92>
     2ae:	00 00       	nop
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     2b6:	c8 2b       	or	r28, r24
     2b8:	89 ef       	ldi	r24, 0xF9	; 249
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <HLCD_vidInit+0xa0>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <HLCD_vidInit+0xa6>
     2c2:	00 00       	nop
     2c4:	8e e0       	ldi	r24, 0x0E	; 14
     2c6:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     2ca:	8c 2b       	or	r24, r28
     2cc:	e9 ef       	ldi	r30, 0xF9	; 249
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <HLCD_vidInit+0xb4>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <HLCD_vidInit+0xba>
     2d6:	00 00       	nop
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <HLCD_vidWriteChar>:
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	18 2f       	mov	r17, r24
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     2f2:	c8 2f       	mov	r28, r24
     2f4:	41 e0       	ldi	r20, 0x01	; 1
     2f6:	67 e0       	ldi	r22, 0x07	; 7
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     2fe:	c8 2b       	or	r28, r24
     300:	01 2f       	mov	r16, r17
     302:	02 95       	swap	r16
     304:	0f 70       	andi	r16, 0x0F	; 15
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	15 c0       	rjmp	.+42     	; 0x334 <HLCD_vidWriteChar+0x56>
     30a:	ed 2f       	mov	r30, r29
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	40 2f       	mov	r20, r16
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	0d 2e       	mov	r0, r29
     314:	02 c0       	rjmp	.+4      	; 0x31a <HLCD_vidWriteChar+0x3c>
     316:	55 95       	asr	r21
     318:	47 95       	ror	r20
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <HLCD_vidWriteChar+0x38>
     31e:	41 70       	andi	r20, 0x01	; 1
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	e2 59       	subi	r30, 0x92	; 146
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	61 81       	ldd	r22, Z+1	; 0x01
     32a:	80 81       	ld	r24, Z
     32c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     330:	c8 2b       	or	r28, r24
     332:	df 5f       	subi	r29, 0xFF	; 255
     334:	d4 30       	cpi	r29, 0x04	; 4
     336:	48 f3       	brcs	.-46     	; 0x30a <HLCD_vidWriteChar+0x2c>
     338:	41 e0       	ldi	r20, 0x01	; 1
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	83 e0       	ldi	r24, 0x03	; 3
     33e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     342:	c8 2b       	or	r28, r24
     344:	89 ef       	ldi	r24, 0xF9	; 249
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <HLCD_vidWriteChar+0x6a>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <HLCD_vidWriteChar+0x70>
     34e:	00 00       	nop
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     35a:	c8 2b       	or	r28, r24
     35c:	92 e4       	ldi	r25, 0x42	; 66
     35e:	9a 95       	dec	r25
     360:	f1 f7       	brne	.-4      	; 0x35e <HLCD_vidWriteChar+0x80>
     362:	00 c0       	rjmp	.+0      	; 0x364 <HLCD_vidWriteChar+0x86>
     364:	1f 70       	andi	r17, 0x0F	; 15
     366:	d0 e0       	ldi	r29, 0x00	; 0
     368:	15 c0       	rjmp	.+42     	; 0x394 <HLCD_vidWriteChar+0xb6>
     36a:	ed 2f       	mov	r30, r29
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	41 2f       	mov	r20, r17
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	0d 2e       	mov	r0, r29
     374:	02 c0       	rjmp	.+4      	; 0x37a <HLCD_vidWriteChar+0x9c>
     376:	55 95       	asr	r21
     378:	47 95       	ror	r20
     37a:	0a 94       	dec	r0
     37c:	e2 f7       	brpl	.-8      	; 0x376 <HLCD_vidWriteChar+0x98>
     37e:	41 70       	andi	r20, 0x01	; 1
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e2 59       	subi	r30, 0x92	; 146
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	61 81       	ldd	r22, Z+1	; 0x01
     38a:	80 81       	ld	r24, Z
     38c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     390:	c8 2b       	or	r28, r24
     392:	df 5f       	subi	r29, 0xFF	; 255
     394:	d4 30       	cpi	r29, 0x04	; 4
     396:	48 f3       	brcs	.-46     	; 0x36a <HLCD_vidWriteChar+0x8c>
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     3a2:	c8 2b       	or	r28, r24
     3a4:	e9 ef       	ldi	r30, 0xF9	; 249
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <HLCD_vidWriteChar+0xca>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <HLCD_vidWriteChar+0xd0>
     3ae:	00 00       	nop
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     3ba:	8c 2b       	or	r24, r28
     3bc:	e3 ef       	ldi	r30, 0xF3	; 243
     3be:	f1 e0       	ldi	r31, 0x01	; 1
     3c0:	31 97       	sbiw	r30, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <HLCD_vidWriteChar+0xe2>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <HLCD_vidWriteChar+0xe8>
     3c6:	00 00       	nop
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     3d2:	81 11       	cpse	r24, r1
     3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <HLCD_gotoXY+0x14>
     3d6:	60 31       	cpi	r22, 0x10	; 16
     3d8:	30 f4       	brcc	.+12     	; 0x3e6 <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     3da:	86 2f       	mov	r24, r22
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	80 68       	ori	r24, 0x80	; 128
     3e0:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     3e4:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	41 f4       	brne	.+16     	; 0x3fa <HLCD_gotoXY+0x28>
     3ea:	60 31       	cpi	r22, 0x10	; 16
     3ec:	40 f4       	brcc	.+16     	; 0x3fe <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     3ee:	86 2f       	mov	r24, r22
     3f0:	8f 70       	andi	r24, 0x0F	; 15
     3f2:	80 6c       	ori	r24, 0xC0	; 192
     3f4:	0e 94 94 00 	call	0x128	; 0x128 <HLCD_vidWritecmd>
     3f8:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     3fa:	85 e0       	ldi	r24, 0x05	; 5
     3fc:	08 95       	ret
     3fe:	85 e0       	ldi	r24, 0x05	; 5
	}
	return errorStatus;
}
     400:	08 95       	ret

00000402 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     416:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     418:	08 c0       	rjmp	.+16     	; 0x42a <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     41a:	0e 94 6f 01 	call	0x2de	; 0x2de <HLCD_vidWriteChar>
     41e:	18 2b       	or	r17, r24
		string = str[++count];
     420:	21 96       	adiw	r28, 0x01	; 1
     422:	f7 01       	movw	r30, r14
     424:	ec 0f       	add	r30, r28
     426:	fd 1f       	adc	r31, r29
     428:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     42a:	81 11       	cpse	r24, r1
     42c:	f6 cf       	rjmp	.-20     	; 0x41a <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     42e:	81 2f       	mov	r24, r17
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	08 95       	ret

0000043c <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	2a 97       	sbiw	r28, 0x0a	; 10
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     454:	4a e0       	ldi	r20, 0x0A	; 10
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	0e 94 32 08 	call	0x1064	; 0x1064 <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 01 02 	call	0x402	; 0x402 <HLCD_WriteString>
	return errorStatus;
}
     468:	2a 96       	adiw	r28, 0x0a	; 10
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	a9 f1       	breq	.+106    	; 0x4ec <KEYPAD_init+0x72>
     482:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     484:	69 81       	ldd	r22, Y+1	; 0x01
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	88 81       	ld	r24, Y
     48a:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     48e:	6b 81       	ldd	r22, Y+3	; 0x03
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     498:	6d 81       	ldd	r22, Y+5	; 0x05
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	8c 81       	ldd	r24, Y+4	; 0x04
     49e:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     4a2:	69 81       	ldd	r22, Y+1	; 0x01
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	88 81       	ld	r24, Y
     4a8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     4ac:	6b 81       	ldd	r22, Y+3	; 0x03
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     4b6:	6d 81       	ldd	r22, Y+5	; 0x05
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	8c 81       	ldd	r24, Y+4	; 0x04
     4bc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     4c0:	6f 81       	ldd	r22, Y+7	; 0x07
     4c2:	41 e0       	ldi	r20, 0x01	; 1
     4c4:	8e 81       	ldd	r24, Y+6	; 0x06
     4c6:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     4ca:	69 85       	ldd	r22, Y+9	; 0x09
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	88 85       	ldd	r24, Y+8	; 0x08
     4d0:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     4d4:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     4da:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     4de:	6d 85       	ldd	r22, Y+13	; 0x0d
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4e4:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     4ec:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	1f 92       	push	r1
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     50a:	00 e6       	ldi	r16, 0x60	; 96
     50c:	10 e0       	ldi	r17, 0x00	; 0
     50e:	f8 01       	movw	r30, r16
     510:	67 81       	ldd	r22, Z+7	; 0x07
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	86 81       	ldd	r24, Z+6	; 0x06
     516:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     51a:	f8 01       	movw	r30, r16
     51c:	61 85       	ldd	r22, Z+9	; 0x09
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	80 85       	ldd	r24, Z+8	; 0x08
     522:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     526:	f8 01       	movw	r30, r16
     528:	63 85       	ldd	r22, Z+11	; 0x0b
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	82 85       	ldd	r24, Z+10	; 0x0a
     52e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     532:	f8 01       	movw	r30, r16
     534:	65 85       	ldd	r22, Z+13	; 0x0d
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	84 85       	ldd	r24, Z+12	; 0x0c
     53a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     53e:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     540:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     542:	42 c0       	rjmp	.+132    	; 0x5c8 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     544:	e0 e6       	ldi	r30, 0x60	; 96
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	67 81       	ldd	r22, Z+7	; 0x07
     54a:	60 0f       	add	r22, r16
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	86 81       	ldd	r24, Z+6	; 0x06
     550:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
		for(j=0;j<3;j++)
     554:	10 e0       	ldi	r17, 0x00	; 0
     556:	2d c0       	rjmp	.+90     	; 0x5b2 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     558:	e0 e6       	ldi	r30, 0x60	; 96
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	61 81       	ldd	r22, Z+1	; 0x01
     55e:	61 0f       	add	r22, r17
     560:	ae 01       	movw	r20, r28
     562:	4f 5f       	subi	r20, 0xFF	; 255
     564:	5f 4f       	sbci	r21, 0xFF	; 255
     566:	80 81       	ld	r24, Z
     568:	0e 94 77 04 	call	0x8ee	; 0x8ee <DIO_readPIN>
			if(value==0)
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	81 11       	cpse	r24, r1
     570:	1f c0       	rjmp	.+62     	; 0x5b0 <KEYPAD_read+0xbc>
     572:	0a c0       	rjmp	.+20     	; 0x588 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     574:	e0 e6       	ldi	r30, 0x60	; 96
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	61 81       	ldd	r22, Z+1	; 0x01
     57a:	61 0f       	add	r22, r17
     57c:	ae 01       	movw	r20, r28
     57e:	4f 5f       	subi	r20, 0xFF	; 255
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	80 81       	ld	r24, Z
     584:	0e 94 77 04 	call	0x8ee	; 0x8ee <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	88 23       	and	r24, r24
     58c:	99 f3       	breq	.-26     	; 0x574 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     58e:	80 2f       	mov	r24, r16
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	fc 01       	movw	r30, r24
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	e8 0f       	add	r30, r24
     59a:	f9 1f       	adc	r31, r25
     59c:	e9 58       	subi	r30, 0x89	; 137
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	e1 0f       	add	r30, r17
     5a2:	f1 1d       	adc	r31, r1
     5a4:	80 81       	ld	r24, Z
     5a6:	f7 01       	movw	r30, r14
     5a8:	80 83       	st	Z, r24
				flag=1;
     5aa:	dd 24       	eor	r13, r13
     5ac:	d3 94       	inc	r13
				
				break;
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     5b0:	1f 5f       	subi	r17, 0xFF	; 255
     5b2:	13 30       	cpi	r17, 0x03	; 3
     5b4:	88 f2       	brcs	.-94     	; 0x558 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     5b6:	e0 e6       	ldi	r30, 0x60	; 96
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	67 81       	ldd	r22, Z+7	; 0x07
     5bc:	60 0f       	add	r22, r16
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	86 81       	ldd	r24, Z+6	; 0x06
     5c2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	04 30       	cpi	r16, 0x04	; 4
     5ca:	08 f4       	brcc	.+2      	; 0x5ce <KEYPAD_read+0xda>
     5cc:	bb cf       	rjmp	.-138    	; 0x544 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	df 16       	cp	r13, r31
     5d2:	19 f0       	breq	.+6      	; 0x5da <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     5d4:	8e e4       	ldi	r24, 0x4E	; 78
     5d6:	f7 01       	movw	r30, r14
     5d8:	80 83       	st	Z, r24
		return ret_val;
	}
	
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0f 90       	pop	r0
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	08 95       	ret

000005ee <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	63 e0       	ldi	r22, 0x03	; 3
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f8:	8a e1       	ldi	r24, 0x1A	; 26
     5fa:	8a 95       	dec	r24
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <HULTRASONIC_vidTrigger+0xc>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	63 e0       	ldi	r22, 0x03	; 3
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>
     60a:	08 95       	ret

0000060c <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     60c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <g_v_u16_ovfCounts>
     610:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <g_v_u16_ovfCounts+0x1>
     614:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <g_v_u16_ovfCounts+0x2>
     618:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <g_v_u16_ovfCounts+0x3>
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	a1 1d       	adc	r26, r1
     620:	b1 1d       	adc	r27, r1
     622:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <g_v_u16_ovfCounts>
     626:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <g_v_u16_ovfCounts+0x1>
     62a:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <g_v_u16_ovfCounts+0x2>
     62e:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <g_v_u16_ovfCounts+0x3>
     632:	08 95       	ret

00000634 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
     634:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <g_v_u8_flag>
     638:	81 11       	cpse	r24, r1
     63a:	14 c0       	rjmp	.+40     	; 0x664 <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
     63c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
     640:	62 e0       	ldi	r22, 0x02	; 2
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vidExtInt_init>
		g_v_u8_flag = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
     64e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <g_v_u16_ovfCounts>
     652:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <g_v_u16_ovfCounts+0x1>
     656:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <g_v_u16_ovfCounts+0x2>
     65a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
     65e:	0e 94 42 06 	call	0xc84	; 0xc84 <vidTimer2_start>
     662:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
     664:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <g_v_u8_flag>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	09 f0       	breq	.+2      	; 0x66e <HULTRASONIC_vidSigCalc+0x3a>
     66c:	56 c0       	rjmp	.+172    	; 0x71a <HULTRASONIC_vidSigCalc+0xe6>
	{
		vidTimer2_stop();
     66e:	0e 94 4c 06 	call	0xc98	; 0xc98 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
     672:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <MTIMER_u8GetTCNT>
     676:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
     67a:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <g_v_u16_ovfCounts>
     67e:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <g_v_u16_ovfCounts+0x1>
     682:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <g_v_u16_ovfCounts+0x2>
     686:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <g_v_u16_ovfCounts+0x3>
     68a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <g_v_u16_ovf>
     68e:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <g_v_u16_ovf+0x1>
     692:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <g_v_u16_ovf+0x2>
     696:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
     69a:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <g_v_u8_cap>
     69e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <g_v_u16_ovf>
     6a2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <g_v_u16_ovf+0x1>
     6a6:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <g_v_u16_ovf+0x2>
     6aa:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <g_v_u16_ovf+0x3>
     6ae:	ba 2f       	mov	r27, r26
     6b0:	a9 2f       	mov	r26, r25
     6b2:	98 2f       	mov	r25, r24
     6b4:	88 27       	eor	r24, r24
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	62 0f       	add	r22, r18
     6bc:	71 1d       	adc	r23, r1
     6be:	81 1d       	adc	r24, r1
     6c0:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = ((float64_t)global_u32Ticks / 932.95)-2.0;
     6c2:	0e 94 a4 07 	call	0xf48	; 0xf48 <__floatunsisf>
     6c6:	2d ec       	ldi	r18, 0xCD	; 205
     6c8:	3c e3       	ldi	r19, 0x3C	; 60
     6ca:	49 e6       	ldi	r20, 0x69	; 105
     6cc:	54 e4       	ldi	r21, 0x44	; 68
     6ce:	0e 94 03 07 	call	0xe06	; 0xe06 <__divsf3>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e4       	ldi	r21, 0x40	; 64
     6da:	0e 94 96 06 	call	0xd2c	; 0xd2c <__subsf3>
     6de:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__data_end>
     6e2:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__data_end+0x1>
     6e6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end+0x2>
     6ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
     6ee:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <g_v_u16_ovf>
     6f2:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <g_v_u16_ovf+0x1>
     6f6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <g_v_u16_ovf+0x2>
     6fa:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <g_v_u16_ovf+0x3>
     6fe:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <g_v_u16_ovfCounts>
     702:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <g_v_u16_ovfCounts+0x1>
     706:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <g_v_u16_ovfCounts+0x2>
     70a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <g_v_u16_ovfCounts+0x3>
     70e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
     712:	63 e0       	ldi	r22, 0x03	; 3
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vidExtInt_init>
     71a:	08 95       	ret

0000071c <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	63 e0       	ldi	r22, 0x03	; 3
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
     73a:	63 e0       	ldi	r22, 0x03	; 3
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 f7 05 	call	0xbee	; 0xbee <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 26 06 	call	0xc4c	; 0xc4c <u8Timer2_setPrescallar>
	(void) vidTimer2_OvfIrqEnable();
     74e:	0e 94 3a 06 	call	0xc74	; 0xc74 <vidTimer2_OvfIrqEnable>

	 MTIMER_vidEnableGlobalInterrupt();
     752:	0e 94 5e 06 	call	0xcbc	; 0xcbc <MTIMER_vidEnableGlobalInterrupt>
     756:	08 95       	ret

00000758 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
     758:	0e 94 f7 02 	call	0x5ee	; 0x5ee <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
     75c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__data_end>
     760:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__data_end+0x1>
     764:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end+0x2>
     768:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x3>
}
     76c:	08 95       	ret

0000076e <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
     76e:	0e 94 53 06 	call	0xca6	; 0xca6 <vidTimer2_setcbf_OVF>
     772:	08 95       	ret

00000774 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
     774:	0e 94 6b 05 	call	0xad6	; 0xad6 <MEXTINT_vidCallBackFunc>
     778:	08 95       	ret

0000077a <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
     77a:	0e 94 49 00 	call	0x92	; 0x92 <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
     77e:	0e 94 5d 00 	call	0xba	; 0xba <APP_vidStart>
     782:	fd cf       	rjmp	.-6      	; 0x77e <main+0x4>

00000784 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     784:	68 30       	cpi	r22, 0x08	; 8
     786:	a0 f5       	brcc	.+104    	; 0x7f0 <DIO_init+0x6c>
	{
		if (port == porta)
     788:	81 11       	cpse	r24, r1
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     78c:	8a b3       	in	r24, 0x1a	; 26
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_init+0x12>
     792:	44 0f       	add	r20, r20
     794:	55 1f       	adc	r21, r21
     796:	6a 95       	dec	r22
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_init+0xe>
     79a:	48 2b       	or	r20, r24
     79c:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	08 95       	ret
		}
		else if (port == portb)
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	59 f4       	brne	.+22     	; 0x7bc <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     7a6:	87 b3       	in	r24, 0x17	; 23
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_init+0x2c>
     7ac:	44 0f       	add	r20, r20
     7ae:	55 1f       	adc	r21, r21
     7b0:	6a 95       	dec	r22
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_init+0x28>
     7b4:	48 2b       	or	r20, r24
     7b6:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	08 95       	ret
		}
		else if (port == portc)
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	59 f4       	brne	.+22     	; 0x7d6 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     7c0:	84 b3       	in	r24, 0x14	; 20
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_init+0x46>
     7c6:	44 0f       	add	r20, r20
     7c8:	55 1f       	adc	r21, r21
     7ca:	6a 95       	dec	r22
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_init+0x42>
     7ce:	48 2b       	or	r20, r24
     7d0:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	08 95       	ret
		}
		else if (port == portd)
     7d6:	83 30       	cpi	r24, 0x03	; 3
     7d8:	69 f4       	brne	.+26     	; 0x7f4 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     7da:	81 b3       	in	r24, 0x11	; 17
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_init+0x60>
     7e0:	44 0f       	add	r20, r20
     7e2:	55 1f       	adc	r21, r21
     7e4:	6a 95       	dec	r22
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_init+0x5c>
     7e8:	48 2b       	or	r20, r24
     7ea:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     7f4:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     7f6:	08 95       	ret

000007f8 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     7f8:	68 30       	cpi	r22, 0x08	; 8
     7fa:	08 f0       	brcs	.+2      	; 0x7fe <DIO_writePIN+0x6>
     7fc:	74 c0       	rjmp	.+232    	; 0x8e6 <__stack+0x87>
	{
		if (port == porta)
     7fe:	81 11       	cpse	r24, r1
     800:	1b c0       	rjmp	.+54     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		{
			if (state == STD_HIGH)
     802:	41 30       	cpi	r20, 0x01	; 1
     804:	61 f4       	brne	.+24     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			{
				WR_PORT_A |= (1U << pin);
     806:	2b b3       	in	r18, 0x1b	; 27
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	6a 95       	dec	r22
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	82 2b       	or	r24, r18
     818:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     81e:	2b b3       	in	r18, 0x1b	; 27
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	80 95       	com	r24
     830:	82 23       	and	r24, r18
     832:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	08 95       	ret
		}
		else if (port == portb)
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	d9 f4       	brne	.+54     	; 0x872 <__stack+0x13>
		{
			if (state == STD_HIGH)
     83c:	41 30       	cpi	r20, 0x01	; 1
     83e:	61 f4       	brne	.+24     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			{
				WR_PORT_B |= (1U << pin);
     840:	28 b3       	in	r18, 0x18	; 24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	6a 95       	dec	r22
     84e:	e2 f7       	brpl	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     850:	82 2b       	or	r24, r18
     852:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     858:	28 b3       	in	r18, 0x18	; 24
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	6a 95       	dec	r22
     866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
     868:	80 95       	com	r24
     86a:	82 23       	and	r24, r18
     86c:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	08 95       	ret
		}
		else if (port == portc)
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	d9 f4       	brne	.+54     	; 0x8ac <__stack+0x4d>
		{
			if (state == STD_HIGH)
     876:	41 30       	cpi	r20, 0x01	; 1
     878:	61 f4       	brne	.+24     	; 0x892 <__stack+0x33>
			{
				WR_PORT_C |= (1U << pin);
     87a:	25 b3       	in	r18, 0x15	; 21
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	6a 95       	dec	r22
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	82 2b       	or	r24, r18
     88c:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     892:	25 b3       	in	r18, 0x15	; 21
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	6a 95       	dec	r22
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
     8a2:	80 95       	com	r24
     8a4:	82 23       	and	r24, r18
     8a6:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	08 95       	ret
		}
		else if (port == portd)
     8ac:	83 30       	cpi	r24, 0x03	; 3
     8ae:	e9 f4       	brne	.+58     	; 0x8ea <__stack+0x8b>
		{
			if (state == STD_HIGH)
     8b0:	41 30       	cpi	r20, 0x01	; 1
     8b2:	61 f4       	brne	.+24     	; 0x8cc <__stack+0x6d>
			{
				WR_PORT_D |= (1U << pin);
     8b4:	22 b3       	in	r18, 0x12	; 18
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	82 2b       	or	r24, r18
     8c6:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     8cc:	22 b3       	in	r18, 0x12	; 18
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	6a 95       	dec	r22
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	80 95       	com	r24
     8de:	82 23       	and	r24, r18
     8e0:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     8ec:	08 95       	ret

000008ee <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     8ee:	68 30       	cpi	r22, 0x08	; 8
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <DIO_readPIN+0x6>
     8f2:	64 c0       	rjmp	.+200    	; 0x9bc <DIO_readPIN+0xce>
	{
		if (port == porta)
     8f4:	81 11       	cpse	r24, r1
     8f6:	17 c0       	rjmp	.+46     	; 0x926 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     8f8:	79 b3       	in	r23, 0x19	; 25
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9c 01       	movw	r18, r24
     900:	06 2e       	mov	r0, r22
     902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_readPIN+0x1a>
     904:	22 0f       	add	r18, r18
     906:	33 1f       	adc	r19, r19
     908:	0a 94       	dec	r0
     90a:	e2 f7       	brpl	.-8      	; 0x904 <DIO_readPIN+0x16>
     90c:	87 2f       	mov	r24, r23
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	82 23       	and	r24, r18
     912:	93 23       	and	r25, r19
     914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_readPIN+0x2c>
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	6a 95       	dec	r22
     91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_readPIN+0x28>
     91e:	fa 01       	movw	r30, r20
     920:	80 83       	st	Z, r24
			return DIO_E_OK;
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	08 95       	ret
		}
		else if (port == portb)
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	b9 f4       	brne	.+46     	; 0x958 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     92a:	76 b3       	in	r23, 0x16	; 22
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9c 01       	movw	r18, r24
     932:	06 2e       	mov	r0, r22
     934:	02 c0       	rjmp	.+4      	; 0x93a <DIO_readPIN+0x4c>
     936:	22 0f       	add	r18, r18
     938:	33 1f       	adc	r19, r19
     93a:	0a 94       	dec	r0
     93c:	e2 f7       	brpl	.-8      	; 0x936 <DIO_readPIN+0x48>
     93e:	87 2f       	mov	r24, r23
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	82 23       	and	r24, r18
     944:	93 23       	and	r25, r19
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_readPIN+0x5e>
     948:	96 95       	lsr	r25
     94a:	87 95       	ror	r24
     94c:	6a 95       	dec	r22
     94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_readPIN+0x5a>
     950:	fa 01       	movw	r30, r20
     952:	80 83       	st	Z, r24
			return DIO_E_OK;
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	08 95       	ret
		}
		else if (port == portc)
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	b9 f4       	brne	.+46     	; 0x98a <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     95c:	73 b3       	in	r23, 0x13	; 19
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	9c 01       	movw	r18, r24
     964:	06 2e       	mov	r0, r22
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_readPIN+0x7e>
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_readPIN+0x7a>
     970:	87 2f       	mov	r24, r23
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	82 23       	and	r24, r18
     976:	93 23       	and	r25, r19
     978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_readPIN+0x90>
     97a:	96 95       	lsr	r25
     97c:	87 95       	ror	r24
     97e:	6a 95       	dec	r22
     980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_readPIN+0x8c>
     982:	fa 01       	movw	r30, r20
     984:	80 83       	st	Z, r24
			return DIO_E_OK;
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	08 95       	ret
		}
		else if (port == portd)
     98a:	83 30       	cpi	r24, 0x03	; 3
     98c:	c9 f4       	brne	.+50     	; 0x9c0 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     98e:	70 b3       	in	r23, 0x10	; 16
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	9c 01       	movw	r18, r24
     996:	06 2e       	mov	r0, r22
     998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_readPIN+0xb0>
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_readPIN+0xac>
     9a2:	87 2f       	mov	r24, r23
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	82 23       	and	r24, r18
     9a8:	93 23       	and	r25, r19
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_readPIN+0xc2>
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	6a 95       	dec	r22
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_readPIN+0xbe>
     9b4:	fa 01       	movw	r30, r20
     9b6:	80 83       	st	Z, r24
			return DIO_E_OK;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     9c0:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     9c2:	08 95       	ret

000009c4 <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF1);
	SET_BIT(GICR_REG, INT0);
     9c4:	83 30       	cpi	r24, 0x03	; 3
     9c6:	08 f0       	brcs	.+2      	; 0x9ca <vidExtInt_init+0x6>
     9c8:	80 c0       	rjmp	.+256    	; 0xaca <vidExtInt_init+0x106>
     9ca:	64 30       	cpi	r22, 0x04	; 4
     9cc:	08 f0       	brcs	.+2      	; 0x9d0 <vidExtInt_init+0xc>
     9ce:	7f c0       	rjmp	.+254    	; 0xace <vidExtInt_init+0x10a>
     9d0:	81 11       	cpse	r24, r1
     9d2:	30 c0       	rjmp	.+96     	; 0xa34 <vidExtInt_init+0x70>
     9d4:	61 30       	cpi	r22, 0x01	; 1
     9d6:	71 f0       	breq	.+28     	; 0x9f4 <vidExtInt_init+0x30>
     9d8:	28 f0       	brcs	.+10     	; 0x9e4 <vidExtInt_init+0x20>
     9da:	62 30       	cpi	r22, 0x02	; 2
     9dc:	99 f0       	breq	.+38     	; 0xa04 <vidExtInt_init+0x40>
     9de:	63 30       	cpi	r22, 0x03	; 3
     9e0:	c9 f0       	breq	.+50     	; 0xa14 <vidExtInt_init+0x50>
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <vidExtInt_init+0x60>
     9e4:	85 b7       	in	r24, 0x35	; 53
     9e6:	8e 7f       	andi	r24, 0xFE	; 254
     9e8:	85 bf       	out	0x35, r24	; 53
     9ea:	85 b7       	in	r24, 0x35	; 53
     9ec:	8d 7f       	andi	r24, 0xFD	; 253
     9ee:	85 bf       	out	0x35, r24	; 53
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	19 c0       	rjmp	.+50     	; 0xa26 <vidExtInt_init+0x62>
     9f4:	85 b7       	in	r24, 0x35	; 53
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	85 bf       	out	0x35, r24	; 53
     9fa:	85 b7       	in	r24, 0x35	; 53
     9fc:	8d 7f       	andi	r24, 0xFD	; 253
     9fe:	85 bf       	out	0x35, r24	; 53
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	11 c0       	rjmp	.+34     	; 0xa26 <vidExtInt_init+0x62>
     a04:	85 b7       	in	r24, 0x35	; 53
     a06:	8e 7f       	andi	r24, 0xFE	; 254
     a08:	85 bf       	out	0x35, r24	; 53
     a0a:	85 b7       	in	r24, 0x35	; 53
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	85 bf       	out	0x35, r24	; 53
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	09 c0       	rjmp	.+18     	; 0xa26 <vidExtInt_init+0x62>
     a14:	85 b7       	in	r24, 0x35	; 53
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	85 bf       	out	0x35, r24	; 53
     a1a:	85 b7       	in	r24, 0x35	; 53
     a1c:	82 60       	ori	r24, 0x02	; 2
     a1e:	85 bf       	out	0x35, r24	; 53
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <vidExtInt_init+0x62>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	9a b7       	in	r25, 0x3a	; 58
     a28:	90 64       	ori	r25, 0x40	; 64
     a2a:	9a bf       	out	0x3a, r25	; 58
     a2c:	9b b7       	in	r25, 0x3b	; 59
     a2e:	90 64       	ori	r25, 0x40	; 64
     a30:	9b bf       	out	0x3b, r25	; 59
     a32:	08 95       	ret
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	81 f5       	brne	.+96     	; 0xa98 <vidExtInt_init+0xd4>
     a38:	61 30       	cpi	r22, 0x01	; 1
     a3a:	71 f0       	breq	.+28     	; 0xa58 <vidExtInt_init+0x94>
     a3c:	28 f0       	brcs	.+10     	; 0xa48 <vidExtInt_init+0x84>
     a3e:	62 30       	cpi	r22, 0x02	; 2
     a40:	99 f0       	breq	.+38     	; 0xa68 <vidExtInt_init+0xa4>
     a42:	63 30       	cpi	r22, 0x03	; 3
     a44:	c9 f0       	breq	.+50     	; 0xa78 <vidExtInt_init+0xb4>
     a46:	20 c0       	rjmp	.+64     	; 0xa88 <vidExtInt_init+0xc4>
     a48:	85 b7       	in	r24, 0x35	; 53
     a4a:	8b 7f       	andi	r24, 0xFB	; 251
     a4c:	85 bf       	out	0x35, r24	; 53
     a4e:	85 b7       	in	r24, 0x35	; 53
     a50:	87 7f       	andi	r24, 0xF7	; 247
     a52:	85 bf       	out	0x35, r24	; 53
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	19 c0       	rjmp	.+50     	; 0xa8a <vidExtInt_init+0xc6>
     a58:	85 b7       	in	r24, 0x35	; 53
     a5a:	84 60       	ori	r24, 0x04	; 4
     a5c:	85 bf       	out	0x35, r24	; 53
     a5e:	85 b7       	in	r24, 0x35	; 53
     a60:	87 7f       	andi	r24, 0xF7	; 247
     a62:	85 bf       	out	0x35, r24	; 53
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	11 c0       	rjmp	.+34     	; 0xa8a <vidExtInt_init+0xc6>
     a68:	85 b7       	in	r24, 0x35	; 53
     a6a:	8b 7f       	andi	r24, 0xFB	; 251
     a6c:	85 bf       	out	0x35, r24	; 53
     a6e:	85 b7       	in	r24, 0x35	; 53
     a70:	88 60       	ori	r24, 0x08	; 8
     a72:	85 bf       	out	0x35, r24	; 53
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <vidExtInt_init+0xc6>
     a78:	85 b7       	in	r24, 0x35	; 53
     a7a:	84 60       	ori	r24, 0x04	; 4
     a7c:	85 bf       	out	0x35, r24	; 53
     a7e:	85 b7       	in	r24, 0x35	; 53
     a80:	88 60       	ori	r24, 0x08	; 8
     a82:	85 bf       	out	0x35, r24	; 53
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <vidExtInt_init+0xc6>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	9b b7       	in	r25, 0x3b	; 59
     a8c:	90 68       	ori	r25, 0x80	; 128
     a8e:	9b bf       	out	0x3b, r25	; 59
     a90:	9a b7       	in	r25, 0x3a	; 58
     a92:	90 68       	ori	r25, 0x80	; 128
     a94:	9a bf       	out	0x3a, r25	; 58
     a96:	08 95       	ret
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	d9 f4       	brne	.+54     	; 0xad2 <vidExtInt_init+0x10e>
     a9c:	62 30       	cpi	r22, 0x02	; 2
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <vidExtInt_init+0xe2>
     aa0:	63 30       	cpi	r22, 0x03	; 3
     aa2:	31 f0       	breq	.+12     	; 0xab0 <vidExtInt_init+0xec>
     aa4:	0a c0       	rjmp	.+20     	; 0xaba <vidExtInt_init+0xf6>
     aa6:	84 b7       	in	r24, 0x34	; 52
     aa8:	8f 7b       	andi	r24, 0xBF	; 191
     aaa:	84 bf       	out	0x34, r24	; 52
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	06 c0       	rjmp	.+12     	; 0xabc <vidExtInt_init+0xf8>
     ab0:	84 b7       	in	r24, 0x34	; 52
     ab2:	80 64       	ori	r24, 0x40	; 64
     ab4:	84 bf       	out	0x34, r24	; 52
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <vidExtInt_init+0xf8>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	9b b7       	in	r25, 0x3b	; 59
     abe:	90 62       	ori	r25, 0x20	; 32
     ac0:	9b bf       	out	0x3b, r25	; 59
     ac2:	9a b7       	in	r25, 0x3a	; 58
     ac4:	90 62       	ori	r25, 0x20	; 32
     ac6:	9a bf       	out	0x3a, r25	; 58
     ac8:	08 95       	ret
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	08 95       	ret
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	08 95       	ret

00000ad6 <MEXTINT_vidCallBackFunc>:
     ad6:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <callBack+0x1>
     ada:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <callBack>
     ade:	08 95       	ret

00000ae0 <__vector_3>:
// {
// 	callBackFunc();
// }

ISR(INT2_vect)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
	callBack();
     b02:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <callBack>
     b06:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <callBack+0x1>
     b0a:	09 95       	icall
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
     b50:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <sg_Timer0_callBackPtr>
     b54:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <sg_Timer0_callBackPtr+0x1>
     b58:	89 2b       	or	r24, r25
     b5a:	41 f0       	breq	.+16     	; 0xb6c <__vector_11+0x3e>
     b5c:	88 b7       	in	r24, 0x38	; 56
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	88 bf       	out	0x38, r24	; 56
     b62:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <sg_Timer0_callBackPtr>
     b66:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <sg_Timer0_callBackPtr+0x1>
     b6a:	09 95       	icall
     b6c:	ff 91       	pop	r31
     b6e:	ef 91       	pop	r30
     b70:	bf 91       	pop	r27
     b72:	af 91       	pop	r26
     b74:	9f 91       	pop	r25
     b76:	8f 91       	pop	r24
     b78:	7f 91       	pop	r23
     b7a:	6f 91       	pop	r22
     b7c:	5f 91       	pop	r21
     b7e:	4f 91       	pop	r20
     b80:	3f 91       	pop	r19
     b82:	2f 91       	pop	r18
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <__vector_9>:
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
     bb0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <sg_Timer1_callBackPtr>
     bb4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <sg_Timer1_callBackPtr+0x1>
     bb8:	89 2b       	or	r24, r25
     bba:	41 f0       	breq	.+16     	; 0xbcc <__vector_9+0x3e>
     bbc:	88 b7       	in	r24, 0x38	; 56
     bbe:	8b 7f       	andi	r24, 0xFB	; 251
     bc0:	88 bf       	out	0x38, r24	; 56
     bc2:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <sg_Timer1_callBackPtr>
     bc6:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <sg_Timer1_callBackPtr+0x1>
     bca:	09 95       	icall
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <enuTimer2_init>:
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	48 f5       	brcc	.+82     	; 0xc44 <enuTimer2_init+0x56>
     bf2:	14 bc       	out	0x24, r1	; 36
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	71 f0       	breq	.+28     	; 0xc14 <enuTimer2_init+0x26>
     bf8:	28 f0       	brcs	.+10     	; 0xc04 <enuTimer2_init+0x16>
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	99 f0       	breq	.+38     	; 0xc24 <enuTimer2_init+0x36>
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	c9 f0       	breq	.+50     	; 0xc34 <enuTimer2_init+0x46>
     c02:	22 c0       	rjmp	.+68     	; 0xc48 <enuTimer2_init+0x5a>
     c04:	85 b5       	in	r24, 0x25	; 37
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	85 bd       	out	0x25, r24	; 37
     c0a:	85 b5       	in	r24, 0x25	; 37
     c0c:	8f 7b       	andi	r24, 0xBF	; 191
     c0e:	85 bd       	out	0x25, r24	; 37
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	08 95       	ret
     c14:	85 b5       	in	r24, 0x25	; 37
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	85 bd       	out	0x25, r24	; 37
     c1a:	85 b5       	in	r24, 0x25	; 37
     c1c:	80 64       	ori	r24, 0x40	; 64
     c1e:	85 bd       	out	0x25, r24	; 37
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	08 95       	ret
     c24:	85 b5       	in	r24, 0x25	; 37
     c26:	88 60       	ori	r24, 0x08	; 8
     c28:	85 bd       	out	0x25, r24	; 37
     c2a:	85 b5       	in	r24, 0x25	; 37
     c2c:	8f 7b       	andi	r24, 0xBF	; 191
     c2e:	85 bd       	out	0x25, r24	; 37
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
     c34:	85 b5       	in	r24, 0x25	; 37
     c36:	88 60       	ori	r24, 0x08	; 8
     c38:	85 bd       	out	0x25, r24	; 37
     c3a:	85 b5       	in	r24, 0x25	; 37
     c3c:	80 64       	ori	r24, 0x40	; 64
     c3e:	85 bd       	out	0x25, r24	; 37
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	08 95       	ret
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	08 95       	ret
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret

00000c4c <u8Timer2_setPrescallar>:
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	70 f4       	brcc	.+28     	; 0xc6c <u8Timer2_setPrescallar+0x20>
     c50:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <global_prescaller>
     c54:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <global_timerStatus>
     c58:	91 30       	cpi	r25, 0x01	; 1
     c5a:	51 f4       	brne	.+20     	; 0xc70 <u8Timer2_setPrescallar+0x24>
     c5c:	95 b5       	in	r25, 0x25	; 37
     c5e:	98 7f       	andi	r25, 0xF8	; 248
     c60:	89 2b       	or	r24, r25
     c62:	95 b5       	in	r25, 0x25	; 37
     c64:	89 2b       	or	r24, r25
     c66:	85 bd       	out	0x25, r24	; 37
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	08 95       	ret
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	08 95       	ret

00000c74 <vidTimer2_OvfIrqEnable>:
     c74:	88 b7       	in	r24, 0x38	; 56
     c76:	80 64       	ori	r24, 0x40	; 64
     c78:	88 bf       	out	0x38, r24	; 56
     c7a:	89 b7       	in	r24, 0x39	; 57
     c7c:	80 64       	ori	r24, 0x40	; 64
     c7e:	89 bf       	out	0x39, r24	; 57
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	08 95       	ret

00000c84 <vidTimer2_start>:
     c84:	95 b5       	in	r25, 0x25	; 37
     c86:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <global_prescaller>
     c8a:	89 2b       	or	r24, r25
     c8c:	85 bd       	out	0x25, r24	; 37
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <global_timerStatus>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret

00000c98 <vidTimer2_stop>:
     c98:	85 b5       	in	r24, 0x25	; 37
     c9a:	88 7f       	andi	r24, 0xF8	; 248
     c9c:	85 bd       	out	0x25, r24	; 37
     c9e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <global_timerStatus>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
     caa:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <globalCallFunc+0x1>
     cae:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <globalCallFunc>
     cb2:	08 95       	ret

00000cb4 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
     cb4:	14 bc       	out	0x24, r1	; 36
     cb6:	08 95       	ret

00000cb8 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
     cb8:	84 b5       	in	r24, 0x24	; 36
}
     cba:	08 95       	ret

00000cbc <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
     cbc:	8f b7       	in	r24, 0x3f	; 63
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8f bf       	out	0x3f, r24	; 63
     cc2:	08 95       	ret

00000cc4 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
     ce6:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <counter.1821>
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <counter.1821>
	if(counter == global_ovf)
     cf0:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <global_ovf>
     cf4:	89 13       	cpse	r24, r25
     cf6:	09 c0       	rjmp	.+18     	; 0xd0a <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
     cf8:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <globalCallFunc>
     cfc:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <globalCallFunc+0x1>
     d00:	30 97       	sbiw	r30, 0x00	; 0
     d02:	19 f0       	breq	.+6      	; 0xd0a <__vector_5+0x46>
		{
			counter = 0;
     d04:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <counter.1821>

			globalCallFunc();
     d08:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <__subsf3>:
     d2c:	50 58       	subi	r21, 0x80	; 128

00000d2e <__addsf3>:
     d2e:	bb 27       	eor	r27, r27
     d30:	aa 27       	eor	r26, r26
     d32:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__addsf3x>
     d36:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_round>
     d3a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscA>
     d3e:	38 f0       	brcs	.+14     	; 0xd4e <__addsf3+0x20>
     d40:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_pscB>
     d44:	20 f0       	brcs	.+8      	; 0xd4e <__addsf3+0x20>
     d46:	39 f4       	brne	.+14     	; 0xd56 <__addsf3+0x28>
     d48:	9f 3f       	cpi	r25, 0xFF	; 255
     d4a:	19 f4       	brne	.+6      	; 0xd52 <__addsf3+0x24>
     d4c:	26 f4       	brtc	.+8      	; 0xd56 <__addsf3+0x28>
     d4e:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_nan>
     d52:	0e f4       	brtc	.+2      	; 0xd56 <__addsf3+0x28>
     d54:	e0 95       	com	r30
     d56:	e7 fb       	bst	r30, 7
     d58:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_inf>

00000d5c <__addsf3x>:
     d5c:	e9 2f       	mov	r30, r25
     d5e:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_split3>
     d62:	58 f3       	brcs	.-42     	; 0xd3a <__addsf3+0xc>
     d64:	ba 17       	cp	r27, r26
     d66:	62 07       	cpc	r22, r18
     d68:	73 07       	cpc	r23, r19
     d6a:	84 07       	cpc	r24, r20
     d6c:	95 07       	cpc	r25, r21
     d6e:	20 f0       	brcs	.+8      	; 0xd78 <__addsf3x+0x1c>
     d70:	79 f4       	brne	.+30     	; 0xd90 <__addsf3x+0x34>
     d72:	a6 f5       	brtc	.+104    	; 0xddc <__addsf3x+0x80>
     d74:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__fp_zero>
     d78:	0e f4       	brtc	.+2      	; 0xd7c <__addsf3x+0x20>
     d7a:	e0 95       	com	r30
     d7c:	0b 2e       	mov	r0, r27
     d7e:	ba 2f       	mov	r27, r26
     d80:	a0 2d       	mov	r26, r0
     d82:	0b 01       	movw	r0, r22
     d84:	b9 01       	movw	r22, r18
     d86:	90 01       	movw	r18, r0
     d88:	0c 01       	movw	r0, r24
     d8a:	ca 01       	movw	r24, r20
     d8c:	a0 01       	movw	r20, r0
     d8e:	11 24       	eor	r1, r1
     d90:	ff 27       	eor	r31, r31
     d92:	59 1b       	sub	r21, r25
     d94:	99 f0       	breq	.+38     	; 0xdbc <__addsf3x+0x60>
     d96:	59 3f       	cpi	r21, 0xF9	; 249
     d98:	50 f4       	brcc	.+20     	; 0xdae <__addsf3x+0x52>
     d9a:	50 3e       	cpi	r21, 0xE0	; 224
     d9c:	68 f1       	brcs	.+90     	; 0xdf8 <__addsf3x+0x9c>
     d9e:	1a 16       	cp	r1, r26
     da0:	f0 40       	sbci	r31, 0x00	; 0
     da2:	a2 2f       	mov	r26, r18
     da4:	23 2f       	mov	r18, r19
     da6:	34 2f       	mov	r19, r20
     da8:	44 27       	eor	r20, r20
     daa:	58 5f       	subi	r21, 0xF8	; 248
     dac:	f3 cf       	rjmp	.-26     	; 0xd94 <__addsf3x+0x38>
     dae:	46 95       	lsr	r20
     db0:	37 95       	ror	r19
     db2:	27 95       	ror	r18
     db4:	a7 95       	ror	r26
     db6:	f0 40       	sbci	r31, 0x00	; 0
     db8:	53 95       	inc	r21
     dba:	c9 f7       	brne	.-14     	; 0xdae <__addsf3x+0x52>
     dbc:	7e f4       	brtc	.+30     	; 0xddc <__addsf3x+0x80>
     dbe:	1f 16       	cp	r1, r31
     dc0:	ba 0b       	sbc	r27, r26
     dc2:	62 0b       	sbc	r22, r18
     dc4:	73 0b       	sbc	r23, r19
     dc6:	84 0b       	sbc	r24, r20
     dc8:	ba f0       	brmi	.+46     	; 0xdf8 <__addsf3x+0x9c>
     dca:	91 50       	subi	r25, 0x01	; 1
     dcc:	a1 f0       	breq	.+40     	; 0xdf6 <__addsf3x+0x9a>
     dce:	ff 0f       	add	r31, r31
     dd0:	bb 1f       	adc	r27, r27
     dd2:	66 1f       	adc	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	c2 f7       	brpl	.-16     	; 0xdca <__addsf3x+0x6e>
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <__addsf3x+0x9c>
     ddc:	ba 0f       	add	r27, r26
     dde:	62 1f       	adc	r22, r18
     de0:	73 1f       	adc	r23, r19
     de2:	84 1f       	adc	r24, r20
     de4:	48 f4       	brcc	.+18     	; 0xdf8 <__addsf3x+0x9c>
     de6:	87 95       	ror	r24
     de8:	77 95       	ror	r23
     dea:	67 95       	ror	r22
     dec:	b7 95       	ror	r27
     dee:	f7 95       	ror	r31
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <__addsf3x+0x9a>
     df4:	b0 cf       	rjmp	.-160    	; 0xd56 <__addsf3+0x28>
     df6:	93 95       	inc	r25
     df8:	88 0f       	add	r24, r24
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <__addsf3x+0xa2>
     dfc:	99 27       	eor	r25, r25
     dfe:	ee 0f       	add	r30, r30
     e00:	97 95       	ror	r25
     e02:	87 95       	ror	r24
     e04:	08 95       	ret

00000e06 <__divsf3>:
     e06:	0e 94 17 07 	call	0xe2e	; 0xe2e <__divsf3x>
     e0a:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_round>
     e0e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_pscB>
     e12:	58 f0       	brcs	.+22     	; 0xe2a <__divsf3+0x24>
     e14:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fp_pscA>
     e18:	40 f0       	brcs	.+16     	; 0xe2a <__divsf3+0x24>
     e1a:	29 f4       	brne	.+10     	; 0xe26 <__divsf3+0x20>
     e1c:	5f 3f       	cpi	r21, 0xFF	; 255
     e1e:	29 f0       	breq	.+10     	; 0xe2a <__divsf3+0x24>
     e20:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_inf>
     e24:	51 11       	cpse	r21, r1
     e26:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_szero>
     e2a:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_nan>

00000e2e <__divsf3x>:
     e2e:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_split3>
     e32:	68 f3       	brcs	.-38     	; 0xe0e <__divsf3+0x8>

00000e34 <__divsf3_pse>:
     e34:	99 23       	and	r25, r25
     e36:	b1 f3       	breq	.-20     	; 0xe24 <__divsf3+0x1e>
     e38:	55 23       	and	r21, r21
     e3a:	91 f3       	breq	.-28     	; 0xe20 <__divsf3+0x1a>
     e3c:	95 1b       	sub	r25, r21
     e3e:	55 0b       	sbc	r21, r21
     e40:	bb 27       	eor	r27, r27
     e42:	aa 27       	eor	r26, r26
     e44:	62 17       	cp	r22, r18
     e46:	73 07       	cpc	r23, r19
     e48:	84 07       	cpc	r24, r20
     e4a:	38 f0       	brcs	.+14     	; 0xe5a <__divsf3_pse+0x26>
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
     e4e:	5f 4f       	sbci	r21, 0xFF	; 255
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	44 1f       	adc	r20, r20
     e56:	aa 1f       	adc	r26, r26
     e58:	a9 f3       	breq	.-22     	; 0xe44 <__divsf3_pse+0x10>
     e5a:	35 d0       	rcall	.+106    	; 0xec6 <__divsf3_pse+0x92>
     e5c:	0e 2e       	mov	r0, r30
     e5e:	3a f0       	brmi	.+14     	; 0xe6e <__divsf3_pse+0x3a>
     e60:	e0 e8       	ldi	r30, 0x80	; 128
     e62:	32 d0       	rcall	.+100    	; 0xec8 <__divsf3_pse+0x94>
     e64:	91 50       	subi	r25, 0x01	; 1
     e66:	50 40       	sbci	r21, 0x00	; 0
     e68:	e6 95       	lsr	r30
     e6a:	00 1c       	adc	r0, r0
     e6c:	ca f7       	brpl	.-14     	; 0xe60 <__divsf3_pse+0x2c>
     e6e:	2b d0       	rcall	.+86     	; 0xec6 <__divsf3_pse+0x92>
     e70:	fe 2f       	mov	r31, r30
     e72:	29 d0       	rcall	.+82     	; 0xec6 <__divsf3_pse+0x92>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	bb 1f       	adc	r27, r27
     e7c:	26 17       	cp	r18, r22
     e7e:	37 07       	cpc	r19, r23
     e80:	48 07       	cpc	r20, r24
     e82:	ab 07       	cpc	r26, r27
     e84:	b0 e8       	ldi	r27, 0x80	; 128
     e86:	09 f0       	breq	.+2      	; 0xe8a <__divsf3_pse+0x56>
     e88:	bb 0b       	sbc	r27, r27
     e8a:	80 2d       	mov	r24, r0
     e8c:	bf 01       	movw	r22, r30
     e8e:	ff 27       	eor	r31, r31
     e90:	93 58       	subi	r25, 0x83	; 131
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	3a f0       	brmi	.+14     	; 0xea4 <__divsf3_pse+0x70>
     e96:	9e 3f       	cpi	r25, 0xFE	; 254
     e98:	51 05       	cpc	r21, r1
     e9a:	78 f0       	brcs	.+30     	; 0xeba <__divsf3_pse+0x86>
     e9c:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_inf>
     ea0:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_szero>
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	e4 f3       	brlt	.-8      	; 0xea0 <__divsf3_pse+0x6c>
     ea8:	98 3e       	cpi	r25, 0xE8	; 232
     eaa:	d4 f3       	brlt	.-12     	; 0xea0 <__divsf3_pse+0x6c>
     eac:	86 95       	lsr	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f7 95       	ror	r31
     eb6:	9f 5f       	subi	r25, 0xFF	; 255
     eb8:	c9 f7       	brne	.-14     	; 0xeac <__divsf3_pse+0x78>
     eba:	88 0f       	add	r24, r24
     ebc:	91 1d       	adc	r25, r1
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	97 f9       	bld	r25, 7
     ec4:	08 95       	ret
     ec6:	e1 e0       	ldi	r30, 0x01	; 1
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	bb 1f       	adc	r27, r27
     ed0:	62 17       	cp	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	ba 07       	cpc	r27, r26
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <__divsf3_pse+0xae>
     eda:	62 1b       	sub	r22, r18
     edc:	73 0b       	sbc	r23, r19
     ede:	84 0b       	sbc	r24, r20
     ee0:	ba 0b       	sbc	r27, r26
     ee2:	ee 1f       	adc	r30, r30
     ee4:	88 f7       	brcc	.-30     	; 0xec8 <__divsf3_pse+0x94>
     ee6:	e0 95       	com	r30
     ee8:	08 95       	ret

00000eea <__fixunssfsi>:
     eea:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_splitA>
     eee:	88 f0       	brcs	.+34     	; 0xf12 <__fixunssfsi+0x28>
     ef0:	9f 57       	subi	r25, 0x7F	; 127
     ef2:	98 f0       	brcs	.+38     	; 0xf1a <__fixunssfsi+0x30>
     ef4:	b9 2f       	mov	r27, r25
     ef6:	99 27       	eor	r25, r25
     ef8:	b7 51       	subi	r27, 0x17	; 23
     efa:	b0 f0       	brcs	.+44     	; 0xf28 <__fixunssfsi+0x3e>
     efc:	e1 f0       	breq	.+56     	; 0xf36 <__fixunssfsi+0x4c>
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	1a f0       	brmi	.+6      	; 0xf0e <__fixunssfsi+0x24>
     f08:	ba 95       	dec	r27
     f0a:	c9 f7       	brne	.-14     	; 0xefe <__fixunssfsi+0x14>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <__fixunssfsi+0x4c>
     f0e:	b1 30       	cpi	r27, 0x01	; 1
     f10:	91 f0       	breq	.+36     	; 0xf36 <__fixunssfsi+0x4c>
     f12:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fp_zero>
     f16:	b1 e0       	ldi	r27, 0x01	; 1
     f18:	08 95       	ret
     f1a:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__fp_zero>
     f1e:	67 2f       	mov	r22, r23
     f20:	78 2f       	mov	r23, r24
     f22:	88 27       	eor	r24, r24
     f24:	b8 5f       	subi	r27, 0xF8	; 248
     f26:	39 f0       	breq	.+14     	; 0xf36 <__fixunssfsi+0x4c>
     f28:	b9 3f       	cpi	r27, 0xF9	; 249
     f2a:	cc f3       	brlt	.-14     	; 0xf1e <__fixunssfsi+0x34>
     f2c:	86 95       	lsr	r24
     f2e:	77 95       	ror	r23
     f30:	67 95       	ror	r22
     f32:	b3 95       	inc	r27
     f34:	d9 f7       	brne	.-10     	; 0xf2c <__fixunssfsi+0x42>
     f36:	3e f4       	brtc	.+14     	; 0xf46 <__fixunssfsi+0x5c>
     f38:	90 95       	com	r25
     f3a:	80 95       	com	r24
     f3c:	70 95       	com	r23
     f3e:	61 95       	neg	r22
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	08 95       	ret

00000f48 <__floatunsisf>:
     f48:	e8 94       	clt
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <__floatsisf+0x12>

00000f4c <__floatsisf>:
     f4c:	97 fb       	bst	r25, 7
     f4e:	3e f4       	brtc	.+14     	; 0xf5e <__floatsisf+0x12>
     f50:	90 95       	com	r25
     f52:	80 95       	com	r24
     f54:	70 95       	com	r23
     f56:	61 95       	neg	r22
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	8f 4f       	sbci	r24, 0xFF	; 255
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	99 23       	and	r25, r25
     f60:	a9 f0       	breq	.+42     	; 0xf8c <__floatsisf+0x40>
     f62:	f9 2f       	mov	r31, r25
     f64:	96 e9       	ldi	r25, 0x96	; 150
     f66:	bb 27       	eor	r27, r27
     f68:	93 95       	inc	r25
     f6a:	f6 95       	lsr	r31
     f6c:	87 95       	ror	r24
     f6e:	77 95       	ror	r23
     f70:	67 95       	ror	r22
     f72:	b7 95       	ror	r27
     f74:	f1 11       	cpse	r31, r1
     f76:	f8 cf       	rjmp	.-16     	; 0xf68 <__floatsisf+0x1c>
     f78:	fa f4       	brpl	.+62     	; 0xfb8 <__floatsisf+0x6c>
     f7a:	bb 0f       	add	r27, r27
     f7c:	11 f4       	brne	.+4      	; 0xf82 <__floatsisf+0x36>
     f7e:	60 ff       	sbrs	r22, 0
     f80:	1b c0       	rjmp	.+54     	; 0xfb8 <__floatsisf+0x6c>
     f82:	6f 5f       	subi	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8f 4f       	sbci	r24, 0xFF	; 255
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	16 c0       	rjmp	.+44     	; 0xfb8 <__floatsisf+0x6c>
     f8c:	88 23       	and	r24, r24
     f8e:	11 f0       	breq	.+4      	; 0xf94 <__floatsisf+0x48>
     f90:	96 e9       	ldi	r25, 0x96	; 150
     f92:	11 c0       	rjmp	.+34     	; 0xfb6 <__floatsisf+0x6a>
     f94:	77 23       	and	r23, r23
     f96:	21 f0       	breq	.+8      	; 0xfa0 <__floatsisf+0x54>
     f98:	9e e8       	ldi	r25, 0x8E	; 142
     f9a:	87 2f       	mov	r24, r23
     f9c:	76 2f       	mov	r23, r22
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <__floatsisf+0x5e>
     fa0:	66 23       	and	r22, r22
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <__floatsisf+0x74>
     fa4:	96 e8       	ldi	r25, 0x86	; 134
     fa6:	86 2f       	mov	r24, r22
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	2a f0       	brmi	.+10     	; 0xfb8 <__floatsisf+0x6c>
     fae:	9a 95       	dec	r25
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	da f7       	brpl	.-10     	; 0xfae <__floatsisf+0x62>
     fb8:	88 0f       	add	r24, r24
     fba:	96 95       	lsr	r25
     fbc:	87 95       	ror	r24
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret

00000fc2 <__fp_inf>:
     fc2:	97 f9       	bld	r25, 7
     fc4:	9f 67       	ori	r25, 0x7F	; 127
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	08 95       	ret

00000fce <__fp_nan>:
     fce:	9f ef       	ldi	r25, 0xFF	; 255
     fd0:	80 ec       	ldi	r24, 0xC0	; 192
     fd2:	08 95       	ret

00000fd4 <__fp_pscA>:
     fd4:	00 24       	eor	r0, r0
     fd6:	0a 94       	dec	r0
     fd8:	16 16       	cp	r1, r22
     fda:	17 06       	cpc	r1, r23
     fdc:	18 06       	cpc	r1, r24
     fde:	09 06       	cpc	r0, r25
     fe0:	08 95       	ret

00000fe2 <__fp_pscB>:
     fe2:	00 24       	eor	r0, r0
     fe4:	0a 94       	dec	r0
     fe6:	12 16       	cp	r1, r18
     fe8:	13 06       	cpc	r1, r19
     fea:	14 06       	cpc	r1, r20
     fec:	05 06       	cpc	r0, r21
     fee:	08 95       	ret

00000ff0 <__fp_round>:
     ff0:	09 2e       	mov	r0, r25
     ff2:	03 94       	inc	r0
     ff4:	00 0c       	add	r0, r0
     ff6:	11 f4       	brne	.+4      	; 0xffc <__fp_round+0xc>
     ff8:	88 23       	and	r24, r24
     ffa:	52 f0       	brmi	.+20     	; 0x1010 <__fp_round+0x20>
     ffc:	bb 0f       	add	r27, r27
     ffe:	40 f4       	brcc	.+16     	; 0x1010 <__fp_round+0x20>
    1000:	bf 2b       	or	r27, r31
    1002:	11 f4       	brne	.+4      	; 0x1008 <__fp_round+0x18>
    1004:	60 ff       	sbrs	r22, 0
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <__fp_round+0x20>
    1008:	6f 5f       	subi	r22, 0xFF	; 255
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	8f 4f       	sbci	r24, 0xFF	; 255
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	08 95       	ret

00001012 <__fp_split3>:
    1012:	57 fd       	sbrc	r21, 7
    1014:	90 58       	subi	r25, 0x80	; 128
    1016:	44 0f       	add	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	59 f0       	breq	.+22     	; 0x1032 <__fp_splitA+0x10>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	71 f0       	breq	.+28     	; 0x103c <__fp_splitA+0x1a>
    1020:	47 95       	ror	r20

00001022 <__fp_splitA>:
    1022:	88 0f       	add	r24, r24
    1024:	97 fb       	bst	r25, 7
    1026:	99 1f       	adc	r25, r25
    1028:	61 f0       	breq	.+24     	; 0x1042 <__fp_splitA+0x20>
    102a:	9f 3f       	cpi	r25, 0xFF	; 255
    102c:	79 f0       	breq	.+30     	; 0x104c <__fp_splitA+0x2a>
    102e:	87 95       	ror	r24
    1030:	08 95       	ret
    1032:	12 16       	cp	r1, r18
    1034:	13 06       	cpc	r1, r19
    1036:	14 06       	cpc	r1, r20
    1038:	55 1f       	adc	r21, r21
    103a:	f2 cf       	rjmp	.-28     	; 0x1020 <__fp_split3+0xe>
    103c:	46 95       	lsr	r20
    103e:	f1 df       	rcall	.-30     	; 0x1022 <__fp_splitA>
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <__fp_splitA+0x30>
    1042:	16 16       	cp	r1, r22
    1044:	17 06       	cpc	r1, r23
    1046:	18 06       	cpc	r1, r24
    1048:	99 1f       	adc	r25, r25
    104a:	f1 cf       	rjmp	.-30     	; 0x102e <__fp_splitA+0xc>
    104c:	86 95       	lsr	r24
    104e:	71 05       	cpc	r23, r1
    1050:	61 05       	cpc	r22, r1
    1052:	08 94       	sec
    1054:	08 95       	ret

00001056 <__fp_zero>:
    1056:	e8 94       	clt

00001058 <__fp_szero>:
    1058:	bb 27       	eor	r27, r27
    105a:	66 27       	eor	r22, r22
    105c:	77 27       	eor	r23, r23
    105e:	cb 01       	movw	r24, r22
    1060:	97 f9       	bld	r25, 7
    1062:	08 95       	ret

00001064 <__itoa_ncheck>:
    1064:	bb 27       	eor	r27, r27
    1066:	4a 30       	cpi	r20, 0x0A	; 10
    1068:	31 f4       	brne	.+12     	; 0x1076 <__itoa_ncheck+0x12>
    106a:	99 23       	and	r25, r25
    106c:	22 f4       	brpl	.+8      	; 0x1076 <__itoa_ncheck+0x12>
    106e:	bd e2       	ldi	r27, 0x2D	; 45
    1070:	90 95       	com	r25
    1072:	81 95       	neg	r24
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__utoa_common>

0000107a <__utoa_ncheck>:
    107a:	bb 27       	eor	r27, r27

0000107c <__utoa_common>:
    107c:	fb 01       	movw	r30, r22
    107e:	55 27       	eor	r21, r21
    1080:	aa 27       	eor	r26, r26
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	aa 1f       	adc	r26, r26
    1088:	a4 17       	cp	r26, r20
    108a:	10 f0       	brcs	.+4      	; 0x1090 <__utoa_common+0x14>
    108c:	a4 1b       	sub	r26, r20
    108e:	83 95       	inc	r24
    1090:	50 51       	subi	r21, 0x10	; 16
    1092:	b9 f7       	brne	.-18     	; 0x1082 <__utoa_common+0x6>
    1094:	a0 5d       	subi	r26, 0xD0	; 208
    1096:	aa 33       	cpi	r26, 0x3A	; 58
    1098:	08 f0       	brcs	.+2      	; 0x109c <__utoa_common+0x20>
    109a:	a9 5d       	subi	r26, 0xD9	; 217
    109c:	a1 93       	st	Z+, r26
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	79 f7       	brne	.-34     	; 0x1080 <__utoa_common+0x4>
    10a2:	b1 11       	cpse	r27, r1
    10a4:	b1 93       	st	Z+, r27
    10a6:	11 92       	st	Z+, r1
    10a8:	cb 01       	movw	r24, r22
    10aa:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <strrev>

000010ae <strrev>:
    10ae:	dc 01       	movw	r26, r24
    10b0:	fc 01       	movw	r30, r24
    10b2:	67 2f       	mov	r22, r23
    10b4:	71 91       	ld	r23, Z+
    10b6:	77 23       	and	r23, r23
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <strrev+0x4>
    10ba:	32 97       	sbiw	r30, 0x02	; 2
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <strrev+0x18>
    10be:	7c 91       	ld	r23, X
    10c0:	6d 93       	st	X+, r22
    10c2:	70 83       	st	Z, r23
    10c4:	62 91       	ld	r22, -Z
    10c6:	ae 17       	cp	r26, r30
    10c8:	bf 07       	cpc	r27, r31
    10ca:	c8 f3       	brcs	.-14     	; 0x10be <strrev+0x10>
    10cc:	08 95       	ret

000010ce <_exit>:
    10ce:	f8 94       	cli

000010d0 <__stop_program>:
    10d0:	ff cf       	rjmp	.-2      	; 0x10d0 <__stop_program>
