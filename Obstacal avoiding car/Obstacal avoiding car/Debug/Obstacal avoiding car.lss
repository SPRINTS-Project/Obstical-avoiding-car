
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00001baa  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008000fc  008000fc  00001cda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d31  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a1  00000000  00000000  00005de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000256b  00000000  00000000  00007182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000082c  00000000  00000000  000096f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001295  00000000  00000000  00009f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024a9  00000000  00000000  0000b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000d65a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_1>
       8:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_2>
       c:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	f9 09       	sbc	r31, r9
      56:	04 0a       	sbc	r0, r20
      58:	0f 0a       	sbc	r0, r31
      5a:	1f 0b       	sbc	r17, r31
      5c:	1a 0a       	sbc	r1, r26
      5e:	1f 0b       	sbc	r17, r31
      60:	25 0a       	sbc	r2, r21
      62:	30 0a       	sbc	r3, r16
      64:	3b 0a       	sbc	r3, r27
      66:	46 0a       	sbc	r4, r22
      68:	5c 0a       	sbc	r5, r28
      6a:	67 0a       	sbc	r6, r23
      6c:	72 0a       	sbc	r7, r18
      6e:	21 0b       	sbc	r18, r17
      70:	7d 0a       	sbc	r7, r29
      72:	21 0b       	sbc	r18, r17
      74:	88 0a       	sbc	r8, r24
      76:	93 0a       	sbc	r9, r19
      78:	9e 0a       	sbc	r9, r30
      7a:	a9 0a       	sbc	r10, r25
      7c:	bf 0a       	sbc	r11, r31
      7e:	ca 0a       	sbc	r12, r26
      80:	d5 0a       	sbc	r13, r21
      82:	e0 0a       	sbc	r14, r16
      84:	eb 0a       	sbc	r14, r27
      86:	f6 0a       	sbc	r15, r22
      88:	01 0b       	sbc	r16, r17
      8a:	0c 0b       	sbc	r16, r28

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ea ea       	ldi	r30, 0xAA	; 170
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 3f       	cpi	r26, 0xFC	; 252
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	ac ef       	ldi	r26, 0xFC	; 252
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 32       	cpi	r26, 0x25	; 37
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 b9 06 	call	0xd72	; 0xd72 <main>
      c2:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <BUTTON_vidChangeDir>:
/*									Static Function Implementation                										*/
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	u8_g_dirStateCounter ^= 1 ;
      ca:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <u8_g_dirStateCounter>
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	89 27       	eor	r24, r25
      d2:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <u8_g_dirStateCounter>
      d6:	08 95       	ret

000000d8 <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      d8:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <u8_g_OneSecTicks>
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 df 05 	call	0xbbe	; 0xbbe <TIMER_Manager_reset>
      ea:	08 95       	ret

000000ec <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      ec:	0e 94 82 06 	call	0xd04	; 0xd04 <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
      f0:	0e 94 9c 06 	call	0xd38	; 0xd38 <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
      f4:	0e 94 a5 03 	call	0x74a	; 0x74a <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
      f8:	87 e6       	ldi	r24, 0x67	; 103
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 07 03 	call	0x60e	; 0x60e <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     108:	80 e6       	ldi	r24, 0x60	; 96
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <TIMER_Manager_init>
	(void) PWM_init();
     110:	0e 94 a5 05 	call	0xb4a	; 0xb4a <PWM_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	96 e0       	ldi	r25, 0x06	; 6
     118:	0e 94 b3 06 	call	0xd66	; 0xd66 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     11c:	84 e1       	ldi	r24, 0x14	; 20
     11e:	96 e0       	ldi	r25, 0x06	; 6
     120:	0e 94 b6 06 	call	0xd6c	; 0xd6c <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     124:	85 e6       	ldi	r24, 0x65	; 101
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 1d 03 	call	0x63a	; 0x63a <HExtInt_enCBFInt0>
	
/*	sei();*/
	DDRA = 0xFF;
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	8a bb       	out	0x1a, r24	; 26
     130:	08 95       	ret

00000132 <APP_updateDirection>:
	TIMER_Manager_reset(&st_timer1Config);
}

void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     132:	0e 94 a3 06 	call	0xd46	; 0xd46 <HULTRASONIC_vidInterruptDisable>
	u8_g_OneSecTicks = 0;
     136:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <u8_g_OneSecTicks>
	TIMER_Manager_start (&st_timer1Config);
     13a:	80 e6       	ldi	r24, 0x60	; 96
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     142:	0e 94 28 03 	call	0x650	; 0x650 <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 2)
     146:	27 c0       	rjmp	.+78     	; 0x196 <APP_updateDirection+0x64>
	{
		if (u8_g_dirStateCounter == 1)
     148:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <u8_g_dirStateCounter>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	a9 f4       	brne	.+42     	; 0x17a <APP_updateDirection+0x48>
		{
			HLCD_gotoXY(1,4);
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
			HLCD_vidWriteChar(' ');
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	0e 94 06 04 	call	0x80c	; 0x80c <HLCD_vidWriteChar>
			HLCD_gotoXY(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
			HLCD_WriteString("Left");
     164:	81 e8       	ldi	r24, 0x81	; 129
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
			g_u8_motorDir = "Left";
     16c:	81 e8       	ldi	r24, 0x81	; 129
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
     174:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
     178:	0e c0       	rjmp	.+28     	; 0x196 <APP_updateDirection+0x64>
		}
		else{
			HLCD_gotoXY(1,0);
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
			HLCD_WriteString("Right");
     182:	86 e8       	ldi	r24, 0x86	; 134
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
			g_u8_motorDir = "Right";
     18a:	86 e8       	ldi	r24, 0x86	; 134
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
     192:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
{
	HULTRASONIC_vidInterruptDisable();
	u8_g_OneSecTicks = 0;
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 2)
     196:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <u8_g_OneSecTicks>
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	a8 f2       	brcs	.-86     	; 0x148 <APP_updateDirection+0x16>
			HLCD_WriteString("Right");
			g_u8_motorDir = "Right";
		}
	}
	//while(u8_g_OneSecTicks <= 7);
	HLCD_ClrDisplay();
     19e:	0e 94 80 04 	call	0x900	; 0x900 <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     1a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     1aa:	0e 94 25 03 	call	0x64a	; 0x64a <HExtInt0_enIntDisable>
	HULTRASONIC_vidInterruptEnable();
     1ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <HULTRASONIC_vidInterruptEnable>
     1b2:	08 95       	ret

000001b4 <APP_vidStart>:
/*	sei();*/
	DDRA = 0xFF;
}

void APP_vidStart(void)
{
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
// 	if (en_motorSel == EN_MOTOR_IDLE)
// 	{
		(void) KEYPAD_read(&u8KeyRead);
     1bc:	8b e1       	ldi	r24, 0x1B	; 27
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 28 05 	call	0xa50	; 0xa50 <KEYPAD_read>
		
		if (u8KeyRead != 'N')
     1c4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <u8KeyRead>
     1c8:	8e 34       	cpi	r24, 0x4E	; 78
     1ca:	59 f0       	breq	.+22     	; 0x1e2 <APP_vidStart+0x2e>
		{
			switch(u8KeyRead)
     1cc:	81 33       	cpi	r24, 0x31	; 49
     1ce:	19 f0       	breq	.+6      	; 0x1d6 <APP_vidStart+0x22>
     1d0:	82 33       	cpi	r24, 0x32	; 50
     1d2:	21 f0       	breq	.+8      	; 0x1dc <APP_vidStart+0x28>
     1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <APP_vidStart+0x2e>
			{
				case '1' : {
					en_motorSel = EN_MOTOR_START;
     1d6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
					break;
     1da:	03 c0       	rjmp	.+6      	; 0x1e2 <APP_vidStart+0x2e>
				}
				case '2' : {
					en_motorSel = EN_MOTOR_STOP;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					break;
				}
			}
		}
/*	}*/
	if (en_motorSel == EN_MOTOR_START)
     1e2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     1e6:	81 11       	cpse	r24, r1
     1e8:	e0 c1       	rjmp	.+960    	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
	 { 			
		//if (flag3 == 0) {HLCD_ClrDisplay();  flag1 = 0; flag2 = 0; flag3 = 1; }
					
		if (en_start_state == EN_UPDATE_DIR)
     1ea:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <en_start_state>
     1ee:	81 11       	cpse	r24, r1
     1f0:	10 c0       	rjmp	.+32     	; 0x212 <APP_vidStart+0x5e>
		{
			HLCD_ClrDisplay();
     1f2:	0e 94 80 04 	call	0x900	; 0x900 <HLCD_ClrDisplay>
			HLCD_gotoXY(0,0);
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
			HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     1fe:	8c e8       	ldi	r24, 0x8C	; 140
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
			APP_updateDirection();
     206:	0e 94 99 00 	call	0x132	; 0x132 <APP_updateDirection>
			en_start_state = UPDATE_OBISTICAL_STATE;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <en_start_state>
     210:	66 c0       	rjmp	.+204    	; 0x2de <APP_vidStart+0x12a>
		}
		else if (en_start_state == UPDATE_OBISTICAL_STATE )
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <APP_vidStart+0x64>
     216:	63 c0       	rjmp	.+198    	; 0x2de <APP_vidStart+0x12a>
		{
		  global_f64Dist = HULTRASONIC_u8Read();
     218:	0e 94 a8 06 	call	0xd50	; 0xd50 <HULTRASONIC_u8Read>
     21c:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <global_f64Dist>
     220:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <global_f64Dist+0x1>
     224:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <global_f64Dist+0x2>
     228:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	8f e2       	ldi	r24, 0x2F	; 47
     22e:	95 e7       	ldi	r25, 0x75	; 117
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <APP_vidStart+0x7c>
     234:	00 c0       	rjmp	.+0      	; 0x236 <APP_vidStart+0x82>
     236:	00 00       	nop
		  _delay_ms(15);
		  
			if		(global_f64Dist > 70.0 )							{ en_Dist_states = NO_OBISTICALS;  }		
     238:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <global_f64Dist>
     23c:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <global_f64Dist+0x1>
     240:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <global_f64Dist+0x2>
     244:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <global_f64Dist+0x3>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	4c e8       	ldi	r20, 0x8C	; 140
     24e:	52 e4       	ldi	r21, 0x42	; 66
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     258:	18 16       	cp	r1, r24
     25a:	24 f4       	brge	.+8      	; 0x264 <APP_vidStart+0xb0>
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
     262:	3d c0       	rjmp	.+122    	; 0x2de <APP_vidStart+0x12a>
			else if (global_f64Dist > 30.0 && global_f64Dist <= 70.0)	{ en_Dist_states = OBISTICAL_70_30; }	
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 ef       	ldi	r20, 0xF0	; 240
     26a:	51 e4       	ldi	r21, 0x41	; 65
     26c:	c7 01       	movw	r24, r14
     26e:	b6 01       	movw	r22, r12
     270:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     274:	18 16       	cp	r1, r24
     276:	74 f4       	brge	.+28     	; 0x294 <APP_vidStart+0xe0>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	4c e8       	ldi	r20, 0x8C	; 140
     27e:	52 e4       	ldi	r21, 0x42	; 66
     280:	c7 01       	movw	r24, r14
     282:	b6 01       	movw	r22, r12
     284:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__cmpsf2>
     288:	18 16       	cp	r1, r24
     28a:	24 f0       	brlt	.+8      	; 0x294 <APP_vidStart+0xe0>
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
     292:	25 c0       	rjmp	.+74     	; 0x2de <APP_vidStart+0x12a>
			else if (global_f64Dist >= 20.0 && global_f64Dist <= 30)	{ en_Dist_states = OBISTICAL_30_20;}	
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 ea       	ldi	r20, 0xA0	; 160
     29a:	51 e4       	ldi	r21, 0x41	; 65
     29c:	c7 01       	movw	r24, r14
     29e:	b6 01       	movw	r22, r12
     2a0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     2a4:	88 23       	and	r24, r24
     2a6:	74 f0       	brlt	.+28     	; 0x2c4 <APP_vidStart+0x110>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 ef       	ldi	r20, 0xF0	; 240
     2ae:	51 e4       	ldi	r21, 0x41	; 65
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__cmpsf2>
     2b8:	18 16       	cp	r1, r24
     2ba:	24 f0       	brlt	.+8      	; 0x2c4 <APP_vidStart+0x110>
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
     2c2:	0d c0       	rjmp	.+26     	; 0x2de <APP_vidStart+0x12a>
			else if (global_f64Dist < 20.0)								{ en_Dist_states = OBISTICAL_LESS_20;}	
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 ea       	ldi	r20, 0xA0	; 160
     2ca:	51 e4       	ldi	r21, 0x41	; 65
     2cc:	c7 01       	movw	r24, r14
     2ce:	b6 01       	movw	r22, r12
     2d0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__cmpsf2>
     2d4:	88 23       	and	r24, r24
     2d6:	1c f4       	brge	.+6      	; 0x2de <APP_vidStart+0x12a>
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
			else{  /* do nothing */ }	
			}	else { /*do nothing*/}
				
		if (en_Dist_states == NO_OBISTICALS)
     2de:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	21 f5       	brne	.+72     	; 0x32e <APP_vidStart+0x17a>
		{
				HLCD_gotoXY(1,0);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     2ec:	8a e9       	ldi	r24, 0x9A	; 154
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     2f4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     2f8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     2fc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     300:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     304:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fixunssfsi>
     308:	0e 94 cc 04 	call	0x998	; 0x998 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     30c:	81 ea       	ldi	r24, 0xA1	; 161
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Speed:50% ");
     31c:	85 ea       	ldi	r24, 0xA5	; 165
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     324:	80 eb       	ldi	r24, 0xB0	; 176
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
     32c:	6b c1       	rjmp	.+726    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
		}
		else if (en_Dist_states == OBISTICAL_70_30)
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	29 f5       	brne	.+74     	; 0x37c <APP_vidStart+0x1c8>
		{
				HLCD_gotoXY(1,0);
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     33a:	8a e9       	ldi	r24, 0x9A	; 154
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     342:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     346:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     34a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     34e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     352:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fixunssfsi>
     356:	0e 94 cc 04 	call	0x998	; 0x998 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     35a:	81 ea       	ldi	r24, 0xA1	; 161
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     36a:	86 eb       	ldi	r24, 0xB6	; 182
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:F");		
     372:	80 eb       	ldi	r24, 0xB0	; 176
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
     37a:	44 c1       	rjmp	.+648    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
		}
		else if (en_Dist_states == OBISTICAL_30_20)
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	09 f0       	breq	.+2      	; 0x382 <APP_vidStart+0x1ce>
     380:	a4 c0       	rjmp	.+328    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		{
				HLCD_gotoXY(1,0);
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     38a:	8a e9       	ldi	r24, 0x9A	; 154
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     392:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     396:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     39a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     39e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     3a2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fixunssfsi>
     3a6:	0e 94 cc 04 	call	0x998	; 0x998 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     3aa:	81 ea       	ldi	r24, 0xA1	; 161
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     3ba:	86 eb       	ldi	r24, 0xB6	; 182
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     3c2:	81 ec       	ldi	r24, 0xC1	; 193
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
     3ca:	9f ef       	ldi	r25, 0xFF	; 255
     3cc:	24 e3       	ldi	r18, 0x34	; 52
     3ce:	8c e0       	ldi	r24, 0x0C	; 12
     3d0:	91 50       	subi	r25, 0x01	; 1
     3d2:	20 40       	sbci	r18, 0x00	; 0
     3d4:	80 40       	sbci	r24, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <APP_vidStart+0x21c>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <APP_vidStart+0x226>
     3da:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     3e4:	86 eb       	ldi	r24, 0xB6	; 182
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:R");
     3ec:	87 ec       	ldi	r24, 0xC7	; 199
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				while (global_f64Dist <= 30.0)
     3f4:	32 c0       	rjmp	.+100    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
				{
					global_f64Dist = HULTRASONIC_u8Read();
     3f6:	0e 94 a8 06 	call	0xd50	; 0xd50 <HULTRASONIC_u8Read>
     3fa:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <global_f64Dist>
     3fe:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <global_f64Dist+0x1>
     402:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <global_f64Dist+0x2>
     406:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     412:	8a e9       	ldi	r24, 0x9A	; 154
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     41a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     41e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     422:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     426:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     42a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fixunssfsi>
     42e:	0e 94 cc 04 	call	0x998	; 0x998 <HLCD_WriteInt>
					HLCD_WriteString(" cm");
     432:	81 ea       	ldi	r24, 0xA1	; 161
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
					if (global_f64Dist <= 20.0) break;
     43a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     43e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     442:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     446:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 ea       	ldi	r20, 0xA0	; 160
     450:	51 e4       	ldi	r21, 0x41	; 65
     452:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__cmpsf2>
     456:	18 16       	cp	r1, r24
     458:	8c f4       	brge	.+34     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				HLCD_WriteString("Dir:S");
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:30% ");
				HLCD_WriteString("Dir:R");
				while (global_f64Dist <= 30.0)
     45a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     45e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     462:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     466:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 ef       	ldi	r20, 0xF0	; 240
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__cmpsf2>
     476:	18 16       	cp	r1, r24
     478:	0c f0       	brlt	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47a:	bd cf       	rjmp	.-134    	; 0x3f6 <APP_vidStart+0x242>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
					HLCD_WriteString(" cm");
					if (global_f64Dist <= 20.0) break;
				}
				//_delay_ms(500);
				if (global_f64Dist > 20.0)
     47c:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     480:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     484:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     488:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 ea       	ldi	r20, 0xA0	; 160
     492:	51 e4       	ldi	r21, 0x41	; 65
     494:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     498:	18 16       	cp	r1, r24
     49a:	0c f0       	brlt	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49c:	b3 c0       	rjmp	.+358    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
				{
					HLCD_gotoXY(0,0);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
					HLCD_WriteString("Speed:30% ");
     4a6:	86 eb       	ldi	r24, 0xB6	; 182
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
					HLCD_WriteString("Dir:F");
     4ae:	80 eb       	ldi	r24, 0xB0	; 176
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
     4b6:	9f ef       	ldi	r25, 0xFF	; 255
     4b8:	24 e3       	ldi	r18, 0x34	; 52
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	91 50       	subi	r25, 0x01	; 1
     4be:	20 40       	sbci	r18, 0x00	; 0
     4c0:	80 40       	sbci	r24, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4c6:	00 00       	nop
     4c8:	9d c0       	rjmp	.+314    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
					_delay_ms(500);					
				}

		}
		else if (en_Dist_states == OBISTICAL_LESS_20)
     4ca:	84 30       	cpi	r24, 0x04	; 4
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4ce:	9a c0       	rjmp	.+308    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
		{
				HLCD_gotoXY(1,0);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     4d8:	8a e9       	ldi	r24, 0x9A	; 154
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     4e0:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     4e4:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     4e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     4ec:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     4f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fixunssfsi>
     4f4:	0e 94 cc 04 	call	0x998	; 0x998 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     4f8:	81 ea       	ldi	r24, 0xA1	; 161
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     508:	86 eb       	ldi	r24, 0xB6	; 182
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     510:	81 ec       	ldi	r24, 0xC1	; 193
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
     518:	9f ef       	ldi	r25, 0xFF	; 255
     51a:	24 e3       	ldi	r18, 0x34	; 52
     51c:	8c e0       	ldi	r24, 0x0C	; 12
     51e:	91 50       	subi	r25, 0x01	; 1
     520:	20 40       	sbci	r18, 0x00	; 0
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     526:	00 c0       	rjmp	.+0      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     528:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     532:	86 eb       	ldi	r24, 0xB6	; 182
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:b");
     53a:	8d ec       	ldi	r24, 0xCD	; 205
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				while (global_f64Dist <= 20.0)
     542:	22 c0       	rjmp	.+68     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
				{
					global_f64Dist = HULTRASONIC_u8Read();
     544:	0e 94 a8 06 	call	0xd50	; 0xd50 <HULTRASONIC_u8Read>
     548:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <global_f64Dist>
     54c:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <global_f64Dist+0x1>
     550:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <global_f64Dist+0x2>
     554:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     560:	8a e9       	ldi	r24, 0x9A	; 154
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     568:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     56c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     570:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     574:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     578:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__fixunssfsi>
     57c:	0e 94 cc 04 	call	0x998	; 0x998 <HLCD_WriteInt>
					HLCD_WriteString(" cm");						
     580:	81 ea       	ldi	r24, 0xA1	; 161
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:30% ");
				HLCD_WriteString("Dir:b");
				while (global_f64Dist <= 20.0)
     588:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <global_f64Dist>
     58c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <global_f64Dist+0x1>
     590:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <global_f64Dist+0x2>
     594:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <global_f64Dist+0x3>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 ea       	ldi	r20, 0xA0	; 160
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__cmpsf2>
     5a4:	18 16       	cp	r1, r24
     5a6:	74 f6       	brge	.-100    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     5a8:	2d c0       	rjmp	.+90     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
				}
		}
	 }
	 
	 
	else if (en_motorSel == EN_MOTOR_STOP)
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	b1 f4       	brne	.+44     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     5ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag2>
     5b2:	81 11       	cpse	r24, r1
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     5b6:	0e 94 80 04 	call	0x900	; 0x900 <HLCD_ClrDisplay>
     5ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag1>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag2>
     5c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <flag3>
		  HLCD_gotoXY(0,0);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     5d0:	83 ed       	ldi	r24, 0xD3	; 211
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
     5d8:	15 c0       	rjmp	.+42     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     5da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag1>
     5de:	81 11       	cpse	r24, r1
     5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
     5e2:	0e 94 80 04 	call	0x900	; 0x900 <HLCD_ClrDisplay>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag1>
     5ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag2>
     5f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <flag3>
		  HLCD_gotoXY(0,0);
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 97 04 	call	0x92e	; 0x92e <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     5fc:	81 ee       	ldi	r24, 0xE1	; 225
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
	  }
	 

}
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	08 95       	ret

0000060e <HExtInt_enInit>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	c8 2f       	mov	r28, r24
     614:	d6 2f       	mov	r29, r22
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	62 e0       	ldi	r22, 0x02	; 2
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     62a:	6d 2f       	mov	r22, r29
     62c:	8c 2f       	mov	r24, r28
     62e:	0e 94 de 07 	call	0xfbc	; 0xfbc <vidExtInt_init>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <HExtInt_enCBFInt0>:
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	21 f0       	breq	.+8      	; 0x646 <HExtInt_enCBFInt0+0xc>
     63e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MEXTINT_vidCallBackFuncInt0>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	08 95       	ret
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	08 95       	ret

0000064a <HExtInt0_enIntDisable>:
     64a:	0e 94 65 08 	call	0x10ca	; 0x10ca <MEXTINT_vidDisableInterrupt>
     64e:	08 95       	ret

00000650 <HExtInt0_enIntEnable>:
     650:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MEXTINT_vidEnableInterrupt>
     654:	08 95       	ret

00000656 <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	18 2f       	mov	r17, r24
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     66a:	c8 2f       	mov	r28, r24
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	67 e0       	ldi	r22, 0x07	; 7
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     676:	c8 2b       	or	r28, r24
     678:	01 2f       	mov	r16, r17
     67a:	02 95       	swap	r16
     67c:	0f 70       	andi	r16, 0x0F	; 15
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	15 c0       	rjmp	.+42     	; 0x6ac <HLCD_vidWritecmd+0x56>
     682:	ed 2f       	mov	r30, r29
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	40 2f       	mov	r20, r16
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	0d 2e       	mov	r0, r29
     68c:	02 c0       	rjmp	.+4      	; 0x692 <HLCD_vidWritecmd+0x3c>
     68e:	55 95       	asr	r21
     690:	47 95       	ror	r20
     692:	0a 94       	dec	r0
     694:	e2 f7       	brpl	.-8      	; 0x68e <HLCD_vidWritecmd+0x38>
     696:	41 70       	andi	r20, 0x01	; 1
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e8 58       	subi	r30, 0x88	; 136
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	61 81       	ldd	r22, Z+1	; 0x01
     6a2:	80 81       	ld	r24, Z
     6a4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     6a8:	c8 2b       	or	r28, r24
     6aa:	df 5f       	subi	r29, 0xFF	; 255
     6ac:	d4 30       	cpi	r29, 0x04	; 4
     6ae:	48 f3       	brcs	.-46     	; 0x682 <HLCD_vidWritecmd+0x2c>
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     6ba:	c8 2b       	or	r28, r24
     6bc:	89 ef       	ldi	r24, 0xF9	; 249
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <HLCD_vidWritecmd+0x6a>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <HLCD_vidWritecmd+0x70>
     6c6:	00 00       	nop
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     6d2:	c8 2b       	or	r28, r24
     6d4:	92 e4       	ldi	r25, 0x42	; 66
     6d6:	9a 95       	dec	r25
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <HLCD_vidWritecmd+0x80>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <HLCD_vidWritecmd+0x86>
     6dc:	1f 70       	andi	r17, 0x0F	; 15
     6de:	d0 e0       	ldi	r29, 0x00	; 0
     6e0:	15 c0       	rjmp	.+42     	; 0x70c <HLCD_vidWritecmd+0xb6>
     6e2:	ed 2f       	mov	r30, r29
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	41 2f       	mov	r20, r17
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	0d 2e       	mov	r0, r29
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <HLCD_vidWritecmd+0x9c>
     6ee:	55 95       	asr	r21
     6f0:	47 95       	ror	r20
     6f2:	0a 94       	dec	r0
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <HLCD_vidWritecmd+0x98>
     6f6:	41 70       	andi	r20, 0x01	; 1
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e8 58       	subi	r30, 0x88	; 136
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	61 81       	ldd	r22, Z+1	; 0x01
     702:	80 81       	ld	r24, Z
     704:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     708:	c8 2b       	or	r28, r24
     70a:	df 5f       	subi	r29, 0xFF	; 255
     70c:	d4 30       	cpi	r29, 0x04	; 4
     70e:	48 f3       	brcs	.-46     	; 0x6e2 <HLCD_vidWritecmd+0x8c>
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     71a:	c8 2b       	or	r28, r24
     71c:	e9 ef       	ldi	r30, 0xF9	; 249
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <HLCD_vidWritecmd+0xca>
     724:	00 c0       	rjmp	.+0      	; 0x726 <HLCD_vidWritecmd+0xd0>
     726:	00 00       	nop
     728:	40 e0       	ldi	r20, 0x00	; 0
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     732:	8c 2b       	or	r24, r28
     734:	e3 ef       	ldi	r30, 0xF3	; 243
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	31 97       	sbiw	r30, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <HLCD_vidWritecmd+0xe2>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <HLCD_vidWritecmd+0xe8>
     73e:	00 00       	nop
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <HLCD_vidInit>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	d0 e0       	ldi	r29, 0x00	; 0
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	0d c0       	rjmp	.+26     	; 0x76e <HLCD_vidInit+0x24>
     754:	ed 2f       	mov	r30, r29
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	e8 58       	subi	r30, 0x88	; 136
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	61 81       	ldd	r22, Z+1	; 0x01
     764:	80 81       	ld	r24, Z
     766:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
     76a:	c8 2b       	or	r28, r24
     76c:	df 5f       	subi	r29, 0xFF	; 255
     76e:	d4 30       	cpi	r29, 0x04	; 4
     770:	88 f3       	brcs	.-30     	; 0x754 <HLCD_vidInit+0xa>
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	67 e0       	ldi	r22, 0x07	; 7
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
     77c:	c8 2b       	or	r28, r24
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
     788:	c8 2b       	or	r28, r24
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
     794:	c8 2b       	or	r28, r24
     796:	8f e0       	ldi	r24, 0x0F	; 15
     798:	97 e2       	ldi	r25, 0x27	; 39
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <HLCD_vidInit+0x50>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <HLCD_vidInit+0x56>
     7a0:	00 00       	nop
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     7a8:	c8 2b       	or	r28, r24
     7aa:	e9 ef       	ldi	r30, 0xF9	; 249
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <HLCD_vidInit+0x64>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <HLCD_vidInit+0x6a>
     7b4:	00 00       	nop
     7b6:	88 e2       	ldi	r24, 0x28	; 40
     7b8:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     7bc:	c8 2b       	or	r28, r24
     7be:	89 ef       	ldi	r24, 0xF9	; 249
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <HLCD_vidInit+0x78>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <HLCD_vidInit+0x7e>
     7c8:	00 00       	nop
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     7d0:	c8 2b       	or	r28, r24
     7d2:	e7 ee       	ldi	r30, 0xE7	; 231
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <HLCD_vidInit+0x8c>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <HLCD_vidInit+0x92>
     7dc:	00 00       	nop
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     7e4:	c8 2b       	or	r28, r24
     7e6:	89 ef       	ldi	r24, 0xF9	; 249
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <HLCD_vidInit+0xa0>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <HLCD_vidInit+0xa6>
     7f0:	00 00       	nop
     7f2:	8c e0       	ldi	r24, 0x0C	; 12
     7f4:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     7f8:	8c 2b       	or	r24, r28
     7fa:	e9 ef       	ldi	r30, 0xF9	; 249
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <HLCD_vidInit+0xb4>
     802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     804:	00 00       	nop
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <HLCD_vidWriteChar>:
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	18 2f       	mov	r17, r24
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     820:	c8 2f       	mov	r28, r24
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	67 e0       	ldi	r22, 0x07	; 7
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     82c:	c8 2b       	or	r28, r24
     82e:	01 2f       	mov	r16, r17
     830:	02 95       	swap	r16
     832:	0f 70       	andi	r16, 0x0F	; 15
     834:	d0 e0       	ldi	r29, 0x00	; 0
     836:	15 c0       	rjmp	.+42     	; 0x862 <__stack+0x3>
     838:	ed 2f       	mov	r30, r29
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	40 2f       	mov	r20, r16
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	0d 2e       	mov	r0, r29
     842:	02 c0       	rjmp	.+4      	; 0x848 <HLCD_vidWriteChar+0x3c>
     844:	55 95       	asr	r21
     846:	47 95       	ror	r20
     848:	0a 94       	dec	r0
     84a:	e2 f7       	brpl	.-8      	; 0x844 <HLCD_vidWriteChar+0x38>
     84c:	41 70       	andi	r20, 0x01	; 1
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	e8 58       	subi	r30, 0x88	; 136
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	61 81       	ldd	r22, Z+1	; 0x01
     858:	80 81       	ld	r24, Z
     85a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     85e:	c8 2b       	or	r28, r24
     860:	df 5f       	subi	r29, 0xFF	; 255
     862:	d4 30       	cpi	r29, 0x04	; 4
     864:	48 f3       	brcs	.-46     	; 0x838 <HLCD_vidWriteChar+0x2c>
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     870:	c8 2b       	or	r28, r24
     872:	89 ef       	ldi	r24, 0xF9	; 249
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     888:	c8 2b       	or	r28, r24
     88a:	92 e4       	ldi	r25, 0x42	; 66
     88c:	9a 95       	dec	r25
     88e:	f1 f7       	brne	.-4      	; 0x88c <__stack+0x2d>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	1f 70       	andi	r17, 0x0F	; 15
     894:	d0 e0       	ldi	r29, 0x00	; 0
     896:	15 c0       	rjmp	.+42     	; 0x8c2 <__stack+0x63>
     898:	ed 2f       	mov	r30, r29
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	41 2f       	mov	r20, r17
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	0d 2e       	mov	r0, r29
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	55 95       	asr	r21
     8a6:	47 95       	ror	r20
     8a8:	0a 94       	dec	r0
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	41 70       	andi	r20, 0x01	; 1
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e8 58       	subi	r30, 0x88	; 136
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	61 81       	ldd	r22, Z+1	; 0x01
     8b8:	80 81       	ld	r24, Z
     8ba:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     8be:	c8 2b       	or	r28, r24
     8c0:	df 5f       	subi	r29, 0xFF	; 255
     8c2:	d4 30       	cpi	r29, 0x04	; 4
     8c4:	48 f3       	brcs	.-46     	; 0x898 <__stack+0x39>
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     8d0:	c8 2b       	or	r28, r24
     8d2:	e9 ef       	ldi	r30, 0xF9	; 249
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <__stack+0x77>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <__stack+0x7d>
     8dc:	00 00       	nop
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     8e8:	8c 2b       	or	r24, r28
     8ea:	e3 ef       	ldi	r30, 0xF3	; 243
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <__stack+0x8f>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <__stack+0x95>
     8f4:	00 00       	nop
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <HLCD_ClrDisplay>:
     900:	cf 93       	push	r28
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     908:	c8 2f       	mov	r28, r24
     90a:	87 ee       	ldi	r24, 0xE7	; 231
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <HLCD_ClrDisplay+0xe>
     912:	00 c0       	rjmp	.+0      	; 0x914 <HLCD_ClrDisplay+0x14>
     914:	00 00       	nop
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     91c:	8c 2b       	or	r24, r28
     91e:	e7 ee       	ldi	r30, 0xE7	; 231
     920:	f3 e0       	ldi	r31, 0x03	; 3
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	f1 f7       	brne	.-4      	; 0x922 <HLCD_ClrDisplay+0x22>
     926:	00 c0       	rjmp	.+0      	; 0x928 <HLCD_ClrDisplay+0x28>
     928:	00 00       	nop
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     92e:	81 11       	cpse	r24, r1
     930:	08 c0       	rjmp	.+16     	; 0x942 <HLCD_gotoXY+0x14>
     932:	60 31       	cpi	r22, 0x10	; 16
     934:	30 f4       	brcc	.+12     	; 0x942 <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     936:	86 2f       	mov	r24, r22
     938:	8f 70       	andi	r24, 0x0F	; 15
     93a:	80 68       	ori	r24, 0x80	; 128
     93c:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     940:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	41 f4       	brne	.+16     	; 0x956 <HLCD_gotoXY+0x28>
     946:	60 31       	cpi	r22, 0x10	; 16
     948:	40 f4       	brcc	.+16     	; 0x95a <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     94a:	86 2f       	mov	r24, r22
     94c:	8f 70       	andi	r24, 0x0F	; 15
     94e:	80 6c       	ori	r24, 0xC0	; 192
     950:	0e 94 2b 03 	call	0x656	; 0x656 <HLCD_vidWritecmd>
     954:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	08 95       	ret
     95a:	85 e0       	ldi	r24, 0x05	; 5
	}
	return errorStatus;
}
     95c:	08 95       	ret

0000095e <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     96a:	fc 01       	movw	r30, r24
     96c:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     96e:	c0 e0       	ldi	r28, 0x00	; 0
     970:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     972:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     974:	08 c0       	rjmp	.+16     	; 0x986 <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     976:	0e 94 06 04 	call	0x80c	; 0x80c <HLCD_vidWriteChar>
     97a:	18 2b       	or	r17, r24
		string = str[++count];
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	f7 01       	movw	r30, r14
     980:	ec 0f       	add	r30, r28
     982:	fd 1f       	adc	r31, r29
     984:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     986:	81 11       	cpse	r24, r1
     988:	f6 cf       	rjmp	.-20     	; 0x976 <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     98a:	81 2f       	mov	r24, r17
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	2a 97       	sbiw	r28, 0x0a	; 10
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9b0:	4a e0       	ldi	r20, 0x0A	; 10
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	0e 94 af 04 	call	0x95e	; 0x95e <HLCD_WriteString>
	return errorStatus;
}
     9c4:	2a 96       	adiw	r28, 0x0a	; 10
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	a9 f1       	breq	.+106    	; 0xa48 <KEYPAD_init+0x72>
     9de:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     9e0:	69 81       	ldd	r22, Y+1	; 0x01
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	88 81       	ld	r24, Y
     9e6:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     9ea:	6b 81       	ldd	r22, Y+3	; 0x03
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	8c 81       	ldd	r24, Y+4	; 0x04
     9fa:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     9fe:	69 81       	ldd	r22, Y+1	; 0x01
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	88 81       	ld	r24, Y
     a04:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     a08:	6b 81       	ldd	r22, Y+3	; 0x03
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     a12:	6d 81       	ldd	r22, Y+5	; 0x05
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	8c 81       	ldd	r24, Y+4	; 0x04
     a18:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     a1c:	6f 81       	ldd	r22, Y+7	; 0x07
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	8e 81       	ldd	r24, Y+6	; 0x06
     a22:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     a26:	69 85       	ldd	r22, Y+9	; 0x09
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	88 85       	ldd	r24, Y+8	; 0x08
     a2c:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     a30:	6b 85       	ldd	r22, Y+11	; 0x0b
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	8a 85       	ldd	r24, Y+10	; 0x0a
     a36:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     a3a:	6d 85       	ldd	r22, Y+13	; 0x0d
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a40:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     a48:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	1f 92       	push	r1
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     a66:	07 e6       	ldi	r16, 0x67	; 103
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	f8 01       	movw	r30, r16
     a6c:	67 81       	ldd	r22, Z+7	; 0x07
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	86 81       	ldd	r24, Z+6	; 0x06
     a72:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     a76:	f8 01       	movw	r30, r16
     a78:	61 85       	ldd	r22, Z+9	; 0x09
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	80 85       	ldd	r24, Z+8	; 0x08
     a7e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     a82:	f8 01       	movw	r30, r16
     a84:	63 85       	ldd	r22, Z+11	; 0x0b
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	82 85       	ldd	r24, Z+10	; 0x0a
     a8a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     a8e:	f8 01       	movw	r30, r16
     a90:	65 85       	ldd	r22, Z+13	; 0x0d
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	84 85       	ldd	r24, Z+12	; 0x0c
     a96:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     a9a:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     a9c:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     a9e:	42 c0       	rjmp	.+132    	; 0xb24 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     aa0:	e7 e6       	ldi	r30, 0x67	; 103
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	67 81       	ldd	r22, Z+7	; 0x07
     aa6:	60 0f       	add	r22, r16
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	86 81       	ldd	r24, Z+6	; 0x06
     aac:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
		for(j=0;j<3;j++)
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	2d c0       	rjmp	.+90     	; 0xb0e <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     ab4:	e7 e6       	ldi	r30, 0x67	; 103
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	61 81       	ldd	r22, Z+1	; 0x01
     aba:	61 0f       	add	r22, r17
     abc:	ae 01       	movw	r20, r28
     abe:	4f 5f       	subi	r20, 0xFF	; 255
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
     ac2:	80 81       	ld	r24, Z
     ac4:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_readPIN>
			if(value==0)
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	81 11       	cpse	r24, r1
     acc:	1f c0       	rjmp	.+62     	; 0xb0c <KEYPAD_read+0xbc>
     ace:	0a c0       	rjmp	.+20     	; 0xae4 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     ad0:	e7 e6       	ldi	r30, 0x67	; 103
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	61 81       	ldd	r22, Z+1	; 0x01
     ad6:	61 0f       	add	r22, r17
     ad8:	ae 01       	movw	r20, r28
     ada:	4f 5f       	subi	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	80 81       	ld	r24, Z
     ae0:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	88 23       	and	r24, r24
     ae8:	99 f3       	breq	.-26     	; 0xad0 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     aea:	80 2f       	mov	r24, r16
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	fc 01       	movw	r30, r24
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	e8 0f       	add	r30, r24
     af6:	f9 1f       	adc	r31, r25
     af8:	e1 51       	subi	r30, 0x11	; 17
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	e1 0f       	add	r30, r17
     afe:	f1 1d       	adc	r31, r1
     b00:	80 81       	ld	r24, Z
     b02:	f7 01       	movw	r30, r14
     b04:	80 83       	st	Z, r24
				flag=1;
     b06:	dd 24       	eor	r13, r13
     b08:	d3 94       	inc	r13
				
				break;
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     b0c:	1f 5f       	subi	r17, 0xFF	; 255
     b0e:	13 30       	cpi	r17, 0x03	; 3
     b10:	88 f2       	brcs	.-94     	; 0xab4 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     b12:	e7 e6       	ldi	r30, 0x67	; 103
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	67 81       	ldd	r22, Z+7	; 0x07
     b18:	60 0f       	add	r22, r16
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	86 81       	ldd	r24, Z+6	; 0x06
     b1e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     b22:	0f 5f       	subi	r16, 0xFF	; 255
     b24:	04 30       	cpi	r16, 0x04	; 4
     b26:	08 f4       	brcc	.+2      	; 0xb2a <KEYPAD_read+0xda>
     b28:	bb cf       	rjmp	.-138    	; 0xaa0 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     b2a:	f1 e0       	ldi	r31, 0x01	; 1
     b2c:	df 16       	cp	r13, r31
     b2e:	19 f0       	breq	.+6      	; 0xb36 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     b30:	8e e4       	ldi	r24, 0x4E	; 78
     b32:	f7 01       	movw	r30, r14
     b34:	80 83       	st	Z, r24
		return ret_val;
	}
	
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0f 90       	pop	r0
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	08 95       	ret

00000b4a <PWM_init>:
     b4a:	08 95       	ret

00000b4c <TIMER_Manager_init>:
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	91 f0       	breq	.+36     	; 0xb7a <TIMER_Manager_init+0x2e>
     b56:	fc 01       	movw	r30, r24
     b58:	20 81       	ld	r18, Z
     b5a:	23 30       	cpi	r18, 0x03	; 3
     b5c:	80 f4       	brcc	.+32     	; 0xb7e <TIMER_Manager_init+0x32>
     b5e:	21 81       	ldd	r18, Z+1	; 0x01
     b60:	2a 30       	cpi	r18, 0x0A	; 10
     b62:	78 f4       	brcc	.+30     	; 0xb82 <TIMER_Manager_init+0x36>
     b64:	ec 01       	movw	r28, r24
     b66:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TIMER_init>
     b6a:	18 2f       	mov	r17, r24
     b6c:	68 81       	ld	r22, Y
     b6e:	8d 81       	ldd	r24, Y+5	; 0x05
     b70:	9e 81       	ldd	r25, Y+6	; 0x06
     b72:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <TIMER_setCallBack>
     b76:	81 2b       	or	r24, r17
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <TIMER_Manager_init+0x38>
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <TIMER_Manager_init+0x38>
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <TIMER_Manager_init+0x38>
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	08 95       	ret

00000b8c <TIMER_Manager_start>:
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	51 f0       	breq	.+20     	; 0xba4 <TIMER_Manager_start+0x18>
     b90:	fc 01       	movw	r30, r24
     b92:	20 81       	ld	r18, Z
     b94:	23 30       	cpi	r18, 0x03	; 3
     b96:	40 f4       	brcc	.+16     	; 0xba8 <TIMER_Manager_start+0x1c>
     b98:	21 81       	ldd	r18, Z+1	; 0x01
     b9a:	2a 30       	cpi	r18, 0x0A	; 10
     b9c:	38 f4       	brcc	.+14     	; 0xbac <TIMER_Manager_start+0x20>
     b9e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <TIMER_start>
     ba2:	08 95       	ret
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	08 95       	ret
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	08 95       	ret
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	08 95       	ret

00000bb0 <TIMER_Manager_stop>:
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	18 f4       	brcc	.+6      	; 0xbba <TIMER_Manager_stop+0xa>
     bb4:	0e 94 25 0b 	call	0x164a	; 0x164a <TIMER_stop>
     bb8:	08 95       	ret
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	08 95       	ret

00000bbe <TIMER_Manager_reset>:
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	51 f0       	breq	.+20     	; 0xbd6 <TIMER_Manager_reset+0x18>
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 81       	ld	r18, Z
     bc6:	23 30       	cpi	r18, 0x03	; 3
     bc8:	40 f4       	brcc	.+16     	; 0xbda <TIMER_Manager_reset+0x1c>
     bca:	21 81       	ldd	r18, Z+1	; 0x01
     bcc:	2a 30       	cpi	r18, 0x0A	; 10
     bce:	38 f4       	brcc	.+14     	; 0xbde <TIMER_Manager_reset+0x20>
     bd0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <TIMER_reset>
     bd4:	08 95       	ret
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	08 95       	ret
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	08 95       	ret
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	08 95       	ret

00000be2 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bec:	8a e1       	ldi	r24, 0x1A	; 26
     bee:	8a 95       	dec	r24
     bf0:	f1 f7       	brne	.-4      	; 0xbee <HULTRASONIC_vidTrigger+0xc>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	63 e0       	ldi	r22, 0x03	; 3
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>
     bfe:	08 95       	ret

00000c00 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     c00:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_v_u16_ovfCounts>
     c04:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <g_v_u16_ovfCounts+0x1>
     c08:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <g_v_u16_ovfCounts+0x2>
     c0c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <g_v_u16_ovfCounts+0x3>
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	a1 1d       	adc	r26, r1
     c14:	b1 1d       	adc	r27, r1
     c16:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_v_u16_ovfCounts>
     c1a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <g_v_u16_ovfCounts+0x1>
     c1e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <g_v_u16_ovfCounts+0x2>
     c22:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <g_v_u16_ovfCounts+0x3>
     c26:	08 95       	ret

00000c28 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
     c28:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_v_u8_flag>
     c2c:	81 11       	cpse	r24, r1
     c2e:	14 c0       	rjmp	.+40     	; 0xc58 <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
     c30:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
     c34:	62 e0       	ldi	r22, 0x02	; 2
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	0e 94 de 07 	call	0xfbc	; 0xfbc <vidExtInt_init>
		g_v_u8_flag = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
     c42:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_v_u16_ovfCounts>
     c46:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <g_v_u16_ovfCounts+0x1>
     c4a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <g_v_u16_ovfCounts+0x2>
     c4e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
     c52:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <vidTimer2_start>
     c56:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
     c58:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_v_u8_flag>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	09 f0       	breq	.+2      	; 0xc62 <HULTRASONIC_vidSigCalc+0x3a>
     c60:	50 c0       	rjmp	.+160    	; 0xd02 <HULTRASONIC_vidSigCalc+0xda>
	{
		vidTimer2_stop();
     c62:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
     c66:	0e 94 01 0c 	call	0x1802	; 0x1802 <MTIMER_u8GetTCNT>
     c6a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
     c6e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_v_u16_ovfCounts>
     c72:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <g_v_u16_ovfCounts+0x1>
     c76:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <g_v_u16_ovfCounts+0x2>
     c7a:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <g_v_u16_ovfCounts+0x3>
     c7e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <g_v_u16_ovf>
     c82:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <g_v_u16_ovf+0x1>
     c86:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <g_v_u16_ovf+0x2>
     c8a:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
     c8e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <g_v_u8_cap>
     c92:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_v_u16_ovf>
     c96:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_v_u16_ovf+0x1>
     c9a:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_v_u16_ovf+0x2>
     c9e:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_v_u16_ovf+0x3>
     ca2:	ba 2f       	mov	r27, r26
     ca4:	a9 2f       	mov	r26, r25
     ca6:	98 2f       	mov	r25, r24
     ca8:	88 27       	eor	r24, r24
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	62 0f       	add	r22, r18
     cb0:	71 1d       	adc	r23, r1
     cb2:	81 1d       	adc	r24, r1
     cb4:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = (float64_t)global_u32Ticks / 932.95;
     cb6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__floatunsisf>
     cba:	2d ec       	ldi	r18, 0xCD	; 205
     cbc:	3c e3       	ldi	r19, 0x3C	; 60
     cbe:	49 e6       	ldi	r20, 0x69	; 105
     cc0:	54 e4       	ldi	r21, 0x44	; 68
     cc2:	0e 94 40 0c 	call	0x1880	; 0x1880 <__divsf3>
     cc6:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <global_f64distance>
     cca:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <global_f64distance+0x1>
     cce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <global_f64distance+0x2>
     cd2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
     cd6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <g_v_u16_ovf>
     cda:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <g_v_u16_ovf+0x1>
     cde:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <g_v_u16_ovf+0x2>
     ce2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <g_v_u16_ovf+0x3>
     ce6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_v_u16_ovfCounts>
     cea:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <g_v_u16_ovfCounts+0x1>
     cee:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <g_v_u16_ovfCounts+0x2>
     cf2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <g_v_u16_ovfCounts+0x3>
     cf6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
     cfa:	63 e0       	ldi	r22, 0x03	; 3
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 de 07 	call	0xfbc	; 0xfbc <vidExtInt_init>
     d02:	08 95       	ret

00000d04 <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	62 e0       	ldi	r22, 0x02	; 2
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
     d22:	63 e0       	ldi	r22, 0x03	; 3
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	0e 94 de 07 	call	0xfbc	; 0xfbc <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 97 0b 	call	0x172e	; 0x172e <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 c6 0b 	call	0x178c	; 0x178c <u8Timer2_setPrescallar>
     d36:	08 95       	ret

00000d38 <HULTRASONIC_vidInterruptEnable>:
}

void HULTRASONIC_vidInterruptEnable(void)
{
	(void) vidTimer2_OvfIrqEnable();
     d38:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vidTimer2_OvfIrqEnable>
	MEXTINT2_vidEnableInterrupt();
     d3c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <MEXTINT2_vidEnableInterrupt>
	MTIMER_vidEnableGlobalInterrupt();
     d40:	0e 94 03 0c 	call	0x1806	; 0x1806 <MTIMER_vidEnableGlobalInterrupt>
     d44:	08 95       	ret

00000d46 <HULTRASONIC_vidInterruptDisable>:
}

void HULTRASONIC_vidInterruptDisable(void)
{
	(void) vidTimer2_OvfIrqDisable();
     d46:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <vidTimer2_OvfIrqDisable>
	MEXTINT2_vidDisableInterrupt();
     d4a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <MEXTINT2_vidDisableInterrupt>
     d4e:	08 95       	ret

00000d50 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
     d50:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
     d54:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <global_f64distance>
     d58:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <global_f64distance+0x1>
     d5c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <global_f64distance+0x2>
     d60:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <global_f64distance+0x3>
}
     d64:	08 95       	ret

00000d66 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
     d66:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <vidTimer2_setcbf_OVF>
     d6a:	08 95       	ret

00000d6c <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
     d6c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <MEXTINT_vidCallBackFunc>
     d70:	08 95       	ret

00000d72 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
     d72:	0e 94 76 00 	call	0xec	; 0xec <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
     d76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <APP_vidStart>
     d7a:	fd cf       	rjmp	.-6      	; 0xd76 <main+0x4>

00000d7c <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     d7c:	68 30       	cpi	r22, 0x08	; 8
     d7e:	a0 f5       	brcc	.+104    	; 0xde8 <DIO_init+0x6c>
	{
		if (port == porta)
     d80:	81 11       	cpse	r24, r1
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     d84:	8a b3       	in	r24, 0x1a	; 26
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_init+0x12>
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	6a 95       	dec	r22
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_init+0xe>
     d92:	48 2b       	or	r20, r24
     d94:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 95       	ret
		}
		else if (port == portb)
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	59 f4       	brne	.+22     	; 0xdb4 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     d9e:	87 b3       	in	r24, 0x17	; 23
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_init+0x2c>
     da4:	44 0f       	add	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_init+0x28>
     dac:	48 2b       	or	r20, r24
     dae:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	08 95       	ret
		}
		else if (port == portc)
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	59 f4       	brne	.+22     	; 0xdce <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     db8:	84 b3       	in	r24, 0x14	; 20
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_init+0x46>
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	6a 95       	dec	r22
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_init+0x42>
     dc6:	48 2b       	or	r20, r24
     dc8:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	08 95       	ret
		}
		else if (port == portd)
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	69 f4       	brne	.+26     	; 0xdec <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     dd2:	81 b3       	in	r24, 0x11	; 17
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_init+0x60>
     dd8:	44 0f       	add	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	6a 95       	dec	r22
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_init+0x5c>
     de0:	48 2b       	or	r20, r24
     de2:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     dec:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     dee:	08 95       	ret

00000df0 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     df0:	68 30       	cpi	r22, 0x08	; 8
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <DIO_writePIN+0x6>
     df4:	74 c0       	rjmp	.+232    	; 0xede <DIO_writePIN+0xee>
	{
		if (port == porta)
     df6:	81 11       	cpse	r24, r1
     df8:	1b c0       	rjmp	.+54     	; 0xe30 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     dfa:	41 30       	cpi	r20, 0x01	; 1
     dfc:	61 f4       	brne	.+24     	; 0xe16 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     dfe:	2b b3       	in	r18, 0x1b	; 27
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_writePIN+0x1a>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	6a 95       	dec	r22
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_writePIN+0x16>
     e0e:	82 2b       	or	r24, r18
     e10:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     e16:	2b b3       	in	r18, 0x1b	; 27
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_writePIN+0x32>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	6a 95       	dec	r22
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_writePIN+0x2e>
     e26:	80 95       	com	r24
     e28:	82 23       	and	r24, r18
     e2a:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret
		}
		else if (port == portb)
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	d9 f4       	brne	.+54     	; 0xe6a <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     e34:	41 30       	cpi	r20, 0x01	; 1
     e36:	61 f4       	brne	.+24     	; 0xe50 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     e38:	28 b3       	in	r18, 0x18	; 24
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_writePIN+0x54>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	6a 95       	dec	r22
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_writePIN+0x50>
     e48:	82 2b       	or	r24, r18
     e4a:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     e50:	28 b3       	in	r18, 0x18	; 24
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_writePIN+0x6c>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	6a 95       	dec	r22
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_writePIN+0x68>
     e60:	80 95       	com	r24
     e62:	82 23       	and	r24, r18
     e64:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
		}
		else if (port == portc)
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	d9 f4       	brne	.+54     	; 0xea4 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     e6e:	41 30       	cpi	r20, 0x01	; 1
     e70:	61 f4       	brne	.+24     	; 0xe8a <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     e72:	25 b3       	in	r18, 0x15	; 21
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <DIO_writePIN+0x8e>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	6a 95       	dec	r22
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <DIO_writePIN+0x8a>
     e82:	82 2b       	or	r24, r18
     e84:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     e8a:	25 b3       	in	r18, 0x15	; 21
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_writePIN+0xa6>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	6a 95       	dec	r22
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_writePIN+0xa2>
     e9a:	80 95       	com	r24
     e9c:	82 23       	and	r24, r18
     e9e:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret
		}
		else if (port == portd)
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	e9 f4       	brne	.+58     	; 0xee2 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     ea8:	41 30       	cpi	r20, 0x01	; 1
     eaa:	61 f4       	brne	.+24     	; 0xec4 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     eac:	22 b3       	in	r18, 0x12	; 18
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_writePIN+0xc8>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	6a 95       	dec	r22
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_writePIN+0xc4>
     ebc:	82 2b       	or	r24, r18
     ebe:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     ec4:	22 b3       	in	r18, 0x12	; 18
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_writePIN+0xe0>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	6a 95       	dec	r22
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_writePIN+0xdc>
     ed4:	80 95       	com	r24
     ed6:	82 23       	and	r24, r18
     ed8:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     ee2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     ee4:	08 95       	ret

00000ee6 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     ee6:	68 30       	cpi	r22, 0x08	; 8
     ee8:	08 f0       	brcs	.+2      	; 0xeec <DIO_readPIN+0x6>
     eea:	64 c0       	rjmp	.+200    	; 0xfb4 <DIO_readPIN+0xce>
	{
		if (port == porta)
     eec:	81 11       	cpse	r24, r1
     eee:	17 c0       	rjmp	.+46     	; 0xf1e <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     ef0:	79 b3       	in	r23, 0x19	; 25
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9c 01       	movw	r18, r24
     ef8:	06 2e       	mov	r0, r22
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_readPIN+0x1a>
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_readPIN+0x16>
     f04:	87 2f       	mov	r24, r23
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	82 23       	and	r24, r18
     f0a:	93 23       	and	r25, r19
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_readPIN+0x2c>
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	6a 95       	dec	r22
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_readPIN+0x28>
     f16:	fa 01       	movw	r30, r20
     f18:	80 83       	st	Z, r24
			return DIO_E_OK;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 95       	ret
		}
		else if (port == portb)
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	b9 f4       	brne	.+46     	; 0xf50 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     f22:	76 b3       	in	r23, 0x16	; 22
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9c 01       	movw	r18, r24
     f2a:	06 2e       	mov	r0, r22
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_readPIN+0x4c>
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_readPIN+0x48>
     f36:	87 2f       	mov	r24, r23
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	82 23       	and	r24, r18
     f3c:	93 23       	and	r25, r19
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_readPIN+0x5e>
     f40:	96 95       	lsr	r25
     f42:	87 95       	ror	r24
     f44:	6a 95       	dec	r22
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_readPIN+0x5a>
     f48:	fa 01       	movw	r30, r20
     f4a:	80 83       	st	Z, r24
			return DIO_E_OK;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	08 95       	ret
		}
		else if (port == portc)
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	b9 f4       	brne	.+46     	; 0xf82 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     f54:	73 b3       	in	r23, 0x13	; 19
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c 01       	movw	r18, r24
     f5c:	06 2e       	mov	r0, r22
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_readPIN+0x7e>
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_readPIN+0x7a>
     f68:	87 2f       	mov	r24, r23
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	82 23       	and	r24, r18
     f6e:	93 23       	and	r25, r19
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_readPIN+0x90>
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	6a 95       	dec	r22
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_readPIN+0x8c>
     f7a:	fa 01       	movw	r30, r20
     f7c:	80 83       	st	Z, r24
			return DIO_E_OK;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
		}
		else if (port == portd)
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	c9 f4       	brne	.+50     	; 0xfb8 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     f86:	70 b3       	in	r23, 0x10	; 16
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 01       	movw	r18, r24
     f8e:	06 2e       	mov	r0, r22
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_readPIN+0xb0>
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_readPIN+0xac>
     f9a:	87 2f       	mov	r24, r23
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	82 23       	and	r24, r18
     fa0:	93 23       	and	r25, r19
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_readPIN+0xc2>
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	6a 95       	dec	r22
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_readPIN+0xbe>
     fac:	fa 01       	movw	r30, r20
     fae:	80 83       	st	Z, r24
			return DIO_E_OK;
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     fb8:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     fba:	08 95       	ret

00000fbc <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <vidExtInt_init+0x6>
     fc0:	70 c0       	rjmp	.+224    	; 0x10a2 <vidExtInt_init+0xe6>
     fc2:	64 30       	cpi	r22, 0x04	; 4
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <vidExtInt_init+0xc>
     fc6:	6f c0       	rjmp	.+222    	; 0x10a6 <vidExtInt_init+0xea>
     fc8:	81 11       	cpse	r24, r1
     fca:	28 c0       	rjmp	.+80     	; 0x101c <vidExtInt_init+0x60>
     fcc:	61 30       	cpi	r22, 0x01	; 1
     fce:	71 f0       	breq	.+28     	; 0xfec <vidExtInt_init+0x30>
     fd0:	28 f0       	brcs	.+10     	; 0xfdc <vidExtInt_init+0x20>
     fd2:	62 30       	cpi	r22, 0x02	; 2
     fd4:	99 f0       	breq	.+38     	; 0xffc <vidExtInt_init+0x40>
     fd6:	63 30       	cpi	r22, 0x03	; 3
     fd8:	c9 f0       	breq	.+50     	; 0x100c <vidExtInt_init+0x50>
     fda:	67 c0       	rjmp	.+206    	; 0x10aa <vidExtInt_init+0xee>
     fdc:	85 b7       	in	r24, 0x35	; 53
     fde:	8e 7f       	andi	r24, 0xFE	; 254
     fe0:	85 bf       	out	0x35, r24	; 53
     fe2:	85 b7       	in	r24, 0x35	; 53
     fe4:	8d 7f       	andi	r24, 0xFD	; 253
     fe6:	85 bf       	out	0x35, r24	; 53
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	08 95       	ret
     fec:	85 b7       	in	r24, 0x35	; 53
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	85 bf       	out	0x35, r24	; 53
     ff2:	85 b7       	in	r24, 0x35	; 53
     ff4:	8d 7f       	andi	r24, 0xFD	; 253
     ff6:	85 bf       	out	0x35, r24	; 53
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	08 95       	ret
     ffc:	85 b7       	in	r24, 0x35	; 53
     ffe:	8e 7f       	andi	r24, 0xFE	; 254
    1000:	85 bf       	out	0x35, r24	; 53
    1002:	85 b7       	in	r24, 0x35	; 53
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	85 bf       	out	0x35, r24	; 53
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 95       	ret
    100c:	85 b7       	in	r24, 0x35	; 53
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	85 bf       	out	0x35, r24	; 53
    1012:	85 b7       	in	r24, 0x35	; 53
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	85 bf       	out	0x35, r24	; 53
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	08 95       	ret
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	81 f5       	brne	.+96     	; 0x1080 <vidExtInt_init+0xc4>
    1020:	61 30       	cpi	r22, 0x01	; 1
    1022:	71 f0       	breq	.+28     	; 0x1040 <vidExtInt_init+0x84>
    1024:	28 f0       	brcs	.+10     	; 0x1030 <vidExtInt_init+0x74>
    1026:	62 30       	cpi	r22, 0x02	; 2
    1028:	99 f0       	breq	.+38     	; 0x1050 <vidExtInt_init+0x94>
    102a:	63 30       	cpi	r22, 0x03	; 3
    102c:	c9 f0       	breq	.+50     	; 0x1060 <vidExtInt_init+0xa4>
    102e:	20 c0       	rjmp	.+64     	; 0x1070 <vidExtInt_init+0xb4>
    1030:	85 b7       	in	r24, 0x35	; 53
    1032:	8b 7f       	andi	r24, 0xFB	; 251
    1034:	85 bf       	out	0x35, r24	; 53
    1036:	85 b7       	in	r24, 0x35	; 53
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	85 bf       	out	0x35, r24	; 53
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	19 c0       	rjmp	.+50     	; 0x1072 <vidExtInt_init+0xb6>
    1040:	85 b7       	in	r24, 0x35	; 53
    1042:	84 60       	ori	r24, 0x04	; 4
    1044:	85 bf       	out	0x35, r24	; 53
    1046:	85 b7       	in	r24, 0x35	; 53
    1048:	87 7f       	andi	r24, 0xF7	; 247
    104a:	85 bf       	out	0x35, r24	; 53
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	11 c0       	rjmp	.+34     	; 0x1072 <vidExtInt_init+0xb6>
    1050:	85 b7       	in	r24, 0x35	; 53
    1052:	8b 7f       	andi	r24, 0xFB	; 251
    1054:	85 bf       	out	0x35, r24	; 53
    1056:	85 b7       	in	r24, 0x35	; 53
    1058:	88 60       	ori	r24, 0x08	; 8
    105a:	85 bf       	out	0x35, r24	; 53
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <vidExtInt_init+0xb6>
    1060:	85 b7       	in	r24, 0x35	; 53
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	85 bf       	out	0x35, r24	; 53
    1066:	85 b7       	in	r24, 0x35	; 53
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	85 bf       	out	0x35, r24	; 53
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <vidExtInt_init+0xb6>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	9b b7       	in	r25, 0x3b	; 59
    1074:	90 68       	ori	r25, 0x80	; 128
    1076:	9b bf       	out	0x3b, r25	; 59
    1078:	9a b7       	in	r25, 0x3a	; 58
    107a:	90 68       	ori	r25, 0x80	; 128
    107c:	9a bf       	out	0x3a, r25	; 58
    107e:	08 95       	ret
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	a9 f4       	brne	.+42     	; 0x10ae <vidExtInt_init+0xf2>
    1084:	62 30       	cpi	r22, 0x02	; 2
    1086:	19 f0       	breq	.+6      	; 0x108e <vidExtInt_init+0xd2>
    1088:	63 30       	cpi	r22, 0x03	; 3
    108a:	31 f0       	breq	.+12     	; 0x1098 <vidExtInt_init+0xdc>
    108c:	12 c0       	rjmp	.+36     	; 0x10b2 <vidExtInt_init+0xf6>
    108e:	84 b7       	in	r24, 0x34	; 52
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	84 bf       	out	0x34, r24	; 52
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	08 95       	ret
    1098:	84 b7       	in	r24, 0x34	; 52
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	84 bf       	out	0x34, r24	; 52
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	08 95       	ret
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	08 95       	ret
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	08 95       	ret
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <MEXTINT_vidCallBackFuncInt0>:
    10b6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <callBackFuncInt0+0x1>
    10ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <callBackFuncInt0>
    10be:	08 95       	ret

000010c0 <MEXTINT_vidCallBackFunc>:
    10c0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <callBack+0x1>
    10c4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <callBack>
    10c8:	08 95       	ret

000010ca <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
    10ca:	8b b7       	in	r24, 0x3b	; 59
    10cc:	8f 7b       	andi	r24, 0xBF	; 191
    10ce:	8b bf       	out	0x3b, r24	; 59
    10d0:	08 95       	ret

000010d2 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
    10d2:	8a b7       	in	r24, 0x3a	; 58
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
    10d8:	8b b7       	in	r24, 0x3b	; 59
    10da:	80 64       	ori	r24, 0x40	; 64
    10dc:	8b bf       	out	0x3b, r24	; 59
    10de:	08 95       	ret

000010e0 <MEXTINT2_vidDisableInterrupt>:
}

void MEXTINT2_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT2);
    10e0:	8b b7       	in	r24, 0x3b	; 59
    10e2:	8f 7d       	andi	r24, 0xDF	; 223
    10e4:	8b bf       	out	0x3b, r24	; 59
    10e6:	08 95       	ret

000010e8 <MEXTINT2_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT2_vidEnableInterrupt(void)
{
		SET_BIT(GICR_REG, INT2);
    10e8:	8b b7       	in	r24, 0x3b	; 59
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR_REG, INTF2);
    10ee:	8a b7       	in	r24, 0x3a	; 58
    10f0:	80 62       	ori	r24, 0x20	; 32
    10f2:	8a bf       	out	0x3a, r24	; 58
    10f4:	08 95       	ret

000010f6 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
	callBackFuncInt0();
    1118:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <callBackFuncInt0>
    111c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <callBackFuncInt0+0x1>
    1120:	09 95       	icall
}
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <__vector_2>:

ISR(INT1_vect)
{
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
	callBackFunc();
    1166:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <callBackFunc>
    116a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <callBackFunc+0x1>
    116e:	09 95       	icall
}
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <__vector_3>:

ISR(INT2_vect)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
	callBack();
    11b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <callBack>
    11b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <callBack+0x1>
    11bc:	09 95       	icall
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
    1202:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <sg_Timer0_callBackPtr>
    1206:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <sg_Timer0_callBackPtr+0x1>
    120a:	89 2b       	or	r24, r25
    120c:	41 f0       	breq	.+16     	; 0x121e <__vector_11+0x3e>
    120e:	88 b7       	in	r24, 0x38	; 56
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	88 bf       	out	0x38, r24	; 56
    1214:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <sg_Timer0_callBackPtr>
    1218:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <sg_Timer0_callBackPtr+0x1>
    121c:	09 95       	icall
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_9>:
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
    1262:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sg_Timer1_callBackPtr>
    1266:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <sg_Timer1_callBackPtr+0x1>
    126a:	89 2b       	or	r24, r25
    126c:	41 f0       	breq	.+16     	; 0x127e <__vector_9+0x3e>
    126e:	88 b7       	in	r24, 0x38	; 56
    1270:	8b 7f       	andi	r24, 0xFB	; 251
    1272:	88 bf       	out	0x38, r24	; 56
    1274:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <sg_Timer1_callBackPtr>
    1278:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <sg_Timer1_callBackPtr+0x1>
    127c:	09 95       	icall
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <TIMER_init>:
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <TIMER_init+0x6>
    12a4:	78 c0       	rjmp	.+240    	; 0x1396 <TIMER_init+0xf6>
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 81       	ld	r18, Z
    12aa:	23 30       	cpi	r18, 0x03	; 3
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <TIMER_init+0x10>
    12ae:	75 c0       	rjmp	.+234    	; 0x139a <TIMER_init+0xfa>
    12b0:	31 81       	ldd	r19, Z+1	; 0x01
    12b2:	3a 30       	cpi	r19, 0x0A	; 10
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <TIMER_init+0x18>
    12b6:	73 c0       	rjmp	.+230    	; 0x139e <TIMER_init+0xfe>
    12b8:	21 30       	cpi	r18, 0x01	; 1
    12ba:	19 f1       	breq	.+70     	; 0x1302 <TIMER_init+0x62>
    12bc:	20 f0       	brcs	.+8      	; 0x12c6 <TIMER_init+0x26>
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <TIMER_init+0x24>
    12c2:	50 c0       	rjmp	.+160    	; 0x1364 <TIMER_init+0xc4>
    12c4:	6e c0       	rjmp	.+220    	; 0x13a2 <TIMER_init+0x102>
    12c6:	12 be       	out	0x32, r1	; 50
    12c8:	13 be       	out	0x33, r1	; 51
    12ca:	1c be       	out	0x3c, r1	; 60
    12cc:	fc 01       	movw	r30, r24
    12ce:	22 81       	ldd	r18, Z+2	; 0x02
    12d0:	22 bf       	out	0x32, r18	; 50
    12d2:	23 b7       	in	r18, 0x33	; 51
    12d4:	20 68       	ori	r18, 0x80	; 128
    12d6:	23 bf       	out	0x33, r18	; 51
    12d8:	23 b7       	in	r18, 0x33	; 51
    12da:	2f 7b       	andi	r18, 0xBF	; 191
    12dc:	23 bf       	out	0x33, r18	; 51
    12de:	23 b7       	in	r18, 0x33	; 51
    12e0:	27 7f       	andi	r18, 0xF7	; 247
    12e2:	23 bf       	out	0x33, r18	; 51
    12e4:	23 b7       	in	r18, 0x33	; 51
    12e6:	2f 7e       	andi	r18, 0xEF	; 239
    12e8:	23 bf       	out	0x33, r18	; 51
    12ea:	23 b7       	in	r18, 0x33	; 51
    12ec:	2f 7d       	andi	r18, 0xDF	; 223
    12ee:	23 bf       	out	0x33, r18	; 51
    12f0:	84 81       	ldd	r24, Z+4	; 0x04
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <TIMER_init+0x58>
    12f6:	57 c0       	rjmp	.+174    	; 0x13a6 <TIMER_init+0x106>
    12f8:	89 b7       	in	r24, 0x39	; 57
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	89 bf       	out	0x39, r24	; 57
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
    1302:	1c bc       	out	0x2c, r1	; 44
    1304:	1d bc       	out	0x2d, r1	; 45
    1306:	1f bc       	out	0x2f, r1	; 47
    1308:	1e bc       	out	0x2e, r1	; 46
    130a:	1b bc       	out	0x2b, r1	; 43
    130c:	1a bc       	out	0x2a, r1	; 42
    130e:	fc 01       	movw	r30, r24
    1310:	22 81       	ldd	r18, Z+2	; 0x02
    1312:	33 81       	ldd	r19, Z+3	; 0x03
    1314:	3d bd       	out	0x2d, r19	; 45
    1316:	2c bd       	out	0x2c, r18	; 44
    1318:	2f b5       	in	r18, 0x2f	; 47
    131a:	28 60       	ori	r18, 0x08	; 8
    131c:	2f bd       	out	0x2f, r18	; 47
    131e:	2f b5       	in	r18, 0x2f	; 47
    1320:	24 60       	ori	r18, 0x04	; 4
    1322:	2f bd       	out	0x2f, r18	; 47
    1324:	2f b5       	in	r18, 0x2f	; 47
    1326:	2e 7f       	andi	r18, 0xFE	; 254
    1328:	2f bd       	out	0x2f, r18	; 47
    132a:	2f b5       	in	r18, 0x2f	; 47
    132c:	2d 7f       	andi	r18, 0xFD	; 253
    132e:	2f bd       	out	0x2f, r18	; 47
    1330:	2e b5       	in	r18, 0x2e	; 46
    1332:	2f 7e       	andi	r18, 0xEF	; 239
    1334:	2e bd       	out	0x2e, r18	; 46
    1336:	2e b5       	in	r18, 0x2e	; 46
    1338:	27 7f       	andi	r18, 0xF7	; 247
    133a:	2e bd       	out	0x2e, r18	; 46
    133c:	2f b5       	in	r18, 0x2f	; 47
    133e:	2f 7b       	andi	r18, 0xBF	; 191
    1340:	2f bd       	out	0x2f, r18	; 47
    1342:	2f b5       	in	r18, 0x2f	; 47
    1344:	2f 77       	andi	r18, 0x7F	; 127
    1346:	2f bd       	out	0x2f, r18	; 47
    1348:	2f b5       	in	r18, 0x2f	; 47
    134a:	2f 7e       	andi	r18, 0xEF	; 239
    134c:	2f bd       	out	0x2f, r18	; 47
    134e:	2f b5       	in	r18, 0x2f	; 47
    1350:	2f 7d       	andi	r18, 0xDF	; 223
    1352:	2f bd       	out	0x2f, r18	; 47
    1354:	84 81       	ldd	r24, Z+4	; 0x04
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	41 f5       	brne	.+80     	; 0x13aa <TIMER_init+0x10a>
    135a:	89 b7       	in	r24, 0x39	; 57
    135c:	84 60       	ori	r24, 0x04	; 4
    135e:	89 bf       	out	0x39, r24	; 57
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret
    1364:	14 bc       	out	0x24, r1	; 36
    1366:	15 bc       	out	0x25, r1	; 37
    1368:	13 bc       	out	0x23, r1	; 35
    136a:	14 bc       	out	0x24, r1	; 36
    136c:	25 b5       	in	r18, 0x25	; 37
    136e:	2f 7b       	andi	r18, 0xBF	; 191
    1370:	25 bd       	out	0x25, r18	; 37
    1372:	25 b5       	in	r18, 0x25	; 37
    1374:	27 7f       	andi	r18, 0xF7	; 247
    1376:	25 bd       	out	0x25, r18	; 37
    1378:	25 b5       	in	r18, 0x25	; 37
    137a:	2f 7e       	andi	r18, 0xEF	; 239
    137c:	25 bd       	out	0x25, r18	; 37
    137e:	25 b5       	in	r18, 0x25	; 37
    1380:	2f 7d       	andi	r18, 0xDF	; 223
    1382:	25 bd       	out	0x25, r18	; 37
    1384:	fc 01       	movw	r30, r24
    1386:	84 81       	ldd	r24, Z+4	; 0x04
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	89 f4       	brne	.+34     	; 0x13ae <TIMER_init+0x10e>
    138c:	89 b7       	in	r24, 0x39	; 57
    138e:	80 64       	ori	r24, 0x40	; 64
    1390:	89 bf       	out	0x39, r24	; 57
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	08 95       	ret
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	08 95       	ret
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	08 95       	ret
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	08 95       	ret
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	08 95       	ret
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <TIMER_start>:
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <TIMER_start+0x6>
    13b6:	3b c1       	rjmp	.+630    	; 0x162e <TIMER_start+0x27c>
    13b8:	dc 01       	movw	r26, r24
    13ba:	2c 91       	ld	r18, X
    13bc:	23 30       	cpi	r18, 0x03	; 3
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <TIMER_start+0x10>
    13c0:	38 c1       	rjmp	.+624    	; 0x1632 <TIMER_start+0x280>
    13c2:	11 96       	adiw	r26, 0x01	; 1
    13c4:	ec 91       	ld	r30, X
    13c6:	ea 30       	cpi	r30, 0x0A	; 10
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <TIMER_start+0x1a>
    13ca:	35 c1       	rjmp	.+618    	; 0x1636 <TIMER_start+0x284>
    13cc:	21 30       	cpi	r18, 0x01	; 1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <TIMER_start+0x20>
    13d0:	68 c0       	rjmp	.+208    	; 0x14a2 <TIMER_start+0xf0>
    13d2:	20 f0       	brcs	.+8      	; 0x13dc <TIMER_start+0x2a>
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	09 f4       	brne	.+2      	; 0x13da <TIMER_start+0x28>
    13d8:	c7 c0       	rjmp	.+398    	; 0x1568 <TIMER_start+0x1b6>
    13da:	2f c1       	rjmp	.+606    	; 0x163a <TIMER_start+0x288>
    13dc:	8e 2f       	mov	r24, r30
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	8a 30       	cpi	r24, 0x0A	; 10
    13e2:	91 05       	cpc	r25, r1
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <TIMER_start+0x36>
    13e6:	2b c1       	rjmp	.+598    	; 0x163e <TIMER_start+0x28c>
    13e8:	fc 01       	movw	r30, r24
    13ea:	e6 5d       	subi	r30, 0xD6	; 214
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__tablejump2__>
    13f2:	83 b7       	in	r24, 0x33	; 51
    13f4:	8e 7f       	andi	r24, 0xFE	; 254
    13f6:	83 bf       	out	0x33, r24	; 51
    13f8:	83 b7       	in	r24, 0x33	; 51
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	83 bf       	out	0x33, r24	; 51
    13fe:	83 b7       	in	r24, 0x33	; 51
    1400:	8b 7f       	andi	r24, 0xFB	; 251
    1402:	83 bf       	out	0x33, r24	; 51
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	08 95       	ret
    1408:	83 b7       	in	r24, 0x33	; 51
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	83 bf       	out	0x33, r24	; 51
    140e:	83 b7       	in	r24, 0x33	; 51
    1410:	8d 7f       	andi	r24, 0xFD	; 253
    1412:	83 bf       	out	0x33, r24	; 51
    1414:	83 b7       	in	r24, 0x33	; 51
    1416:	8b 7f       	andi	r24, 0xFB	; 251
    1418:	83 bf       	out	0x33, r24	; 51
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	08 95       	ret
    141e:	83 b7       	in	r24, 0x33	; 51
    1420:	8e 7f       	andi	r24, 0xFE	; 254
    1422:	83 bf       	out	0x33, r24	; 51
    1424:	83 b7       	in	r24, 0x33	; 51
    1426:	82 60       	ori	r24, 0x02	; 2
    1428:	83 bf       	out	0x33, r24	; 51
    142a:	83 b7       	in	r24, 0x33	; 51
    142c:	8b 7f       	andi	r24, 0xFB	; 251
    142e:	83 bf       	out	0x33, r24	; 51
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret
    1434:	83 b7       	in	r24, 0x33	; 51
    1436:	81 60       	ori	r24, 0x01	; 1
    1438:	83 bf       	out	0x33, r24	; 51
    143a:	83 b7       	in	r24, 0x33	; 51
    143c:	82 60       	ori	r24, 0x02	; 2
    143e:	83 bf       	out	0x33, r24	; 51
    1440:	83 b7       	in	r24, 0x33	; 51
    1442:	8b 7f       	andi	r24, 0xFB	; 251
    1444:	83 bf       	out	0x33, r24	; 51
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	08 95       	ret
    144a:	83 b7       	in	r24, 0x33	; 51
    144c:	8e 7f       	andi	r24, 0xFE	; 254
    144e:	83 bf       	out	0x33, r24	; 51
    1450:	83 b7       	in	r24, 0x33	; 51
    1452:	8d 7f       	andi	r24, 0xFD	; 253
    1454:	83 bf       	out	0x33, r24	; 51
    1456:	83 b7       	in	r24, 0x33	; 51
    1458:	84 60       	ori	r24, 0x04	; 4
    145a:	83 bf       	out	0x33, r24	; 51
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret
    1460:	83 b7       	in	r24, 0x33	; 51
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	83 bf       	out	0x33, r24	; 51
    1466:	83 b7       	in	r24, 0x33	; 51
    1468:	8d 7f       	andi	r24, 0xFD	; 253
    146a:	83 bf       	out	0x33, r24	; 51
    146c:	83 b7       	in	r24, 0x33	; 51
    146e:	84 60       	ori	r24, 0x04	; 4
    1470:	83 bf       	out	0x33, r24	; 51
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	08 95       	ret
    1476:	83 b7       	in	r24, 0x33	; 51
    1478:	8e 7f       	andi	r24, 0xFE	; 254
    147a:	83 bf       	out	0x33, r24	; 51
    147c:	83 b7       	in	r24, 0x33	; 51
    147e:	82 60       	ori	r24, 0x02	; 2
    1480:	83 bf       	out	0x33, r24	; 51
    1482:	83 b7       	in	r24, 0x33	; 51
    1484:	84 60       	ori	r24, 0x04	; 4
    1486:	83 bf       	out	0x33, r24	; 51
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret
    148c:	83 b7       	in	r24, 0x33	; 51
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	83 bf       	out	0x33, r24	; 51
    1492:	83 b7       	in	r24, 0x33	; 51
    1494:	82 60       	ori	r24, 0x02	; 2
    1496:	83 bf       	out	0x33, r24	; 51
    1498:	83 b7       	in	r24, 0x33	; 51
    149a:	84 60       	ori	r24, 0x04	; 4
    149c:	83 bf       	out	0x33, r24	; 51
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	08 95       	ret
    14a2:	8e 2f       	mov	r24, r30
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	8a 30       	cpi	r24, 0x0A	; 10
    14a8:	91 05       	cpc	r25, r1
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <TIMER_start+0xfc>
    14ac:	ca c0       	rjmp	.+404    	; 0x1642 <TIMER_start+0x290>
    14ae:	fc 01       	movw	r30, r24
    14b0:	ec 5c       	subi	r30, 0xCC	; 204
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__tablejump2__>
    14b8:	8e b5       	in	r24, 0x2e	; 46
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	8e bd       	out	0x2e, r24	; 46
    14be:	8e b5       	in	r24, 0x2e	; 46
    14c0:	8d 7f       	andi	r24, 0xFD	; 253
    14c2:	8e bd       	out	0x2e, r24	; 46
    14c4:	8e b5       	in	r24, 0x2e	; 46
    14c6:	8b 7f       	andi	r24, 0xFB	; 251
    14c8:	8e bd       	out	0x2e, r24	; 46
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	08 95       	ret
    14ce:	8e b5       	in	r24, 0x2e	; 46
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	8e bd       	out	0x2e, r24	; 46
    14d4:	8e b5       	in	r24, 0x2e	; 46
    14d6:	8d 7f       	andi	r24, 0xFD	; 253
    14d8:	8e bd       	out	0x2e, r24	; 46
    14da:	8e b5       	in	r24, 0x2e	; 46
    14dc:	8b 7f       	andi	r24, 0xFB	; 251
    14de:	8e bd       	out	0x2e, r24	; 46
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	08 95       	ret
    14e4:	8e b5       	in	r24, 0x2e	; 46
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8e bd       	out	0x2e, r24	; 46
    14ea:	8e b5       	in	r24, 0x2e	; 46
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	8e bd       	out	0x2e, r24	; 46
    14f0:	8e b5       	in	r24, 0x2e	; 46
    14f2:	8b 7f       	andi	r24, 0xFB	; 251
    14f4:	8e bd       	out	0x2e, r24	; 46
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	08 95       	ret
    14fa:	8e b5       	in	r24, 0x2e	; 46
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	8e bd       	out	0x2e, r24	; 46
    1500:	8e b5       	in	r24, 0x2e	; 46
    1502:	82 60       	ori	r24, 0x02	; 2
    1504:	8e bd       	out	0x2e, r24	; 46
    1506:	8e b5       	in	r24, 0x2e	; 46
    1508:	8b 7f       	andi	r24, 0xFB	; 251
    150a:	8e bd       	out	0x2e, r24	; 46
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	08 95       	ret
    1510:	8e b5       	in	r24, 0x2e	; 46
    1512:	8e 7f       	andi	r24, 0xFE	; 254
    1514:	8e bd       	out	0x2e, r24	; 46
    1516:	8e b5       	in	r24, 0x2e	; 46
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	8e bd       	out	0x2e, r24	; 46
    151c:	8e b5       	in	r24, 0x2e	; 46
    151e:	84 60       	ori	r24, 0x04	; 4
    1520:	8e bd       	out	0x2e, r24	; 46
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	08 95       	ret
    1526:	8e b5       	in	r24, 0x2e	; 46
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	8e bd       	out	0x2e, r24	; 46
    152c:	8e b5       	in	r24, 0x2e	; 46
    152e:	8d 7f       	andi	r24, 0xFD	; 253
    1530:	8e bd       	out	0x2e, r24	; 46
    1532:	8e b5       	in	r24, 0x2e	; 46
    1534:	84 60       	ori	r24, 0x04	; 4
    1536:	8e bd       	out	0x2e, r24	; 46
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	08 95       	ret
    153c:	8e b5       	in	r24, 0x2e	; 46
    153e:	8e 7f       	andi	r24, 0xFE	; 254
    1540:	8e bd       	out	0x2e, r24	; 46
    1542:	8e b5       	in	r24, 0x2e	; 46
    1544:	82 60       	ori	r24, 0x02	; 2
    1546:	8e bd       	out	0x2e, r24	; 46
    1548:	8e b5       	in	r24, 0x2e	; 46
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	8e bd       	out	0x2e, r24	; 46
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	08 95       	ret
    1552:	8e b5       	in	r24, 0x2e	; 46
    1554:	81 60       	ori	r24, 0x01	; 1
    1556:	8e bd       	out	0x2e, r24	; 46
    1558:	8e b5       	in	r24, 0x2e	; 46
    155a:	82 60       	ori	r24, 0x02	; 2
    155c:	8e bd       	out	0x2e, r24	; 46
    155e:	8e b5       	in	r24, 0x2e	; 46
    1560:	84 60       	ori	r24, 0x04	; 4
    1562:	8e bd       	out	0x2e, r24	; 46
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	08 95       	ret
    1568:	8e 2f       	mov	r24, r30
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 30       	cpi	r24, 0x08	; 8
    156e:	91 05       	cpc	r25, r1
    1570:	08 f0       	brcs	.+2      	; 0x1574 <TIMER_start+0x1c2>
    1572:	69 c0       	rjmp	.+210    	; 0x1646 <TIMER_start+0x294>
    1574:	fc 01       	movw	r30, r24
    1576:	e2 5c       	subi	r30, 0xC2	; 194
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__tablejump2__>
    157e:	85 b5       	in	r24, 0x25	; 37
    1580:	8b 7f       	andi	r24, 0xFB	; 251
    1582:	85 bd       	out	0x25, r24	; 37
    1584:	85 b5       	in	r24, 0x25	; 37
    1586:	8d 7f       	andi	r24, 0xFD	; 253
    1588:	85 bd       	out	0x25, r24	; 37
    158a:	85 b5       	in	r24, 0x25	; 37
    158c:	8e 7f       	andi	r24, 0xFE	; 254
    158e:	85 bd       	out	0x25, r24	; 37
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	08 95       	ret
    1594:	85 b5       	in	r24, 0x25	; 37
    1596:	84 60       	ori	r24, 0x04	; 4
    1598:	85 bd       	out	0x25, r24	; 37
    159a:	85 b5       	in	r24, 0x25	; 37
    159c:	8d 7f       	andi	r24, 0xFD	; 253
    159e:	85 bd       	out	0x25, r24	; 37
    15a0:	85 b5       	in	r24, 0x25	; 37
    15a2:	8e 7f       	andi	r24, 0xFE	; 254
    15a4:	85 bd       	out	0x25, r24	; 37
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	08 95       	ret
    15aa:	85 b5       	in	r24, 0x25	; 37
    15ac:	8b 7f       	andi	r24, 0xFB	; 251
    15ae:	85 bd       	out	0x25, r24	; 37
    15b0:	85 b5       	in	r24, 0x25	; 37
    15b2:	82 60       	ori	r24, 0x02	; 2
    15b4:	85 bd       	out	0x25, r24	; 37
    15b6:	85 b5       	in	r24, 0x25	; 37
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	85 bd       	out	0x25, r24	; 37
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	08 95       	ret
    15c0:	85 b5       	in	r24, 0x25	; 37
    15c2:	84 60       	ori	r24, 0x04	; 4
    15c4:	85 bd       	out	0x25, r24	; 37
    15c6:	85 b5       	in	r24, 0x25	; 37
    15c8:	82 60       	ori	r24, 0x02	; 2
    15ca:	85 bd       	out	0x25, r24	; 37
    15cc:	85 b5       	in	r24, 0x25	; 37
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	85 bd       	out	0x25, r24	; 37
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	08 95       	ret
    15d6:	85 b5       	in	r24, 0x25	; 37
    15d8:	8b 7f       	andi	r24, 0xFB	; 251
    15da:	85 bd       	out	0x25, r24	; 37
    15dc:	85 b5       	in	r24, 0x25	; 37
    15de:	8d 7f       	andi	r24, 0xFD	; 253
    15e0:	85 bd       	out	0x25, r24	; 37
    15e2:	85 b5       	in	r24, 0x25	; 37
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	85 bd       	out	0x25, r24	; 37
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	08 95       	ret
    15ec:	85 b5       	in	r24, 0x25	; 37
    15ee:	84 60       	ori	r24, 0x04	; 4
    15f0:	85 bd       	out	0x25, r24	; 37
    15f2:	85 b5       	in	r24, 0x25	; 37
    15f4:	8d 7f       	andi	r24, 0xFD	; 253
    15f6:	85 bd       	out	0x25, r24	; 37
    15f8:	85 b5       	in	r24, 0x25	; 37
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	85 bd       	out	0x25, r24	; 37
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	08 95       	ret
    1602:	85 b5       	in	r24, 0x25	; 37
    1604:	8b 7f       	andi	r24, 0xFB	; 251
    1606:	85 bd       	out	0x25, r24	; 37
    1608:	85 b5       	in	r24, 0x25	; 37
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	85 bd       	out	0x25, r24	; 37
    160e:	85 b5       	in	r24, 0x25	; 37
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	85 bd       	out	0x25, r24	; 37
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	08 95       	ret
    1618:	85 b5       	in	r24, 0x25	; 37
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	85 bd       	out	0x25, r24	; 37
    161e:	85 b5       	in	r24, 0x25	; 37
    1620:	82 60       	ori	r24, 0x02	; 2
    1622:	85 bd       	out	0x25, r24	; 37
    1624:	85 b5       	in	r24, 0x25	; 37
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	85 bd       	out	0x25, r24	; 37
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	08 95       	ret
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	08 95       	ret
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	08 95       	ret
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	08 95       	ret
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	08 95       	ret
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	08 95       	ret
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	08 95       	ret
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	08 95       	ret

0000164a <TIMER_stop>:
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	38 f5       	brcc	.+78     	; 0x169c <TIMER_stop+0x52>
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	79 f0       	breq	.+30     	; 0x1670 <TIMER_stop+0x26>
    1652:	18 f0       	brcs	.+6      	; 0x165a <TIMER_stop+0x10>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	b9 f0       	breq	.+46     	; 0x1686 <TIMER_stop+0x3c>
    1658:	23 c0       	rjmp	.+70     	; 0x16a0 <TIMER_stop+0x56>
    165a:	83 b7       	in	r24, 0x33	; 51
    165c:	8e 7f       	andi	r24, 0xFE	; 254
    165e:	83 bf       	out	0x33, r24	; 51
    1660:	83 b7       	in	r24, 0x33	; 51
    1662:	8d 7f       	andi	r24, 0xFD	; 253
    1664:	83 bf       	out	0x33, r24	; 51
    1666:	83 b7       	in	r24, 0x33	; 51
    1668:	8b 7f       	andi	r24, 0xFB	; 251
    166a:	83 bf       	out	0x33, r24	; 51
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	08 95       	ret
    1670:	8e b5       	in	r24, 0x2e	; 46
    1672:	8e 7f       	andi	r24, 0xFE	; 254
    1674:	8e bd       	out	0x2e, r24	; 46
    1676:	8e b5       	in	r24, 0x2e	; 46
    1678:	8d 7f       	andi	r24, 0xFD	; 253
    167a:	8e bd       	out	0x2e, r24	; 46
    167c:	8e b5       	in	r24, 0x2e	; 46
    167e:	8b 7f       	andi	r24, 0xFB	; 251
    1680:	8e bd       	out	0x2e, r24	; 46
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	08 95       	ret
    1686:	85 b5       	in	r24, 0x25	; 37
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	85 bd       	out	0x25, r24	; 37
    168c:	85 b5       	in	r24, 0x25	; 37
    168e:	8d 7f       	andi	r24, 0xFD	; 253
    1690:	85 bd       	out	0x25, r24	; 37
    1692:	85 b5       	in	r24, 0x25	; 37
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	85 bd       	out	0x25, r24	; 37
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	08 95       	ret
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	08 95       	ret
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	08 95       	ret

000016a4 <TIMER_reset>:
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	f1 f0       	breq	.+60     	; 0x16e4 <TIMER_reset+0x40>
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 81       	ld	r18, Z
    16ac:	23 30       	cpi	r18, 0x03	; 3
    16ae:	e0 f4       	brcc	.+56     	; 0x16e8 <TIMER_reset+0x44>
    16b0:	31 81       	ldd	r19, Z+1	; 0x01
    16b2:	3a 30       	cpi	r19, 0x0A	; 10
    16b4:	d8 f4       	brcc	.+54     	; 0x16ec <TIMER_reset+0x48>
    16b6:	21 30       	cpi	r18, 0x01	; 1
    16b8:	49 f0       	breq	.+18     	; 0x16cc <TIMER_reset+0x28>
    16ba:	18 f0       	brcs	.+6      	; 0x16c2 <TIMER_reset+0x1e>
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	69 f0       	breq	.+26     	; 0x16da <TIMER_reset+0x36>
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <TIMER_reset+0x4c>
    16c2:	fc 01       	movw	r30, r24
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	82 bf       	out	0x32, r24	; 50
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	fc 01       	movw	r30, r24
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	9d bd       	out	0x2d, r25	; 45
    16d4:	8c bd       	out	0x2c, r24	; 44
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	08 95       	ret
    16da:	fc 01       	movw	r30, r24
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	84 bd       	out	0x24, r24	; 36
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	08 95       	ret
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	08 95       	ret
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	08 95       	ret
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	08 95       	ret

000016f4 <TIMER_setCallBack>:
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	a9 f0       	breq	.+42     	; 0x1722 <TIMER_setCallBack+0x2e>
    16f8:	63 30       	cpi	r22, 0x03	; 3
    16fa:	a8 f4       	brcc	.+42     	; 0x1726 <TIMER_setCallBack+0x32>
    16fc:	61 30       	cpi	r22, 0x01	; 1
    16fe:	59 f0       	breq	.+22     	; 0x1716 <TIMER_setCallBack+0x22>
    1700:	20 f0       	brcs	.+8      	; 0x170a <TIMER_setCallBack+0x16>
    1702:	62 30       	cpi	r22, 0x02	; 2
    1704:	91 f0       	breq	.+36     	; 0x172a <TIMER_setCallBack+0x36>
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	08 95       	ret
    170a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <sg_Timer0_callBackPtr+0x1>
    170e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <sg_Timer0_callBackPtr>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	08 95       	ret
    1716:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <sg_Timer1_callBackPtr+0x1>
    171a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sg_Timer1_callBackPtr>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	08 95       	ret
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	08 95       	ret
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	08 95       	ret
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret

0000172e <enuTimer2_init>:
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	48 f5       	brcc	.+82     	; 0x1784 <enuTimer2_init+0x56>
    1732:	14 bc       	out	0x24, r1	; 36
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	71 f0       	breq	.+28     	; 0x1754 <enuTimer2_init+0x26>
    1738:	28 f0       	brcs	.+10     	; 0x1744 <enuTimer2_init+0x16>
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	99 f0       	breq	.+38     	; 0x1764 <enuTimer2_init+0x36>
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	c9 f0       	breq	.+50     	; 0x1774 <enuTimer2_init+0x46>
    1742:	22 c0       	rjmp	.+68     	; 0x1788 <enuTimer2_init+0x5a>
    1744:	85 b5       	in	r24, 0x25	; 37
    1746:	87 7f       	andi	r24, 0xF7	; 247
    1748:	85 bd       	out	0x25, r24	; 37
    174a:	85 b5       	in	r24, 0x25	; 37
    174c:	8f 7b       	andi	r24, 0xBF	; 191
    174e:	85 bd       	out	0x25, r24	; 37
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
    1754:	85 b5       	in	r24, 0x25	; 37
    1756:	87 7f       	andi	r24, 0xF7	; 247
    1758:	85 bd       	out	0x25, r24	; 37
    175a:	85 b5       	in	r24, 0x25	; 37
    175c:	80 64       	ori	r24, 0x40	; 64
    175e:	85 bd       	out	0x25, r24	; 37
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	08 95       	ret
    1764:	85 b5       	in	r24, 0x25	; 37
    1766:	88 60       	ori	r24, 0x08	; 8
    1768:	85 bd       	out	0x25, r24	; 37
    176a:	85 b5       	in	r24, 0x25	; 37
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	85 bd       	out	0x25, r24	; 37
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	08 95       	ret
    1774:	85 b5       	in	r24, 0x25	; 37
    1776:	88 60       	ori	r24, 0x08	; 8
    1778:	85 bd       	out	0x25, r24	; 37
    177a:	85 b5       	in	r24, 0x25	; 37
    177c:	80 64       	ori	r24, 0x40	; 64
    177e:	85 bd       	out	0x25, r24	; 37
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	08 95       	ret
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	08 95       	ret
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	08 95       	ret

0000178c <u8Timer2_setPrescallar>:
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	70 f4       	brcc	.+28     	; 0x17ac <u8Timer2_setPrescallar+0x20>
    1790:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <global_prescaller>
    1794:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <global_timerStatus>
    1798:	91 30       	cpi	r25, 0x01	; 1
    179a:	51 f4       	brne	.+20     	; 0x17b0 <u8Timer2_setPrescallar+0x24>
    179c:	95 b5       	in	r25, 0x25	; 37
    179e:	98 7f       	andi	r25, 0xF8	; 248
    17a0:	89 2b       	or	r24, r25
    17a2:	95 b5       	in	r25, 0x25	; 37
    17a4:	89 2b       	or	r24, r25
    17a6:	85 bd       	out	0x25, r24	; 37
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 95       	ret
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	08 95       	ret

000017b4 <vidTimer2_OvfIrqEnable>:
    17b4:	88 b7       	in	r24, 0x38	; 56
    17b6:	80 64       	ori	r24, 0x40	; 64
    17b8:	88 bf       	out	0x38, r24	; 56
    17ba:	89 b7       	in	r24, 0x39	; 57
    17bc:	80 64       	ori	r24, 0x40	; 64
    17be:	89 bf       	out	0x39, r24	; 57
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	08 95       	ret

000017c4 <vidTimer2_OvfIrqDisable>:
    17c4:	89 b7       	in	r24, 0x39	; 57
    17c6:	8f 7b       	andi	r24, 0xBF	; 191
    17c8:	89 bf       	out	0x39, r24	; 57
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	08 95       	ret

000017ce <vidTimer2_start>:
    17ce:	95 b5       	in	r25, 0x25	; 37
    17d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <global_prescaller>
    17d4:	89 2b       	or	r24, r25
    17d6:	85 bd       	out	0x25, r24	; 37
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <global_timerStatus>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	08 95       	ret

000017e2 <vidTimer2_stop>:
    17e2:	85 b5       	in	r24, 0x25	; 37
    17e4:	88 7f       	andi	r24, 0xF8	; 248
    17e6:	85 bd       	out	0x25, r24	; 37
    17e8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <global_timerStatus>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	08 95       	ret

000017f0 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	21 f0       	breq	.+8      	; 0x17fc <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    17f4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <globalCallFunc+0x1>
    17f8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <globalCallFunc>
    17fc:	08 95       	ret

000017fe <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    17fe:	14 bc       	out	0x24, r1	; 36
    1800:	08 95       	ret

00001802 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    1802:	84 b5       	in	r24, 0x24	; 36
}
    1804:	08 95       	ret

00001806 <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    1806:	8f b7       	in	r24, 0x3f	; 63
    1808:	80 68       	ori	r24, 0x80	; 128
    180a:	8f bf       	out	0x3f, r24	; 63
    180c:	08 95       	ret

0000180e <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    1830:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter.1817>
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <counter.1817>
	if(counter == global_ovf)
    183a:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <global_ovf>
    183e:	89 13       	cpse	r24, r25
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1842:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <globalCallFunc>
    1846:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <globalCallFunc+0x1>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	19 f0       	breq	.+6      	; 0x1854 <__vector_5+0x46>
		{
			counter = 0;
    184e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter.1817>

			globalCallFunc();
    1852:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__cmpsf2>:
    1876:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__fp_cmp>
    187a:	08 f4       	brcc	.+2      	; 0x187e <__cmpsf2+0x8>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	08 95       	ret

00001880 <__divsf3>:
    1880:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__divsf3x>
    1884:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_round>
    1888:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__fp_pscB>
    188c:	58 f0       	brcs	.+22     	; 0x18a4 <__divsf3+0x24>
    188e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fp_pscA>
    1892:	40 f0       	brcs	.+16     	; 0x18a4 <__divsf3+0x24>
    1894:	29 f4       	brne	.+10     	; 0x18a0 <__divsf3+0x20>
    1896:	5f 3f       	cpi	r21, 0xFF	; 255
    1898:	29 f0       	breq	.+10     	; 0x18a4 <__divsf3+0x24>
    189a:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__fp_inf>
    189e:	51 11       	cpse	r21, r1
    18a0:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>
    18a4:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__fp_nan>

000018a8 <__divsf3x>:
    18a8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fp_split3>
    18ac:	68 f3       	brcs	.-38     	; 0x1888 <__divsf3+0x8>

000018ae <__divsf3_pse>:
    18ae:	99 23       	and	r25, r25
    18b0:	b1 f3       	breq	.-20     	; 0x189e <__divsf3+0x1e>
    18b2:	55 23       	and	r21, r21
    18b4:	91 f3       	breq	.-28     	; 0x189a <__divsf3+0x1a>
    18b6:	95 1b       	sub	r25, r21
    18b8:	55 0b       	sbc	r21, r21
    18ba:	bb 27       	eor	r27, r27
    18bc:	aa 27       	eor	r26, r26
    18be:	62 17       	cp	r22, r18
    18c0:	73 07       	cpc	r23, r19
    18c2:	84 07       	cpc	r24, r20
    18c4:	38 f0       	brcs	.+14     	; 0x18d4 <__divsf3_pse+0x26>
    18c6:	9f 5f       	subi	r25, 0xFF	; 255
    18c8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	44 1f       	adc	r20, r20
    18d0:	aa 1f       	adc	r26, r26
    18d2:	a9 f3       	breq	.-22     	; 0x18be <__divsf3_pse+0x10>
    18d4:	35 d0       	rcall	.+106    	; 0x1940 <__divsf3_pse+0x92>
    18d6:	0e 2e       	mov	r0, r30
    18d8:	3a f0       	brmi	.+14     	; 0x18e8 <__divsf3_pse+0x3a>
    18da:	e0 e8       	ldi	r30, 0x80	; 128
    18dc:	32 d0       	rcall	.+100    	; 0x1942 <__divsf3_pse+0x94>
    18de:	91 50       	subi	r25, 0x01	; 1
    18e0:	50 40       	sbci	r21, 0x00	; 0
    18e2:	e6 95       	lsr	r30
    18e4:	00 1c       	adc	r0, r0
    18e6:	ca f7       	brpl	.-14     	; 0x18da <__divsf3_pse+0x2c>
    18e8:	2b d0       	rcall	.+86     	; 0x1940 <__divsf3_pse+0x92>
    18ea:	fe 2f       	mov	r31, r30
    18ec:	29 d0       	rcall	.+82     	; 0x1940 <__divsf3_pse+0x92>
    18ee:	66 0f       	add	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	bb 1f       	adc	r27, r27
    18f6:	26 17       	cp	r18, r22
    18f8:	37 07       	cpc	r19, r23
    18fa:	48 07       	cpc	r20, r24
    18fc:	ab 07       	cpc	r26, r27
    18fe:	b0 e8       	ldi	r27, 0x80	; 128
    1900:	09 f0       	breq	.+2      	; 0x1904 <__divsf3_pse+0x56>
    1902:	bb 0b       	sbc	r27, r27
    1904:	80 2d       	mov	r24, r0
    1906:	bf 01       	movw	r22, r30
    1908:	ff 27       	eor	r31, r31
    190a:	93 58       	subi	r25, 0x83	; 131
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	3a f0       	brmi	.+14     	; 0x191e <__divsf3_pse+0x70>
    1910:	9e 3f       	cpi	r25, 0xFE	; 254
    1912:	51 05       	cpc	r21, r1
    1914:	78 f0       	brcs	.+30     	; 0x1934 <__divsf3_pse+0x86>
    1916:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__fp_inf>
    191a:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>
    191e:	5f 3f       	cpi	r21, 0xFF	; 255
    1920:	e4 f3       	brlt	.-8      	; 0x191a <__divsf3_pse+0x6c>
    1922:	98 3e       	cpi	r25, 0xE8	; 232
    1924:	d4 f3       	brlt	.-12     	; 0x191a <__divsf3_pse+0x6c>
    1926:	86 95       	lsr	r24
    1928:	77 95       	ror	r23
    192a:	67 95       	ror	r22
    192c:	b7 95       	ror	r27
    192e:	f7 95       	ror	r31
    1930:	9f 5f       	subi	r25, 0xFF	; 255
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__divsf3_pse+0x78>
    1934:	88 0f       	add	r24, r24
    1936:	91 1d       	adc	r25, r1
    1938:	96 95       	lsr	r25
    193a:	87 95       	ror	r24
    193c:	97 f9       	bld	r25, 7
    193e:	08 95       	ret
    1940:	e1 e0       	ldi	r30, 0x01	; 1
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	bb 1f       	adc	r27, r27
    194a:	62 17       	cp	r22, r18
    194c:	73 07       	cpc	r23, r19
    194e:	84 07       	cpc	r24, r20
    1950:	ba 07       	cpc	r27, r26
    1952:	20 f0       	brcs	.+8      	; 0x195c <__divsf3_pse+0xae>
    1954:	62 1b       	sub	r22, r18
    1956:	73 0b       	sbc	r23, r19
    1958:	84 0b       	sbc	r24, r20
    195a:	ba 0b       	sbc	r27, r26
    195c:	ee 1f       	adc	r30, r30
    195e:	88 f7       	brcc	.-30     	; 0x1942 <__divsf3_pse+0x94>
    1960:	e0 95       	com	r30
    1962:	08 95       	ret

00001964 <__fixunssfsi>:
    1964:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_splitA>
    1968:	88 f0       	brcs	.+34     	; 0x198c <__fixunssfsi+0x28>
    196a:	9f 57       	subi	r25, 0x7F	; 127
    196c:	98 f0       	brcs	.+38     	; 0x1994 <__fixunssfsi+0x30>
    196e:	b9 2f       	mov	r27, r25
    1970:	99 27       	eor	r25, r25
    1972:	b7 51       	subi	r27, 0x17	; 23
    1974:	b0 f0       	brcs	.+44     	; 0x19a2 <__fixunssfsi+0x3e>
    1976:	e1 f0       	breq	.+56     	; 0x19b0 <__fixunssfsi+0x4c>
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	1a f0       	brmi	.+6      	; 0x1988 <__fixunssfsi+0x24>
    1982:	ba 95       	dec	r27
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__fixunssfsi+0x14>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <__fixunssfsi+0x4c>
    1988:	b1 30       	cpi	r27, 0x01	; 1
    198a:	91 f0       	breq	.+36     	; 0x19b0 <__fixunssfsi+0x4c>
    198c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fp_zero>
    1990:	b1 e0       	ldi	r27, 0x01	; 1
    1992:	08 95       	ret
    1994:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_zero>
    1998:	67 2f       	mov	r22, r23
    199a:	78 2f       	mov	r23, r24
    199c:	88 27       	eor	r24, r24
    199e:	b8 5f       	subi	r27, 0xF8	; 248
    19a0:	39 f0       	breq	.+14     	; 0x19b0 <__fixunssfsi+0x4c>
    19a2:	b9 3f       	cpi	r27, 0xF9	; 249
    19a4:	cc f3       	brlt	.-14     	; 0x1998 <__fixunssfsi+0x34>
    19a6:	86 95       	lsr	r24
    19a8:	77 95       	ror	r23
    19aa:	67 95       	ror	r22
    19ac:	b3 95       	inc	r27
    19ae:	d9 f7       	brne	.-10     	; 0x19a6 <__fixunssfsi+0x42>
    19b0:	3e f4       	brtc	.+14     	; 0x19c0 <__fixunssfsi+0x5c>
    19b2:	90 95       	com	r25
    19b4:	80 95       	com	r24
    19b6:	70 95       	com	r23
    19b8:	61 95       	neg	r22
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	8f 4f       	sbci	r24, 0xFF	; 255
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	08 95       	ret

000019c2 <__floatunsisf>:
    19c2:	e8 94       	clt
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <__floatsisf+0x12>

000019c6 <__floatsisf>:
    19c6:	97 fb       	bst	r25, 7
    19c8:	3e f4       	brtc	.+14     	; 0x19d8 <__floatsisf+0x12>
    19ca:	90 95       	com	r25
    19cc:	80 95       	com	r24
    19ce:	70 95       	com	r23
    19d0:	61 95       	neg	r22
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	8f 4f       	sbci	r24, 0xFF	; 255
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	99 23       	and	r25, r25
    19da:	a9 f0       	breq	.+42     	; 0x1a06 <__floatsisf+0x40>
    19dc:	f9 2f       	mov	r31, r25
    19de:	96 e9       	ldi	r25, 0x96	; 150
    19e0:	bb 27       	eor	r27, r27
    19e2:	93 95       	inc	r25
    19e4:	f6 95       	lsr	r31
    19e6:	87 95       	ror	r24
    19e8:	77 95       	ror	r23
    19ea:	67 95       	ror	r22
    19ec:	b7 95       	ror	r27
    19ee:	f1 11       	cpse	r31, r1
    19f0:	f8 cf       	rjmp	.-16     	; 0x19e2 <__floatsisf+0x1c>
    19f2:	fa f4       	brpl	.+62     	; 0x1a32 <__floatsisf+0x6c>
    19f4:	bb 0f       	add	r27, r27
    19f6:	11 f4       	brne	.+4      	; 0x19fc <__floatsisf+0x36>
    19f8:	60 ff       	sbrs	r22, 0
    19fa:	1b c0       	rjmp	.+54     	; 0x1a32 <__floatsisf+0x6c>
    19fc:	6f 5f       	subi	r22, 0xFF	; 255
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	8f 4f       	sbci	r24, 0xFF	; 255
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	16 c0       	rjmp	.+44     	; 0x1a32 <__floatsisf+0x6c>
    1a06:	88 23       	and	r24, r24
    1a08:	11 f0       	breq	.+4      	; 0x1a0e <__floatsisf+0x48>
    1a0a:	96 e9       	ldi	r25, 0x96	; 150
    1a0c:	11 c0       	rjmp	.+34     	; 0x1a30 <__floatsisf+0x6a>
    1a0e:	77 23       	and	r23, r23
    1a10:	21 f0       	breq	.+8      	; 0x1a1a <__floatsisf+0x54>
    1a12:	9e e8       	ldi	r25, 0x8E	; 142
    1a14:	87 2f       	mov	r24, r23
    1a16:	76 2f       	mov	r23, r22
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <__floatsisf+0x5e>
    1a1a:	66 23       	and	r22, r22
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <__floatsisf+0x74>
    1a1e:	96 e8       	ldi	r25, 0x86	; 134
    1a20:	86 2f       	mov	r24, r22
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	2a f0       	brmi	.+10     	; 0x1a32 <__floatsisf+0x6c>
    1a28:	9a 95       	dec	r25
    1a2a:	66 0f       	add	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	da f7       	brpl	.-10     	; 0x1a28 <__floatsisf+0x62>
    1a32:	88 0f       	add	r24, r24
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	97 f9       	bld	r25, 7
    1a3a:	08 95       	ret

00001a3c <__fp_cmp>:
    1a3c:	99 0f       	add	r25, r25
    1a3e:	00 08       	sbc	r0, r0
    1a40:	55 0f       	add	r21, r21
    1a42:	aa 0b       	sbc	r26, r26
    1a44:	e0 e8       	ldi	r30, 0x80	; 128
    1a46:	fe ef       	ldi	r31, 0xFE	; 254
    1a48:	16 16       	cp	r1, r22
    1a4a:	17 06       	cpc	r1, r23
    1a4c:	e8 07       	cpc	r30, r24
    1a4e:	f9 07       	cpc	r31, r25
    1a50:	c0 f0       	brcs	.+48     	; 0x1a82 <__fp_cmp+0x46>
    1a52:	12 16       	cp	r1, r18
    1a54:	13 06       	cpc	r1, r19
    1a56:	e4 07       	cpc	r30, r20
    1a58:	f5 07       	cpc	r31, r21
    1a5a:	98 f0       	brcs	.+38     	; 0x1a82 <__fp_cmp+0x46>
    1a5c:	62 1b       	sub	r22, r18
    1a5e:	73 0b       	sbc	r23, r19
    1a60:	84 0b       	sbc	r24, r20
    1a62:	95 0b       	sbc	r25, r21
    1a64:	39 f4       	brne	.+14     	; 0x1a74 <__fp_cmp+0x38>
    1a66:	0a 26       	eor	r0, r26
    1a68:	61 f0       	breq	.+24     	; 0x1a82 <__fp_cmp+0x46>
    1a6a:	23 2b       	or	r18, r19
    1a6c:	24 2b       	or	r18, r20
    1a6e:	25 2b       	or	r18, r21
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <__fp_cmp+0x3e>
    1a72:	08 95       	ret
    1a74:	0a 26       	eor	r0, r26
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__fp_cmp+0x3e>
    1a78:	a1 40       	sbci	r26, 0x01	; 1
    1a7a:	a6 95       	lsr	r26
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	81 1d       	adc	r24, r1
    1a80:	81 1d       	adc	r24, r1
    1a82:	08 95       	ret

00001a84 <__fp_inf>:
    1a84:	97 f9       	bld	r25, 7
    1a86:	9f 67       	ori	r25, 0x7F	; 127
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	08 95       	ret

00001a90 <__fp_nan>:
    1a90:	9f ef       	ldi	r25, 0xFF	; 255
    1a92:	80 ec       	ldi	r24, 0xC0	; 192
    1a94:	08 95       	ret

00001a96 <__fp_pscA>:
    1a96:	00 24       	eor	r0, r0
    1a98:	0a 94       	dec	r0
    1a9a:	16 16       	cp	r1, r22
    1a9c:	17 06       	cpc	r1, r23
    1a9e:	18 06       	cpc	r1, r24
    1aa0:	09 06       	cpc	r0, r25
    1aa2:	08 95       	ret

00001aa4 <__fp_pscB>:
    1aa4:	00 24       	eor	r0, r0
    1aa6:	0a 94       	dec	r0
    1aa8:	12 16       	cp	r1, r18
    1aaa:	13 06       	cpc	r1, r19
    1aac:	14 06       	cpc	r1, r20
    1aae:	05 06       	cpc	r0, r21
    1ab0:	08 95       	ret

00001ab2 <__fp_round>:
    1ab2:	09 2e       	mov	r0, r25
    1ab4:	03 94       	inc	r0
    1ab6:	00 0c       	add	r0, r0
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <__fp_round+0xc>
    1aba:	88 23       	and	r24, r24
    1abc:	52 f0       	brmi	.+20     	; 0x1ad2 <__fp_round+0x20>
    1abe:	bb 0f       	add	r27, r27
    1ac0:	40 f4       	brcc	.+16     	; 0x1ad2 <__fp_round+0x20>
    1ac2:	bf 2b       	or	r27, r31
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <__fp_round+0x18>
    1ac6:	60 ff       	sbrs	r22, 0
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__fp_round+0x20>
    1aca:	6f 5f       	subi	r22, 0xFF	; 255
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	08 95       	ret

00001ad4 <__fp_split3>:
    1ad4:	57 fd       	sbrc	r21, 7
    1ad6:	90 58       	subi	r25, 0x80	; 128
    1ad8:	44 0f       	add	r20, r20
    1ada:	55 1f       	adc	r21, r21
    1adc:	59 f0       	breq	.+22     	; 0x1af4 <__fp_splitA+0x10>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <__fp_splitA+0x1a>
    1ae2:	47 95       	ror	r20

00001ae4 <__fp_splitA>:
    1ae4:	88 0f       	add	r24, r24
    1ae6:	97 fb       	bst	r25, 7
    1ae8:	99 1f       	adc	r25, r25
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <__fp_splitA+0x20>
    1aec:	9f 3f       	cpi	r25, 0xFF	; 255
    1aee:	79 f0       	breq	.+30     	; 0x1b0e <__fp_splitA+0x2a>
    1af0:	87 95       	ror	r24
    1af2:	08 95       	ret
    1af4:	12 16       	cp	r1, r18
    1af6:	13 06       	cpc	r1, r19
    1af8:	14 06       	cpc	r1, r20
    1afa:	55 1f       	adc	r21, r21
    1afc:	f2 cf       	rjmp	.-28     	; 0x1ae2 <__fp_split3+0xe>
    1afe:	46 95       	lsr	r20
    1b00:	f1 df       	rcall	.-30     	; 0x1ae4 <__fp_splitA>
    1b02:	08 c0       	rjmp	.+16     	; 0x1b14 <__fp_splitA+0x30>
    1b04:	16 16       	cp	r1, r22
    1b06:	17 06       	cpc	r1, r23
    1b08:	18 06       	cpc	r1, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	f1 cf       	rjmp	.-30     	; 0x1af0 <__fp_splitA+0xc>
    1b0e:	86 95       	lsr	r24
    1b10:	71 05       	cpc	r23, r1
    1b12:	61 05       	cpc	r22, r1
    1b14:	08 94       	sec
    1b16:	08 95       	ret

00001b18 <__fp_zero>:
    1b18:	e8 94       	clt

00001b1a <__fp_szero>:
    1b1a:	bb 27       	eor	r27, r27
    1b1c:	66 27       	eor	r22, r22
    1b1e:	77 27       	eor	r23, r23
    1b20:	cb 01       	movw	r24, r22
    1b22:	97 f9       	bld	r25, 7
    1b24:	08 95       	ret

00001b26 <__gesf2>:
    1b26:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__fp_cmp>
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__gesf2+0x8>
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	08 95       	ret

00001b30 <__tablejump2__>:
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	05 90       	lpm	r0, Z+
    1b36:	f4 91       	lpm	r31, Z
    1b38:	e0 2d       	mov	r30, r0
    1b3a:	09 94       	ijmp

00001b3c <__itoa_ncheck>:
    1b3c:	bb 27       	eor	r27, r27
    1b3e:	4a 30       	cpi	r20, 0x0A	; 10
    1b40:	31 f4       	brne	.+12     	; 0x1b4e <__itoa_ncheck+0x12>
    1b42:	99 23       	and	r25, r25
    1b44:	22 f4       	brpl	.+8      	; 0x1b4e <__itoa_ncheck+0x12>
    1b46:	bd e2       	ldi	r27, 0x2D	; 45
    1b48:	90 95       	com	r25
    1b4a:	81 95       	neg	r24
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__utoa_common>

00001b52 <__utoa_ncheck>:
    1b52:	bb 27       	eor	r27, r27

00001b54 <__utoa_common>:
    1b54:	fb 01       	movw	r30, r22
    1b56:	55 27       	eor	r21, r21
    1b58:	aa 27       	eor	r26, r26
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	aa 1f       	adc	r26, r26
    1b60:	a4 17       	cp	r26, r20
    1b62:	10 f0       	brcs	.+4      	; 0x1b68 <__utoa_common+0x14>
    1b64:	a4 1b       	sub	r26, r20
    1b66:	83 95       	inc	r24
    1b68:	50 51       	subi	r21, 0x10	; 16
    1b6a:	b9 f7       	brne	.-18     	; 0x1b5a <__utoa_common+0x6>
    1b6c:	a0 5d       	subi	r26, 0xD0	; 208
    1b6e:	aa 33       	cpi	r26, 0x3A	; 58
    1b70:	08 f0       	brcs	.+2      	; 0x1b74 <__utoa_common+0x20>
    1b72:	a9 5d       	subi	r26, 0xD9	; 217
    1b74:	a1 93       	st	Z+, r26
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	79 f7       	brne	.-34     	; 0x1b58 <__utoa_common+0x4>
    1b7a:	b1 11       	cpse	r27, r1
    1b7c:	b1 93       	st	Z+, r27
    1b7e:	11 92       	st	Z+, r1
    1b80:	cb 01       	movw	r24, r22
    1b82:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <strrev>

00001b86 <strrev>:
    1b86:	dc 01       	movw	r26, r24
    1b88:	fc 01       	movw	r30, r24
    1b8a:	67 2f       	mov	r22, r23
    1b8c:	71 91       	ld	r23, Z+
    1b8e:	77 23       	and	r23, r23
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <strrev+0x4>
    1b92:	32 97       	sbiw	r30, 0x02	; 2
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <strrev+0x18>
    1b96:	7c 91       	ld	r23, X
    1b98:	6d 93       	st	X+, r22
    1b9a:	70 83       	st	Z, r23
    1b9c:	62 91       	ld	r22, -Z
    1b9e:	ae 17       	cp	r26, r30
    1ba0:	bf 07       	cpc	r27, r31
    1ba2:	c8 f3       	brcs	.-14     	; 0x1b96 <strrev+0x10>
    1ba4:	08 95       	ret

00001ba6 <_exit>:
    1ba6:	f8 94       	cli

00001ba8 <__stop_program>:
    1ba8:	ff cf       	rjmp	.-2      	; 0x1ba8 <__stop_program>
