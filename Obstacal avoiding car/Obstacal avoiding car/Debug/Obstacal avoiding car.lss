
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001706  0000179a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000b4  008000b4  000017ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000351f  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fa  00000000  00000000  00005093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000223b  00000000  00000000  0000638d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  000085c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001089  00000000  00000000  00008d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000237e  00000000  00000000  00009de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000c163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_1>
       8:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__vector_2>
       c:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	f9 07       	cpc	r31, r25
      56:	04 08       	sbc	r0, r4
      58:	0f 08       	sbc	r0, r15
      5a:	1f 09       	sbc	r17, r15
      5c:	1a 08       	sbc	r1, r10
      5e:	1f 09       	sbc	r17, r15
      60:	25 08       	sbc	r2, r5
      62:	30 08       	sbc	r3, r0
      64:	3b 08       	sbc	r3, r11
      66:	46 08       	sbc	r4, r6
      68:	5c 08       	sbc	r5, r12
      6a:	67 08       	sbc	r6, r7
      6c:	72 08       	sbc	r7, r2
      6e:	21 09       	sbc	r18, r1
      70:	7d 08       	sbc	r7, r13
      72:	21 09       	sbc	r18, r1
      74:	88 08       	sbc	r8, r8
      76:	93 08       	sbc	r9, r3
      78:	9e 08       	sbc	r9, r14
      7a:	a9 08       	sbc	r10, r9
      7c:	bf 08       	sbc	r11, r15
      7e:	ca 08       	sbc	r12, r10
      80:	d5 08       	sbc	r13, r5
      82:	e0 08       	sbc	r14, r0
      84:	eb 08       	sbc	r14, r11
      86:	f6 08       	sbc	r15, r6
      88:	01 09       	sbc	r16, r1
      8a:	0c 09       	sbc	r16, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e6 e0       	ldi	r30, 0x06	; 6
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a4 3b       	cpi	r26, 0xB4	; 180
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a4 eb       	ldi	r26, 0xB4	; 180
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ae 3d       	cpi	r26, 0xDE	; 222
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 be 04 	call	0x97c	; 0x97c <main>
      c2:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      ca:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <u8_g_OneSecTicks>
      ce:	8f 5f       	subi	r24, 0xFF	; 255
      d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <u8_g_OneSecTicks>
      d4:	08 95       	ret

000000d6 <BUTTON_vidChangeDir>:
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	static Uint16_t counter = 0, L_flag = 0;
	counter += 2;
      d6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <counter.1958>
      da:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <counter.1958+0x1>
      de:	02 96       	adiw	r24, 0x02	; 2
      e0:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <counter.1958+0x1>
      e4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <counter.1958>
	if (counter % 2 == 0) {HLCD_ClrDisplay();}
      e8:	80 ff       	sbrs	r24, 0
      ea:	0e 94 b9 02 	call	0x572	; 0x572 <HLCD_ClrDisplay>
		
		if (L_flag == 0)
      ee:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
      f2:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x1>
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	69 f4       	brne	.+26     	; 0x114 <BUTTON_vidChangeDir+0x3e>
			{g_u8_motorDir = "Left"; L_flag = 1;}
      fa:	81 e8       	ldi	r24, 0x81	; 129
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
     102:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <__data_end+0x1>
     10e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end>
     112:	08 95       	ret
		else if (L_flag == 1)
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	51 f4       	brne	.+20     	; 0x12c <BUTTON_vidChangeDir+0x56>
		{
			g_u8_motorDir = "Right"; L_flag = 0;
     118:	86 e8       	ldi	r24, 0x86	; 134
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
     120:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
     124:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <__data_end+0x1>
     128:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
     12c:	08 95       	ret

0000012e <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
     12e:	0e 94 8f 04 	call	0x91e	; 0x91e <HULTRASONIC_vidInit>
	(void) HLCD_vidInit();
     132:	0e 94 de 01 	call	0x3bc	; 0x3bc <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
     136:	87 e6       	ldi	r24, 0x67	; 103
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 05 03 	call	0x60a	; 0x60a <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 40 01 	call	0x280	; 0x280 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     146:	80 e6       	ldi	r24, 0x60	; 96
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 bf 03 	call	0x77e	; 0x77e <TIMER_Manager_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     14e:	87 e0       	ldi	r24, 0x07	; 7
     150:	94 e0       	ldi	r25, 0x04	; 4
     152:	0e 94 b8 04 	call	0x970	; 0x970 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     156:	8b e1       	ldi	r24, 0x1B	; 27
     158:	94 e0       	ldi	r25, 0x04	; 4
     15a:	0e 94 bb 04 	call	0x976	; 0x976 <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     15e:	8b e6       	ldi	r24, 0x6B	; 107
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 56 01 	call	0x2ac	; 0x2ac <HExtInt_enCBFInt0>
	
	DDRA = 0xFF;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	8a bb       	out	0x1a, r24	; 26
     16a:	08 95       	ret

0000016c <APP_updateDirection>:
	u8_g_OneSecTicks++;
}

void APP_updateDirection(void)
{
	TIMER_Manager_start (&st_timer1Config);
     16c:	80 e6       	ldi	r24, 0x60	; 96
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 df 03 	call	0x7be	; 0x7be <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     174:	0e 94 61 01 	call	0x2c2	; 0x2c2 <HExtInt0_enIntEnable>
// 		HLCD_gotoXY(0,0);
// 		HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
// 		HLCD_gotoXY(1,0);
// 		HLCD_WriteString(g_u8_motorDir);
// 	}
	PORTA = u8_g_OneSecTicks;
     178:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <u8_g_OneSecTicks>
     17c:	8b bb       	out	0x1b, r24	; 27
	HLCD_ClrDisplay();
     17e:	0e 94 b9 02 	call	0x572	; 0x572 <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     186:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     18a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <HExtInt0_enIntDisable>
     18e:	08 95       	ret

00000190 <APP_vidStart>:
	DDRA = 0xFF;
}

void APP_vidStart(void)
{
	(void) KEYPAD_read(&u8KeyRead);
     190:	84 ed       	ldi	r24, 0xD4	; 212
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 42 03 	call	0x684	; 0x684 <KEYPAD_read>
	
	 if (u8KeyRead != 'N')
     198:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <u8KeyRead>
     19c:	8e 34       	cpi	r24, 0x4E	; 78
     19e:	f1 f0       	breq	.+60     	; 0x1dc <APP_vidStart+0x4c>
	 {
		 switch(u8KeyRead)
     1a0:	81 33       	cpi	r24, 0x31	; 49
     1a2:	19 f0       	breq	.+6      	; 0x1aa <APP_vidStart+0x1a>
     1a4:	82 33       	cpi	r24, 0x32	; 50
     1a6:	61 f0       	breq	.+24     	; 0x1c0 <APP_vidStart+0x30>
     1a8:	16 c0       	rjmp	.+44     	; 0x1d6 <APP_vidStart+0x46>
		 {
			 case '1' : {
				 en_motorSel = EN_MOTOR_START; HLCD_gotoXY(1,0); HLCD_vidWriteChar(u8KeyRead); 				 
     1aa:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <HLCD_gotoXY>
     1b6:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <u8KeyRead>
     1ba:	0e 94 3f 02 	call	0x47e	; 0x47e <HLCD_vidWriteChar>
				 break;
     1be:	0e c0       	rjmp	.+28     	; 0x1dc <APP_vidStart+0x4c>
				 }	 
			 case '2' : {
				 en_motorSel = EN_MOTOR_STOP; HLCD_gotoXY(1,0); HLCD_vidWriteChar(u8KeyRead); 
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <HLCD_gotoXY>
     1cc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <u8KeyRead>
     1d0:	0e 94 3f 02 	call	0x47e	; 0x47e <HLCD_vidWriteChar>
				 break;
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <APP_vidStart+0x4c>
				 }
				 default :
				 {
					 en_motorSel = EN_MOTOR_IDLE;
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					 break;
				 }
		 } 
	 }
	 
	  if (en_motorSel == EN_MOTOR_START)
     1dc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     1e0:	81 11       	cpse	r24, r1
     1e2:	20 c0       	rjmp	.+64     	; 0x224 <APP_vidStart+0x94>
	  {
		global_f64Dist = HULTRASONIC_u8Read();
     1e4:	0e 94 ad 04 	call	0x95a	; 0x95a <HULTRASONIC_u8Read>
     1e8:	60 93 d5 00 	sts	0x00D5, r22	; 0x8000d5 <global_f64Dist>
     1ec:	70 93 d6 00 	sts	0x00D6, r23	; 0x8000d6 <global_f64Dist+0x1>
     1f0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <global_f64Dist+0x2>
     1f4:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f8:	8f e2       	ldi	r24, 0x2F	; 47
     1fa:	95 e7       	ldi	r25, 0x75	; 117
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <APP_vidStart+0x6c>
     200:	00 c0       	rjmp	.+0      	; 0x202 <APP_vidStart+0x72>
     202:	00 00       	nop
		_delay_ms(15);
		if (flag3 == 0) {HLCD_ClrDisplay();  flag1 = 0; flag2 = 0; flag3 = 1; }		
     204:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <flag3>
     208:	81 11       	cpse	r24, r1
     20a:	09 c0       	rjmp	.+18     	; 0x21e <APP_vidStart+0x8e>
     20c:	0e 94 b9 02 	call	0x572	; 0x572 <HLCD_ClrDisplay>
     210:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <flag1>
     214:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <flag2>
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <flag3>
		APP_updateDirection();
     21e:	0e 94 b6 00 	call	0x16c	; 0x16c <APP_updateDirection>
     222:	08 95       	ret
		
		
		
		
	  }
	  else if (en_motorSel == EN_MOTOR_STOP)
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	b1 f4       	brne	.+44     	; 0x254 <APP_vidStart+0xc4>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     228:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <flag2>
     22c:	81 11       	cpse	r24, r1
     22e:	09 c0       	rjmp	.+18     	; 0x242 <APP_vidStart+0xb2>
     230:	0e 94 b9 02 	call	0x572	; 0x572 <HLCD_ClrDisplay>
     234:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <flag1>
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <flag2>
     23e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <flag3>
		  HLCD_gotoXY(0,0);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     24a:	8c e8       	ldi	r24, 0x8C	; 140
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <HLCD_WriteString>
     252:	08 95       	ret
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     254:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <flag1>
     258:	81 11       	cpse	r24, r1
     25a:	09 c0       	rjmp	.+18     	; 0x26e <APP_vidStart+0xde>
     25c:	0e 94 b9 02 	call	0x572	; 0x572 <HLCD_ClrDisplay>
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <flag1>
     266:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <flag2>
     26a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <flag3>
		  HLCD_gotoXY(0,0);
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     276:	8a e9       	ldi	r24, 0x9A	; 154
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <HLCD_WriteString>
     27e:	08 95       	ret

00000280 <HExtInt_enInit>:
		errorStatus = HEXTINT_NOK;
	}


	return errorStatus;
}
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	c8 2f       	mov	r28, r24
     286:	d6 2f       	mov	r29, r22
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	62 e0       	ldi	r22, 0x02	; 2
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	62 e0       	ldi	r22, 0x02	; 2
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     29c:	6d 2f       	mov	r22, r29
     29e:	8c 2f       	mov	r24, r28
     2a0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <HExtInt_enCBFInt0>:
     2ac:	00 97       	sbiw	r24, 0x00	; 0
     2ae:	21 f0       	breq	.+8      	; 0x2b8 <HExtInt_enCBFInt0+0xc>
     2b0:	0e 94 66 06 	call	0xccc	; 0xccc <MEXTINT_vidCallBackFuncInt0>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	08 95       	ret
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	08 95       	ret

000002bc <HExtInt0_enIntDisable>:

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     2bc:	0e 94 70 06 	call	0xce0	; 0xce0 <MEXTINT_vidDisableInterrupt>
     2c0:	08 95       	ret

000002c2 <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     2c2:	0e 94 74 06 	call	0xce8	; 0xce8 <MEXTINT_vidEnableInterrupt>
     2c6:	08 95       	ret

000002c8 <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	18 2f       	mov	r17, r24
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     2dc:	c8 2f       	mov	r28, r24
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	67 e0       	ldi	r22, 0x07	; 7
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     2e8:	c8 2b       	or	r28, r24
     2ea:	01 2f       	mov	r16, r17
     2ec:	02 95       	swap	r16
     2ee:	0f 70       	andi	r16, 0x0F	; 15
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	15 c0       	rjmp	.+42     	; 0x31e <HLCD_vidWritecmd+0x56>
     2f4:	ed 2f       	mov	r30, r29
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	40 2f       	mov	r20, r16
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	0d 2e       	mov	r0, r29
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <HLCD_vidWritecmd+0x3c>
     300:	55 95       	asr	r21
     302:	47 95       	ror	r20
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <HLCD_vidWritecmd+0x38>
     308:	41 70       	andi	r20, 0x01	; 1
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e8 58       	subi	r30, 0x88	; 136
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	61 81       	ldd	r22, Z+1	; 0x01
     314:	80 81       	ld	r24, Z
     316:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     31a:	c8 2b       	or	r28, r24
     31c:	df 5f       	subi	r29, 0xFF	; 255
     31e:	d4 30       	cpi	r29, 0x04	; 4
     320:	48 f3       	brcs	.-46     	; 0x2f4 <HLCD_vidWritecmd+0x2c>
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     32c:	c8 2b       	or	r28, r24
     32e:	89 ef       	ldi	r24, 0xF9	; 249
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <HLCD_vidWritecmd+0x6a>
     336:	00 c0       	rjmp	.+0      	; 0x338 <HLCD_vidWritecmd+0x70>
     338:	00 00       	nop
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     344:	c8 2b       	or	r28, r24
     346:	92 e4       	ldi	r25, 0x42	; 66
     348:	9a 95       	dec	r25
     34a:	f1 f7       	brne	.-4      	; 0x348 <HLCD_vidWritecmd+0x80>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <HLCD_vidWritecmd+0x86>
     34e:	1f 70       	andi	r17, 0x0F	; 15
     350:	d0 e0       	ldi	r29, 0x00	; 0
     352:	15 c0       	rjmp	.+42     	; 0x37e <HLCD_vidWritecmd+0xb6>
     354:	ed 2f       	mov	r30, r29
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	41 2f       	mov	r20, r17
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	0d 2e       	mov	r0, r29
     35e:	02 c0       	rjmp	.+4      	; 0x364 <HLCD_vidWritecmd+0x9c>
     360:	55 95       	asr	r21
     362:	47 95       	ror	r20
     364:	0a 94       	dec	r0
     366:	e2 f7       	brpl	.-8      	; 0x360 <HLCD_vidWritecmd+0x98>
     368:	41 70       	andi	r20, 0x01	; 1
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e8 58       	subi	r30, 0x88	; 136
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	61 81       	ldd	r22, Z+1	; 0x01
     374:	80 81       	ld	r24, Z
     376:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     37a:	c8 2b       	or	r28, r24
     37c:	df 5f       	subi	r29, 0xFF	; 255
     37e:	d4 30       	cpi	r29, 0x04	; 4
     380:	48 f3       	brcs	.-46     	; 0x354 <HLCD_vidWritecmd+0x8c>
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     38c:	c8 2b       	or	r28, r24
     38e:	e9 ef       	ldi	r30, 0xF9	; 249
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <HLCD_vidWritecmd+0xca>
     396:	00 c0       	rjmp	.+0      	; 0x398 <HLCD_vidWritecmd+0xd0>
     398:	00 00       	nop
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     3a4:	8c 2b       	or	r24, r28
     3a6:	e3 ef       	ldi	r30, 0xF3	; 243
     3a8:	f1 e0       	ldi	r31, 0x01	; 1
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <HLCD_vidWritecmd+0xe2>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <HLCD_vidWritecmd+0xe8>
     3b0:	00 00       	nop
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <HLCD_vidInit>:
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <HLCD_vidInit+0x24>
     3c6:	ed 2f       	mov	r30, r29
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	e8 58       	subi	r30, 0x88	; 136
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	61 81       	ldd	r22, Z+1	; 0x01
     3d6:	80 81       	ld	r24, Z
     3d8:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3dc:	c8 2b       	or	r28, r24
     3de:	df 5f       	subi	r29, 0xFF	; 255
     3e0:	d4 30       	cpi	r29, 0x04	; 4
     3e2:	88 f3       	brcs	.-30     	; 0x3c6 <HLCD_vidInit+0xa>
     3e4:	41 e0       	ldi	r20, 0x01	; 1
     3e6:	67 e0       	ldi	r22, 0x07	; 7
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3ee:	c8 2b       	or	r28, r24
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3fa:	c8 2b       	or	r28, r24
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     406:	c8 2b       	or	r28, r24
     408:	8f e0       	ldi	r24, 0x0F	; 15
     40a:	97 e2       	ldi	r25, 0x27	; 39
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     412:	00 00       	nop
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     41a:	c8 2b       	or	r28, r24
     41c:	e9 ef       	ldi	r30, 0xF9	; 249
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	31 97       	sbiw	r30, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     426:	00 00       	nop
     428:	88 e2       	ldi	r24, 0x28	; 40
     42a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     42e:	c8 2b       	or	r28, r24
     430:	89 ef       	ldi	r24, 0xF9	; 249
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     43a:	00 00       	nop
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     442:	c8 2b       	or	r28, r24
     444:	e7 ee       	ldi	r30, 0xE7	; 231
     446:	f3 e0       	ldi	r31, 0x03	; 3
     448:	31 97       	sbiw	r30, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop
     450:	86 e0       	ldi	r24, 0x06	; 6
     452:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     456:	c8 2b       	or	r28, r24
     458:	89 ef       	ldi	r24, 0xF9	; 249
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     462:	00 00       	nop
     464:	8c e0       	ldi	r24, 0x0C	; 12
     466:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     46a:	8c 2b       	or	r24, r28
     46c:	e9 ef       	ldi	r30, 0xF9	; 249
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     476:	00 00       	nop
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <HLCD_vidWriteChar>:
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	18 2f       	mov	r17, r24
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     492:	c8 2f       	mov	r28, r24
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	67 e0       	ldi	r22, 0x07	; 7
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     49e:	c8 2b       	or	r28, r24
     4a0:	01 2f       	mov	r16, r17
     4a2:	02 95       	swap	r16
     4a4:	0f 70       	andi	r16, 0x0F	; 15
     4a6:	d0 e0       	ldi	r29, 0x00	; 0
     4a8:	15 c0       	rjmp	.+42     	; 0x4d4 <HLCD_vidWriteChar+0x56>
     4aa:	ed 2f       	mov	r30, r29
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	40 2f       	mov	r20, r16
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0d 2e       	mov	r0, r29
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <HLCD_vidWriteChar+0x3c>
     4b6:	55 95       	asr	r21
     4b8:	47 95       	ror	r20
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <HLCD_vidWriteChar+0x38>
     4be:	41 70       	andi	r20, 0x01	; 1
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	e8 58       	subi	r30, 0x88	; 136
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	61 81       	ldd	r22, Z+1	; 0x01
     4ca:	80 81       	ld	r24, Z
     4cc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     4d0:	c8 2b       	or	r28, r24
     4d2:	df 5f       	subi	r29, 0xFF	; 255
     4d4:	d4 30       	cpi	r29, 0x04	; 4
     4d6:	48 f3       	brcs	.-46     	; 0x4aa <HLCD_vidWriteChar+0x2c>
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     4e2:	c8 2b       	or	r28, r24
     4e4:	89 ef       	ldi	r24, 0xF9	; 249
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <HLCD_vidWriteChar+0x6a>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <HLCD_vidWriteChar+0x70>
     4ee:	00 00       	nop
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     4fa:	c8 2b       	or	r28, r24
     4fc:	92 e4       	ldi	r25, 0x42	; 66
     4fe:	9a 95       	dec	r25
     500:	f1 f7       	brne	.-4      	; 0x4fe <HLCD_vidWriteChar+0x80>
     502:	00 c0       	rjmp	.+0      	; 0x504 <HLCD_vidWriteChar+0x86>
     504:	1f 70       	andi	r17, 0x0F	; 15
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	15 c0       	rjmp	.+42     	; 0x534 <HLCD_vidWriteChar+0xb6>
     50a:	ed 2f       	mov	r30, r29
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	41 2f       	mov	r20, r17
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	0d 2e       	mov	r0, r29
     514:	02 c0       	rjmp	.+4      	; 0x51a <HLCD_vidWriteChar+0x9c>
     516:	55 95       	asr	r21
     518:	47 95       	ror	r20
     51a:	0a 94       	dec	r0
     51c:	e2 f7       	brpl	.-8      	; 0x516 <HLCD_vidWriteChar+0x98>
     51e:	41 70       	andi	r20, 0x01	; 1
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	e8 58       	subi	r30, 0x88	; 136
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	61 81       	ldd	r22, Z+1	; 0x01
     52a:	80 81       	ld	r24, Z
     52c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     530:	c8 2b       	or	r28, r24
     532:	df 5f       	subi	r29, 0xFF	; 255
     534:	d4 30       	cpi	r29, 0x04	; 4
     536:	48 f3       	brcs	.-46     	; 0x50a <HLCD_vidWriteChar+0x8c>
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     542:	c8 2b       	or	r28, r24
     544:	e9 ef       	ldi	r30, 0xF9	; 249
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <HLCD_vidWriteChar+0xca>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <HLCD_vidWriteChar+0xd0>
     54e:	00 00       	nop
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     55a:	8c 2b       	or	r24, r28
     55c:	e3 ef       	ldi	r30, 0xF3	; 243
     55e:	f1 e0       	ldi	r31, 0x01	; 1
     560:	31 97       	sbiw	r30, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <HLCD_vidWriteChar+0xe2>
     564:	00 c0       	rjmp	.+0      	; 0x566 <HLCD_vidWriteChar+0xe8>
     566:	00 00       	nop
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <HLCD_ClrDisplay>:
     572:	cf 93       	push	r28
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     57a:	c8 2f       	mov	r28, r24
     57c:	87 ee       	ldi	r24, 0xE7	; 231
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <HLCD_ClrDisplay+0xe>
     584:	00 c0       	rjmp	.+0      	; 0x586 <HLCD_ClrDisplay+0x14>
     586:	00 00       	nop
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     58e:	8c 2b       	or	r24, r28
     590:	e7 ee       	ldi	r30, 0xE7	; 231
     592:	f3 e0       	ldi	r31, 0x03	; 3
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <HLCD_ClrDisplay+0x22>
     598:	00 c0       	rjmp	.+0      	; 0x59a <HLCD_ClrDisplay+0x28>
     59a:	00 00       	nop
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     5a0:	81 11       	cpse	r24, r1
     5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <HLCD_gotoXY+0x14>
     5a4:	60 31       	cpi	r22, 0x10	; 16
     5a6:	30 f4       	brcc	.+12     	; 0x5b4 <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     5a8:	86 2f       	mov	r24, r22
     5aa:	8f 70       	andi	r24, 0x0F	; 15
     5ac:	80 68       	ori	r24, 0x80	; 128
     5ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     5b2:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	41 f4       	brne	.+16     	; 0x5c8 <HLCD_gotoXY+0x28>
     5b8:	60 31       	cpi	r22, 0x10	; 16
     5ba:	40 f4       	brcc	.+16     	; 0x5cc <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     5bc:	86 2f       	mov	r24, r22
     5be:	8f 70       	andi	r24, 0x0F	; 15
     5c0:	80 6c       	ori	r24, 0xC0	; 192
     5c2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <HLCD_vidWritecmd>
     5c6:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     5c8:	85 e0       	ldi	r24, 0x05	; 5
     5ca:	08 95       	ret
     5cc:	85 e0       	ldi	r24, 0x05	; 5
	}
	return errorStatus;
}
     5ce:	08 95       	ret

000005d0 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     5e4:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     5e8:	0e 94 3f 02 	call	0x47e	; 0x47e <HLCD_vidWriteChar>
     5ec:	18 2b       	or	r17, r24
		string = str[++count];
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	f7 01       	movw	r30, r14
     5f2:	ec 0f       	add	r30, r28
     5f4:	fd 1f       	adc	r31, r29
     5f6:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     5f8:	81 11       	cpse	r24, r1
     5fa:	f6 cf       	rjmp	.-20     	; 0x5e8 <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     5fc:	81 2f       	mov	r24, r17
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	08 95       	ret

0000060a <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	a9 f1       	breq	.+106    	; 0x67c <KEYPAD_init+0x72>
     612:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     614:	69 81       	ldd	r22, Y+1	; 0x01
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	88 81       	ld	r24, Y
     61a:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     61e:	6b 81       	ldd	r22, Y+3	; 0x03
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     628:	6d 81       	ldd	r22, Y+5	; 0x05
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     632:	69 81       	ldd	r22, Y+1	; 0x01
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	88 81       	ld	r24, Y
     638:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     63c:	6b 81       	ldd	r22, Y+3	; 0x03
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     646:	6d 81       	ldd	r22, Y+5	; 0x05
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	8c 81       	ldd	r24, Y+4	; 0x04
     64c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     650:	6f 81       	ldd	r22, Y+7	; 0x07
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     65a:	69 85       	ldd	r22, Y+9	; 0x09
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	88 85       	ldd	r24, Y+8	; 0x08
     660:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     664:	6b 85       	ldd	r22, Y+11	; 0x0b
     666:	41 e0       	ldi	r20, 0x01	; 1
     668:	8a 85       	ldd	r24, Y+10	; 0x0a
     66a:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     66e:	6d 85       	ldd	r22, Y+13	; 0x0d
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	8c 85       	ldd	r24, Y+12	; 0x0c
     674:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	01 c0       	rjmp	.+2      	; 0x67e <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     67c:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     69a:	07 e6       	ldi	r16, 0x67	; 103
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	f8 01       	movw	r30, r16
     6a0:	67 81       	ldd	r22, Z+7	; 0x07
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	86 81       	ldd	r24, Z+6	; 0x06
     6a6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     6aa:	f8 01       	movw	r30, r16
     6ac:	61 85       	ldd	r22, Z+9	; 0x09
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	80 85       	ldd	r24, Z+8	; 0x08
     6b2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     6b6:	f8 01       	movw	r30, r16
     6b8:	63 85       	ldd	r22, Z+11	; 0x0b
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	82 85       	ldd	r24, Z+10	; 0x0a
     6be:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     6c2:	f8 01       	movw	r30, r16
     6c4:	65 85       	ldd	r22, Z+13	; 0x0d
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	84 85       	ldd	r24, Z+12	; 0x0c
     6ca:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     6ce:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     6d0:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     6d2:	42 c0       	rjmp	.+132    	; 0x758 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     6d4:	e7 e6       	ldi	r30, 0x67	; 103
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	67 81       	ldd	r22, Z+7	; 0x07
     6da:	60 0f       	add	r22, r16
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	86 81       	ldd	r24, Z+6	; 0x06
     6e0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		for(j=0;j<3;j++)
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	2d c0       	rjmp	.+90     	; 0x742 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     6e8:	e7 e6       	ldi	r30, 0x67	; 103
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	61 81       	ldd	r22, Z+1	; 0x01
     6ee:	61 0f       	add	r22, r17
     6f0:	ae 01       	movw	r20, r28
     6f2:	4f 5f       	subi	r20, 0xFF	; 255
     6f4:	5f 4f       	sbci	r21, 0xFF	; 255
     6f6:	80 81       	ld	r24, Z
     6f8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_readPIN>
			if(value==0)
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	81 11       	cpse	r24, r1
     700:	1f c0       	rjmp	.+62     	; 0x740 <KEYPAD_read+0xbc>
     702:	0a c0       	rjmp	.+20     	; 0x718 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     704:	e7 e6       	ldi	r30, 0x67	; 103
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	61 81       	ldd	r22, Z+1	; 0x01
     70a:	61 0f       	add	r22, r17
     70c:	ae 01       	movw	r20, r28
     70e:	4f 5f       	subi	r20, 0xFF	; 255
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	80 81       	ld	r24, Z
     714:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 23       	and	r24, r24
     71c:	99 f3       	breq	.-26     	; 0x704 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     71e:	80 2f       	mov	r24, r16
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	e8 0f       	add	r30, r24
     72a:	f9 1f       	adc	r31, r25
     72c:	e8 55       	subi	r30, 0x58	; 88
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	e1 0f       	add	r30, r17
     732:	f1 1d       	adc	r31, r1
     734:	80 81       	ld	r24, Z
     736:	f7 01       	movw	r30, r14
     738:	80 83       	st	Z, r24
				flag=1;
     73a:	dd 24       	eor	r13, r13
     73c:	d3 94       	inc	r13
				
				break;
     73e:	03 c0       	rjmp	.+6      	; 0x746 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     740:	1f 5f       	subi	r17, 0xFF	; 255
     742:	13 30       	cpi	r17, 0x03	; 3
     744:	88 f2       	brcs	.-94     	; 0x6e8 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     746:	e7 e6       	ldi	r30, 0x67	; 103
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	67 81       	ldd	r22, Z+7	; 0x07
     74c:	60 0f       	add	r22, r16
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	86 81       	ldd	r24, Z+6	; 0x06
     752:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     756:	0f 5f       	subi	r16, 0xFF	; 255
     758:	04 30       	cpi	r16, 0x04	; 4
     75a:	08 f4       	brcc	.+2      	; 0x75e <KEYPAD_read+0xda>
     75c:	bb cf       	rjmp	.-138    	; 0x6d4 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	df 16       	cp	r13, r31
     762:	19 f0       	breq	.+6      	; 0x76a <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     764:	8e e4       	ldi	r24, 0x4E	; 78
     766:	f7 01       	movw	r30, r14
     768:	80 83       	st	Z, r24
		return ret_val;
	}
	
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0f 90       	pop	r0
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	08 95       	ret

0000077e <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	91 f0       	breq	.+36     	; 0x7ac <TIMER_Manager_init+0x2e>
     788:	fc 01       	movw	r30, r24
     78a:	20 81       	ld	r18, Z
     78c:	23 30       	cpi	r18, 0x03	; 3
     78e:	80 f4       	brcc	.+32     	; 0x7b0 <TIMER_Manager_init+0x32>
     790:	21 81       	ldd	r18, Z+1	; 0x01
     792:	2a 30       	cpi	r18, 0x0A	; 10
     794:	78 f4       	brcc	.+30     	; 0x7b4 <TIMER_Manager_init+0x36>
     796:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     798:	0e 94 50 07 	call	0xea0	; 0xea0 <TIMER_init>
     79c:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     79e:	68 81       	ld	r22, Y
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <TIMER_setCallBack>
     7a8:	81 2b       	or	r24, r17
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <TIMER_Manager_init+0x38>
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <TIMER_Manager_init+0x38>
     7b4:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	51 f0       	breq	.+20     	; 0x7d6 <TIMER_Manager_start+0x18>
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 81       	ld	r18, Z
     7c6:	23 30       	cpi	r18, 0x03	; 3
     7c8:	40 f4       	brcc	.+16     	; 0x7da <TIMER_Manager_start+0x1c>
     7ca:	21 81       	ldd	r18, Z+1	; 0x01
     7cc:	2a 30       	cpi	r18, 0x0A	; 10
     7ce:	38 f4       	brcc	.+14     	; 0x7de <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
     7d0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TIMER_start>
     7d4:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	08 95       	ret
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	08 95       	ret
     7de:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
     7e0:	08 95       	ret

000007e2 <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	18 f4       	brcc	.+6      	; 0x7ec <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
     7e6:	0e 94 25 09 	call	0x124a	; 0x124a <TIMER_stop>
     7ea:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     7ec:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     7ee:	08 95       	ret

000007f0 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	63 e0       	ldi	r22, 0x03	; 3
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	8a e1       	ldi	r24, 0x1A	; 26
     7fc:	8a 95       	dec	r24
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <HULTRASONIC_vidTrigger+0xc>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	63 e0       	ldi	r22, 0x03	; 3
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     80c:	08 95       	ret

0000080e <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     80e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <g_v_u16_ovfCounts>
     812:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <g_v_u16_ovfCounts+0x1>
     816:	a0 91 c3 00 	lds	r26, 0x00C3	; 0x8000c3 <g_v_u16_ovfCounts+0x2>
     81a:	b0 91 c4 00 	lds	r27, 0x00C4	; 0x8000c4 <g_v_u16_ovfCounts+0x3>
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	a1 1d       	adc	r26, r1
     822:	b1 1d       	adc	r27, r1
     824:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <g_v_u16_ovfCounts>
     828:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <g_v_u16_ovfCounts+0x1>
     82c:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <g_v_u16_ovfCounts+0x2>
     830:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <g_v_u16_ovfCounts+0x3>
     834:	08 95       	ret

00000836 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
     836:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <g_v_u8_flag>
     83a:	81 11       	cpse	r24, r1
     83c:	14 c0       	rjmp	.+40     	; 0x866 <__stack+0x7>
	{
		MTIMER_vidResetTCNT();
     83e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
		g_v_u8_flag = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
     850:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <g_v_u16_ovfCounts>
     854:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <g_v_u16_ovfCounts+0x1>
     858:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <g_v_u16_ovfCounts+0x2>
     85c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
     860:	0e 94 ba 09 	call	0x1374	; 0x1374 <vidTimer2_start>
     864:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
     866:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <g_v_u8_flag>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
     86e:	56 c0       	rjmp	.+172    	; 0x91c <__stack+0xbd>
	{
		vidTimer2_stop();
     870:	0e 94 c4 09 	call	0x1388	; 0x1388 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
     874:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MTIMER_u8GetTCNT>
     878:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
     87c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <g_v_u16_ovfCounts>
     880:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <g_v_u16_ovfCounts+0x1>
     884:	a0 91 c3 00 	lds	r26, 0x00C3	; 0x8000c3 <g_v_u16_ovfCounts+0x2>
     888:	b0 91 c4 00 	lds	r27, 0x00C4	; 0x8000c4 <g_v_u16_ovfCounts+0x3>
     88c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <g_v_u16_ovf>
     890:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <g_v_u16_ovf+0x1>
     894:	a0 93 dc 00 	sts	0x00DC, r26	; 0x8000dc <g_v_u16_ovf+0x2>
     898:	b0 93 dd 00 	sts	0x00DD, r27	; 0x8000dd <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
     89c:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <g_v_u8_cap>
     8a0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <g_v_u16_ovf>
     8a4:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <g_v_u16_ovf+0x1>
     8a8:	a0 91 dc 00 	lds	r26, 0x00DC	; 0x8000dc <g_v_u16_ovf+0x2>
     8ac:	b0 91 dd 00 	lds	r27, 0x00DD	; 0x8000dd <g_v_u16_ovf+0x3>
     8b0:	ba 2f       	mov	r27, r26
     8b2:	a9 2f       	mov	r26, r25
     8b4:	98 2f       	mov	r25, r24
     8b6:	88 27       	eor	r24, r24
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	62 0f       	add	r22, r18
     8be:	71 1d       	adc	r23, r1
     8c0:	81 1d       	adc	r24, r1
     8c2:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = ((float64_t)global_u32Ticks / 932.95)-2.0;
     8c4:	0e 94 ed 0a 	call	0x15da	; 0x15da <__floatunsisf>
     8c8:	2d ec       	ldi	r18, 0xCD	; 205
     8ca:	3c e3       	ldi	r19, 0x3C	; 60
     8cc:	49 e6       	ldi	r20, 0x69	; 105
     8ce:	54 e4       	ldi	r21, 0x44	; 68
     8d0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__divsf3>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e4       	ldi	r21, 0x40	; 64
     8dc:	0e 94 0e 0a 	call	0x141c	; 0x141c <__subsf3>
     8e0:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <global_f64distance>
     8e4:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <global_f64distance+0x1>
     8e8:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <global_f64distance+0x2>
     8ec:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
     8f0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <g_v_u16_ovf>
     8f4:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <g_v_u16_ovf+0x1>
     8f8:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <g_v_u16_ovf+0x2>
     8fc:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <g_v_u16_ovf+0x3>
     900:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <g_v_u16_ovfCounts>
     904:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <g_v_u16_ovfCounts+0x1>
     908:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <g_v_u16_ovfCounts+0x2>
     90c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <g_v_u16_ovfCounts+0x3>
     910:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
     914:	63 e0       	ldi	r22, 0x03	; 3
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
     91c:	08 95       	ret

0000091e <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
     91e:	41 e0       	ldi	r20, 0x01	; 1
     920:	63 e0       	ldi	r22, 0x03	; 3
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	62 e0       	ldi	r22, 0x02	; 2
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 6f 09 	call	0x12de	; 0x12de <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 9e 09 	call	0x133c	; 0x133c <u8Timer2_setPrescallar>
	(void) vidTimer2_OvfIrqEnable();
     950:	0e 94 b2 09 	call	0x1364	; 0x1364 <vidTimer2_OvfIrqEnable>

	 MTIMER_vidEnableGlobalInterrupt();
     954:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MTIMER_vidEnableGlobalInterrupt>
     958:	08 95       	ret

0000095a <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
     95a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
     95e:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <global_f64distance>
     962:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <global_f64distance+0x1>
     966:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <global_f64distance+0x2>
     96a:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <global_f64distance+0x3>
}
     96e:	08 95       	ret

00000970 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
     970:	0e 94 cb 09 	call	0x1396	; 0x1396 <vidTimer2_setcbf_OVF>
     974:	08 95       	ret

00000976 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
     976:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <MEXTINT_vidCallBackFunc>
     97a:	08 95       	ret

0000097c <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
     97c:	0e 94 97 00 	call	0x12e	; 0x12e <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
     980:	0e 94 c8 00 	call	0x190	; 0x190 <APP_vidStart>
     984:	fd cf       	rjmp	.-6      	; 0x980 <main+0x4>

00000986 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     986:	68 30       	cpi	r22, 0x08	; 8
     988:	a0 f5       	brcc	.+104    	; 0x9f2 <DIO_init+0x6c>
	{
		if (port == porta)
     98a:	81 11       	cpse	r24, r1
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     98e:	8a b3       	in	r24, 0x1a	; 26
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_init+0x12>
     994:	44 0f       	add	r20, r20
     996:	55 1f       	adc	r21, r21
     998:	6a 95       	dec	r22
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_init+0xe>
     99c:	48 2b       	or	r20, r24
     99e:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
		}
		else if (port == portb)
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	59 f4       	brne	.+22     	; 0x9be <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     9a8:	87 b3       	in	r24, 0x17	; 23
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_init+0x2c>
     9ae:	44 0f       	add	r20, r20
     9b0:	55 1f       	adc	r21, r21
     9b2:	6a 95       	dec	r22
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_init+0x28>
     9b6:	48 2b       	or	r20, r24
     9b8:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	08 95       	ret
		}
		else if (port == portc)
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	59 f4       	brne	.+22     	; 0x9d8 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     9c2:	84 b3       	in	r24, 0x14	; 20
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_init+0x46>
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	6a 95       	dec	r22
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_init+0x42>
     9d0:	48 2b       	or	r20, r24
     9d2:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	08 95       	ret
		}
		else if (port == portd)
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	69 f4       	brne	.+26     	; 0x9f6 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     9dc:	81 b3       	in	r24, 0x11	; 17
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <DIO_init+0x60>
     9e2:	44 0f       	add	r20, r20
     9e4:	55 1f       	adc	r21, r21
     9e6:	6a 95       	dec	r22
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <DIO_init+0x5c>
     9ea:	48 2b       	or	r20, r24
     9ec:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     9f8:	08 95       	ret

000009fa <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     9fa:	68 30       	cpi	r22, 0x08	; 8
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <DIO_writePIN+0x6>
     9fe:	74 c0       	rjmp	.+232    	; 0xae8 <DIO_writePIN+0xee>
	{
		if (port == porta)
     a00:	81 11       	cpse	r24, r1
     a02:	1b c0       	rjmp	.+54     	; 0xa3a <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     a04:	41 30       	cpi	r20, 0x01	; 1
     a06:	61 f4       	brne	.+24     	; 0xa20 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     a08:	2b b3       	in	r18, 0x1b	; 27
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_writePIN+0x1a>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	6a 95       	dec	r22
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_writePIN+0x16>
     a18:	82 2b       	or	r24, r18
     a1a:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     a20:	2b b3       	in	r18, 0x1b	; 27
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_writePIN+0x32>
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	6a 95       	dec	r22
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_writePIN+0x2e>
     a30:	80 95       	com	r24
     a32:	82 23       	and	r24, r18
     a34:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	08 95       	ret
		}
		else if (port == portb)
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	d9 f4       	brne	.+54     	; 0xa74 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     a3e:	41 30       	cpi	r20, 0x01	; 1
     a40:	61 f4       	brne	.+24     	; 0xa5a <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     a42:	28 b3       	in	r18, 0x18	; 24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_writePIN+0x54>
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	6a 95       	dec	r22
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_writePIN+0x50>
     a52:	82 2b       	or	r24, r18
     a54:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     a5a:	28 b3       	in	r18, 0x18	; 24
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <DIO_writePIN+0x6c>
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	6a 95       	dec	r22
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <DIO_writePIN+0x68>
     a6a:	80 95       	com	r24
     a6c:	82 23       	and	r24, r18
     a6e:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret
		}
		else if (port == portc)
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	d9 f4       	brne	.+54     	; 0xaae <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     a78:	41 30       	cpi	r20, 0x01	; 1
     a7a:	61 f4       	brne	.+24     	; 0xa94 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     a7c:	25 b3       	in	r18, 0x15	; 21
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_writePIN+0x8e>
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	6a 95       	dec	r22
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_writePIN+0x8a>
     a8c:	82 2b       	or	r24, r18
     a8e:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     a94:	25 b3       	in	r18, 0x15	; 21
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_writePIN+0xa6>
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	6a 95       	dec	r22
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_writePIN+0xa2>
     aa4:	80 95       	com	r24
     aa6:	82 23       	and	r24, r18
     aa8:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
		}
		else if (port == portd)
     aae:	83 30       	cpi	r24, 0x03	; 3
     ab0:	e9 f4       	brne	.+58     	; 0xaec <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     ab2:	41 30       	cpi	r20, 0x01	; 1
     ab4:	61 f4       	brne	.+24     	; 0xace <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     ab6:	22 b3       	in	r18, 0x12	; 18
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_writePIN+0xc8>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	6a 95       	dec	r22
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_writePIN+0xc4>
     ac6:	82 2b       	or	r24, r18
     ac8:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     ace:	22 b3       	in	r18, 0x12	; 18
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_writePIN+0xe0>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	6a 95       	dec	r22
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_writePIN+0xdc>
     ade:	80 95       	com	r24
     ae0:	82 23       	and	r24, r18
     ae2:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     aec:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     aee:	08 95       	ret

00000af0 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     af0:	68 30       	cpi	r22, 0x08	; 8
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <DIO_readPIN+0x6>
     af4:	64 c0       	rjmp	.+200    	; 0xbbe <DIO_readPIN+0xce>
	{
		if (port == porta)
     af6:	81 11       	cpse	r24, r1
     af8:	17 c0       	rjmp	.+46     	; 0xb28 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     afa:	79 b3       	in	r23, 0x19	; 25
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9c 01       	movw	r18, r24
     b02:	06 2e       	mov	r0, r22
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_readPIN+0x1a>
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_readPIN+0x16>
     b0e:	87 2f       	mov	r24, r23
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 23       	and	r24, r18
     b14:	93 23       	and	r25, r19
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_readPIN+0x2c>
     b18:	96 95       	lsr	r25
     b1a:	87 95       	ror	r24
     b1c:	6a 95       	dec	r22
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_readPIN+0x28>
     b20:	fa 01       	movw	r30, r20
     b22:	80 83       	st	Z, r24
			return DIO_E_OK;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	08 95       	ret
		}
		else if (port == portb)
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	b9 f4       	brne	.+46     	; 0xb5a <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     b2c:	76 b3       	in	r23, 0x16	; 22
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9c 01       	movw	r18, r24
     b34:	06 2e       	mov	r0, r22
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <DIO_readPIN+0x4c>
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	0a 94       	dec	r0
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <DIO_readPIN+0x48>
     b40:	87 2f       	mov	r24, r23
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	82 23       	and	r24, r18
     b46:	93 23       	and	r25, r19
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <DIO_readPIN+0x5e>
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	6a 95       	dec	r22
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <DIO_readPIN+0x5a>
     b52:	fa 01       	movw	r30, r20
     b54:	80 83       	st	Z, r24
			return DIO_E_OK;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	08 95       	ret
		}
		else if (port == portc)
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	b9 f4       	brne	.+46     	; 0xb8c <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     b5e:	73 b3       	in	r23, 0x13	; 19
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9c 01       	movw	r18, r24
     b66:	06 2e       	mov	r0, r22
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_readPIN+0x7e>
     b6a:	22 0f       	add	r18, r18
     b6c:	33 1f       	adc	r19, r19
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_readPIN+0x7a>
     b72:	87 2f       	mov	r24, r23
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	82 23       	and	r24, r18
     b78:	93 23       	and	r25, r19
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_readPIN+0x90>
     b7c:	96 95       	lsr	r25
     b7e:	87 95       	ror	r24
     b80:	6a 95       	dec	r22
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_readPIN+0x8c>
     b84:	fa 01       	movw	r30, r20
     b86:	80 83       	st	Z, r24
			return DIO_E_OK;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	08 95       	ret
		}
		else if (port == portd)
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	c9 f4       	brne	.+50     	; 0xbc2 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     b90:	70 b3       	in	r23, 0x10	; 16
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9c 01       	movw	r18, r24
     b98:	06 2e       	mov	r0, r22
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_readPIN+0xb0>
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_readPIN+0xac>
     ba4:	87 2f       	mov	r24, r23
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 23       	and	r24, r18
     baa:	93 23       	and	r25, r19
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_readPIN+0xc2>
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	6a 95       	dec	r22
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_readPIN+0xbe>
     bb6:	fa 01       	movw	r30, r20
     bb8:	80 83       	st	Z, r24
			return DIO_E_OK;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     bc2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     bc4:	08 95       	ret

00000bc6 <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <vidExtInt_init+0x6>
     bca:	78 c0       	rjmp	.+240    	; 0xcbc <vidExtInt_init+0xf6>
     bcc:	64 30       	cpi	r22, 0x04	; 4
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <vidExtInt_init+0xc>
     bd0:	77 c0       	rjmp	.+238    	; 0xcc0 <vidExtInt_init+0xfa>
     bd2:	81 11       	cpse	r24, r1
     bd4:	28 c0       	rjmp	.+80     	; 0xc26 <vidExtInt_init+0x60>
     bd6:	61 30       	cpi	r22, 0x01	; 1
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <vidExtInt_init+0x30>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <vidExtInt_init+0x20>
     bdc:	62 30       	cpi	r22, 0x02	; 2
     bde:	99 f0       	breq	.+38     	; 0xc06 <vidExtInt_init+0x40>
     be0:	63 30       	cpi	r22, 0x03	; 3
     be2:	c9 f0       	breq	.+50     	; 0xc16 <vidExtInt_init+0x50>
     be4:	6f c0       	rjmp	.+222    	; 0xcc4 <vidExtInt_init+0xfe>
     be6:	85 b7       	in	r24, 0x35	; 53
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	85 bf       	out	0x35, r24	; 53
     bec:	85 b7       	in	r24, 0x35	; 53
     bee:	8d 7f       	andi	r24, 0xFD	; 253
     bf0:	85 bf       	out	0x35, r24	; 53
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	08 95       	ret
     bf6:	85 b7       	in	r24, 0x35	; 53
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	85 bf       	out	0x35, r24	; 53
     bfc:	85 b7       	in	r24, 0x35	; 53
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
     c00:	85 bf       	out	0x35, r24	; 53
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	08 95       	ret
     c06:	85 b7       	in	r24, 0x35	; 53
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	85 bf       	out	0x35, r24	; 53
     c0c:	85 b7       	in	r24, 0x35	; 53
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	85 bf       	out	0x35, r24	; 53
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
     c16:	85 b7       	in	r24, 0x35	; 53
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	85 bf       	out	0x35, r24	; 53
     c1c:	85 b7       	in	r24, 0x35	; 53
     c1e:	82 60       	ori	r24, 0x02	; 2
     c20:	85 bf       	out	0x35, r24	; 53
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	08 95       	ret
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	81 f5       	brne	.+96     	; 0xc8a <vidExtInt_init+0xc4>
     c2a:	61 30       	cpi	r22, 0x01	; 1
     c2c:	71 f0       	breq	.+28     	; 0xc4a <vidExtInt_init+0x84>
     c2e:	28 f0       	brcs	.+10     	; 0xc3a <vidExtInt_init+0x74>
     c30:	62 30       	cpi	r22, 0x02	; 2
     c32:	99 f0       	breq	.+38     	; 0xc5a <vidExtInt_init+0x94>
     c34:	63 30       	cpi	r22, 0x03	; 3
     c36:	c9 f0       	breq	.+50     	; 0xc6a <vidExtInt_init+0xa4>
     c38:	20 c0       	rjmp	.+64     	; 0xc7a <vidExtInt_init+0xb4>
     c3a:	85 b7       	in	r24, 0x35	; 53
     c3c:	8b 7f       	andi	r24, 0xFB	; 251
     c3e:	85 bf       	out	0x35, r24	; 53
     c40:	85 b7       	in	r24, 0x35	; 53
     c42:	87 7f       	andi	r24, 0xF7	; 247
     c44:	85 bf       	out	0x35, r24	; 53
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	19 c0       	rjmp	.+50     	; 0xc7c <vidExtInt_init+0xb6>
     c4a:	85 b7       	in	r24, 0x35	; 53
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	85 bf       	out	0x35, r24	; 53
     c50:	85 b7       	in	r24, 0x35	; 53
     c52:	87 7f       	andi	r24, 0xF7	; 247
     c54:	85 bf       	out	0x35, r24	; 53
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	11 c0       	rjmp	.+34     	; 0xc7c <vidExtInt_init+0xb6>
     c5a:	85 b7       	in	r24, 0x35	; 53
     c5c:	8b 7f       	andi	r24, 0xFB	; 251
     c5e:	85 bf       	out	0x35, r24	; 53
     c60:	85 b7       	in	r24, 0x35	; 53
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	85 bf       	out	0x35, r24	; 53
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	09 c0       	rjmp	.+18     	; 0xc7c <vidExtInt_init+0xb6>
     c6a:	85 b7       	in	r24, 0x35	; 53
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	85 bf       	out	0x35, r24	; 53
     c70:	85 b7       	in	r24, 0x35	; 53
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	85 bf       	out	0x35, r24	; 53
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <vidExtInt_init+0xb6>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	9b b7       	in	r25, 0x3b	; 59
     c7e:	90 68       	ori	r25, 0x80	; 128
     c80:	9b bf       	out	0x3b, r25	; 59
     c82:	9a b7       	in	r25, 0x3a	; 58
     c84:	90 68       	ori	r25, 0x80	; 128
     c86:	9a bf       	out	0x3a, r25	; 58
     c88:	08 95       	ret
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	e9 f4       	brne	.+58     	; 0xcc8 <vidExtInt_init+0x102>
     c8e:	62 30       	cpi	r22, 0x02	; 2
     c90:	19 f0       	breq	.+6      	; 0xc98 <vidExtInt_init+0xd2>
     c92:	63 30       	cpi	r22, 0x03	; 3
     c94:	31 f0       	breq	.+12     	; 0xca2 <vidExtInt_init+0xdc>
     c96:	0a c0       	rjmp	.+20     	; 0xcac <vidExtInt_init+0xe6>
     c98:	84 b7       	in	r24, 0x34	; 52
     c9a:	8f 7b       	andi	r24, 0xBF	; 191
     c9c:	84 bf       	out	0x34, r24	; 52
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <vidExtInt_init+0xe8>
     ca2:	84 b7       	in	r24, 0x34	; 52
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	84 bf       	out	0x34, r24	; 52
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	01 c0       	rjmp	.+2      	; 0xcae <vidExtInt_init+0xe8>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	9b b7       	in	r25, 0x3b	; 59
     cb0:	90 62       	ori	r25, 0x20	; 32
     cb2:	9b bf       	out	0x3b, r25	; 59
     cb4:	9a b7       	in	r25, 0x3a	; 58
     cb6:	90 62       	ori	r25, 0x20	; 32
     cb8:	9a bf       	out	0x3a, r25	; 58
     cba:	08 95       	ret
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	08 95       	ret
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret

00000ccc <MEXTINT_vidCallBackFuncInt0>:
     ccc:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <callBackFuncInt0+0x1>
     cd0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <callBackFuncInt0>
     cd4:	08 95       	ret

00000cd6 <MEXTINT_vidCallBackFunc>:
     cd6:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <callBack+0x1>
     cda:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <callBack>
     cde:	08 95       	ret

00000ce0 <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
     ce0:	8b b7       	in	r24, 0x3b	; 59
     ce2:	8f 7b       	andi	r24, 0xBF	; 191
     ce4:	8b bf       	out	0x3b, r24	; 59
     ce6:	08 95       	ret

00000ce8 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
     ce8:	8a b7       	in	r24, 0x3a	; 58
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
     cee:	8b b7       	in	r24, 0x3b	; 59
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	8b bf       	out	0x3b, r24	; 59
     cf4:	08 95       	ret

00000cf6 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
	callBackFuncInt0();
     d18:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <callBackFuncInt0>
     d1c:	f0 91 ca 00 	lds	r31, 0x00CA	; 0x8000ca <callBackFuncInt0+0x1>
     d20:	09 95       	icall
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_2>:

ISR(INT1_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
	callBackFunc();
     d66:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <callBackFunc>
     d6a:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <callBackFunc+0x1>
     d6e:	09 95       	icall
}
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <__vector_3>:

ISR(INT2_vect)
{
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
	callBack();
     db4:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <callBack>
     db8:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <callBack+0x1>
     dbc:	09 95       	icall
}
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <sg_Timer0_callBackPtr>
     e06:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <sg_Timer0_callBackPtr+0x1>
     e0a:	89 2b       	or	r24, r25
     e0c:	41 f0       	breq	.+16     	; 0xe1e <__vector_11+0x3e>
     e0e:	88 b7       	in	r24, 0x38	; 56
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	88 bf       	out	0x38, r24	; 56
     e14:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <sg_Timer0_callBackPtr>
     e18:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <sg_Timer0_callBackPtr+0x1>
     e1c:	09 95       	icall
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_9>:
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <sg_Timer1_callBackPtr>
     e66:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <sg_Timer1_callBackPtr+0x1>
     e6a:	89 2b       	or	r24, r25
     e6c:	41 f0       	breq	.+16     	; 0xe7e <__vector_9+0x3e>
     e6e:	88 b7       	in	r24, 0x38	; 56
     e70:	8b 7f       	andi	r24, 0xFB	; 251
     e72:	88 bf       	out	0x38, r24	; 56
     e74:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <sg_Timer1_callBackPtr>
     e78:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <sg_Timer1_callBackPtr+0x1>
     e7c:	09 95       	icall
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <TIMER_init>:
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	09 f4       	brne	.+2      	; 0xea6 <TIMER_init+0x6>
     ea4:	78 c0       	rjmp	.+240    	; 0xf96 <TIMER_init+0xf6>
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 81       	ld	r18, Z
     eaa:	23 30       	cpi	r18, 0x03	; 3
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <TIMER_init+0x10>
     eae:	75 c0       	rjmp	.+234    	; 0xf9a <TIMER_init+0xfa>
     eb0:	31 81       	ldd	r19, Z+1	; 0x01
     eb2:	3a 30       	cpi	r19, 0x0A	; 10
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <TIMER_init+0x18>
     eb6:	73 c0       	rjmp	.+230    	; 0xf9e <TIMER_init+0xfe>
     eb8:	21 30       	cpi	r18, 0x01	; 1
     eba:	19 f1       	breq	.+70     	; 0xf02 <TIMER_init+0x62>
     ebc:	20 f0       	brcs	.+8      	; 0xec6 <TIMER_init+0x26>
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	09 f4       	brne	.+2      	; 0xec4 <TIMER_init+0x24>
     ec2:	50 c0       	rjmp	.+160    	; 0xf64 <TIMER_init+0xc4>
     ec4:	6e c0       	rjmp	.+220    	; 0xfa2 <TIMER_init+0x102>
     ec6:	12 be       	out	0x32, r1	; 50
     ec8:	13 be       	out	0x33, r1	; 51
     eca:	1c be       	out	0x3c, r1	; 60
     ecc:	fc 01       	movw	r30, r24
     ece:	22 81       	ldd	r18, Z+2	; 0x02
     ed0:	22 bf       	out	0x32, r18	; 50
     ed2:	23 b7       	in	r18, 0x33	; 51
     ed4:	20 68       	ori	r18, 0x80	; 128
     ed6:	23 bf       	out	0x33, r18	; 51
     ed8:	23 b7       	in	r18, 0x33	; 51
     eda:	2f 7b       	andi	r18, 0xBF	; 191
     edc:	23 bf       	out	0x33, r18	; 51
     ede:	23 b7       	in	r18, 0x33	; 51
     ee0:	27 7f       	andi	r18, 0xF7	; 247
     ee2:	23 bf       	out	0x33, r18	; 51
     ee4:	23 b7       	in	r18, 0x33	; 51
     ee6:	2f 7e       	andi	r18, 0xEF	; 239
     ee8:	23 bf       	out	0x33, r18	; 51
     eea:	23 b7       	in	r18, 0x33	; 51
     eec:	2f 7d       	andi	r18, 0xDF	; 223
     eee:	23 bf       	out	0x33, r18	; 51
     ef0:	84 81       	ldd	r24, Z+4	; 0x04
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <TIMER_init+0x58>
     ef6:	57 c0       	rjmp	.+174    	; 0xfa6 <TIMER_init+0x106>
     ef8:	89 b7       	in	r24, 0x39	; 57
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	89 bf       	out	0x39, r24	; 57
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret
     f02:	1c bc       	out	0x2c, r1	; 44
     f04:	1d bc       	out	0x2d, r1	; 45
     f06:	1f bc       	out	0x2f, r1	; 47
     f08:	1e bc       	out	0x2e, r1	; 46
     f0a:	1b bc       	out	0x2b, r1	; 43
     f0c:	1a bc       	out	0x2a, r1	; 42
     f0e:	fc 01       	movw	r30, r24
     f10:	22 81       	ldd	r18, Z+2	; 0x02
     f12:	33 81       	ldd	r19, Z+3	; 0x03
     f14:	3d bd       	out	0x2d, r19	; 45
     f16:	2c bd       	out	0x2c, r18	; 44
     f18:	2f b5       	in	r18, 0x2f	; 47
     f1a:	28 60       	ori	r18, 0x08	; 8
     f1c:	2f bd       	out	0x2f, r18	; 47
     f1e:	2f b5       	in	r18, 0x2f	; 47
     f20:	24 60       	ori	r18, 0x04	; 4
     f22:	2f bd       	out	0x2f, r18	; 47
     f24:	2f b5       	in	r18, 0x2f	; 47
     f26:	2e 7f       	andi	r18, 0xFE	; 254
     f28:	2f bd       	out	0x2f, r18	; 47
     f2a:	2f b5       	in	r18, 0x2f	; 47
     f2c:	2d 7f       	andi	r18, 0xFD	; 253
     f2e:	2f bd       	out	0x2f, r18	; 47
     f30:	2e b5       	in	r18, 0x2e	; 46
     f32:	2f 7e       	andi	r18, 0xEF	; 239
     f34:	2e bd       	out	0x2e, r18	; 46
     f36:	2e b5       	in	r18, 0x2e	; 46
     f38:	27 7f       	andi	r18, 0xF7	; 247
     f3a:	2e bd       	out	0x2e, r18	; 46
     f3c:	2f b5       	in	r18, 0x2f	; 47
     f3e:	2f 7b       	andi	r18, 0xBF	; 191
     f40:	2f bd       	out	0x2f, r18	; 47
     f42:	2f b5       	in	r18, 0x2f	; 47
     f44:	2f 77       	andi	r18, 0x7F	; 127
     f46:	2f bd       	out	0x2f, r18	; 47
     f48:	2f b5       	in	r18, 0x2f	; 47
     f4a:	2f 7e       	andi	r18, 0xEF	; 239
     f4c:	2f bd       	out	0x2f, r18	; 47
     f4e:	2f b5       	in	r18, 0x2f	; 47
     f50:	2f 7d       	andi	r18, 0xDF	; 223
     f52:	2f bd       	out	0x2f, r18	; 47
     f54:	84 81       	ldd	r24, Z+4	; 0x04
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	41 f5       	brne	.+80     	; 0xfaa <TIMER_init+0x10a>
     f5a:	89 b7       	in	r24, 0x39	; 57
     f5c:	84 60       	ori	r24, 0x04	; 4
     f5e:	89 bf       	out	0x39, r24	; 57
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	08 95       	ret
     f64:	14 bc       	out	0x24, r1	; 36
     f66:	15 bc       	out	0x25, r1	; 37
     f68:	13 bc       	out	0x23, r1	; 35
     f6a:	14 bc       	out	0x24, r1	; 36
     f6c:	25 b5       	in	r18, 0x25	; 37
     f6e:	2f 7b       	andi	r18, 0xBF	; 191
     f70:	25 bd       	out	0x25, r18	; 37
     f72:	25 b5       	in	r18, 0x25	; 37
     f74:	27 7f       	andi	r18, 0xF7	; 247
     f76:	25 bd       	out	0x25, r18	; 37
     f78:	25 b5       	in	r18, 0x25	; 37
     f7a:	2f 7e       	andi	r18, 0xEF	; 239
     f7c:	25 bd       	out	0x25, r18	; 37
     f7e:	25 b5       	in	r18, 0x25	; 37
     f80:	2f 7d       	andi	r18, 0xDF	; 223
     f82:	25 bd       	out	0x25, r18	; 37
     f84:	fc 01       	movw	r30, r24
     f86:	84 81       	ldd	r24, Z+4	; 0x04
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	89 f4       	brne	.+34     	; 0xfae <TIMER_init+0x10e>
     f8c:	89 b7       	in	r24, 0x39	; 57
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	89 bf       	out	0x39, r24	; 57
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	08 95       	ret
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	08 95       	ret
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	08 95       	ret
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	08 95       	ret
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	08 95       	ret
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	08 95       	ret
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	08 95       	ret

00000fb2 <TIMER_start>:
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <TIMER_start+0x6>
     fb6:	3b c1       	rjmp	.+630    	; 0x122e <TIMER_start+0x27c>
     fb8:	dc 01       	movw	r26, r24
     fba:	2c 91       	ld	r18, X
     fbc:	23 30       	cpi	r18, 0x03	; 3
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <TIMER_start+0x10>
     fc0:	38 c1       	rjmp	.+624    	; 0x1232 <TIMER_start+0x280>
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	ec 91       	ld	r30, X
     fc6:	ea 30       	cpi	r30, 0x0A	; 10
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <TIMER_start+0x1a>
     fca:	35 c1       	rjmp	.+618    	; 0x1236 <TIMER_start+0x284>
     fcc:	21 30       	cpi	r18, 0x01	; 1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <TIMER_start+0x20>
     fd0:	68 c0       	rjmp	.+208    	; 0x10a2 <TIMER_start+0xf0>
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <TIMER_start+0x2a>
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	09 f4       	brne	.+2      	; 0xfda <TIMER_start+0x28>
     fd8:	c7 c0       	rjmp	.+398    	; 0x1168 <TIMER_start+0x1b6>
     fda:	2f c1       	rjmp	.+606    	; 0x123a <TIMER_start+0x288>
     fdc:	8e 2f       	mov	r24, r30
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	8a 30       	cpi	r24, 0x0A	; 10
     fe2:	91 05       	cpc	r25, r1
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <TIMER_start+0x36>
     fe6:	2b c1       	rjmp	.+598    	; 0x123e <TIMER_start+0x28c>
     fe8:	fc 01       	movw	r30, r24
     fea:	e6 5d       	subi	r30, 0xD6	; 214
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__tablejump2__>
     ff2:	83 b7       	in	r24, 0x33	; 51
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	83 bf       	out	0x33, r24	; 51
     ff8:	83 b7       	in	r24, 0x33	; 51
     ffa:	8d 7f       	andi	r24, 0xFD	; 253
     ffc:	83 bf       	out	0x33, r24	; 51
     ffe:	83 b7       	in	r24, 0x33	; 51
    1000:	8b 7f       	andi	r24, 0xFB	; 251
    1002:	83 bf       	out	0x33, r24	; 51
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	08 95       	ret
    1008:	83 b7       	in	r24, 0x33	; 51
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	83 bf       	out	0x33, r24	; 51
    100e:	83 b7       	in	r24, 0x33	; 51
    1010:	8d 7f       	andi	r24, 0xFD	; 253
    1012:	83 bf       	out	0x33, r24	; 51
    1014:	83 b7       	in	r24, 0x33	; 51
    1016:	8b 7f       	andi	r24, 0xFB	; 251
    1018:	83 bf       	out	0x33, r24	; 51
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	08 95       	ret
    101e:	83 b7       	in	r24, 0x33	; 51
    1020:	8e 7f       	andi	r24, 0xFE	; 254
    1022:	83 bf       	out	0x33, r24	; 51
    1024:	83 b7       	in	r24, 0x33	; 51
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	83 bf       	out	0x33, r24	; 51
    102a:	83 b7       	in	r24, 0x33	; 51
    102c:	8b 7f       	andi	r24, 0xFB	; 251
    102e:	83 bf       	out	0x33, r24	; 51
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	08 95       	ret
    1034:	83 b7       	in	r24, 0x33	; 51
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	83 bf       	out	0x33, r24	; 51
    103a:	83 b7       	in	r24, 0x33	; 51
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	83 bf       	out	0x33, r24	; 51
    1040:	83 b7       	in	r24, 0x33	; 51
    1042:	8b 7f       	andi	r24, 0xFB	; 251
    1044:	83 bf       	out	0x33, r24	; 51
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret
    104a:	83 b7       	in	r24, 0x33	; 51
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	83 bf       	out	0x33, r24	; 51
    1050:	83 b7       	in	r24, 0x33	; 51
    1052:	8d 7f       	andi	r24, 0xFD	; 253
    1054:	83 bf       	out	0x33, r24	; 51
    1056:	83 b7       	in	r24, 0x33	; 51
    1058:	84 60       	ori	r24, 0x04	; 4
    105a:	83 bf       	out	0x33, r24	; 51
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	08 95       	ret
    1060:	83 b7       	in	r24, 0x33	; 51
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	83 bf       	out	0x33, r24	; 51
    1066:	83 b7       	in	r24, 0x33	; 51
    1068:	8d 7f       	andi	r24, 0xFD	; 253
    106a:	83 bf       	out	0x33, r24	; 51
    106c:	83 b7       	in	r24, 0x33	; 51
    106e:	84 60       	ori	r24, 0x04	; 4
    1070:	83 bf       	out	0x33, r24	; 51
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	08 95       	ret
    1076:	83 b7       	in	r24, 0x33	; 51
    1078:	8e 7f       	andi	r24, 0xFE	; 254
    107a:	83 bf       	out	0x33, r24	; 51
    107c:	83 b7       	in	r24, 0x33	; 51
    107e:	82 60       	ori	r24, 0x02	; 2
    1080:	83 bf       	out	0x33, r24	; 51
    1082:	83 b7       	in	r24, 0x33	; 51
    1084:	84 60       	ori	r24, 0x04	; 4
    1086:	83 bf       	out	0x33, r24	; 51
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret
    108c:	83 b7       	in	r24, 0x33	; 51
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	83 bf       	out	0x33, r24	; 51
    1092:	83 b7       	in	r24, 0x33	; 51
    1094:	82 60       	ori	r24, 0x02	; 2
    1096:	83 bf       	out	0x33, r24	; 51
    1098:	83 b7       	in	r24, 0x33	; 51
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	83 bf       	out	0x33, r24	; 51
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	08 95       	ret
    10a2:	8e 2f       	mov	r24, r30
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	8a 30       	cpi	r24, 0x0A	; 10
    10a8:	91 05       	cpc	r25, r1
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <TIMER_start+0xfc>
    10ac:	ca c0       	rjmp	.+404    	; 0x1242 <TIMER_start+0x290>
    10ae:	fc 01       	movw	r30, r24
    10b0:	ec 5c       	subi	r30, 0xCC	; 204
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__tablejump2__>
    10b8:	8e b5       	in	r24, 0x2e	; 46
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	8e bd       	out	0x2e, r24	; 46
    10be:	8e b5       	in	r24, 0x2e	; 46
    10c0:	8d 7f       	andi	r24, 0xFD	; 253
    10c2:	8e bd       	out	0x2e, r24	; 46
    10c4:	8e b5       	in	r24, 0x2e	; 46
    10c6:	8b 7f       	andi	r24, 0xFB	; 251
    10c8:	8e bd       	out	0x2e, r24	; 46
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	08 95       	ret
    10ce:	8e b5       	in	r24, 0x2e	; 46
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	8e bd       	out	0x2e, r24	; 46
    10d4:	8e b5       	in	r24, 0x2e	; 46
    10d6:	8d 7f       	andi	r24, 0xFD	; 253
    10d8:	8e bd       	out	0x2e, r24	; 46
    10da:	8e b5       	in	r24, 0x2e	; 46
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8e bd       	out	0x2e, r24	; 46
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	08 95       	ret
    10e4:	8e b5       	in	r24, 0x2e	; 46
    10e6:	8e 7f       	andi	r24, 0xFE	; 254
    10e8:	8e bd       	out	0x2e, r24	; 46
    10ea:	8e b5       	in	r24, 0x2e	; 46
    10ec:	82 60       	ori	r24, 0x02	; 2
    10ee:	8e bd       	out	0x2e, r24	; 46
    10f0:	8e b5       	in	r24, 0x2e	; 46
    10f2:	8b 7f       	andi	r24, 0xFB	; 251
    10f4:	8e bd       	out	0x2e, r24	; 46
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	8e b5       	in	r24, 0x2e	; 46
    10fc:	81 60       	ori	r24, 0x01	; 1
    10fe:	8e bd       	out	0x2e, r24	; 46
    1100:	8e b5       	in	r24, 0x2e	; 46
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	8e bd       	out	0x2e, r24	; 46
    1106:	8e b5       	in	r24, 0x2e	; 46
    1108:	8b 7f       	andi	r24, 0xFB	; 251
    110a:	8e bd       	out	0x2e, r24	; 46
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret
    1110:	8e b5       	in	r24, 0x2e	; 46
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	8e bd       	out	0x2e, r24	; 46
    1116:	8e b5       	in	r24, 0x2e	; 46
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	8e bd       	out	0x2e, r24	; 46
    111c:	8e b5       	in	r24, 0x2e	; 46
    111e:	84 60       	ori	r24, 0x04	; 4
    1120:	8e bd       	out	0x2e, r24	; 46
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret
    1126:	8e b5       	in	r24, 0x2e	; 46
    1128:	81 60       	ori	r24, 0x01	; 1
    112a:	8e bd       	out	0x2e, r24	; 46
    112c:	8e b5       	in	r24, 0x2e	; 46
    112e:	8d 7f       	andi	r24, 0xFD	; 253
    1130:	8e bd       	out	0x2e, r24	; 46
    1132:	8e b5       	in	r24, 0x2e	; 46
    1134:	84 60       	ori	r24, 0x04	; 4
    1136:	8e bd       	out	0x2e, r24	; 46
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret
    113c:	8e b5       	in	r24, 0x2e	; 46
    113e:	8e 7f       	andi	r24, 0xFE	; 254
    1140:	8e bd       	out	0x2e, r24	; 46
    1142:	8e b5       	in	r24, 0x2e	; 46
    1144:	82 60       	ori	r24, 0x02	; 2
    1146:	8e bd       	out	0x2e, r24	; 46
    1148:	8e b5       	in	r24, 0x2e	; 46
    114a:	84 60       	ori	r24, 0x04	; 4
    114c:	8e bd       	out	0x2e, r24	; 46
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret
    1152:	8e b5       	in	r24, 0x2e	; 46
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	8e bd       	out	0x2e, r24	; 46
    1158:	8e b5       	in	r24, 0x2e	; 46
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	8e bd       	out	0x2e, r24	; 46
    115e:	8e b5       	in	r24, 0x2e	; 46
    1160:	84 60       	ori	r24, 0x04	; 4
    1162:	8e bd       	out	0x2e, r24	; 46
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	08 95       	ret
    1168:	8e 2f       	mov	r24, r30
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	91 05       	cpc	r25, r1
    1170:	08 f0       	brcs	.+2      	; 0x1174 <TIMER_start+0x1c2>
    1172:	69 c0       	rjmp	.+210    	; 0x1246 <TIMER_start+0x294>
    1174:	fc 01       	movw	r30, r24
    1176:	e2 5c       	subi	r30, 0xC2	; 194
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__tablejump2__>
    117e:	85 b5       	in	r24, 0x25	; 37
    1180:	8b 7f       	andi	r24, 0xFB	; 251
    1182:	85 bd       	out	0x25, r24	; 37
    1184:	85 b5       	in	r24, 0x25	; 37
    1186:	8d 7f       	andi	r24, 0xFD	; 253
    1188:	85 bd       	out	0x25, r24	; 37
    118a:	85 b5       	in	r24, 0x25	; 37
    118c:	8e 7f       	andi	r24, 0xFE	; 254
    118e:	85 bd       	out	0x25, r24	; 37
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	08 95       	ret
    1194:	85 b5       	in	r24, 0x25	; 37
    1196:	84 60       	ori	r24, 0x04	; 4
    1198:	85 bd       	out	0x25, r24	; 37
    119a:	85 b5       	in	r24, 0x25	; 37
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	85 bd       	out	0x25, r24	; 37
    11a0:	85 b5       	in	r24, 0x25	; 37
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	85 bd       	out	0x25, r24	; 37
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret
    11aa:	85 b5       	in	r24, 0x25	; 37
    11ac:	8b 7f       	andi	r24, 0xFB	; 251
    11ae:	85 bd       	out	0x25, r24	; 37
    11b0:	85 b5       	in	r24, 0x25	; 37
    11b2:	82 60       	ori	r24, 0x02	; 2
    11b4:	85 bd       	out	0x25, r24	; 37
    11b6:	85 b5       	in	r24, 0x25	; 37
    11b8:	8e 7f       	andi	r24, 0xFE	; 254
    11ba:	85 bd       	out	0x25, r24	; 37
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	08 95       	ret
    11c0:	85 b5       	in	r24, 0x25	; 37
    11c2:	84 60       	ori	r24, 0x04	; 4
    11c4:	85 bd       	out	0x25, r24	; 37
    11c6:	85 b5       	in	r24, 0x25	; 37
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	85 bd       	out	0x25, r24	; 37
    11cc:	85 b5       	in	r24, 0x25	; 37
    11ce:	8e 7f       	andi	r24, 0xFE	; 254
    11d0:	85 bd       	out	0x25, r24	; 37
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret
    11d6:	85 b5       	in	r24, 0x25	; 37
    11d8:	8b 7f       	andi	r24, 0xFB	; 251
    11da:	85 bd       	out	0x25, r24	; 37
    11dc:	85 b5       	in	r24, 0x25	; 37
    11de:	8d 7f       	andi	r24, 0xFD	; 253
    11e0:	85 bd       	out	0x25, r24	; 37
    11e2:	85 b5       	in	r24, 0x25	; 37
    11e4:	81 60       	ori	r24, 0x01	; 1
    11e6:	85 bd       	out	0x25, r24	; 37
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	08 95       	ret
    11ec:	85 b5       	in	r24, 0x25	; 37
    11ee:	84 60       	ori	r24, 0x04	; 4
    11f0:	85 bd       	out	0x25, r24	; 37
    11f2:	85 b5       	in	r24, 0x25	; 37
    11f4:	8d 7f       	andi	r24, 0xFD	; 253
    11f6:	85 bd       	out	0x25, r24	; 37
    11f8:	85 b5       	in	r24, 0x25	; 37
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	85 bd       	out	0x25, r24	; 37
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
    1202:	85 b5       	in	r24, 0x25	; 37
    1204:	8b 7f       	andi	r24, 0xFB	; 251
    1206:	85 bd       	out	0x25, r24	; 37
    1208:	85 b5       	in	r24, 0x25	; 37
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	85 bd       	out	0x25, r24	; 37
    120e:	85 b5       	in	r24, 0x25	; 37
    1210:	81 60       	ori	r24, 0x01	; 1
    1212:	85 bd       	out	0x25, r24	; 37
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	08 95       	ret
    1218:	85 b5       	in	r24, 0x25	; 37
    121a:	84 60       	ori	r24, 0x04	; 4
    121c:	85 bd       	out	0x25, r24	; 37
    121e:	85 b5       	in	r24, 0x25	; 37
    1220:	82 60       	ori	r24, 0x02	; 2
    1222:	85 bd       	out	0x25, r24	; 37
    1224:	85 b5       	in	r24, 0x25	; 37
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	85 bd       	out	0x25, r24	; 37
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	08 95       	ret
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	08 95       	ret
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	08 95       	ret
    1236:	83 e0       	ldi	r24, 0x03	; 3
    1238:	08 95       	ret
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	08 95       	ret
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	08 95       	ret
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	08 95       	ret
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	08 95       	ret

0000124a <TIMER_stop>:
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	38 f5       	brcc	.+78     	; 0x129c <TIMER_stop+0x52>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	79 f0       	breq	.+30     	; 0x1270 <TIMER_stop+0x26>
    1252:	18 f0       	brcs	.+6      	; 0x125a <TIMER_stop+0x10>
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	b9 f0       	breq	.+46     	; 0x1286 <TIMER_stop+0x3c>
    1258:	23 c0       	rjmp	.+70     	; 0x12a0 <TIMER_stop+0x56>
    125a:	83 b7       	in	r24, 0x33	; 51
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	83 bf       	out	0x33, r24	; 51
    1260:	83 b7       	in	r24, 0x33	; 51
    1262:	8d 7f       	andi	r24, 0xFD	; 253
    1264:	83 bf       	out	0x33, r24	; 51
    1266:	83 b7       	in	r24, 0x33	; 51
    1268:	8b 7f       	andi	r24, 0xFB	; 251
    126a:	83 bf       	out	0x33, r24	; 51
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	08 95       	ret
    1270:	8e b5       	in	r24, 0x2e	; 46
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	8e bd       	out	0x2e, r24	; 46
    1276:	8e b5       	in	r24, 0x2e	; 46
    1278:	8d 7f       	andi	r24, 0xFD	; 253
    127a:	8e bd       	out	0x2e, r24	; 46
    127c:	8e b5       	in	r24, 0x2e	; 46
    127e:	8b 7f       	andi	r24, 0xFB	; 251
    1280:	8e bd       	out	0x2e, r24	; 46
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
    1286:	85 b5       	in	r24, 0x25	; 37
    1288:	8b 7f       	andi	r24, 0xFB	; 251
    128a:	85 bd       	out	0x25, r24	; 37
    128c:	85 b5       	in	r24, 0x25	; 37
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	85 bd       	out	0x25, r24	; 37
    1292:	85 b5       	in	r24, 0x25	; 37
    1294:	8e 7f       	andi	r24, 0xFE	; 254
    1296:	85 bd       	out	0x25, r24	; 37
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	08 95       	ret
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	08 95       	ret

000012a4 <TIMER_setCallBack>:
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	a9 f0       	breq	.+42     	; 0x12d2 <TIMER_setCallBack+0x2e>
    12a8:	63 30       	cpi	r22, 0x03	; 3
    12aa:	a8 f4       	brcc	.+42     	; 0x12d6 <TIMER_setCallBack+0x32>
    12ac:	61 30       	cpi	r22, 0x01	; 1
    12ae:	59 f0       	breq	.+22     	; 0x12c6 <TIMER_setCallBack+0x22>
    12b0:	20 f0       	brcs	.+8      	; 0x12ba <TIMER_setCallBack+0x16>
    12b2:	62 30       	cpi	r22, 0x02	; 2
    12b4:	91 f0       	breq	.+36     	; 0x12da <TIMER_setCallBack+0x36>
    12b6:	83 e0       	ldi	r24, 0x03	; 3
    12b8:	08 95       	ret
    12ba:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <sg_Timer0_callBackPtr+0x1>
    12be:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <sg_Timer0_callBackPtr>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	08 95       	ret
    12c6:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <sg_Timer1_callBackPtr+0x1>
    12ca:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <sg_Timer1_callBackPtr>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	08 95       	ret
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	08 95       	ret
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	08 95       	ret
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	08 95       	ret

000012de <enuTimer2_init>:
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	48 f5       	brcc	.+82     	; 0x1334 <enuTimer2_init+0x56>
    12e2:	14 bc       	out	0x24, r1	; 36
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	71 f0       	breq	.+28     	; 0x1304 <enuTimer2_init+0x26>
    12e8:	28 f0       	brcs	.+10     	; 0x12f4 <enuTimer2_init+0x16>
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	99 f0       	breq	.+38     	; 0x1314 <enuTimer2_init+0x36>
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	c9 f0       	breq	.+50     	; 0x1324 <enuTimer2_init+0x46>
    12f2:	22 c0       	rjmp	.+68     	; 0x1338 <enuTimer2_init+0x5a>
    12f4:	85 b5       	in	r24, 0x25	; 37
    12f6:	87 7f       	andi	r24, 0xF7	; 247
    12f8:	85 bd       	out	0x25, r24	; 37
    12fa:	85 b5       	in	r24, 0x25	; 37
    12fc:	8f 7b       	andi	r24, 0xBF	; 191
    12fe:	85 bd       	out	0x25, r24	; 37
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret
    1304:	85 b5       	in	r24, 0x25	; 37
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	85 bd       	out	0x25, r24	; 37
    130a:	85 b5       	in	r24, 0x25	; 37
    130c:	80 64       	ori	r24, 0x40	; 64
    130e:	85 bd       	out	0x25, r24	; 37
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 95       	ret
    1314:	85 b5       	in	r24, 0x25	; 37
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	85 bd       	out	0x25, r24	; 37
    131a:	85 b5       	in	r24, 0x25	; 37
    131c:	8f 7b       	andi	r24, 0xBF	; 191
    131e:	85 bd       	out	0x25, r24	; 37
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	08 95       	ret
    1324:	85 b5       	in	r24, 0x25	; 37
    1326:	88 60       	ori	r24, 0x08	; 8
    1328:	85 bd       	out	0x25, r24	; 37
    132a:	85 b5       	in	r24, 0x25	; 37
    132c:	80 64       	ori	r24, 0x40	; 64
    132e:	85 bd       	out	0x25, r24	; 37
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	08 95       	ret
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	08 95       	ret

0000133c <u8Timer2_setPrescallar>:
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	70 f4       	brcc	.+28     	; 0x135c <u8Timer2_setPrescallar+0x20>
    1340:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <global_prescaller>
    1344:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <global_timerStatus>
    1348:	91 30       	cpi	r25, 0x01	; 1
    134a:	51 f4       	brne	.+20     	; 0x1360 <u8Timer2_setPrescallar+0x24>
    134c:	95 b5       	in	r25, 0x25	; 37
    134e:	98 7f       	andi	r25, 0xF8	; 248
    1350:	89 2b       	or	r24, r25
    1352:	95 b5       	in	r25, 0x25	; 37
    1354:	89 2b       	or	r24, r25
    1356:	85 bd       	out	0x25, r24	; 37
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	08 95       	ret
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	08 95       	ret
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret

00001364 <vidTimer2_OvfIrqEnable>:
    1364:	88 b7       	in	r24, 0x38	; 56
    1366:	80 64       	ori	r24, 0x40	; 64
    1368:	88 bf       	out	0x38, r24	; 56
    136a:	89 b7       	in	r24, 0x39	; 57
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	89 bf       	out	0x39, r24	; 57
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	08 95       	ret

00001374 <vidTimer2_start>:
    1374:	95 b5       	in	r25, 0x25	; 37
    1376:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <global_prescaller>
    137a:	89 2b       	or	r24, r25
    137c:	85 bd       	out	0x25, r24	; 37
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <global_timerStatus>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret

00001388 <vidTimer2_stop>:
    1388:	85 b5       	in	r24, 0x25	; 37
    138a:	88 7f       	andi	r24, 0xF8	; 248
    138c:	85 bd       	out	0x25, r24	; 37
    138e:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <global_timerStatus>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	08 95       	ret

00001396 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	21 f0       	breq	.+8      	; 0x13a2 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    139a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <globalCallFunc+0x1>
    139e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <globalCallFunc>
    13a2:	08 95       	ret

000013a4 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    13a4:	14 bc       	out	0x24, r1	; 36
    13a6:	08 95       	ret

000013a8 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    13a8:	84 b5       	in	r24, 0x24	; 36
}
    13aa:	08 95       	ret

000013ac <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    13ac:	8f b7       	in	r24, 0x3f	; 63
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8f bf       	out	0x3f, r24	; 63
    13b2:	08 95       	ret

000013b4 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    13d6:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <counter.1821>
    13da:	8f 5f       	subi	r24, 0xFF	; 255
    13dc:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <counter.1821>
	if(counter == global_ovf)
    13e0:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <global_ovf>
    13e4:	89 13       	cpse	r24, r25
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    13e8:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <globalCallFunc>
    13ec:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <globalCallFunc+0x1>
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	19 f0       	breq	.+6      	; 0x13fa <__vector_5+0x46>
		{
			counter = 0;
    13f4:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <counter.1821>

			globalCallFunc();
    13f8:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	7f 91       	pop	r23
    1408:	6f 91       	pop	r22
    140a:	5f 91       	pop	r21
    140c:	4f 91       	pop	r20
    140e:	3f 91       	pop	r19
    1410:	2f 91       	pop	r18
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__subsf3>:
    141c:	50 58       	subi	r21, 0x80	; 128

0000141e <__addsf3>:
    141e:	bb 27       	eor	r27, r27
    1420:	aa 27       	eor	r26, r26
    1422:	0e 94 26 0a 	call	0x144c	; 0x144c <__addsf3x>
    1426:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_round>
    142a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fp_pscA>
    142e:	38 f0       	brcs	.+14     	; 0x143e <__addsf3+0x20>
    1430:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__fp_pscB>
    1434:	20 f0       	brcs	.+8      	; 0x143e <__addsf3+0x20>
    1436:	39 f4       	brne	.+14     	; 0x1446 <__addsf3+0x28>
    1438:	9f 3f       	cpi	r25, 0xFF	; 255
    143a:	19 f4       	brne	.+6      	; 0x1442 <__addsf3+0x24>
    143c:	26 f4       	brtc	.+8      	; 0x1446 <__addsf3+0x28>
    143e:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_nan>
    1442:	0e f4       	brtc	.+2      	; 0x1446 <__addsf3+0x28>
    1444:	e0 95       	com	r30
    1446:	e7 fb       	bst	r30, 7
    1448:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_inf>

0000144c <__addsf3x>:
    144c:	e9 2f       	mov	r30, r25
    144e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_split3>
    1452:	58 f3       	brcs	.-42     	; 0x142a <__addsf3+0xc>
    1454:	ba 17       	cp	r27, r26
    1456:	62 07       	cpc	r22, r18
    1458:	73 07       	cpc	r23, r19
    145a:	84 07       	cpc	r24, r20
    145c:	95 07       	cpc	r25, r21
    145e:	20 f0       	brcs	.+8      	; 0x1468 <__addsf3x+0x1c>
    1460:	79 f4       	brne	.+30     	; 0x1480 <__addsf3x+0x34>
    1462:	a6 f5       	brtc	.+104    	; 0x14cc <__addsf3x+0x80>
    1464:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_zero>
    1468:	0e f4       	brtc	.+2      	; 0x146c <__addsf3x+0x20>
    146a:	e0 95       	com	r30
    146c:	0b 2e       	mov	r0, r27
    146e:	ba 2f       	mov	r27, r26
    1470:	a0 2d       	mov	r26, r0
    1472:	0b 01       	movw	r0, r22
    1474:	b9 01       	movw	r22, r18
    1476:	90 01       	movw	r18, r0
    1478:	0c 01       	movw	r0, r24
    147a:	ca 01       	movw	r24, r20
    147c:	a0 01       	movw	r20, r0
    147e:	11 24       	eor	r1, r1
    1480:	ff 27       	eor	r31, r31
    1482:	59 1b       	sub	r21, r25
    1484:	99 f0       	breq	.+38     	; 0x14ac <__addsf3x+0x60>
    1486:	59 3f       	cpi	r21, 0xF9	; 249
    1488:	50 f4       	brcc	.+20     	; 0x149e <__addsf3x+0x52>
    148a:	50 3e       	cpi	r21, 0xE0	; 224
    148c:	68 f1       	brcs	.+90     	; 0x14e8 <__addsf3x+0x9c>
    148e:	1a 16       	cp	r1, r26
    1490:	f0 40       	sbci	r31, 0x00	; 0
    1492:	a2 2f       	mov	r26, r18
    1494:	23 2f       	mov	r18, r19
    1496:	34 2f       	mov	r19, r20
    1498:	44 27       	eor	r20, r20
    149a:	58 5f       	subi	r21, 0xF8	; 248
    149c:	f3 cf       	rjmp	.-26     	; 0x1484 <__addsf3x+0x38>
    149e:	46 95       	lsr	r20
    14a0:	37 95       	ror	r19
    14a2:	27 95       	ror	r18
    14a4:	a7 95       	ror	r26
    14a6:	f0 40       	sbci	r31, 0x00	; 0
    14a8:	53 95       	inc	r21
    14aa:	c9 f7       	brne	.-14     	; 0x149e <__addsf3x+0x52>
    14ac:	7e f4       	brtc	.+30     	; 0x14cc <__addsf3x+0x80>
    14ae:	1f 16       	cp	r1, r31
    14b0:	ba 0b       	sbc	r27, r26
    14b2:	62 0b       	sbc	r22, r18
    14b4:	73 0b       	sbc	r23, r19
    14b6:	84 0b       	sbc	r24, r20
    14b8:	ba f0       	brmi	.+46     	; 0x14e8 <__addsf3x+0x9c>
    14ba:	91 50       	subi	r25, 0x01	; 1
    14bc:	a1 f0       	breq	.+40     	; 0x14e6 <__addsf3x+0x9a>
    14be:	ff 0f       	add	r31, r31
    14c0:	bb 1f       	adc	r27, r27
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	c2 f7       	brpl	.-16     	; 0x14ba <__addsf3x+0x6e>
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <__addsf3x+0x9c>
    14cc:	ba 0f       	add	r27, r26
    14ce:	62 1f       	adc	r22, r18
    14d0:	73 1f       	adc	r23, r19
    14d2:	84 1f       	adc	r24, r20
    14d4:	48 f4       	brcc	.+18     	; 0x14e8 <__addsf3x+0x9c>
    14d6:	87 95       	ror	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	b7 95       	ror	r27
    14de:	f7 95       	ror	r31
    14e0:	9e 3f       	cpi	r25, 0xFE	; 254
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <__addsf3x+0x9a>
    14e4:	b0 cf       	rjmp	.-160    	; 0x1446 <__addsf3+0x28>
    14e6:	93 95       	inc	r25
    14e8:	88 0f       	add	r24, r24
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <__addsf3x+0xa2>
    14ec:	99 27       	eor	r25, r25
    14ee:	ee 0f       	add	r30, r30
    14f0:	97 95       	ror	r25
    14f2:	87 95       	ror	r24
    14f4:	08 95       	ret

000014f6 <__divsf3>:
    14f6:	0e 94 8f 0a 	call	0x151e	; 0x151e <__divsf3x>
    14fa:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_round>
    14fe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__fp_pscB>
    1502:	58 f0       	brcs	.+22     	; 0x151a <__divsf3+0x24>
    1504:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fp_pscA>
    1508:	40 f0       	brcs	.+16     	; 0x151a <__divsf3+0x24>
    150a:	29 f4       	brne	.+10     	; 0x1516 <__divsf3+0x20>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	29 f0       	breq	.+10     	; 0x151a <__divsf3+0x24>
    1510:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_inf>
    1514:	51 11       	cpse	r21, r1
    1516:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_szero>
    151a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_nan>

0000151e <__divsf3x>:
    151e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_split3>
    1522:	68 f3       	brcs	.-38     	; 0x14fe <__divsf3+0x8>

00001524 <__divsf3_pse>:
    1524:	99 23       	and	r25, r25
    1526:	b1 f3       	breq	.-20     	; 0x1514 <__divsf3+0x1e>
    1528:	55 23       	and	r21, r21
    152a:	91 f3       	breq	.-28     	; 0x1510 <__divsf3+0x1a>
    152c:	95 1b       	sub	r25, r21
    152e:	55 0b       	sbc	r21, r21
    1530:	bb 27       	eor	r27, r27
    1532:	aa 27       	eor	r26, r26
    1534:	62 17       	cp	r22, r18
    1536:	73 07       	cpc	r23, r19
    1538:	84 07       	cpc	r24, r20
    153a:	38 f0       	brcs	.+14     	; 0x154a <__divsf3_pse+0x26>
    153c:	9f 5f       	subi	r25, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	44 1f       	adc	r20, r20
    1546:	aa 1f       	adc	r26, r26
    1548:	a9 f3       	breq	.-22     	; 0x1534 <__divsf3_pse+0x10>
    154a:	35 d0       	rcall	.+106    	; 0x15b6 <__divsf3_pse+0x92>
    154c:	0e 2e       	mov	r0, r30
    154e:	3a f0       	brmi	.+14     	; 0x155e <__divsf3_pse+0x3a>
    1550:	e0 e8       	ldi	r30, 0x80	; 128
    1552:	32 d0       	rcall	.+100    	; 0x15b8 <__divsf3_pse+0x94>
    1554:	91 50       	subi	r25, 0x01	; 1
    1556:	50 40       	sbci	r21, 0x00	; 0
    1558:	e6 95       	lsr	r30
    155a:	00 1c       	adc	r0, r0
    155c:	ca f7       	brpl	.-14     	; 0x1550 <__divsf3_pse+0x2c>
    155e:	2b d0       	rcall	.+86     	; 0x15b6 <__divsf3_pse+0x92>
    1560:	fe 2f       	mov	r31, r30
    1562:	29 d0       	rcall	.+82     	; 0x15b6 <__divsf3_pse+0x92>
    1564:	66 0f       	add	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	bb 1f       	adc	r27, r27
    156c:	26 17       	cp	r18, r22
    156e:	37 07       	cpc	r19, r23
    1570:	48 07       	cpc	r20, r24
    1572:	ab 07       	cpc	r26, r27
    1574:	b0 e8       	ldi	r27, 0x80	; 128
    1576:	09 f0       	breq	.+2      	; 0x157a <__divsf3_pse+0x56>
    1578:	bb 0b       	sbc	r27, r27
    157a:	80 2d       	mov	r24, r0
    157c:	bf 01       	movw	r22, r30
    157e:	ff 27       	eor	r31, r31
    1580:	93 58       	subi	r25, 0x83	; 131
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	3a f0       	brmi	.+14     	; 0x1594 <__divsf3_pse+0x70>
    1586:	9e 3f       	cpi	r25, 0xFE	; 254
    1588:	51 05       	cpc	r21, r1
    158a:	78 f0       	brcs	.+30     	; 0x15aa <__divsf3_pse+0x86>
    158c:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_inf>
    1590:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_szero>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	e4 f3       	brlt	.-8      	; 0x1590 <__divsf3_pse+0x6c>
    1598:	98 3e       	cpi	r25, 0xE8	; 232
    159a:	d4 f3       	brlt	.-12     	; 0x1590 <__divsf3_pse+0x6c>
    159c:	86 95       	lsr	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f7 95       	ror	r31
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__divsf3_pse+0x78>
    15aa:	88 0f       	add	r24, r24
    15ac:	91 1d       	adc	r25, r1
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	97 f9       	bld	r25, 7
    15b4:	08 95       	ret
    15b6:	e1 e0       	ldi	r30, 0x01	; 1
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	bb 1f       	adc	r27, r27
    15c0:	62 17       	cp	r22, r18
    15c2:	73 07       	cpc	r23, r19
    15c4:	84 07       	cpc	r24, r20
    15c6:	ba 07       	cpc	r27, r26
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__divsf3_pse+0xae>
    15ca:	62 1b       	sub	r22, r18
    15cc:	73 0b       	sbc	r23, r19
    15ce:	84 0b       	sbc	r24, r20
    15d0:	ba 0b       	sbc	r27, r26
    15d2:	ee 1f       	adc	r30, r30
    15d4:	88 f7       	brcc	.-30     	; 0x15b8 <__divsf3_pse+0x94>
    15d6:	e0 95       	com	r30
    15d8:	08 95       	ret

000015da <__floatunsisf>:
    15da:	e8 94       	clt
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <__floatsisf+0x12>

000015de <__floatsisf>:
    15de:	97 fb       	bst	r25, 7
    15e0:	3e f4       	brtc	.+14     	; 0x15f0 <__floatsisf+0x12>
    15e2:	90 95       	com	r25
    15e4:	80 95       	com	r24
    15e6:	70 95       	com	r23
    15e8:	61 95       	neg	r22
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	8f 4f       	sbci	r24, 0xFF	; 255
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	99 23       	and	r25, r25
    15f2:	a9 f0       	breq	.+42     	; 0x161e <__floatsisf+0x40>
    15f4:	f9 2f       	mov	r31, r25
    15f6:	96 e9       	ldi	r25, 0x96	; 150
    15f8:	bb 27       	eor	r27, r27
    15fa:	93 95       	inc	r25
    15fc:	f6 95       	lsr	r31
    15fe:	87 95       	ror	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	f1 11       	cpse	r31, r1
    1608:	f8 cf       	rjmp	.-16     	; 0x15fa <__floatsisf+0x1c>
    160a:	fa f4       	brpl	.+62     	; 0x164a <__floatsisf+0x6c>
    160c:	bb 0f       	add	r27, r27
    160e:	11 f4       	brne	.+4      	; 0x1614 <__floatsisf+0x36>
    1610:	60 ff       	sbrs	r22, 0
    1612:	1b c0       	rjmp	.+54     	; 0x164a <__floatsisf+0x6c>
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	16 c0       	rjmp	.+44     	; 0x164a <__floatsisf+0x6c>
    161e:	88 23       	and	r24, r24
    1620:	11 f0       	breq	.+4      	; 0x1626 <__floatsisf+0x48>
    1622:	96 e9       	ldi	r25, 0x96	; 150
    1624:	11 c0       	rjmp	.+34     	; 0x1648 <__floatsisf+0x6a>
    1626:	77 23       	and	r23, r23
    1628:	21 f0       	breq	.+8      	; 0x1632 <__floatsisf+0x54>
    162a:	9e e8       	ldi	r25, 0x8E	; 142
    162c:	87 2f       	mov	r24, r23
    162e:	76 2f       	mov	r23, r22
    1630:	05 c0       	rjmp	.+10     	; 0x163c <__floatsisf+0x5e>
    1632:	66 23       	and	r22, r22
    1634:	71 f0       	breq	.+28     	; 0x1652 <__floatsisf+0x74>
    1636:	96 e8       	ldi	r25, 0x86	; 134
    1638:	86 2f       	mov	r24, r22
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	2a f0       	brmi	.+10     	; 0x164a <__floatsisf+0x6c>
    1640:	9a 95       	dec	r25
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	da f7       	brpl	.-10     	; 0x1640 <__floatsisf+0x62>
    164a:	88 0f       	add	r24, r24
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__fp_inf>:
    1654:	97 f9       	bld	r25, 7
    1656:	9f 67       	ori	r25, 0x7F	; 127
    1658:	80 e8       	ldi	r24, 0x80	; 128
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	08 95       	ret

00001660 <__fp_nan>:
    1660:	9f ef       	ldi	r25, 0xFF	; 255
    1662:	80 ec       	ldi	r24, 0xC0	; 192
    1664:	08 95       	ret

00001666 <__fp_pscA>:
    1666:	00 24       	eor	r0, r0
    1668:	0a 94       	dec	r0
    166a:	16 16       	cp	r1, r22
    166c:	17 06       	cpc	r1, r23
    166e:	18 06       	cpc	r1, r24
    1670:	09 06       	cpc	r0, r25
    1672:	08 95       	ret

00001674 <__fp_pscB>:
    1674:	00 24       	eor	r0, r0
    1676:	0a 94       	dec	r0
    1678:	12 16       	cp	r1, r18
    167a:	13 06       	cpc	r1, r19
    167c:	14 06       	cpc	r1, r20
    167e:	05 06       	cpc	r0, r21
    1680:	08 95       	ret

00001682 <__fp_round>:
    1682:	09 2e       	mov	r0, r25
    1684:	03 94       	inc	r0
    1686:	00 0c       	add	r0, r0
    1688:	11 f4       	brne	.+4      	; 0x168e <__fp_round+0xc>
    168a:	88 23       	and	r24, r24
    168c:	52 f0       	brmi	.+20     	; 0x16a2 <__fp_round+0x20>
    168e:	bb 0f       	add	r27, r27
    1690:	40 f4       	brcc	.+16     	; 0x16a2 <__fp_round+0x20>
    1692:	bf 2b       	or	r27, r31
    1694:	11 f4       	brne	.+4      	; 0x169a <__fp_round+0x18>
    1696:	60 ff       	sbrs	r22, 0
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <__fp_round+0x20>
    169a:	6f 5f       	subi	r22, 0xFF	; 255
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__fp_split3>:
    16a4:	57 fd       	sbrc	r21, 7
    16a6:	90 58       	subi	r25, 0x80	; 128
    16a8:	44 0f       	add	r20, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	59 f0       	breq	.+22     	; 0x16c4 <__fp_splitA+0x10>
    16ae:	5f 3f       	cpi	r21, 0xFF	; 255
    16b0:	71 f0       	breq	.+28     	; 0x16ce <__fp_splitA+0x1a>
    16b2:	47 95       	ror	r20

000016b4 <__fp_splitA>:
    16b4:	88 0f       	add	r24, r24
    16b6:	97 fb       	bst	r25, 7
    16b8:	99 1f       	adc	r25, r25
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <__fp_splitA+0x20>
    16bc:	9f 3f       	cpi	r25, 0xFF	; 255
    16be:	79 f0       	breq	.+30     	; 0x16de <__fp_splitA+0x2a>
    16c0:	87 95       	ror	r24
    16c2:	08 95       	ret
    16c4:	12 16       	cp	r1, r18
    16c6:	13 06       	cpc	r1, r19
    16c8:	14 06       	cpc	r1, r20
    16ca:	55 1f       	adc	r21, r21
    16cc:	f2 cf       	rjmp	.-28     	; 0x16b2 <__fp_split3+0xe>
    16ce:	46 95       	lsr	r20
    16d0:	f1 df       	rcall	.-30     	; 0x16b4 <__fp_splitA>
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <__fp_splitA+0x30>
    16d4:	16 16       	cp	r1, r22
    16d6:	17 06       	cpc	r1, r23
    16d8:	18 06       	cpc	r1, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	f1 cf       	rjmp	.-30     	; 0x16c0 <__fp_splitA+0xc>
    16de:	86 95       	lsr	r24
    16e0:	71 05       	cpc	r23, r1
    16e2:	61 05       	cpc	r22, r1
    16e4:	08 94       	sec
    16e6:	08 95       	ret

000016e8 <__fp_zero>:
    16e8:	e8 94       	clt

000016ea <__fp_szero>:
    16ea:	bb 27       	eor	r27, r27
    16ec:	66 27       	eor	r22, r22
    16ee:	77 27       	eor	r23, r23
    16f0:	cb 01       	movw	r24, r22
    16f2:	97 f9       	bld	r25, 7
    16f4:	08 95       	ret

000016f6 <__tablejump2__>:
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	05 90       	lpm	r0, Z+
    16fc:	f4 91       	lpm	r31, Z
    16fe:	e0 2d       	mov	r30, r0
    1700:	09 94       	ijmp

00001702 <_exit>:
    1702:	f8 94       	cli

00001704 <__stop_program>:
    1704:	ff cf       	rjmp	.-2      	; 0x1704 <__stop_program>
