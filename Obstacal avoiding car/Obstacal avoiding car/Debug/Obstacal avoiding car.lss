
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800078  00800078  00001040  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c4  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef8  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e7  00000000  00000000  000047b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  00006198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000daa  00000000  00000000  00006738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179d  00000000  00000000  000074e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008c7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_1>
   8:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
  8a:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
  92:	0e 94 2a 03 	call	0x654	; 0x654 <HULTRASONIC_vidInit>
    HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
  9e:	86 eb       	ldi	r24, 0xB6	; 182
  a0:	92 e0       	ldi	r25, 0x02	; 2
  a2:	0e 94 56 03 	call	0x6ac	; 0x6ac <HULTRASONIC_vidCBF_INT>
	
	(void) LCD_init(&st_lcdConfig);
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_init>
  ae:	08 95       	ret

000000b0 <APP_vidStart>:
/*	DDRA = 0xFF;*/
}

void APP_vidStart(void)
{
    global_f64Dist = HULTRASONIC_u8Read();
  b0:	0e 94 48 03 	call	0x690	; 0x690 <HULTRASONIC_u8Read>
  b4:	60 93 8f 00 	sts	0x008F, r22	; 0x80008f <global_f64Dist>
  b8:	70 93 90 00 	sts	0x0090, r23	; 0x800090 <global_f64Dist+0x1>
  bc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <global_f64Dist+0x2>
  c0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e2       	ldi	r24, 0x2F	; 47
  c6:	95 e7       	ldi	r25, 0x75	; 117
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <APP_vidStart+0x18>
  cc:	00 c0       	rjmp	.+0      	; 0xce <APP_vidStart+0x1e>
  ce:	00 00       	nop
	_delay_ms(15);
	
	LCD_setCursor(1,1);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_setCursor>
	
	LCD_WriteInt( (Uint32_t) global_f64Dist );
  d8:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <global_f64Dist>
  dc:	70 91 90 00 	lds	r23, 0x0090	; 0x800090 <global_f64Dist+0x1>
  e0:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <global_f64Dist+0x2>
  e4:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <global_f64Dist+0x3>
  e8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fixunssfsi>
  ec:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_WriteInt>
  f0:	08 95       	ret

000000f2 <ENABLE>:
	}	
	
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	c3 e9       	ldi	r28, 0x93	; 147
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	6e 89       	ldd	r22, Y+22	; 0x16
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	8d 89       	ldd	r24, Y+21	; 0x15
 100:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <ENABLE+0x14>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <ENABLE+0x1a>
 10c:	6e 89       	ldd	r22, Y+22	; 0x16
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	8d 89       	ldd	r24, Y+21	; 0x15
 112:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_cmd>:
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	16 2f       	mov	r17, r22
 126:	6e 89       	ldd	r22, Y+22	; 0x16
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	8d 89       	ldd	r24, Y+21	; 0x15
 12c:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 130:	6a 89       	ldd	r22, Y+18	; 0x12
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	89 89       	ldd	r24, Y+17	; 0x11
 136:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 13a:	6c 89       	ldd	r22, Y+20	; 0x14
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	8b 89       	ldd	r24, Y+19	; 0x13
 140:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 148:	81 11       	cpse	r24, r1
 14a:	70 c0       	rjmp	.+224    	; 0x22c <LCD_cmd+0x110>
 14c:	41 2f       	mov	r20, r17
 14e:	44 1f       	adc	r20, r20
 150:	44 27       	eor	r20, r20
 152:	44 1f       	adc	r20, r20
 154:	68 89       	ldd	r22, Y+16	; 0x10
 156:	8f 85       	ldd	r24, Y+15	; 0x0f
 158:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 15c:	41 2f       	mov	r20, r17
 15e:	40 74       	andi	r20, 0x40	; 64
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	04 2e       	mov	r0, r20
 164:	45 2f       	mov	r20, r21
 166:	00 0c       	add	r0, r0
 168:	44 1f       	adc	r20, r20
 16a:	55 0b       	sbc	r21, r21
 16c:	00 0c       	add	r0, r0
 16e:	44 1f       	adc	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6e 85       	ldd	r22, Y+14	; 0x0e
 174:	8d 85       	ldd	r24, Y+13	; 0x0d
 176:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 17a:	41 2f       	mov	r20, r17
 17c:	40 72       	andi	r20, 0x20	; 32
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	55 95       	asr	r21
 182:	47 95       	ror	r20
 184:	55 95       	asr	r21
 186:	47 95       	ror	r20
 188:	55 95       	asr	r21
 18a:	47 95       	ror	r20
 18c:	55 95       	asr	r21
 18e:	47 95       	ror	r20
 190:	55 95       	asr	r21
 192:	47 95       	ror	r20
 194:	6c 85       	ldd	r22, Y+12	; 0x0c
 196:	8b 85       	ldd	r24, Y+11	; 0x0b
 198:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 19c:	41 2f       	mov	r20, r17
 19e:	40 71       	andi	r20, 0x10	; 16
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	55 95       	asr	r21
 1a4:	47 95       	ror	r20
 1a6:	55 95       	asr	r21
 1a8:	47 95       	ror	r20
 1aa:	55 95       	asr	r21
 1ac:	47 95       	ror	r20
 1ae:	55 95       	asr	r21
 1b0:	47 95       	ror	r20
 1b2:	6a 85       	ldd	r22, Y+10	; 0x0a
 1b4:	89 85       	ldd	r24, Y+9	; 0x09
 1b6:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 1ba:	0e 94 79 00 	call	0xf2	; 0xf2 <ENABLE>
 1be:	8f e6       	ldi	r24, 0x6F	; 111
 1c0:	97 e1       	ldi	r25, 0x17	; 23
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_cmd+0xa6>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_cmd+0xac>
 1c8:	00 00       	nop
 1ca:	41 2f       	mov	r20, r17
 1cc:	48 70       	andi	r20, 0x08	; 8
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	55 95       	asr	r21
 1d2:	47 95       	ror	r20
 1d4:	55 95       	asr	r21
 1d6:	47 95       	ror	r20
 1d8:	55 95       	asr	r21
 1da:	47 95       	ror	r20
 1dc:	68 89       	ldd	r22, Y+16	; 0x10
 1de:	8f 85       	ldd	r24, Y+15	; 0x0f
 1e0:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 1e4:	41 2f       	mov	r20, r17
 1e6:	44 70       	andi	r20, 0x04	; 4
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	55 95       	asr	r21
 1ec:	47 95       	ror	r20
 1ee:	55 95       	asr	r21
 1f0:	47 95       	ror	r20
 1f2:	6e 85       	ldd	r22, Y+14	; 0x0e
 1f4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f6:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 1fa:	41 2f       	mov	r20, r17
 1fc:	42 70       	andi	r20, 0x02	; 2
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	55 95       	asr	r21
 202:	47 95       	ror	r20
 204:	6c 85       	ldd	r22, Y+12	; 0x0c
 206:	8b 85       	ldd	r24, Y+11	; 0x0b
 208:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 20c:	6a 85       	ldd	r22, Y+10	; 0x0a
 20e:	41 2f       	mov	r20, r17
 210:	41 70       	andi	r20, 0x01	; 1
 212:	89 85       	ldd	r24, Y+9	; 0x09
 214:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 218:	0e 94 79 00 	call	0xf2	; 0xf2 <ENABLE>
 21c:	8f e6       	ldi	r24, 0x6F	; 111
 21e:	97 e1       	ldi	r25, 0x17	; 23
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_cmd+0x104>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_cmd+0x10a>
 226:	00 00       	nop
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	05 c0       	rjmp	.+10     	; 0x236 <LCD_cmd+0x11a>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	11 f4       	brne	.+4      	; 0x234 <LCD_cmd+0x118>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	01 c0       	rjmp	.+2      	; 0x236 <LCD_cmd+0x11a>
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <LCD_init>:
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	6a 89       	ldd	r22, Y+18	; 0x12
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	89 89       	ldd	r24, Y+17	; 0x11
 24c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 250:	18 2f       	mov	r17, r24
 252:	6c 89       	ldd	r22, Y+20	; 0x14
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	8b 89       	ldd	r24, Y+19	; 0x13
 258:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 25c:	18 2b       	or	r17, r24
 25e:	6e 89       	ldd	r22, Y+22	; 0x16
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	8d 89       	ldd	r24, Y+21	; 0x15
 264:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 268:	18 2b       	or	r17, r24
 26a:	88 81       	ld	r24, Y
 26c:	88 23       	and	r24, r24
 26e:	19 f0       	breq	.+6      	; 0x276 <LCD_init+0x38>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	71 f1       	breq	.+92     	; 0x2d0 <LCD_init+0x92>
 274:	6e c0       	rjmp	.+220    	; 0x352 <LCD_init+0x114>
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 27e:	68 e2       	ldi	r22, 0x28	; 40
 280:	ce 01       	movw	r24, r28
 282:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 286:	6c e0       	ldi	r22, 0x0C	; 12
 288:	ce 01       	movw	r24, r28
 28a:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 28e:	66 e0       	ldi	r22, 0x06	; 6
 290:	ce 01       	movw	r24, r28
 292:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	ce 01       	movw	r24, r28
 29a:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 29e:	6a 85       	ldd	r22, Y+10	; 0x0a
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	89 85       	ldd	r24, Y+9	; 0x09
 2a4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 2a8:	18 2b       	or	r17, r24
 2aa:	6c 85       	ldd	r22, Y+12	; 0x0c
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 2b4:	18 2b       	or	r17, r24
 2b6:	6e 85       	ldd	r22, Y+14	; 0x0e
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 2bc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 2c0:	18 2b       	or	r17, r24
 2c2:	68 89       	ldd	r22, Y+16	; 0x10
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2c8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 2cc:	18 2b       	or	r17, r24
 2ce:	42 c0       	rjmp	.+132    	; 0x354 <LCD_init+0x116>
 2d0:	68 e3       	ldi	r22, 0x38	; 56
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 2d8:	6c e0       	ldi	r22, 0x0C	; 12
 2da:	ce 01       	movw	r24, r28
 2dc:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 2e0:	66 e0       	ldi	r22, 0x06	; 6
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 2f0:	6a 81       	ldd	r22, Y+2	; 0x02
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 2fa:	18 2b       	or	r17, r24
 2fc:	6c 81       	ldd	r22, Y+4	; 0x04
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 306:	18 2b       	or	r17, r24
 308:	6e 81       	ldd	r22, Y+6	; 0x06
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	8d 81       	ldd	r24, Y+5	; 0x05
 30e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 312:	18 2b       	or	r17, r24
 314:	68 85       	ldd	r22, Y+8	; 0x08
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 31e:	18 2b       	or	r17, r24
 320:	6a 85       	ldd	r22, Y+10	; 0x0a
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	89 85       	ldd	r24, Y+9	; 0x09
 326:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 32a:	18 2b       	or	r17, r24
 32c:	6c 85       	ldd	r22, Y+12	; 0x0c
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	8b 85       	ldd	r24, Y+11	; 0x0b
 332:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 336:	18 2b       	or	r17, r24
 338:	6e 85       	ldd	r22, Y+14	; 0x0e
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	8d 85       	ldd	r24, Y+13	; 0x0d
 33e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 342:	18 2b       	or	r17, r24
 344:	68 89       	ldd	r22, Y+16	; 0x10
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	8f 85       	ldd	r24, Y+15	; 0x0f
 34a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
 34e:	18 2b       	or	r17, r24
 350:	01 c0       	rjmp	.+2      	; 0x354 <LCD_init+0x116>
 352:	15 e0       	ldi	r17, 0x05	; 5
 354:	88 81       	ld	r24, Y
 356:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 35a:	fe 01       	movw	r30, r28
 35c:	01 90       	ld	r0, Z+
 35e:	00 20       	and	r0, r0
 360:	e9 f7       	brne	.-6      	; 0x35c <LCD_init+0x11e>
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	af 01       	movw	r20, r30
 366:	4c 1b       	sub	r20, r28
 368:	5d 0b       	sbc	r21, r29
 36a:	4f 5f       	subi	r20, 0xFF	; 255
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	be 01       	movw	r22, r28
 370:	83 e9       	ldi	r24, 0x93	; 147
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 8a 07 	call	0xf14	; 0xf14 <memcpy>
 378:	81 2f       	mov	r24, r17
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	08 95       	ret

00000382 <LCD_setCursor>:
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	19 f0       	breq	.+6      	; 0x38c <LCD_setCursor+0xa>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	41 f0       	breq	.+16     	; 0x39a <LCD_setCursor+0x18>
 38a:	0e c0       	rjmp	.+28     	; 0x3a8 <LCD_setCursor+0x26>
 38c:	61 58       	subi	r22, 0x81	; 129
 38e:	83 e9       	ldi	r24, 0x93	; 147
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
 39a:	61 54       	subi	r22, 0x41	; 65
 39c:	83 e9       	ldi	r24, 0x93	; 147
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_cmd>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	08 95       	ret

000003ac <LCD_char>:
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
 3b4:	16 2f       	mov	r17, r22
 3b6:	6e 89       	ldd	r22, Y+22	; 0x16
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	8d 89       	ldd	r24, Y+21	; 0x15
 3bc:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 3c0:	6a 89       	ldd	r22, Y+18	; 0x12
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	89 89       	ldd	r24, Y+17	; 0x11
 3c6:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 3ca:	6c 89       	ldd	r22, Y+20	; 0x14
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	8b 89       	ldd	r24, Y+19	; 0x13
 3d0:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 3d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 3d8:	81 11       	cpse	r24, r1
 3da:	6e c0       	rjmp	.+220    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 3dc:	41 2f       	mov	r20, r17
 3de:	44 1f       	adc	r20, r20
 3e0:	44 27       	eor	r20, r20
 3e2:	44 1f       	adc	r20, r20
 3e4:	68 89       	ldd	r22, Y+16	; 0x10
 3e6:	8f 85       	ldd	r24, Y+15	; 0x0f
 3e8:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 3ec:	41 2f       	mov	r20, r17
 3ee:	40 74       	andi	r20, 0x40	; 64
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	04 2e       	mov	r0, r20
 3f4:	45 2f       	mov	r20, r21
 3f6:	00 0c       	add	r0, r0
 3f8:	44 1f       	adc	r20, r20
 3fa:	55 0b       	sbc	r21, r21
 3fc:	00 0c       	add	r0, r0
 3fe:	44 1f       	adc	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	6e 85       	ldd	r22, Y+14	; 0x0e
 404:	8d 85       	ldd	r24, Y+13	; 0x0d
 406:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 40a:	41 2f       	mov	r20, r17
 40c:	40 72       	andi	r20, 0x20	; 32
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	55 95       	asr	r21
 412:	47 95       	ror	r20
 414:	55 95       	asr	r21
 416:	47 95       	ror	r20
 418:	55 95       	asr	r21
 41a:	47 95       	ror	r20
 41c:	55 95       	asr	r21
 41e:	47 95       	ror	r20
 420:	55 95       	asr	r21
 422:	47 95       	ror	r20
 424:	6c 85       	ldd	r22, Y+12	; 0x0c
 426:	8b 85       	ldd	r24, Y+11	; 0x0b
 428:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 42c:	41 2f       	mov	r20, r17
 42e:	40 71       	andi	r20, 0x10	; 16
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	55 95       	asr	r21
 434:	47 95       	ror	r20
 436:	55 95       	asr	r21
 438:	47 95       	ror	r20
 43a:	55 95       	asr	r21
 43c:	47 95       	ror	r20
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	6a 85       	ldd	r22, Y+10	; 0x0a
 444:	89 85       	ldd	r24, Y+9	; 0x09
 446:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 44a:	0e 94 79 00 	call	0xf2	; 0xf2 <ENABLE>
 44e:	8f e6       	ldi	r24, 0x6F	; 111
 450:	97 e1       	ldi	r25, 0x17	; 23
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	41 2f       	mov	r20, r17
 45c:	48 70       	andi	r20, 0x08	; 8
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	55 95       	asr	r21
 462:	47 95       	ror	r20
 464:	55 95       	asr	r21
 466:	47 95       	ror	r20
 468:	55 95       	asr	r21
 46a:	47 95       	ror	r20
 46c:	68 89       	ldd	r22, Y+16	; 0x10
 46e:	8f 85       	ldd	r24, Y+15	; 0x0f
 470:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 474:	41 2f       	mov	r20, r17
 476:	44 70       	andi	r20, 0x04	; 4
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	55 95       	asr	r21
 47c:	47 95       	ror	r20
 47e:	55 95       	asr	r21
 480:	47 95       	ror	r20
 482:	6e 85       	ldd	r22, Y+14	; 0x0e
 484:	8d 85       	ldd	r24, Y+13	; 0x0d
 486:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 48a:	41 2f       	mov	r20, r17
 48c:	42 70       	andi	r20, 0x02	; 2
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	55 95       	asr	r21
 492:	47 95       	ror	r20
 494:	6c 85       	ldd	r22, Y+12	; 0x0c
 496:	8b 85       	ldd	r24, Y+11	; 0x0b
 498:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 49c:	6a 85       	ldd	r22, Y+10	; 0x0a
 49e:	41 2f       	mov	r20, r17
 4a0:	41 70       	andi	r20, 0x01	; 1
 4a2:	89 85       	ldd	r24, Y+9	; 0x09
 4a4:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 4a8:	0e 94 79 00 	call	0xf2	; 0xf2 <ENABLE>
 4ac:	8f e6       	ldi	r24, 0x6F	; 111
 4ae:	97 e1       	ldi	r25, 0x17	; 23
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b6:	00 00       	nop
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	08 95       	ret

000004c0 <LCD_writeString>:
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	81 f0       	breq	.+32     	; 0x4ea <LCD_writeString+0x2a>
 4ca:	8c 01       	movw	r16, r24
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <LCD_writeString+0x1a>
 4d0:	83 e9       	ldi	r24, 0x93	; 147
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_char>
 4d8:	cf 5f       	subi	r28, 0xFF	; 255
 4da:	f8 01       	movw	r30, r16
 4dc:	ec 0f       	add	r30, r28
 4de:	f1 1d       	adc	r31, r1
 4e0:	60 81       	ld	r22, Z
 4e2:	61 11       	cpse	r22, r1
 4e4:	f5 cf       	rjmp	.-22     	; 0x4d0 <LCD_writeString+0x10>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <LCD_writeString+0x2c>
 4ea:	85 e0       	ldi	r24, 0x05	; 5
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <LCD_WriteInt>:
}


#define INDEX  4
void LCD_WriteInt(Uint32_t number)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <LCD_WriteInt+0x6>
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <LCD_WriteInt+0x8>
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	dc 01       	movw	r26, r24
 502:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 504:	4a e0       	ldi	r20, 0x0A	; 10
 506:	be 01       	movw	r22, r28
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	0e 94 93 07 	call	0xf26	; 0xf26 <__itoa_ncheck>
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	LCD_writeString(STR);
 510:	ce 01       	movw	r24, r28
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_writeString>
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 530:	8a e1       	ldi	r24, 0x1A	; 26
 532:	8a 95       	dec	r24
 534:	f1 f7       	brne	.-4      	; 0x532 <HULTRASONIC_vidTrigger+0xc>
 536:	00 c0       	rjmp	.+0      	; 0x538 <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>
 542:	08 95       	ret

00000544 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
 544:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <g_v_u16_ovfCounts>
 548:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <g_v_u16_ovfCounts+0x1>
 54c:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <g_v_u16_ovfCounts+0x2>
 550:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <g_v_u16_ovfCounts+0x3>
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	a1 1d       	adc	r26, r1
 558:	b1 1d       	adc	r27, r1
 55a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <g_v_u16_ovfCounts>
 55e:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <g_v_u16_ovfCounts+0x1>
 562:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <g_v_u16_ovfCounts+0x2>
 566:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <g_v_u16_ovfCounts+0x3>
 56a:	08 95       	ret

0000056c <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
 56c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_v_u8_flag>
 570:	81 11       	cpse	r24, r1
 572:	14 c0       	rjmp	.+40     	; 0x59c <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
 574:	0e 94 b2 05 	call	0xb64	; 0xb64 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_0 , FALL_EDGE);
 578:	62 e0       	ldi	r22, 0x02	; 2
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 13 04 	call	0x826	; 0x826 <vidExtInt_init>
		g_v_u8_flag = 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
 586:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <g_v_u16_ovfCounts>
 58a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <g_v_u16_ovfCounts+0x1>
 58e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <g_v_u16_ovfCounts+0x2>
 592:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
 596:	0e 94 9a 05 	call	0xb34	; 0xb34 <vidTimer2_start>
 59a:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
 59c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_v_u8_flag>
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <HULTRASONIC_vidSigCalc+0x3a>
 5a4:	56 c0       	rjmp	.+172    	; 0x652 <HULTRASONIC_vidSigCalc+0xe6>
	{
		vidTimer2_stop();
 5a6:	0e 94 a4 05 	call	0xb48	; 0xb48 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
 5aa:	0e 94 b4 05 	call	0xb68	; 0xb68 <MTIMER_u8GetTCNT>
 5ae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
 5b2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <g_v_u16_ovfCounts>
 5b6:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <g_v_u16_ovfCounts+0x1>
 5ba:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <g_v_u16_ovfCounts+0x2>
 5be:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <g_v_u16_ovfCounts+0x3>
 5c2:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <g_v_u16_ovf>
 5c6:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <g_v_u16_ovf+0x1>
 5ca:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <g_v_u16_ovf+0x2>
 5ce:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
 5d2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <g_v_u8_cap>
 5d6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <g_v_u16_ovf>
 5da:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <g_v_u16_ovf+0x1>
 5de:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <g_v_u16_ovf+0x2>
 5e2:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <g_v_u16_ovf+0x3>
 5e6:	ba 2f       	mov	r27, r26
 5e8:	a9 2f       	mov	r26, r25
 5ea:	98 2f       	mov	r25, r24
 5ec:	88 27       	eor	r24, r24
 5ee:	bc 01       	movw	r22, r24
 5f0:	cd 01       	movw	r24, r26
 5f2:	62 0f       	add	r22, r18
 5f4:	71 1d       	adc	r23, r1
 5f6:	81 1d       	adc	r24, r1
 5f8:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = ((float64_t)global_u32Ticks / 932.95)-2.0;
 5fa:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__floatunsisf>
 5fe:	2d ec       	ldi	r18, 0xCD	; 205
 600:	3c e3       	ldi	r19, 0x3C	; 60
 602:	49 e6       	ldi	r20, 0x69	; 105
 604:	54 e4       	ldi	r21, 0x44	; 68
 606:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__divsf3>
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	50 e4       	ldi	r21, 0x40	; 64
 612:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__subsf3>
 616:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <global_f64distance>
 61a:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <global_f64distance+0x1>
 61e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <global_f64distance+0x2>
 622:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
 626:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <g_v_u16_ovf>
 62a:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <g_v_u16_ovf+0x1>
 62e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <g_v_u16_ovf+0x2>
 632:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <g_v_u16_ovf+0x3>
 636:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <g_v_u16_ovfCounts>
 63a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <g_v_u16_ovfCounts+0x1>
 63e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <g_v_u16_ovfCounts+0x2>
 642:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <g_v_u16_ovfCounts+0x3>
 646:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_0 , RISE_EDGE);
 64a:	63 e0       	ldi	r22, 0x03	; 3
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 13 04 	call	0x826	; 0x826 <vidExtInt_init>
 652:	08 95       	ret

00000654 <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
 654:	41 e0       	ldi	r20, 0x01	; 1
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	62 e0       	ldi	r22, 0x02	; 2
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	0e 94 5e 03 	call	0x6bc	; 0x6bc <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	62 e0       	ldi	r22, 0x02	; 2
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	0e 94 98 03 	call	0x730	; 0x730 <DIO_writePIN>

	(void) vidExtInt_init(INT_0 , RISE_EDGE);
 672:	63 e0       	ldi	r22, 0x03	; 3
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 13 04 	call	0x826	; 0x826 <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	0e 94 7e 05 	call	0xafc	; 0xafc <u8Timer2_setPrescallar>
	(void) vidTimer2_OvfIrqEnable();
 686:	0e 94 92 05 	call	0xb24	; 0xb24 <vidTimer2_OvfIrqEnable>

	 MTIMER_vidEnableGlobalInterrupt();
 68a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MTIMER_vidEnableGlobalInterrupt>
 68e:	08 95       	ret

00000690 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
 690:	0e 94 93 02 	call	0x526	; 0x526 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
 694:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <global_f64distance>
 698:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <global_f64distance+0x1>
 69c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <global_f64distance+0x2>
 6a0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <global_f64distance+0x3>
}
 6a4:	08 95       	ret

000006a6 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
 6a6:	0e 94 ab 05 	call	0xb56	; 0xb56 <vidTimer2_setcbf_OVF>
 6aa:	08 95       	ret

000006ac <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
 6ac:	0e 94 9c 04 	call	0x938	; 0x938 <MEXTINT_vidCallBackFunc>
 6b0:	08 95       	ret

000006b2 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
 6b2:	0e 94 49 00 	call	0x92	; 0x92 <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
 6b6:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_vidStart>
 6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <main+0x4>

000006bc <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 6bc:	68 30       	cpi	r22, 0x08	; 8
 6be:	a0 f5       	brcc	.+104    	; 0x728 <DIO_init+0x6c>
	{
		if (port == porta)
 6c0:	81 11       	cpse	r24, r1
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 6c4:	8a b3       	in	r24, 0x1a	; 26
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_init+0x12>
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_init+0xe>
 6d2:	48 2b       	or	r20, r24
 6d4:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret
		}
		else if (port == portb)
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	59 f4       	brne	.+22     	; 0x6f4 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 6de:	87 b3       	in	r24, 0x17	; 23
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_init+0x2c>
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_init+0x28>
 6ec:	48 2b       	or	r20, r24
 6ee:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	08 95       	ret
		}
		else if (port == portc)
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	59 f4       	brne	.+22     	; 0x70e <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 6f8:	84 b3       	in	r24, 0x14	; 20
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_init+0x46>
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	6a 95       	dec	r22
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_init+0x42>
 706:	48 2b       	or	r20, r24
 708:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	08 95       	ret
		}
		else if (port == portd)
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	69 f4       	brne	.+26     	; 0x72c <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 712:	81 b3       	in	r24, 0x11	; 17
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_init+0x60>
 718:	44 0f       	add	r20, r20
 71a:	55 1f       	adc	r21, r21
 71c:	6a 95       	dec	r22
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_init+0x5c>
 720:	48 2b       	or	r20, r24
 722:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 72c:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 72e:	08 95       	ret

00000730 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 730:	68 30       	cpi	r22, 0x08	; 8
 732:	08 f0       	brcs	.+2      	; 0x736 <DIO_writePIN+0x6>
 734:	74 c0       	rjmp	.+232    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	{
		if (port == porta)
 736:	81 11       	cpse	r24, r1
 738:	1b c0       	rjmp	.+54     	; 0x770 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 73a:	41 30       	cpi	r20, 0x01	; 1
 73c:	61 f4       	brne	.+24     	; 0x756 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 73e:	2b b3       	in	r18, 0x1b	; 27
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_writePIN+0x1a>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_writePIN+0x16>
 74e:	82 2b       	or	r24, r18
 750:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 756:	2b b3       	in	r18, 0x1b	; 27
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_writePIN+0x32>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_writePIN+0x2e>
 766:	80 95       	com	r24
 768:	82 23       	and	r24, r18
 76a:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
		}
		else if (port == portb)
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	d9 f4       	brne	.+54     	; 0x7aa <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 774:	41 30       	cpi	r20, 0x01	; 1
 776:	61 f4       	brne	.+24     	; 0x790 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 778:	28 b3       	in	r18, 0x18	; 24
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_writePIN+0x54>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_writePIN+0x50>
 788:	82 2b       	or	r24, r18
 78a:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 790:	28 b3       	in	r18, 0x18	; 24
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_writePIN+0x6c>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_writePIN+0x68>
 7a0:	80 95       	com	r24
 7a2:	82 23       	and	r24, r18
 7a4:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
		}
		else if (port == portc)
 7aa:	82 30       	cpi	r24, 0x02	; 2
 7ac:	d9 f4       	brne	.+54     	; 0x7e4 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 7ae:	41 30       	cpi	r20, 0x01	; 1
 7b0:	61 f4       	brne	.+24     	; 0x7ca <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 7b2:	25 b3       	in	r18, 0x15	; 21
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_writePIN+0x8e>
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	6a 95       	dec	r22
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_writePIN+0x8a>
 7c2:	82 2b       	or	r24, r18
 7c4:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 7ca:	25 b3       	in	r18, 0x15	; 21
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_writePIN+0xa6>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_writePIN+0xa2>
 7da:	80 95       	com	r24
 7dc:	82 23       	and	r24, r18
 7de:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
		}
		else if (port == portd)
 7e4:	83 30       	cpi	r24, 0x03	; 3
 7e6:	e9 f4       	brne	.+58     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		{
			if (state == STD_HIGH)
 7e8:	41 30       	cpi	r20, 0x01	; 1
 7ea:	61 f4       	brne	.+24     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			{
				WR_PORT_D |= (1U << pin);
 7ec:	22 b3       	in	r18, 0x12	; 18
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_writePIN+0xc8>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_writePIN+0xc4>
 7fc:	82 2b       	or	r24, r18
 7fe:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 804:	22 b3       	in	r18, 0x12	; 18
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	6a 95       	dec	r22
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	80 95       	com	r24
 816:	82 23       	and	r24, r18
 818:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 822:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 824:	08 95       	ret

00000826 <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF1);
	SET_BIT(GICR_REG, INT0);
 826:	83 30       	cpi	r24, 0x03	; 3
 828:	08 f0       	brcs	.+2      	; 0x82c <vidExtInt_init+0x6>
 82a:	80 c0       	rjmp	.+256    	; 0x92c <__stack+0xcd>
 82c:	64 30       	cpi	r22, 0x04	; 4
 82e:	08 f0       	brcs	.+2      	; 0x832 <vidExtInt_init+0xc>
 830:	7f c0       	rjmp	.+254    	; 0x930 <__stack+0xd1>
 832:	81 11       	cpse	r24, r1
 834:	30 c0       	rjmp	.+96     	; 0x896 <__stack+0x37>
 836:	61 30       	cpi	r22, 0x01	; 1
 838:	71 f0       	breq	.+28     	; 0x856 <vidExtInt_init+0x30>
 83a:	28 f0       	brcs	.+10     	; 0x846 <vidExtInt_init+0x20>
 83c:	62 30       	cpi	r22, 0x02	; 2
 83e:	99 f0       	breq	.+38     	; 0x866 <__stack+0x7>
 840:	63 30       	cpi	r22, 0x03	; 3
 842:	c9 f0       	breq	.+50     	; 0x876 <__stack+0x17>
 844:	20 c0       	rjmp	.+64     	; 0x886 <__stack+0x27>
 846:	85 b7       	in	r24, 0x35	; 53
 848:	8e 7f       	andi	r24, 0xFE	; 254
 84a:	85 bf       	out	0x35, r24	; 53
 84c:	85 b7       	in	r24, 0x35	; 53
 84e:	8d 7f       	andi	r24, 0xFD	; 253
 850:	85 bf       	out	0x35, r24	; 53
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	19 c0       	rjmp	.+50     	; 0x888 <__stack+0x29>
 856:	85 b7       	in	r24, 0x35	; 53
 858:	81 60       	ori	r24, 0x01	; 1
 85a:	85 bf       	out	0x35, r24	; 53
 85c:	85 b7       	in	r24, 0x35	; 53
 85e:	8d 7f       	andi	r24, 0xFD	; 253
 860:	85 bf       	out	0x35, r24	; 53
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	11 c0       	rjmp	.+34     	; 0x888 <__stack+0x29>
 866:	85 b7       	in	r24, 0x35	; 53
 868:	8e 7f       	andi	r24, 0xFE	; 254
 86a:	85 bf       	out	0x35, r24	; 53
 86c:	85 b7       	in	r24, 0x35	; 53
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	85 bf       	out	0x35, r24	; 53
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	09 c0       	rjmp	.+18     	; 0x888 <__stack+0x29>
 876:	85 b7       	in	r24, 0x35	; 53
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	85 bf       	out	0x35, r24	; 53
 87c:	85 b7       	in	r24, 0x35	; 53
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	85 bf       	out	0x35, r24	; 53
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	01 c0       	rjmp	.+2      	; 0x888 <__stack+0x29>
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	9a b7       	in	r25, 0x3a	; 58
 88a:	90 64       	ori	r25, 0x40	; 64
 88c:	9a bf       	out	0x3a, r25	; 58
 88e:	9b b7       	in	r25, 0x3b	; 59
 890:	90 64       	ori	r25, 0x40	; 64
 892:	9b bf       	out	0x3b, r25	; 59
 894:	08 95       	ret
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	81 f5       	brne	.+96     	; 0x8fa <__stack+0x9b>
 89a:	61 30       	cpi	r22, 0x01	; 1
 89c:	71 f0       	breq	.+28     	; 0x8ba <__stack+0x5b>
 89e:	28 f0       	brcs	.+10     	; 0x8aa <__stack+0x4b>
 8a0:	62 30       	cpi	r22, 0x02	; 2
 8a2:	99 f0       	breq	.+38     	; 0x8ca <__stack+0x6b>
 8a4:	63 30       	cpi	r22, 0x03	; 3
 8a6:	c9 f0       	breq	.+50     	; 0x8da <__stack+0x7b>
 8a8:	20 c0       	rjmp	.+64     	; 0x8ea <__stack+0x8b>
 8aa:	85 b7       	in	r24, 0x35	; 53
 8ac:	8b 7f       	andi	r24, 0xFB	; 251
 8ae:	85 bf       	out	0x35, r24	; 53
 8b0:	85 b7       	in	r24, 0x35	; 53
 8b2:	87 7f       	andi	r24, 0xF7	; 247
 8b4:	85 bf       	out	0x35, r24	; 53
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	19 c0       	rjmp	.+50     	; 0x8ec <__stack+0x8d>
 8ba:	85 b7       	in	r24, 0x35	; 53
 8bc:	84 60       	ori	r24, 0x04	; 4
 8be:	85 bf       	out	0x35, r24	; 53
 8c0:	85 b7       	in	r24, 0x35	; 53
 8c2:	87 7f       	andi	r24, 0xF7	; 247
 8c4:	85 bf       	out	0x35, r24	; 53
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	11 c0       	rjmp	.+34     	; 0x8ec <__stack+0x8d>
 8ca:	85 b7       	in	r24, 0x35	; 53
 8cc:	8b 7f       	andi	r24, 0xFB	; 251
 8ce:	85 bf       	out	0x35, r24	; 53
 8d0:	85 b7       	in	r24, 0x35	; 53
 8d2:	88 60       	ori	r24, 0x08	; 8
 8d4:	85 bf       	out	0x35, r24	; 53
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	09 c0       	rjmp	.+18     	; 0x8ec <__stack+0x8d>
 8da:	85 b7       	in	r24, 0x35	; 53
 8dc:	84 60       	ori	r24, 0x04	; 4
 8de:	85 bf       	out	0x35, r24	; 53
 8e0:	85 b7       	in	r24, 0x35	; 53
 8e2:	88 60       	ori	r24, 0x08	; 8
 8e4:	85 bf       	out	0x35, r24	; 53
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <__stack+0x8d>
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	9b b7       	in	r25, 0x3b	; 59
 8ee:	90 68       	ori	r25, 0x80	; 128
 8f0:	9b bf       	out	0x3b, r25	; 59
 8f2:	9a b7       	in	r25, 0x3a	; 58
 8f4:	90 68       	ori	r25, 0x80	; 128
 8f6:	9a bf       	out	0x3a, r25	; 58
 8f8:	08 95       	ret
 8fa:	82 30       	cpi	r24, 0x02	; 2
 8fc:	d9 f4       	brne	.+54     	; 0x934 <__stack+0xd5>
 8fe:	62 30       	cpi	r22, 0x02	; 2
 900:	19 f0       	breq	.+6      	; 0x908 <__stack+0xa9>
 902:	63 30       	cpi	r22, 0x03	; 3
 904:	31 f0       	breq	.+12     	; 0x912 <__stack+0xb3>
 906:	0a c0       	rjmp	.+20     	; 0x91c <__stack+0xbd>
 908:	84 b7       	in	r24, 0x34	; 52
 90a:	8f 7b       	andi	r24, 0xBF	; 191
 90c:	84 bf       	out	0x34, r24	; 52
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0xbf>
 912:	84 b7       	in	r24, 0x34	; 52
 914:	80 64       	ori	r24, 0x40	; 64
 916:	84 bf       	out	0x34, r24	; 52
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	01 c0       	rjmp	.+2      	; 0x91e <__stack+0xbf>
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	9b b7       	in	r25, 0x3b	; 59
 920:	90 62       	ori	r25, 0x20	; 32
 922:	9b bf       	out	0x3b, r25	; 59
 924:	9a b7       	in	r25, 0x3a	; 58
 926:	90 62       	ori	r25, 0x20	; 32
 928:	9a bf       	out	0x3a, r25	; 58
 92a:	08 95       	ret
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	08 95       	ret
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	08 95       	ret
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	08 95       	ret

00000938 <MEXTINT_vidCallBackFunc>:
 938:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <callBack+0x1>
 93c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <callBack>
 940:	08 95       	ret

00000942 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
 942:	1f 92       	push	r1
 944:	0f 92       	push	r0
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	0f 92       	push	r0
 94a:	11 24       	eor	r1, r1
 94c:	2f 93       	push	r18
 94e:	3f 93       	push	r19
 950:	4f 93       	push	r20
 952:	5f 93       	push	r21
 954:	6f 93       	push	r22
 956:	7f 93       	push	r23
 958:	8f 93       	push	r24
 95a:	9f 93       	push	r25
 95c:	af 93       	push	r26
 95e:	bf 93       	push	r27
 960:	ef 93       	push	r30
 962:	ff 93       	push	r31
	callBack();
 964:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <callBack>
 968:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <callBack+0x1>
 96c:	09 95       	icall
}
 96e:	ff 91       	pop	r31
 970:	ef 91       	pop	r30
 972:	bf 91       	pop	r27
 974:	af 91       	pop	r26
 976:	9f 91       	pop	r25
 978:	8f 91       	pop	r24
 97a:	7f 91       	pop	r23
 97c:	6f 91       	pop	r22
 97e:	5f 91       	pop	r21
 980:	4f 91       	pop	r20
 982:	3f 91       	pop	r19
 984:	2f 91       	pop	r18
 986:	0f 90       	pop	r0
 988:	0f be       	out	0x3f, r0	; 63
 98a:	0f 90       	pop	r0
 98c:	1f 90       	pop	r1
 98e:	18 95       	reti

00000990 <__vector_2>:

ISR(INT1_vect)
{
 990:	1f 92       	push	r1
 992:	0f 92       	push	r0
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	0f 92       	push	r0
 998:	11 24       	eor	r1, r1
 99a:	2f 93       	push	r18
 99c:	3f 93       	push	r19
 99e:	4f 93       	push	r20
 9a0:	5f 93       	push	r21
 9a2:	6f 93       	push	r22
 9a4:	7f 93       	push	r23
 9a6:	8f 93       	push	r24
 9a8:	9f 93       	push	r25
 9aa:	af 93       	push	r26
 9ac:	bf 93       	push	r27
 9ae:	ef 93       	push	r30
 9b0:	ff 93       	push	r31
	callBackFunc();
 9b2:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <callBackFunc>
 9b6:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <callBackFunc+0x1>
 9ba:	09 95       	icall
}
 9bc:	ff 91       	pop	r31
 9be:	ef 91       	pop	r30
 9c0:	bf 91       	pop	r27
 9c2:	af 91       	pop	r26
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	7f 91       	pop	r23
 9ca:	6f 91       	pop	r22
 9cc:	5f 91       	pop	r21
 9ce:	4f 91       	pop	r20
 9d0:	3f 91       	pop	r19
 9d2:	2f 91       	pop	r18
 9d4:	0f 90       	pop	r0
 9d6:	0f be       	out	0x3f, r0	; 63
 9d8:	0f 90       	pop	r0
 9da:	1f 90       	pop	r1
 9dc:	18 95       	reti

000009de <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
 9de:	1f 92       	push	r1
 9e0:	0f 92       	push	r0
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	0f 92       	push	r0
 9e6:	11 24       	eor	r1, r1
 9e8:	2f 93       	push	r18
 9ea:	3f 93       	push	r19
 9ec:	4f 93       	push	r20
 9ee:	5f 93       	push	r21
 9f0:	6f 93       	push	r22
 9f2:	7f 93       	push	r23
 9f4:	8f 93       	push	r24
 9f6:	9f 93       	push	r25
 9f8:	af 93       	push	r26
 9fa:	bf 93       	push	r27
 9fc:	ef 93       	push	r30
 9fe:	ff 93       	push	r31
 a00:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sg_Timer0_callBackPtr>
 a04:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <sg_Timer0_callBackPtr+0x1>
 a08:	89 2b       	or	r24, r25
 a0a:	41 f0       	breq	.+16     	; 0xa1c <__vector_11+0x3e>
 a0c:	88 b7       	in	r24, 0x38	; 56
 a0e:	8e 7f       	andi	r24, 0xFE	; 254
 a10:	88 bf       	out	0x38, r24	; 56
 a12:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <sg_Timer0_callBackPtr>
 a16:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <sg_Timer0_callBackPtr+0x1>
 a1a:	09 95       	icall
 a1c:	ff 91       	pop	r31
 a1e:	ef 91       	pop	r30
 a20:	bf 91       	pop	r27
 a22:	af 91       	pop	r26
 a24:	9f 91       	pop	r25
 a26:	8f 91       	pop	r24
 a28:	7f 91       	pop	r23
 a2a:	6f 91       	pop	r22
 a2c:	5f 91       	pop	r21
 a2e:	4f 91       	pop	r20
 a30:	3f 91       	pop	r19
 a32:	2f 91       	pop	r18
 a34:	0f 90       	pop	r0
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	0f 90       	pop	r0
 a3a:	1f 90       	pop	r1
 a3c:	18 95       	reti

00000a3e <__vector_9>:
 a3e:	1f 92       	push	r1
 a40:	0f 92       	push	r0
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	0f 92       	push	r0
 a46:	11 24       	eor	r1, r1
 a48:	2f 93       	push	r18
 a4a:	3f 93       	push	r19
 a4c:	4f 93       	push	r20
 a4e:	5f 93       	push	r21
 a50:	6f 93       	push	r22
 a52:	7f 93       	push	r23
 a54:	8f 93       	push	r24
 a56:	9f 93       	push	r25
 a58:	af 93       	push	r26
 a5a:	bf 93       	push	r27
 a5c:	ef 93       	push	r30
 a5e:	ff 93       	push	r31
 a60:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <sg_Timer1_callBackPtr>
 a64:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <sg_Timer1_callBackPtr+0x1>
 a68:	89 2b       	or	r24, r25
 a6a:	41 f0       	breq	.+16     	; 0xa7c <__vector_9+0x3e>
 a6c:	88 b7       	in	r24, 0x38	; 56
 a6e:	8b 7f       	andi	r24, 0xFB	; 251
 a70:	88 bf       	out	0x38, r24	; 56
 a72:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <sg_Timer1_callBackPtr>
 a76:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <sg_Timer1_callBackPtr+0x1>
 a7a:	09 95       	icall
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <enuTimer2_init>:
 a9e:	84 30       	cpi	r24, 0x04	; 4
 aa0:	48 f5       	brcc	.+82     	; 0xaf4 <enuTimer2_init+0x56>
 aa2:	14 bc       	out	0x24, r1	; 36
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	71 f0       	breq	.+28     	; 0xac4 <enuTimer2_init+0x26>
 aa8:	28 f0       	brcs	.+10     	; 0xab4 <enuTimer2_init+0x16>
 aaa:	82 30       	cpi	r24, 0x02	; 2
 aac:	99 f0       	breq	.+38     	; 0xad4 <enuTimer2_init+0x36>
 aae:	83 30       	cpi	r24, 0x03	; 3
 ab0:	c9 f0       	breq	.+50     	; 0xae4 <enuTimer2_init+0x46>
 ab2:	22 c0       	rjmp	.+68     	; 0xaf8 <enuTimer2_init+0x5a>
 ab4:	85 b5       	in	r24, 0x25	; 37
 ab6:	87 7f       	andi	r24, 0xF7	; 247
 ab8:	85 bd       	out	0x25, r24	; 37
 aba:	85 b5       	in	r24, 0x25	; 37
 abc:	8f 7b       	andi	r24, 0xBF	; 191
 abe:	85 bd       	out	0x25, r24	; 37
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	08 95       	ret
 ac4:	85 b5       	in	r24, 0x25	; 37
 ac6:	87 7f       	andi	r24, 0xF7	; 247
 ac8:	85 bd       	out	0x25, r24	; 37
 aca:	85 b5       	in	r24, 0x25	; 37
 acc:	80 64       	ori	r24, 0x40	; 64
 ace:	85 bd       	out	0x25, r24	; 37
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	08 95       	ret
 ad4:	85 b5       	in	r24, 0x25	; 37
 ad6:	88 60       	ori	r24, 0x08	; 8
 ad8:	85 bd       	out	0x25, r24	; 37
 ada:	85 b5       	in	r24, 0x25	; 37
 adc:	8f 7b       	andi	r24, 0xBF	; 191
 ade:	85 bd       	out	0x25, r24	; 37
 ae0:	80 e0       	ldi	r24, 0x00	; 0
 ae2:	08 95       	ret
 ae4:	85 b5       	in	r24, 0x25	; 37
 ae6:	88 60       	ori	r24, 0x08	; 8
 ae8:	85 bd       	out	0x25, r24	; 37
 aea:	85 b5       	in	r24, 0x25	; 37
 aec:	80 64       	ori	r24, 0x40	; 64
 aee:	85 bd       	out	0x25, r24	; 37
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	08 95       	ret
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	08 95       	ret
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	08 95       	ret

00000afc <u8Timer2_setPrescallar>:
 afc:	88 30       	cpi	r24, 0x08	; 8
 afe:	70 f4       	brcc	.+28     	; 0xb1c <u8Timer2_setPrescallar+0x20>
 b00:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <global_prescaller>
 b04:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <global_timerStatus>
 b08:	91 30       	cpi	r25, 0x01	; 1
 b0a:	51 f4       	brne	.+20     	; 0xb20 <u8Timer2_setPrescallar+0x24>
 b0c:	95 b5       	in	r25, 0x25	; 37
 b0e:	98 7f       	andi	r25, 0xF8	; 248
 b10:	89 2b       	or	r24, r25
 b12:	95 b5       	in	r25, 0x25	; 37
 b14:	89 2b       	or	r24, r25
 b16:	85 bd       	out	0x25, r24	; 37
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	08 95       	ret
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	08 95       	ret
 b20:	80 e0       	ldi	r24, 0x00	; 0
 b22:	08 95       	ret

00000b24 <vidTimer2_OvfIrqEnable>:
 b24:	88 b7       	in	r24, 0x38	; 56
 b26:	80 64       	ori	r24, 0x40	; 64
 b28:	88 bf       	out	0x38, r24	; 56
 b2a:	89 b7       	in	r24, 0x39	; 57
 b2c:	80 64       	ori	r24, 0x40	; 64
 b2e:	89 bf       	out	0x39, r24	; 57
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	08 95       	ret

00000b34 <vidTimer2_start>:
 b34:	95 b5       	in	r25, 0x25	; 37
 b36:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <global_prescaller>
 b3a:	89 2b       	or	r24, r25
 b3c:	85 bd       	out	0x25, r24	; 37
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <global_timerStatus>
 b44:	80 e0       	ldi	r24, 0x00	; 0
 b46:	08 95       	ret

00000b48 <vidTimer2_stop>:
 b48:	85 b5       	in	r24, 0x25	; 37
 b4a:	88 7f       	andi	r24, 0xF8	; 248
 b4c:	85 bd       	out	0x25, r24	; 37
 b4e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <global_timerStatus>
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	08 95       	ret

00000b56 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	21 f0       	breq	.+8      	; 0xb62 <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
 b5a:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <globalCallFunc+0x1>
 b5e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <globalCallFunc>
 b62:	08 95       	ret

00000b64 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
 b64:	14 bc       	out	0x24, r1	; 36
 b66:	08 95       	ret

00000b68 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
 b68:	84 b5       	in	r24, 0x24	; 36
}
 b6a:	08 95       	ret

00000b6c <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
 b6c:	8f b7       	in	r24, 0x3f	; 63
 b6e:	80 68       	ori	r24, 0x80	; 128
 b70:	8f bf       	out	0x3f, r24	; 63
 b72:	08 95       	ret

00000b74 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
 b74:	1f 92       	push	r1
 b76:	0f 92       	push	r0
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	0f 92       	push	r0
 b7c:	11 24       	eor	r1, r1
 b7e:	2f 93       	push	r18
 b80:	3f 93       	push	r19
 b82:	4f 93       	push	r20
 b84:	5f 93       	push	r21
 b86:	6f 93       	push	r22
 b88:	7f 93       	push	r23
 b8a:	8f 93       	push	r24
 b8c:	9f 93       	push	r25
 b8e:	af 93       	push	r26
 b90:	bf 93       	push	r27
 b92:	ef 93       	push	r30
 b94:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
 b96:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <counter.1821>
 b9a:	8f 5f       	subi	r24, 0xFF	; 255
 b9c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <counter.1821>
	if(counter == global_ovf)
 ba0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <global_ovf>
 ba4:	89 13       	cpse	r24, r25
 ba6:	09 c0       	rjmp	.+18     	; 0xbba <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
 ba8:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <globalCallFunc>
 bac:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <globalCallFunc+0x1>
 bb0:	30 97       	sbiw	r30, 0x00	; 0
 bb2:	19 f0       	breq	.+6      	; 0xbba <__vector_5+0x46>
		{
			counter = 0;
 bb4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <counter.1821>

			globalCallFunc();
 bb8:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
 bba:	ff 91       	pop	r31
 bbc:	ef 91       	pop	r30
 bbe:	bf 91       	pop	r27
 bc0:	af 91       	pop	r26
 bc2:	9f 91       	pop	r25
 bc4:	8f 91       	pop	r24
 bc6:	7f 91       	pop	r23
 bc8:	6f 91       	pop	r22
 bca:	5f 91       	pop	r21
 bcc:	4f 91       	pop	r20
 bce:	3f 91       	pop	r19
 bd0:	2f 91       	pop	r18
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

00000bdc <__subsf3>:
 bdc:	50 58       	subi	r21, 0x80	; 128

00000bde <__addsf3>:
 bde:	bb 27       	eor	r27, r27
 be0:	aa 27       	eor	r26, r26
 be2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3x>
 be6:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__fp_round>
 bea:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscA>
 bee:	38 f0       	brcs	.+14     	; 0xbfe <__addsf3+0x20>
 bf0:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_pscB>
 bf4:	20 f0       	brcs	.+8      	; 0xbfe <__addsf3+0x20>
 bf6:	39 f4       	brne	.+14     	; 0xc06 <__addsf3+0x28>
 bf8:	9f 3f       	cpi	r25, 0xFF	; 255
 bfa:	19 f4       	brne	.+6      	; 0xc02 <__addsf3+0x24>
 bfc:	26 f4       	brtc	.+8      	; 0xc06 <__addsf3+0x28>
 bfe:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__fp_nan>
 c02:	0e f4       	brtc	.+2      	; 0xc06 <__addsf3+0x28>
 c04:	e0 95       	com	r30
 c06:	e7 fb       	bst	r30, 7
 c08:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>

00000c0c <__addsf3x>:
 c0c:	e9 2f       	mov	r30, r25
 c0e:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_split3>
 c12:	58 f3       	brcs	.-42     	; 0xbea <__addsf3+0xc>
 c14:	ba 17       	cp	r27, r26
 c16:	62 07       	cpc	r22, r18
 c18:	73 07       	cpc	r23, r19
 c1a:	84 07       	cpc	r24, r20
 c1c:	95 07       	cpc	r25, r21
 c1e:	20 f0       	brcs	.+8      	; 0xc28 <__addsf3x+0x1c>
 c20:	79 f4       	brne	.+30     	; 0xc40 <__addsf3x+0x34>
 c22:	a6 f5       	brtc	.+104    	; 0xc8c <__addsf3x+0x80>
 c24:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__fp_zero>
 c28:	0e f4       	brtc	.+2      	; 0xc2c <__addsf3x+0x20>
 c2a:	e0 95       	com	r30
 c2c:	0b 2e       	mov	r0, r27
 c2e:	ba 2f       	mov	r27, r26
 c30:	a0 2d       	mov	r26, r0
 c32:	0b 01       	movw	r0, r22
 c34:	b9 01       	movw	r22, r18
 c36:	90 01       	movw	r18, r0
 c38:	0c 01       	movw	r0, r24
 c3a:	ca 01       	movw	r24, r20
 c3c:	a0 01       	movw	r20, r0
 c3e:	11 24       	eor	r1, r1
 c40:	ff 27       	eor	r31, r31
 c42:	59 1b       	sub	r21, r25
 c44:	99 f0       	breq	.+38     	; 0xc6c <__addsf3x+0x60>
 c46:	59 3f       	cpi	r21, 0xF9	; 249
 c48:	50 f4       	brcc	.+20     	; 0xc5e <__addsf3x+0x52>
 c4a:	50 3e       	cpi	r21, 0xE0	; 224
 c4c:	68 f1       	brcs	.+90     	; 0xca8 <__addsf3x+0x9c>
 c4e:	1a 16       	cp	r1, r26
 c50:	f0 40       	sbci	r31, 0x00	; 0
 c52:	a2 2f       	mov	r26, r18
 c54:	23 2f       	mov	r18, r19
 c56:	34 2f       	mov	r19, r20
 c58:	44 27       	eor	r20, r20
 c5a:	58 5f       	subi	r21, 0xF8	; 248
 c5c:	f3 cf       	rjmp	.-26     	; 0xc44 <__addsf3x+0x38>
 c5e:	46 95       	lsr	r20
 c60:	37 95       	ror	r19
 c62:	27 95       	ror	r18
 c64:	a7 95       	ror	r26
 c66:	f0 40       	sbci	r31, 0x00	; 0
 c68:	53 95       	inc	r21
 c6a:	c9 f7       	brne	.-14     	; 0xc5e <__addsf3x+0x52>
 c6c:	7e f4       	brtc	.+30     	; 0xc8c <__addsf3x+0x80>
 c6e:	1f 16       	cp	r1, r31
 c70:	ba 0b       	sbc	r27, r26
 c72:	62 0b       	sbc	r22, r18
 c74:	73 0b       	sbc	r23, r19
 c76:	84 0b       	sbc	r24, r20
 c78:	ba f0       	brmi	.+46     	; 0xca8 <__addsf3x+0x9c>
 c7a:	91 50       	subi	r25, 0x01	; 1
 c7c:	a1 f0       	breq	.+40     	; 0xca6 <__addsf3x+0x9a>
 c7e:	ff 0f       	add	r31, r31
 c80:	bb 1f       	adc	r27, r27
 c82:	66 1f       	adc	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	c2 f7       	brpl	.-16     	; 0xc7a <__addsf3x+0x6e>
 c8a:	0e c0       	rjmp	.+28     	; 0xca8 <__addsf3x+0x9c>
 c8c:	ba 0f       	add	r27, r26
 c8e:	62 1f       	adc	r22, r18
 c90:	73 1f       	adc	r23, r19
 c92:	84 1f       	adc	r24, r20
 c94:	48 f4       	brcc	.+18     	; 0xca8 <__addsf3x+0x9c>
 c96:	87 95       	ror	r24
 c98:	77 95       	ror	r23
 c9a:	67 95       	ror	r22
 c9c:	b7 95       	ror	r27
 c9e:	f7 95       	ror	r31
 ca0:	9e 3f       	cpi	r25, 0xFE	; 254
 ca2:	08 f0       	brcs	.+2      	; 0xca6 <__addsf3x+0x9a>
 ca4:	b0 cf       	rjmp	.-160    	; 0xc06 <__addsf3+0x28>
 ca6:	93 95       	inc	r25
 ca8:	88 0f       	add	r24, r24
 caa:	08 f0       	brcs	.+2      	; 0xcae <__addsf3x+0xa2>
 cac:	99 27       	eor	r25, r25
 cae:	ee 0f       	add	r30, r30
 cb0:	97 95       	ror	r25
 cb2:	87 95       	ror	r24
 cb4:	08 95       	ret

00000cb6 <__divsf3>:
 cb6:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3x>
 cba:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__fp_round>
 cbe:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_pscB>
 cc2:	58 f0       	brcs	.+22     	; 0xcda <__divsf3+0x24>
 cc4:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscA>
 cc8:	40 f0       	brcs	.+16     	; 0xcda <__divsf3+0x24>
 cca:	29 f4       	brne	.+10     	; 0xcd6 <__divsf3+0x20>
 ccc:	5f 3f       	cpi	r21, 0xFF	; 255
 cce:	29 f0       	breq	.+10     	; 0xcda <__divsf3+0x24>
 cd0:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>
 cd4:	51 11       	cpse	r21, r1
 cd6:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__fp_szero>
 cda:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__fp_nan>

00000cde <__divsf3x>:
 cde:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_split3>
 ce2:	68 f3       	brcs	.-38     	; 0xcbe <__divsf3+0x8>

00000ce4 <__divsf3_pse>:
 ce4:	99 23       	and	r25, r25
 ce6:	b1 f3       	breq	.-20     	; 0xcd4 <__divsf3+0x1e>
 ce8:	55 23       	and	r21, r21
 cea:	91 f3       	breq	.-28     	; 0xcd0 <__divsf3+0x1a>
 cec:	95 1b       	sub	r25, r21
 cee:	55 0b       	sbc	r21, r21
 cf0:	bb 27       	eor	r27, r27
 cf2:	aa 27       	eor	r26, r26
 cf4:	62 17       	cp	r22, r18
 cf6:	73 07       	cpc	r23, r19
 cf8:	84 07       	cpc	r24, r20
 cfa:	38 f0       	brcs	.+14     	; 0xd0a <__divsf3_pse+0x26>
 cfc:	9f 5f       	subi	r25, 0xFF	; 255
 cfe:	5f 4f       	sbci	r21, 0xFF	; 255
 d00:	22 0f       	add	r18, r18
 d02:	33 1f       	adc	r19, r19
 d04:	44 1f       	adc	r20, r20
 d06:	aa 1f       	adc	r26, r26
 d08:	a9 f3       	breq	.-22     	; 0xcf4 <__divsf3_pse+0x10>
 d0a:	35 d0       	rcall	.+106    	; 0xd76 <__divsf3_pse+0x92>
 d0c:	0e 2e       	mov	r0, r30
 d0e:	3a f0       	brmi	.+14     	; 0xd1e <__divsf3_pse+0x3a>
 d10:	e0 e8       	ldi	r30, 0x80	; 128
 d12:	32 d0       	rcall	.+100    	; 0xd78 <__divsf3_pse+0x94>
 d14:	91 50       	subi	r25, 0x01	; 1
 d16:	50 40       	sbci	r21, 0x00	; 0
 d18:	e6 95       	lsr	r30
 d1a:	00 1c       	adc	r0, r0
 d1c:	ca f7       	brpl	.-14     	; 0xd10 <__divsf3_pse+0x2c>
 d1e:	2b d0       	rcall	.+86     	; 0xd76 <__divsf3_pse+0x92>
 d20:	fe 2f       	mov	r31, r30
 d22:	29 d0       	rcall	.+82     	; 0xd76 <__divsf3_pse+0x92>
 d24:	66 0f       	add	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	88 1f       	adc	r24, r24
 d2a:	bb 1f       	adc	r27, r27
 d2c:	26 17       	cp	r18, r22
 d2e:	37 07       	cpc	r19, r23
 d30:	48 07       	cpc	r20, r24
 d32:	ab 07       	cpc	r26, r27
 d34:	b0 e8       	ldi	r27, 0x80	; 128
 d36:	09 f0       	breq	.+2      	; 0xd3a <__divsf3_pse+0x56>
 d38:	bb 0b       	sbc	r27, r27
 d3a:	80 2d       	mov	r24, r0
 d3c:	bf 01       	movw	r22, r30
 d3e:	ff 27       	eor	r31, r31
 d40:	93 58       	subi	r25, 0x83	; 131
 d42:	5f 4f       	sbci	r21, 0xFF	; 255
 d44:	3a f0       	brmi	.+14     	; 0xd54 <__divsf3_pse+0x70>
 d46:	9e 3f       	cpi	r25, 0xFE	; 254
 d48:	51 05       	cpc	r21, r1
 d4a:	78 f0       	brcs	.+30     	; 0xd6a <__divsf3_pse+0x86>
 d4c:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>
 d50:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__fp_szero>
 d54:	5f 3f       	cpi	r21, 0xFF	; 255
 d56:	e4 f3       	brlt	.-8      	; 0xd50 <__divsf3_pse+0x6c>
 d58:	98 3e       	cpi	r25, 0xE8	; 232
 d5a:	d4 f3       	brlt	.-12     	; 0xd50 <__divsf3_pse+0x6c>
 d5c:	86 95       	lsr	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	b7 95       	ror	r27
 d64:	f7 95       	ror	r31
 d66:	9f 5f       	subi	r25, 0xFF	; 255
 d68:	c9 f7       	brne	.-14     	; 0xd5c <__divsf3_pse+0x78>
 d6a:	88 0f       	add	r24, r24
 d6c:	91 1d       	adc	r25, r1
 d6e:	96 95       	lsr	r25
 d70:	87 95       	ror	r24
 d72:	97 f9       	bld	r25, 7
 d74:	08 95       	ret
 d76:	e1 e0       	ldi	r30, 0x01	; 1
 d78:	66 0f       	add	r22, r22
 d7a:	77 1f       	adc	r23, r23
 d7c:	88 1f       	adc	r24, r24
 d7e:	bb 1f       	adc	r27, r27
 d80:	62 17       	cp	r22, r18
 d82:	73 07       	cpc	r23, r19
 d84:	84 07       	cpc	r24, r20
 d86:	ba 07       	cpc	r27, r26
 d88:	20 f0       	brcs	.+8      	; 0xd92 <__divsf3_pse+0xae>
 d8a:	62 1b       	sub	r22, r18
 d8c:	73 0b       	sbc	r23, r19
 d8e:	84 0b       	sbc	r24, r20
 d90:	ba 0b       	sbc	r27, r26
 d92:	ee 1f       	adc	r30, r30
 d94:	88 f7       	brcc	.-30     	; 0xd78 <__divsf3_pse+0x94>
 d96:	e0 95       	com	r30
 d98:	08 95       	ret

00000d9a <__fixunssfsi>:
 d9a:	0e 94 69 07 	call	0xed2	; 0xed2 <__fp_splitA>
 d9e:	88 f0       	brcs	.+34     	; 0xdc2 <__fixunssfsi+0x28>
 da0:	9f 57       	subi	r25, 0x7F	; 127
 da2:	98 f0       	brcs	.+38     	; 0xdca <__fixunssfsi+0x30>
 da4:	b9 2f       	mov	r27, r25
 da6:	99 27       	eor	r25, r25
 da8:	b7 51       	subi	r27, 0x17	; 23
 daa:	b0 f0       	brcs	.+44     	; 0xdd8 <__fixunssfsi+0x3e>
 dac:	e1 f0       	breq	.+56     	; 0xde6 <__fixunssfsi+0x4c>
 dae:	66 0f       	add	r22, r22
 db0:	77 1f       	adc	r23, r23
 db2:	88 1f       	adc	r24, r24
 db4:	99 1f       	adc	r25, r25
 db6:	1a f0       	brmi	.+6      	; 0xdbe <__fixunssfsi+0x24>
 db8:	ba 95       	dec	r27
 dba:	c9 f7       	brne	.-14     	; 0xdae <__fixunssfsi+0x14>
 dbc:	14 c0       	rjmp	.+40     	; 0xde6 <__fixunssfsi+0x4c>
 dbe:	b1 30       	cpi	r27, 0x01	; 1
 dc0:	91 f0       	breq	.+36     	; 0xde6 <__fixunssfsi+0x4c>
 dc2:	0e 94 83 07 	call	0xf06	; 0xf06 <__fp_zero>
 dc6:	b1 e0       	ldi	r27, 0x01	; 1
 dc8:	08 95       	ret
 dca:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__fp_zero>
 dce:	67 2f       	mov	r22, r23
 dd0:	78 2f       	mov	r23, r24
 dd2:	88 27       	eor	r24, r24
 dd4:	b8 5f       	subi	r27, 0xF8	; 248
 dd6:	39 f0       	breq	.+14     	; 0xde6 <__fixunssfsi+0x4c>
 dd8:	b9 3f       	cpi	r27, 0xF9	; 249
 dda:	cc f3       	brlt	.-14     	; 0xdce <__fixunssfsi+0x34>
 ddc:	86 95       	lsr	r24
 dde:	77 95       	ror	r23
 de0:	67 95       	ror	r22
 de2:	b3 95       	inc	r27
 de4:	d9 f7       	brne	.-10     	; 0xddc <__fixunssfsi+0x42>
 de6:	3e f4       	brtc	.+14     	; 0xdf6 <__fixunssfsi+0x5c>
 de8:	90 95       	com	r25
 dea:	80 95       	com	r24
 dec:	70 95       	com	r23
 dee:	61 95       	neg	r22
 df0:	7f 4f       	sbci	r23, 0xFF	; 255
 df2:	8f 4f       	sbci	r24, 0xFF	; 255
 df4:	9f 4f       	sbci	r25, 0xFF	; 255
 df6:	08 95       	ret

00000df8 <__floatunsisf>:
 df8:	e8 94       	clt
 dfa:	09 c0       	rjmp	.+18     	; 0xe0e <__floatsisf+0x12>

00000dfc <__floatsisf>:
 dfc:	97 fb       	bst	r25, 7
 dfe:	3e f4       	brtc	.+14     	; 0xe0e <__floatsisf+0x12>
 e00:	90 95       	com	r25
 e02:	80 95       	com	r24
 e04:	70 95       	com	r23
 e06:	61 95       	neg	r22
 e08:	7f 4f       	sbci	r23, 0xFF	; 255
 e0a:	8f 4f       	sbci	r24, 0xFF	; 255
 e0c:	9f 4f       	sbci	r25, 0xFF	; 255
 e0e:	99 23       	and	r25, r25
 e10:	a9 f0       	breq	.+42     	; 0xe3c <__floatsisf+0x40>
 e12:	f9 2f       	mov	r31, r25
 e14:	96 e9       	ldi	r25, 0x96	; 150
 e16:	bb 27       	eor	r27, r27
 e18:	93 95       	inc	r25
 e1a:	f6 95       	lsr	r31
 e1c:	87 95       	ror	r24
 e1e:	77 95       	ror	r23
 e20:	67 95       	ror	r22
 e22:	b7 95       	ror	r27
 e24:	f1 11       	cpse	r31, r1
 e26:	f8 cf       	rjmp	.-16     	; 0xe18 <__floatsisf+0x1c>
 e28:	fa f4       	brpl	.+62     	; 0xe68 <__floatsisf+0x6c>
 e2a:	bb 0f       	add	r27, r27
 e2c:	11 f4       	brne	.+4      	; 0xe32 <__floatsisf+0x36>
 e2e:	60 ff       	sbrs	r22, 0
 e30:	1b c0       	rjmp	.+54     	; 0xe68 <__floatsisf+0x6c>
 e32:	6f 5f       	subi	r22, 0xFF	; 255
 e34:	7f 4f       	sbci	r23, 0xFF	; 255
 e36:	8f 4f       	sbci	r24, 0xFF	; 255
 e38:	9f 4f       	sbci	r25, 0xFF	; 255
 e3a:	16 c0       	rjmp	.+44     	; 0xe68 <__floatsisf+0x6c>
 e3c:	88 23       	and	r24, r24
 e3e:	11 f0       	breq	.+4      	; 0xe44 <__floatsisf+0x48>
 e40:	96 e9       	ldi	r25, 0x96	; 150
 e42:	11 c0       	rjmp	.+34     	; 0xe66 <__floatsisf+0x6a>
 e44:	77 23       	and	r23, r23
 e46:	21 f0       	breq	.+8      	; 0xe50 <__floatsisf+0x54>
 e48:	9e e8       	ldi	r25, 0x8E	; 142
 e4a:	87 2f       	mov	r24, r23
 e4c:	76 2f       	mov	r23, r22
 e4e:	05 c0       	rjmp	.+10     	; 0xe5a <__floatsisf+0x5e>
 e50:	66 23       	and	r22, r22
 e52:	71 f0       	breq	.+28     	; 0xe70 <__floatsisf+0x74>
 e54:	96 e8       	ldi	r25, 0x86	; 134
 e56:	86 2f       	mov	r24, r22
 e58:	70 e0       	ldi	r23, 0x00	; 0
 e5a:	60 e0       	ldi	r22, 0x00	; 0
 e5c:	2a f0       	brmi	.+10     	; 0xe68 <__floatsisf+0x6c>
 e5e:	9a 95       	dec	r25
 e60:	66 0f       	add	r22, r22
 e62:	77 1f       	adc	r23, r23
 e64:	88 1f       	adc	r24, r24
 e66:	da f7       	brpl	.-10     	; 0xe5e <__floatsisf+0x62>
 e68:	88 0f       	add	r24, r24
 e6a:	96 95       	lsr	r25
 e6c:	87 95       	ror	r24
 e6e:	97 f9       	bld	r25, 7
 e70:	08 95       	ret

00000e72 <__fp_inf>:
 e72:	97 f9       	bld	r25, 7
 e74:	9f 67       	ori	r25, 0x7F	; 127
 e76:	80 e8       	ldi	r24, 0x80	; 128
 e78:	70 e0       	ldi	r23, 0x00	; 0
 e7a:	60 e0       	ldi	r22, 0x00	; 0
 e7c:	08 95       	ret

00000e7e <__fp_nan>:
 e7e:	9f ef       	ldi	r25, 0xFF	; 255
 e80:	80 ec       	ldi	r24, 0xC0	; 192
 e82:	08 95       	ret

00000e84 <__fp_pscA>:
 e84:	00 24       	eor	r0, r0
 e86:	0a 94       	dec	r0
 e88:	16 16       	cp	r1, r22
 e8a:	17 06       	cpc	r1, r23
 e8c:	18 06       	cpc	r1, r24
 e8e:	09 06       	cpc	r0, r25
 e90:	08 95       	ret

00000e92 <__fp_pscB>:
 e92:	00 24       	eor	r0, r0
 e94:	0a 94       	dec	r0
 e96:	12 16       	cp	r1, r18
 e98:	13 06       	cpc	r1, r19
 e9a:	14 06       	cpc	r1, r20
 e9c:	05 06       	cpc	r0, r21
 e9e:	08 95       	ret

00000ea0 <__fp_round>:
 ea0:	09 2e       	mov	r0, r25
 ea2:	03 94       	inc	r0
 ea4:	00 0c       	add	r0, r0
 ea6:	11 f4       	brne	.+4      	; 0xeac <__fp_round+0xc>
 ea8:	88 23       	and	r24, r24
 eaa:	52 f0       	brmi	.+20     	; 0xec0 <__fp_round+0x20>
 eac:	bb 0f       	add	r27, r27
 eae:	40 f4       	brcc	.+16     	; 0xec0 <__fp_round+0x20>
 eb0:	bf 2b       	or	r27, r31
 eb2:	11 f4       	brne	.+4      	; 0xeb8 <__fp_round+0x18>
 eb4:	60 ff       	sbrs	r22, 0
 eb6:	04 c0       	rjmp	.+8      	; 0xec0 <__fp_round+0x20>
 eb8:	6f 5f       	subi	r22, 0xFF	; 255
 eba:	7f 4f       	sbci	r23, 0xFF	; 255
 ebc:	8f 4f       	sbci	r24, 0xFF	; 255
 ebe:	9f 4f       	sbci	r25, 0xFF	; 255
 ec0:	08 95       	ret

00000ec2 <__fp_split3>:
 ec2:	57 fd       	sbrc	r21, 7
 ec4:	90 58       	subi	r25, 0x80	; 128
 ec6:	44 0f       	add	r20, r20
 ec8:	55 1f       	adc	r21, r21
 eca:	59 f0       	breq	.+22     	; 0xee2 <__fp_splitA+0x10>
 ecc:	5f 3f       	cpi	r21, 0xFF	; 255
 ece:	71 f0       	breq	.+28     	; 0xeec <__fp_splitA+0x1a>
 ed0:	47 95       	ror	r20

00000ed2 <__fp_splitA>:
 ed2:	88 0f       	add	r24, r24
 ed4:	97 fb       	bst	r25, 7
 ed6:	99 1f       	adc	r25, r25
 ed8:	61 f0       	breq	.+24     	; 0xef2 <__fp_splitA+0x20>
 eda:	9f 3f       	cpi	r25, 0xFF	; 255
 edc:	79 f0       	breq	.+30     	; 0xefc <__fp_splitA+0x2a>
 ede:	87 95       	ror	r24
 ee0:	08 95       	ret
 ee2:	12 16       	cp	r1, r18
 ee4:	13 06       	cpc	r1, r19
 ee6:	14 06       	cpc	r1, r20
 ee8:	55 1f       	adc	r21, r21
 eea:	f2 cf       	rjmp	.-28     	; 0xed0 <__fp_split3+0xe>
 eec:	46 95       	lsr	r20
 eee:	f1 df       	rcall	.-30     	; 0xed2 <__fp_splitA>
 ef0:	08 c0       	rjmp	.+16     	; 0xf02 <__fp_splitA+0x30>
 ef2:	16 16       	cp	r1, r22
 ef4:	17 06       	cpc	r1, r23
 ef6:	18 06       	cpc	r1, r24
 ef8:	99 1f       	adc	r25, r25
 efa:	f1 cf       	rjmp	.-30     	; 0xede <__fp_splitA+0xc>
 efc:	86 95       	lsr	r24
 efe:	71 05       	cpc	r23, r1
 f00:	61 05       	cpc	r22, r1
 f02:	08 94       	sec
 f04:	08 95       	ret

00000f06 <__fp_zero>:
 f06:	e8 94       	clt

00000f08 <__fp_szero>:
 f08:	bb 27       	eor	r27, r27
 f0a:	66 27       	eor	r22, r22
 f0c:	77 27       	eor	r23, r23
 f0e:	cb 01       	movw	r24, r22
 f10:	97 f9       	bld	r25, 7
 f12:	08 95       	ret

00000f14 <memcpy>:
 f14:	fb 01       	movw	r30, r22
 f16:	dc 01       	movw	r26, r24
 f18:	02 c0       	rjmp	.+4      	; 0xf1e <memcpy+0xa>
 f1a:	01 90       	ld	r0, Z+
 f1c:	0d 92       	st	X+, r0
 f1e:	41 50       	subi	r20, 0x01	; 1
 f20:	50 40       	sbci	r21, 0x00	; 0
 f22:	d8 f7       	brcc	.-10     	; 0xf1a <memcpy+0x6>
 f24:	08 95       	ret

00000f26 <__itoa_ncheck>:
 f26:	bb 27       	eor	r27, r27
 f28:	4a 30       	cpi	r20, 0x0A	; 10
 f2a:	31 f4       	brne	.+12     	; 0xf38 <__itoa_ncheck+0x12>
 f2c:	99 23       	and	r25, r25
 f2e:	22 f4       	brpl	.+8      	; 0xf38 <__itoa_ncheck+0x12>
 f30:	bd e2       	ldi	r27, 0x2D	; 45
 f32:	90 95       	com	r25
 f34:	81 95       	neg	r24
 f36:	9f 4f       	sbci	r25, 0xFF	; 255
 f38:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__utoa_common>

00000f3c <__utoa_ncheck>:
 f3c:	bb 27       	eor	r27, r27

00000f3e <__utoa_common>:
 f3e:	fb 01       	movw	r30, r22
 f40:	55 27       	eor	r21, r21
 f42:	aa 27       	eor	r26, r26
 f44:	88 0f       	add	r24, r24
 f46:	99 1f       	adc	r25, r25
 f48:	aa 1f       	adc	r26, r26
 f4a:	a4 17       	cp	r26, r20
 f4c:	10 f0       	brcs	.+4      	; 0xf52 <__utoa_common+0x14>
 f4e:	a4 1b       	sub	r26, r20
 f50:	83 95       	inc	r24
 f52:	50 51       	subi	r21, 0x10	; 16
 f54:	b9 f7       	brne	.-18     	; 0xf44 <__utoa_common+0x6>
 f56:	a0 5d       	subi	r26, 0xD0	; 208
 f58:	aa 33       	cpi	r26, 0x3A	; 58
 f5a:	08 f0       	brcs	.+2      	; 0xf5e <__utoa_common+0x20>
 f5c:	a9 5d       	subi	r26, 0xD9	; 217
 f5e:	a1 93       	st	Z+, r26
 f60:	00 97       	sbiw	r24, 0x00	; 0
 f62:	79 f7       	brne	.-34     	; 0xf42 <__utoa_common+0x4>
 f64:	b1 11       	cpse	r27, r1
 f66:	b1 93       	st	Z+, r27
 f68:	11 92       	st	Z+, r1
 f6a:	cb 01       	movw	r24, r22
 f6c:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <strrev>

00000f70 <strrev>:
 f70:	dc 01       	movw	r26, r24
 f72:	fc 01       	movw	r30, r24
 f74:	67 2f       	mov	r22, r23
 f76:	71 91       	ld	r23, Z+
 f78:	77 23       	and	r23, r23
 f7a:	e1 f7       	brne	.-8      	; 0xf74 <strrev+0x4>
 f7c:	32 97       	sbiw	r30, 0x02	; 2
 f7e:	04 c0       	rjmp	.+8      	; 0xf88 <strrev+0x18>
 f80:	7c 91       	ld	r23, X
 f82:	6d 93       	st	X+, r22
 f84:	70 83       	st	Z, r23
 f86:	62 91       	ld	r22, -Z
 f88:	ae 17       	cp	r26, r30
 f8a:	bf 07       	cpc	r27, r31
 f8c:	c8 f3       	brcs	.-14     	; 0xf80 <strrev+0x10>
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
