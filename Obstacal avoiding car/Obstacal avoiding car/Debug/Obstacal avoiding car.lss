
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00001ed8  00001f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  0080011e  0080011e  0000202a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000202a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000205c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004862  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001631  00000000  00000000  00006cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b33  00000000  00000000  0000831b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  0000ae50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000150b  00000000  00000000  0000b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b02  00000000  00000000  0000ccdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000f7dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_1>
       8:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_2>
       c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	68 0b       	sbc	r22, r24
      56:	73 0b       	sbc	r23, r19
      58:	7e 0b       	sbc	r23, r30
      5a:	8e 0c       	add	r8, r14
      5c:	89 0b       	sbc	r24, r25
      5e:	8e 0c       	add	r8, r14
      60:	94 0b       	sbc	r25, r20
      62:	9f 0b       	sbc	r25, r31
      64:	aa 0b       	sbc	r26, r26
      66:	b5 0b       	sbc	r27, r21
      68:	cb 0b       	sbc	r28, r27
      6a:	d6 0b       	sbc	r29, r22
      6c:	e1 0b       	sbc	r30, r17
      6e:	90 0c       	add	r9, r0
      70:	ec 0b       	sbc	r30, r28
      72:	90 0c       	add	r9, r0
      74:	f7 0b       	sbc	r31, r23
      76:	02 0c       	add	r0, r2
      78:	0d 0c       	add	r0, r13
      7a:	18 0c       	add	r1, r8
      7c:	2e 0c       	add	r2, r14
      7e:	39 0c       	add	r3, r9
      80:	44 0c       	add	r4, r4
      82:	4f 0c       	add	r4, r15
      84:	5a 0c       	add	r5, r10
      86:	65 0c       	add	r6, r5
      88:	70 0c       	add	r7, r0
      8a:	7b 0c       	add	r7, r11

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e8 ed       	ldi	r30, 0xD8	; 216
      a0:	fe e1       	ldi	r31, 0x1E	; 30
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ae 31       	cpi	r26, 0x1E	; 30
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	ae e1       	ldi	r26, 0x1E	; 30
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ad 34       	cpi	r26, 0x4D	; 77
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 28 08 	call	0x1050	; 0x1050 <main>
      c2:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <BUTTON_vidChangeDir>:
/*									Static Function Implementation                				*/
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	u8_g_dirStateCounter ^= 1 ;
      ca:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <u8_g_dirStateCounter>
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	89 27       	eor	r24, r25
      d2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u8_g_dirStateCounter>
      d6:	08 95       	ret

000000d8 <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      d8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <u8_g_OneSecTicks>
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TIMER_Manager_reset>
      ea:	08 95       	ret

000000ec <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      ec:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
      f0:	0e 94 0b 08 	call	0x1016	; 0x1016 <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
      f4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
      f8:	87 e6       	ldi	r24, 0x67	; 103
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 96 05 	call	0xb2c	; 0xb2c <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 b2 03 	call	0x764	; 0x764 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     108:	80 e6       	ldi	r24, 0x60	; 96
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 15 07 	call	0xe2a	; 0xe2a <TIMER_Manager_init>
	(void) PWM_init();
     110:	0e 94 ba 06 	call	0xd74	; 0xd74 <PWM_init>
	(void) CAR_init();
     114:	0e 94 3a 03 	call	0x674	; 0x674 <CAR_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     118:	8f e6       	ldi	r24, 0x6F	; 111
     11a:	97 e0       	ldi	r25, 0x07	; 7
     11c:	0e 94 22 08 	call	0x1044	; 0x1044 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     120:	83 e8       	ldi	r24, 0x83	; 131
     122:	97 e0       	ldi	r25, 0x07	; 7
     124:	0e 94 25 08 	call	0x104a	; 0x104a <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     128:	85 e6       	ldi	r24, 0x65	; 101
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 c8 03 	call	0x790	; 0x790 <HExtInt_enCBFInt0>
     130:	08 95       	ret

00000132 <APP_updateDirection>:
	TIMER_Manager_reset(&st_timer1Config);
}

void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     132:	0e 94 12 08 	call	0x1024	; 0x1024 <HULTRASONIC_vidInterruptDisable>
	u8_g_OneSecTicks = 0;
     136:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u8_g_OneSecTicks>
	TIMER_Manager_start (&st_timer1Config);
     13a:	80 e6       	ldi	r24, 0x60	; 96
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 35 07 	call	0xe6a	; 0xe6a <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     142:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 2)
     146:	1d c0       	rjmp	.+58     	; 0x182 <APP_updateDirection+0x50>
	{
		if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     148:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u8_g_dirStateCounter>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	79 f4       	brne	.+30     	; 0x16e <APP_updateDirection+0x3c>
		{
			HLCD_gotoXY(1,4);
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
			HLCD_vidWriteChar(' ');
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	0e 94 b1 04 	call	0x962	; 0x962 <HLCD_vidWriteChar>
			HLCD_gotoXY(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
			HLCD_WriteString("Left");
     164:	8d e8       	ldi	r24, 0x8D	; 141
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
     16c:	0a c0       	rjmp	.+20     	; 0x182 <APP_updateDirection+0x50>
		}
		else if(u8_g_dirStateCounter == MOTOR_TURN_RIGHT){
     16e:	81 11       	cpse	r24, r1
     170:	08 c0       	rjmp	.+16     	; 0x182 <APP_updateDirection+0x50>
			HLCD_gotoXY(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
			HLCD_WriteString("Right");
     17a:	82 e9       	ldi	r24, 0x92	; 146
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
{
	HULTRASONIC_vidInterruptDisable();
	u8_g_OneSecTicks = 0;
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 2)
     182:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <u8_g_OneSecTicks>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	f8 f2       	brcs	.-66     	; 0x148 <APP_updateDirection+0x16>
		else {
			/* do nothing  */
		}
	}
	//while(u8_g_OneSecTicks <= 7);
	HLCD_ClrDisplay();
     18a:	0e 94 2b 05 	call	0xa56	; 0xa56 <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     192:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     196:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <HExtInt0_enIntDisable>
	HULTRASONIC_vidInterruptEnable();
     19a:	0e 94 0b 08 	call	0x1016	; 0x1016 <HULTRASONIC_vidInterruptEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	83 ed       	ldi	r24, 0xD3	; 211
     1a2:	90 e3       	ldi	r25, 0x30	; 48
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	80 40       	sbci	r24, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <APP_updateDirection+0x72>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <APP_updateDirection+0x7c>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <APP_vidStart>:
/*	sei();*/
	//DDRA = 0xFF;
}

void APP_vidStart(void)
{
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
// 	if (en_motorSel == EN_MOTOR_IDLE)
// 	{
		(void) KEYPAD_read(&u8KeyRead);
     1ba:	83 e4       	ldi	r24, 0x43	; 67
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 d3 05 	call	0xba6	; 0xba6 <KEYPAD_read>
		
		if (u8KeyRead != 'N')
     1c2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8KeyRead>
     1c6:	8e 34       	cpi	r24, 0x4E	; 78
     1c8:	59 f0       	breq	.+22     	; 0x1e0 <APP_vidStart+0x2e>
		{
			switch(u8KeyRead)
     1ca:	81 33       	cpi	r24, 0x31	; 49
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <APP_vidStart+0x22>
     1ce:	82 33       	cpi	r24, 0x32	; 50
     1d0:	21 f0       	breq	.+8      	; 0x1da <APP_vidStart+0x28>
     1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <APP_vidStart+0x2e>
			{
				case '1' : {
					en_motorSel = EN_MOTOR_START;
     1d4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
					break;
     1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <APP_vidStart+0x2e>
				}
				case '2' : {
					en_motorSel = EN_MOTOR_STOP;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					break;
				}
			}
		}
/*	}*/
	if (en_motorSel == EN_MOTOR_START)
     1e0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     1e4:	81 11       	cpse	r24, r1
     1e6:	02 c2       	rjmp	.+1028   	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
	 { 				
		if (en_start_state == EN_UPDATE_DIR)
     1e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <en_start_state>
     1ec:	81 11       	cpse	r24, r1
     1ee:	10 c0       	rjmp	.+32     	; 0x210 <APP_vidStart+0x5e>
		{
			HLCD_ClrDisplay();
     1f0:	0e 94 2b 05 	call	0xa56	; 0xa56 <HLCD_ClrDisplay>
			HLCD_gotoXY(0,0);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
			HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     1fc:	88 e9       	ldi	r24, 0x98	; 152
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
			APP_updateDirection();
     204:	0e 94 99 00 	call	0x132	; 0x132 <APP_updateDirection>
			en_start_state = UPDATE_OBISTICAL_STATE;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <en_start_state>
     20e:	66 c0       	rjmp	.+204    	; 0x2dc <APP_vidStart+0x12a>
		}
		else if (en_start_state == UPDATE_OBISTICAL_STATE )
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	09 f0       	breq	.+2      	; 0x216 <APP_vidStart+0x64>
     214:	63 c0       	rjmp	.+198    	; 0x2dc <APP_vidStart+0x12a>
		{
		  global_f64Dist = HULTRASONIC_u8Read();
     216:	0e 94 17 08 	call	0x102e	; 0x102e <HULTRASONIC_u8Read>
     21a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <global_f64Dist>
     21e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <global_f64Dist+0x1>
     222:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <global_f64Dist+0x2>
     226:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <global_f64Dist+0x3>
     22a:	8f e2       	ldi	r24, 0x2F	; 47
     22c:	95 e7       	ldi	r25, 0x75	; 117
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <APP_vidStart+0x7c>
     232:	00 c0       	rjmp	.+0      	; 0x234 <APP_vidStart+0x82>
     234:	00 00       	nop
		  _delay_ms(15);
		  
			if		(global_f64Dist > 70.0 )							{ en_Dist_states = NO_OBISTICALS;  }		
     236:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <global_f64Dist>
     23a:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <global_f64Dist+0x1>
     23e:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <global_f64Dist+0x2>
     242:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <global_f64Dist+0x3>
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	4c e8       	ldi	r20, 0x8C	; 140
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	24 f4       	brge	.+8      	; 0x262 <APP_vidStart+0xb0>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
     260:	3d c0       	rjmp	.+122    	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist > 30.0 && global_f64Dist <= 70.0)	{ en_Dist_states = OBISTICAL_70_30; }	
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 ef       	ldi	r20, 0xF0	; 240
     268:	51 e4       	ldi	r21, 0x41	; 65
     26a:	c7 01       	movw	r24, r14
     26c:	b6 01       	movw	r22, r12
     26e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	74 f4       	brge	.+28     	; 0x292 <APP_vidStart+0xe0>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	4c e8       	ldi	r20, 0x8C	; 140
     27c:	52 e4       	ldi	r21, 0x42	; 66
     27e:	c7 01       	movw	r24, r14
     280:	b6 01       	movw	r22, r12
     282:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
     286:	18 16       	cp	r1, r24
     288:	24 f0       	brlt	.+8      	; 0x292 <APP_vidStart+0xe0>
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
     290:	25 c0       	rjmp	.+74     	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist >= 20.0 && global_f64Dist <= 30)	{ en_Dist_states = OBISTICAL_30_20;}	
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 ea       	ldi	r20, 0xA0	; 160
     298:	51 e4       	ldi	r21, 0x41	; 65
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
     2a2:	88 23       	and	r24, r24
     2a4:	74 f0       	brlt	.+28     	; 0x2c2 <APP_vidStart+0x110>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 ef       	ldi	r20, 0xF0	; 240
     2ac:	51 e4       	ldi	r21, 0x41	; 65
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
     2b6:	18 16       	cp	r1, r24
     2b8:	24 f0       	brlt	.+8      	; 0x2c2 <APP_vidStart+0x110>
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
     2c0:	0d c0       	rjmp	.+26     	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist < 20.0)								{ en_Dist_states = OBISTICAL_LESS_20;}	
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 ea       	ldi	r20, 0xA0	; 160
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	c7 01       	movw	r24, r14
     2cc:	b6 01       	movw	r22, r12
     2ce:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
     2d2:	88 23       	and	r24, r24
     2d4:	1c f4       	brge	.+6      	; 0x2dc <APP_vidStart+0x12a>
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
			else{  /* do nothing */ }	
				
			}	else { /*do nothing*/}
				
		if (en_Dist_states == NO_OBISTICALS)
     2dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <APP_vidStart+0x134>
     2e4:	44 c0       	rjmp	.+136    	; 0x36e <APP_vidStart+0x1bc>
		{
				HLCD_gotoXY(1,0);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     2ec:	86 ea       	ldi	r24, 0xA6	; 166
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     2f4:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     2f8:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     2fc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     300:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     304:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
     308:	0e 94 77 05 	call	0xaee	; 0xaee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     30c:	8d ea       	ldi	r24, 0xAD	; 173
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:50% ");
     31c:	81 eb       	ldi	r24, 0xB1	; 177
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     324:	8c eb       	ldi	r24, 0xBC	; 188
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
     32c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u8_g_OneSecTicks>
				TIMER_Manager_start (&st_timer1Config);
     330:	80 e6       	ldi	r24, 0x60	; 96
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 35 07 	call	0xe6a	; 0xe6a <TIMER_Manager_start>
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     338:	05 c0       	rjmp	.+10     	; 0x344 <APP_vidStart+0x192>
				{
					PWM_start(30,20,FORWARD);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	64 e1       	ldi	r22, 0x14	; 20
     33e:	8e e1       	ldi	r24, 0x1E	; 30
     340:	0e 94 c9 06 	call	0xd92	; 0xd92 <PWM_start>
				HLCD_WriteString("Dir:F");
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
				TIMER_Manager_start (&st_timer1Config);
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     344:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <u8_g_OneSecTicks>
     348:	86 30       	cpi	r24, 0x06	; 6
     34a:	20 f4       	brcc	.+8      	; 0x354 <APP_vidStart+0x1a2>
     34c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <flag4>
     350:	88 23       	and	r24, r24
     352:	99 f3       	breq	.-26     	; 0x33a <APP_vidStart+0x188>
				{
					PWM_start(30,20,FORWARD);
				}
				flag4=1;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <flag4>
				(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     35a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     35e:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER_Manager_stop>
				/* Motor move forward with duty cycle 50%  */
				
				PWM_start(50,20,FORWARD);
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	64 e1       	ldi	r22, 0x14	; 20
     366:	82 e3       	ldi	r24, 0x32	; 50
     368:	0e 94 c9 06 	call	0xd92	; 0xd92 <PWM_start>
     36c:	7e c1       	rjmp	.+764    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
				
		}
		else if (en_Dist_states == OBISTICAL_70_30)
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	51 f5       	brne	.+84     	; 0x3c6 <APP_vidStart+0x214>
		{
				HLCD_gotoXY(1,0);
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     37a:	86 ea       	ldi	r24, 0xA6	; 166
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     382:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     386:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     38a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     38e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     392:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
     396:	0e 94 77 05 	call	0xaee	; 0xaee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     39a:	8d ea       	ldi	r24, 0xAD	; 173
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     3aa:	82 ec       	ldi	r24, 0xC2	; 194
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     3b2:	8c eb       	ldi	r24, 0xBC	; 188
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				/* Motor move forward with duty cycle 30% */		
				PWM_start(30,20,FORWARD);
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	64 e1       	ldi	r22, 0x14	; 20
     3be:	8e e1       	ldi	r24, 0x1E	; 30
     3c0:	0e 94 c9 06 	call	0xd92	; 0xd92 <PWM_start>
     3c4:	52 c1       	rjmp	.+676    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
		}
		else if (en_Dist_states == OBISTICAL_30_20)
     3c6:	83 30       	cpi	r24, 0x03	; 3
     3c8:	09 f0       	breq	.+2      	; 0x3cc <APP_vidStart+0x21a>
     3ca:	99 c0       	rjmp	.+306    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
		{
				HLCD_gotoXY(1,0);
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     3d4:	86 ea       	ldi	r24, 0xA6	; 166
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     3dc:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     3e0:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     3e4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     3e8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     3ec:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
     3f0:	0e 94 77 05 	call	0xaee	; 0xaee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     3f4:	8d ea       	ldi	r24, 0xAD	; 173
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:0% ");
     404:	8d ec       	ldi	r24, 0xCD	; 205
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     40c:	87 ed       	ldi	r24, 0xD7	; 215
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				/* Motor Stop Implementation  */
				CAR_stop();
     414:	0e 94 9e 03 	call	0x73c	; 0x73c <CAR_stop>
     418:	9f ef       	ldi	r25, 0xFF	; 255
     41a:	24 e3       	ldi	r18, 0x34	; 52
     41c:	8c e0       	ldi	r24, 0x0C	; 12
     41e:	91 50       	subi	r25, 0x01	; 1
     420:	20 40       	sbci	r18, 0x00	; 0
     422:	80 40       	sbci	r24, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     428:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:100% ");
     432:	8d ed       	ldi	r24, 0xDD	; 221
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteString("Dir:R");
     43a:	89 ee       	ldi	r24, 0xE9	; 233
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				while (global_f64Dist <= 30.0)
     442:	4b c0       	rjmp	.+150    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
				{
					/* rotate depend on u8_g_dirStateCounter  */
					if (u8_gs_rotate_counter <=4)
     444:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     448:	85 30       	cpi	r24, 0x05	; 5
     44a:	88 f4       	brcc	.+34     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
					{
						if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     44c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u8_g_dirStateCounter>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	19 f4       	brne	.+6      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
						{
							CAR_reverse_left();
     454:	0e 94 8a 03 	call	0x714	; 0x714 <CAR_reverse_left>
     458:	04 c0       	rjmp	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
						}
						else if (u8_g_dirStateCounter == MOTOR_TURN_RIGHT)
     45a:	81 11       	cpse	r24, r1
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
						{
							CAR_reverse_right();
     45e:	0e 94 76 03 	call	0x6ec	; 0x6ec <CAR_reverse_right>
						}
						else
						{
							// do nothing
						}
						u8_gs_rotate_counter++;
     462:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
					}
					else{
						en_motorSel = EN_MOTOR_STOP_V2;
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					}
					global_f64Dist = HULTRASONIC_u8Read();
     474:	0e 94 17 08 	call	0x102e	; 0x102e <HULTRASONIC_u8Read>
     478:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <global_f64Dist>
     47c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <global_f64Dist+0x1>
     480:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <global_f64Dist+0x2>
     484:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     490:	86 ea       	ldi	r24, 0xA6	; 166
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     498:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     49c:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     4a0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     4a4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     4a8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
     4ac:	0e 94 77 05 	call	0xaee	; 0xaee <HLCD_WriteInt>
					HLCD_WriteString(" cm");
     4b0:	8d ea       	ldi	r24, 0xAD	; 173
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
					if (global_f64Dist <= 20.0) break;
     4b8:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     4bc:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     4c0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     4c4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 ea       	ldi	r20, 0xA0	; 160
     4ce:	51 e4       	ldi	r21, 0x41	; 65
     4d0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
     4d4:	18 16       	cp	r1, r24
     4d6:	0c f0       	brlt	.+2      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4d8:	c8 c0       	rjmp	.+400    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:100% ");
				HLCD_WriteString("Dir:R");
				while (global_f64Dist <= 30.0)
     4da:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     4de:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     4e2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     4e6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 ef       	ldi	r20, 0xF0	; 240
     4f0:	51 e4       	ldi	r21, 0x41	; 65
     4f2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
     4f6:	18 16       	cp	r1, r24
     4f8:	0c f0       	brlt	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4fa:	a4 cf       	rjmp	.-184    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     4fc:	b6 c0       	rjmp	.+364    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
					HLCD_WriteString(" cm");
					if (global_f64Dist <= 20.0) break;
				}

		}
		else if (en_Dist_states == OBISTICAL_LESS_20)
     4fe:	84 30       	cpi	r24, 0x04	; 4
     500:	09 f0       	breq	.+2      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     502:	b3 c0       	rjmp	.+358    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
		{
				HLCD_gotoXY(1,0);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     50c:	86 ea       	ldi	r24, 0xA6	; 166
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     514:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     518:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     51c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     520:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     524:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
     528:	0e 94 77 05 	call	0xaee	; 0xaee <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     52c:	8d ea       	ldi	r24, 0xAD	; 173
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     53c:	82 ec       	ldi	r24, 0xC2	; 194
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     544:	87 ed       	ldi	r24, 0xD7	; 215
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				/* Todo: Motor Stop Implementation  */
				CAR_stop();
     54c:	0e 94 9e 03 	call	0x73c	; 0x73c <CAR_stop>
     550:	9f ef       	ldi	r25, 0xFF	; 255
     552:	24 e3       	ldi	r18, 0x34	; 52
     554:	8c e0       	ldi	r24, 0x0C	; 12
     556:	91 50       	subi	r25, 0x01	; 1
     558:	20 40       	sbci	r18, 0x00	; 0
     55a:	80 40       	sbci	r24, 0x00	; 0
     55c:	e1 f7       	brne	.-8      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     560:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     56a:	82 ec       	ldi	r24, 0xC2	; 194
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				HLCD_WriteString("Dir:b");
     572:	8f ee       	ldi	r24, 0xEF	; 239
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				while (global_f64Dist <= 20.0)
     57a:	27 c0       	rjmp	.+78     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
				{
					/* Todo: Motor move backward with duty cycle 30%  */
					PWM_start(30,20,BACKWARD);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	64 e1       	ldi	r22, 0x14	; 20
     580:	8e e1       	ldi	r24, 0x1E	; 30
     582:	0e 94 c9 06 	call	0xd92	; 0xd92 <PWM_start>
					global_f64Dist = HULTRASONIC_u8Read();
     586:	0e 94 17 08 	call	0x102e	; 0x102e <HULTRASONIC_u8Read>
     58a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <global_f64Dist>
     58e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <global_f64Dist+0x1>
     592:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <global_f64Dist+0x2>
     596:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     5a2:	86 ea       	ldi	r24, 0xA6	; 166
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     5aa:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     5ae:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     5b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     5b6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     5ba:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
     5be:	0e 94 77 05 	call	0xaee	; 0xaee <HLCD_WriteInt>
					HLCD_WriteString(" cm");						
     5c2:	8d ea       	ldi	r24, 0xAD	; 173
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:30% ");
				HLCD_WriteString("Dir:b");
				while (global_f64Dist <= 20.0)
     5ca:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <global_f64Dist>
     5ce:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <global_f64Dist+0x1>
     5d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <global_f64Dist+0x2>
     5d6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <global_f64Dist+0x3>
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 ea       	ldi	r20, 0xA0	; 160
     5e0:	51 e4       	ldi	r21, 0x41	; 65
     5e2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
     5e6:	18 16       	cp	r1, r24
     5e8:	4c f6       	brge	.-110    	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
     5ea:	3f c0       	rjmp	.+126    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
				}
		}
	 }
	 
	 
	else if (en_motorSel == EN_MOTOR_STOP)
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	b1 f4       	brne	.+44     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     5f0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <flag2>
     5f4:	81 11       	cpse	r24, r1
     5f6:	09 c0       	rjmp	.+18     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     5f8:	0e 94 2b 05 	call	0xa56	; 0xa56 <HLCD_ClrDisplay>
     5fc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <flag1>
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <flag2>
     606:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <flag3>
		  HLCD_gotoXY(0,0);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     612:	85 ef       	ldi	r24, 0xF5	; 245
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
     61a:	27 c0       	rjmp	.+78     	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
	  }
	  else if (en_motorSel == EN_MOTOR_STOP_V2)
     61c:	82 30       	cpi	r24, 0x02	; 2
     61e:	81 f4       	brne	.+32     	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
	  {
		  CAR_stop();
     620:	0e 94 9e 03 	call	0x73c	; 0x73c <CAR_stop>
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	2d e3       	ldi	r18, 0x3D	; 61
     628:	89 e4       	ldi	r24, 0x49	; 73
     62a:	91 50       	subi	r25, 0x01	; 1
     62c:	20 40       	sbci	r18, 0x00	; 0
     62e:	80 40       	sbci	r24, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
     632:	00 c0       	rjmp	.+0      	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
     634:	00 00       	nop
		  _delay_ms(3000);
		  u8_gs_rotate_counter=0;
     636:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <u8_gs_rotate_counter>
		  en_motorSel = EN_MOTOR_START;
     63a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     63e:	15 c0       	rjmp	.+42     	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     640:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <flag1>
     644:	81 11       	cpse	r24, r1
     646:	09 c0       	rjmp	.+18     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
     648:	0e 94 2b 05 	call	0xa56	; 0xa56 <HLCD_ClrDisplay>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <flag1>
     652:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <flag2>
     656:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <flag3>
		  HLCD_gotoXY(0,0);
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 42 05 	call	0xa84	; 0xa84 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
	  }
}
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	08 95       	ret

00000674 <CAR_init>:
*description : used to initialize the two motor as output 
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK                                                             
************************************************************************/
EN_car_error_t CAR_init(void)
{
     674:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(&ST_motor_1);
     676:	8a e7       	ldi	r24, 0x7A	; 122
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 50 06 	call	0xca0	; 0xca0 <MOTOR_INIT>
     67e:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_INIT(&ST_motor_2);
     680:	87 e7       	ldi	r24, 0x77	; 119
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 50 06 	call	0xca0	; 0xca0 <MOTOR_INIT>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     688:	c1 11       	cpse	r28, r1
     68a:	03 c0       	rjmp	.+6      	; 0x692 <CAR_init+0x1e>
     68c:	81 11       	cpse	r24, r1
     68e:	03 c0       	rjmp	.+6      	; 0x696 <CAR_init+0x22>
     690:	03 c0       	rjmp	.+6      	; 0x698 <CAR_init+0x24>
	{
		ret_val=CAR_NOK;
     692:	8b e0       	ldi	r24, 0x0B	; 11
     694:	01 c0       	rjmp	.+2      	; 0x698 <CAR_init+0x24>
     696:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <CAR_forward>:
*description : used to move the car forward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_forward(void)
{
     69c:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     69e:	8a e7       	ldi	r24, 0x7A	; 122
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <MOTOR_FORWARD>
     6a6:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_2);
     6a8:	87 e7       	ldi	r24, 0x77	; 119
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 68 06 	call	0xcd0	; 0xcd0 <MOTOR_FORWARD>
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     6b0:	c1 11       	cpse	r28, r1
     6b2:	03 c0       	rjmp	.+6      	; 0x6ba <CAR_forward+0x1e>
     6b4:	81 11       	cpse	r24, r1
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <CAR_forward+0x22>
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <CAR_forward+0x24>
	{
		ret_val=CAR_NOK;
     6ba:	8b e0       	ldi	r24, 0x0B	; 11
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <CAR_forward+0x24>
     6be:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <CAR_backword>:
*description : used to move the car backward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_backword(void)
{
     6c4:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_1);
     6c6:	8a e7       	ldi	r24, 0x7A	; 122
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_BACKWARD>
     6ce:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     6d0:	87 e7       	ldi	r24, 0x77	; 119
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     6d8:	c1 11       	cpse	r28, r1
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <CAR_backword+0x1e>
     6dc:	81 11       	cpse	r24, r1
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <CAR_backword+0x22>
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <CAR_backword+0x24>
	{
		ret_val=CAR_NOK;
     6e2:	8b e0       	ldi	r24, 0x0B	; 11
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <CAR_backword+0x24>
     6e6:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <CAR_reverse_right>:
*description : used to reverse the car to the right
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_right(void)
{
     6ec:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     6ee:	8a e7       	ldi	r24, 0x7A	; 122
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <MOTOR_FORWARD>
     6f6:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     6f8:	87 e7       	ldi	r24, 0x77	; 119
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     700:	c1 11       	cpse	r28, r1
     702:	03 c0       	rjmp	.+6      	; 0x70a <CAR_reverse_right+0x1e>
     704:	81 11       	cpse	r24, r1
     706:	03 c0       	rjmp	.+6      	; 0x70e <CAR_reverse_right+0x22>
     708:	03 c0       	rjmp	.+6      	; 0x710 <CAR_reverse_right+0x24>
	{
		ret_val=CAR_NOK;
     70a:	8b e0       	ldi	r24, 0x0B	; 11
     70c:	01 c0       	rjmp	.+2      	; 0x710 <CAR_reverse_right+0x24>
     70e:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <CAR_reverse_left>:
*description : used to reverse the car to the left
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_left(void)
{
     714:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_1);
     716:	8a e7       	ldi	r24, 0x7A	; 122
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <MOTOR_FORWARD>
     71e:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_2);
     720:	87 e7       	ldi	r24, 0x77	; 119
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     728:	81 11       	cpse	r24, r1
     72a:	03 c0       	rjmp	.+6      	; 0x732 <CAR_reverse_left+0x1e>
     72c:	c1 11       	cpse	r28, r1
     72e:	03 c0       	rjmp	.+6      	; 0x736 <CAR_reverse_left+0x22>
     730:	03 c0       	rjmp	.+6      	; 0x738 <CAR_reverse_left+0x24>
	{
		ret_val=CAR_NOK;
     732:	8b e0       	ldi	r24, 0x0B	; 11
     734:	01 c0       	rjmp	.+2      	; 0x738 <CAR_reverse_left+0x24>
     736:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <CAR_stop>:
*description : used to stop the car
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_stop(void)
{
     73c:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(&ST_motor_1);
     73e:	8a e7       	ldi	r24, 0x7A	; 122
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 98 06 	call	0xd30	; 0xd30 <MOTOR_STOP>
     746:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_STOP(&ST_motor_2);
     748:	87 e7       	ldi	r24, 0x77	; 119
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 98 06 	call	0xd30	; 0xd30 <MOTOR_STOP>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     750:	c1 11       	cpse	r28, r1
     752:	03 c0       	rjmp	.+6      	; 0x75a <CAR_stop+0x1e>
     754:	81 11       	cpse	r24, r1
     756:	03 c0       	rjmp	.+6      	; 0x75e <CAR_stop+0x22>
     758:	03 c0       	rjmp	.+6      	; 0x760 <CAR_stop+0x24>
	{
		ret_val=CAR_NOK;
     75a:	8b e0       	ldi	r24, 0x0B	; 11
     75c:	01 c0       	rjmp	.+2      	; 0x760 <CAR_stop+0x24>
     75e:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <HExtInt_enInit>:
		errorStatus = HEXTINT_NOK;
	}


	return errorStatus;
}
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	c8 2f       	mov	r28, r24
     76a:	d6 2f       	mov	r29, r22
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	62 e0       	ldi	r22, 0x02	; 2
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     780:	6d 2f       	mov	r22, r29
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 4d 09 	call	0x129a	; 0x129a <vidExtInt_init>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <HExtInt_enCBFInt0>:
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	21 f0       	breq	.+8      	; 0x79c <HExtInt_enCBFInt0+0xc>
     794:	0e 94 ca 09 	call	0x1394	; 0x1394 <MEXTINT_vidCallBackFuncInt0>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	08 95       	ret
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	08 95       	ret

000007a0 <HExtInt0_enIntDisable>:

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     7a0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MEXTINT_vidDisableInterrupt>
     7a4:	08 95       	ret

000007a6 <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     7a6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <MEXTINT_vidEnableInterrupt>
     7aa:	08 95       	ret

000007ac <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	18 2f       	mov	r17, r24
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     7c0:	c8 2f       	mov	r28, r24
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	67 e0       	ldi	r22, 0x07	; 7
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     7cc:	c8 2b       	or	r28, r24
     7ce:	01 2f       	mov	r16, r17
     7d0:	02 95       	swap	r16
     7d2:	0f 70       	andi	r16, 0x0F	; 15
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	15 c0       	rjmp	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7d8:	ed 2f       	mov	r30, r29
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	40 2f       	mov	r20, r16
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	0d 2e       	mov	r0, r29
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <HLCD_vidWritecmd+0x3c>
     7e4:	55 95       	asr	r21
     7e6:	47 95       	ror	r20
     7e8:	0a 94       	dec	r0
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <HLCD_vidWritecmd+0x38>
     7ec:	41 70       	andi	r20, 0x01	; 1
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e3 58       	subi	r30, 0x83	; 131
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	61 81       	ldd	r22, Z+1	; 0x01
     7f8:	80 81       	ld	r24, Z
     7fa:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     7fe:	c8 2b       	or	r28, r24
     800:	df 5f       	subi	r29, 0xFF	; 255
     802:	d4 30       	cpi	r29, 0x04	; 4
     804:	48 f3       	brcs	.-46     	; 0x7d8 <HLCD_vidWritecmd+0x2c>
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     810:	c8 2b       	or	r28, r24
     812:	89 ef       	ldi	r24, 0xF9	; 249
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81c:	00 00       	nop
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     828:	c8 2b       	or	r28, r24
     82a:	92 e4       	ldi	r25, 0x42	; 66
     82c:	9a 95       	dec	r25
     82e:	f1 f7       	brne	.-4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     830:	00 c0       	rjmp	.+0      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     832:	1f 70       	andi	r17, 0x0F	; 15
     834:	d0 e0       	ldi	r29, 0x00	; 0
     836:	15 c0       	rjmp	.+42     	; 0x862 <__stack+0x3>
     838:	ed 2f       	mov	r30, r29
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	41 2f       	mov	r20, r17
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	0d 2e       	mov	r0, r29
     842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     844:	55 95       	asr	r21
     846:	47 95       	ror	r20
     848:	0a 94       	dec	r0
     84a:	e2 f7       	brpl	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     84c:	41 70       	andi	r20, 0x01	; 1
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	e3 58       	subi	r30, 0x83	; 131
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	61 81       	ldd	r22, Z+1	; 0x01
     858:	80 81       	ld	r24, Z
     85a:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     85e:	c8 2b       	or	r28, r24
     860:	df 5f       	subi	r29, 0xFF	; 255
     862:	d4 30       	cpi	r29, 0x04	; 4
     864:	48 f3       	brcs	.-46     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     870:	c8 2b       	or	r28, r24
     872:	e9 ef       	ldi	r30, 0xF9	; 249
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     888:	8c 2b       	or	r24, r28
     88a:	e3 ef       	ldi	r30, 0xF3	; 243
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <HLCD_vidInit>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	d0 e0       	ldi	r29, 0x00	; 0
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <HLCD_vidInit+0x24>
     8aa:	ed 2f       	mov	r30, r29
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e3 58       	subi	r30, 0x83	; 131
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	61 81       	ldd	r22, Z+1	; 0x01
     8ba:	80 81       	ld	r24, Z
     8bc:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     8c0:	c8 2b       	or	r28, r24
     8c2:	df 5f       	subi	r29, 0xFF	; 255
     8c4:	d4 30       	cpi	r29, 0x04	; 4
     8c6:	88 f3       	brcs	.-30     	; 0x8aa <HLCD_vidInit+0xa>
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	67 e0       	ldi	r22, 0x07	; 7
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     8d2:	c8 2b       	or	r28, r24
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     8de:	c8 2b       	or	r28, r24
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     8ea:	c8 2b       	or	r28, r24
     8ec:	8f e0       	ldi	r24, 0x0F	; 15
     8ee:	97 e2       	ldi	r25, 0x27	; 39
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <HLCD_vidInit+0x50>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <HLCD_vidInit+0x56>
     8f6:	00 00       	nop
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     8fe:	c8 2b       	or	r28, r24
     900:	e9 ef       	ldi	r30, 0xF9	; 249
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <HLCD_vidInit+0x64>
     908:	00 c0       	rjmp	.+0      	; 0x90a <HLCD_vidInit+0x6a>
     90a:	00 00       	nop
     90c:	88 e2       	ldi	r24, 0x28	; 40
     90e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     912:	c8 2b       	or	r28, r24
     914:	89 ef       	ldi	r24, 0xF9	; 249
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <HLCD_vidInit+0x78>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <HLCD_vidInit+0x7e>
     91e:	00 00       	nop
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     926:	c8 2b       	or	r28, r24
     928:	e7 ee       	ldi	r30, 0xE7	; 231
     92a:	f3 e0       	ldi	r31, 0x03	; 3
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <HLCD_vidInit+0x8c>
     930:	00 c0       	rjmp	.+0      	; 0x932 <HLCD_vidInit+0x92>
     932:	00 00       	nop
     934:	86 e0       	ldi	r24, 0x06	; 6
     936:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     93a:	c8 2b       	or	r28, r24
     93c:	89 ef       	ldi	r24, 0xF9	; 249
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <HLCD_vidInit+0xa0>
     944:	00 c0       	rjmp	.+0      	; 0x946 <HLCD_vidInit+0xa6>
     946:	00 00       	nop
     948:	8c e0       	ldi	r24, 0x0C	; 12
     94a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     94e:	8c 2b       	or	r24, r28
     950:	e9 ef       	ldi	r30, 0xF9	; 249
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <HLCD_vidInit+0xb4>
     958:	00 c0       	rjmp	.+0      	; 0x95a <HLCD_vidInit+0xba>
     95a:	00 00       	nop
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <HLCD_vidWriteChar>:
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	18 2f       	mov	r17, r24
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     976:	c8 2f       	mov	r28, r24
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	67 e0       	ldi	r22, 0x07	; 7
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     982:	c8 2b       	or	r28, r24
     984:	01 2f       	mov	r16, r17
     986:	02 95       	swap	r16
     988:	0f 70       	andi	r16, 0x0F	; 15
     98a:	d0 e0       	ldi	r29, 0x00	; 0
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <HLCD_vidWriteChar+0x56>
     98e:	ed 2f       	mov	r30, r29
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	40 2f       	mov	r20, r16
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	0d 2e       	mov	r0, r29
     998:	02 c0       	rjmp	.+4      	; 0x99e <HLCD_vidWriteChar+0x3c>
     99a:	55 95       	asr	r21
     99c:	47 95       	ror	r20
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <HLCD_vidWriteChar+0x38>
     9a2:	41 70       	andi	r20, 0x01	; 1
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	e3 58       	subi	r30, 0x83	; 131
     9aa:	ff 4f       	sbci	r31, 0xFF	; 255
     9ac:	61 81       	ldd	r22, Z+1	; 0x01
     9ae:	80 81       	ld	r24, Z
     9b0:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     9b4:	c8 2b       	or	r28, r24
     9b6:	df 5f       	subi	r29, 0xFF	; 255
     9b8:	d4 30       	cpi	r29, 0x04	; 4
     9ba:	48 f3       	brcs	.-46     	; 0x98e <HLCD_vidWriteChar+0x2c>
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     9c6:	c8 2b       	or	r28, r24
     9c8:	89 ef       	ldi	r24, 0xF9	; 249
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <HLCD_vidWriteChar+0x6a>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <HLCD_vidWriteChar+0x70>
     9d2:	00 00       	nop
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     9de:	c8 2b       	or	r28, r24
     9e0:	92 e4       	ldi	r25, 0x42	; 66
     9e2:	9a 95       	dec	r25
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <HLCD_vidWriteChar+0x80>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <HLCD_vidWriteChar+0x86>
     9e8:	1f 70       	andi	r17, 0x0F	; 15
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
     9ec:	15 c0       	rjmp	.+42     	; 0xa18 <HLCD_vidWriteChar+0xb6>
     9ee:	ed 2f       	mov	r30, r29
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	41 2f       	mov	r20, r17
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	0d 2e       	mov	r0, r29
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <HLCD_vidWriteChar+0x9c>
     9fa:	55 95       	asr	r21
     9fc:	47 95       	ror	r20
     9fe:	0a 94       	dec	r0
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <HLCD_vidWriteChar+0x98>
     a02:	41 70       	andi	r20, 0x01	; 1
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e3 58       	subi	r30, 0x83	; 131
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	61 81       	ldd	r22, Z+1	; 0x01
     a0e:	80 81       	ld	r24, Z
     a10:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     a14:	c8 2b       	or	r28, r24
     a16:	df 5f       	subi	r29, 0xFF	; 255
     a18:	d4 30       	cpi	r29, 0x04	; 4
     a1a:	48 f3       	brcs	.-46     	; 0x9ee <HLCD_vidWriteChar+0x8c>
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     a26:	c8 2b       	or	r28, r24
     a28:	e9 ef       	ldi	r30, 0xF9	; 249
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <HLCD_vidWriteChar+0xca>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <HLCD_vidWriteChar+0xd0>
     a32:	00 00       	nop
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     a3e:	8c 2b       	or	r24, r28
     a40:	e3 ef       	ldi	r30, 0xF3	; 243
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	31 97       	sbiw	r30, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <HLCD_vidWriteChar+0xe2>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <HLCD_vidWriteChar+0xe8>
     a4a:	00 00       	nop
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <HLCD_ClrDisplay>:
     a56:	cf 93       	push	r28
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     a5e:	c8 2f       	mov	r28, r24
     a60:	87 ee       	ldi	r24, 0xE7	; 231
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <HLCD_ClrDisplay+0xe>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <HLCD_ClrDisplay+0x14>
     a6a:	00 00       	nop
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     a72:	8c 2b       	or	r24, r28
     a74:	e7 ee       	ldi	r30, 0xE7	; 231
     a76:	f3 e0       	ldi	r31, 0x03	; 3
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <HLCD_ClrDisplay+0x22>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <HLCD_ClrDisplay+0x28>
     a7e:	00 00       	nop
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     a84:	81 11       	cpse	r24, r1
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <HLCD_gotoXY+0x14>
     a88:	60 31       	cpi	r22, 0x10	; 16
     a8a:	30 f4       	brcc	.+12     	; 0xa98 <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     a8c:	86 2f       	mov	r24, r22
     a8e:	8f 70       	andi	r24, 0x0F	; 15
     a90:	80 68       	ori	r24, 0x80	; 128
     a92:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     a96:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	41 f4       	brne	.+16     	; 0xaac <HLCD_gotoXY+0x28>
     a9c:	60 31       	cpi	r22, 0x10	; 16
     a9e:	40 f4       	brcc	.+16     	; 0xab0 <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     aa0:	86 2f       	mov	r24, r22
     aa2:	8f 70       	andi	r24, 0x0F	; 15
     aa4:	80 6c       	ori	r24, 0xC0	; 192
     aa6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HLCD_vidWritecmd>
     aaa:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	08 95       	ret
     ab0:	88 e0       	ldi	r24, 0x08	; 8
	}
	return errorStatus;
}
     ab2:	08 95       	ret

00000ab4 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     ac8:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     aca:	08 c0       	rjmp	.+16     	; 0xadc <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     acc:	0e 94 b1 04 	call	0x962	; 0x962 <HLCD_vidWriteChar>
     ad0:	18 2b       	or	r17, r24
		string = str[++count];
     ad2:	21 96       	adiw	r28, 0x01	; 1
     ad4:	f7 01       	movw	r30, r14
     ad6:	ec 0f       	add	r30, r28
     ad8:	fd 1f       	adc	r31, r29
     ada:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     adc:	81 11       	cpse	r24, r1
     ade:	f6 cf       	rjmp	.-20     	; 0xacc <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     ae0:	81 2f       	mov	r24, r17
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	08 95       	ret

00000aee <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	2a 97       	sbiw	r28, 0x0a	; 10
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b06:	4a e0       	ldi	r20, 0x0A	; 10
     b08:	be 01       	movw	r22, r28
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	0e 94 5a 05 	call	0xab4	; 0xab4 <HLCD_WriteString>
	return errorStatus;
}
     b1a:	2a 96       	adiw	r28, 0x0a	; 10
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <KEYPAD_init>:
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a9 f1       	breq	.+106    	; 0xb9e <KEYPAD_init+0x72>
     b34:	ec 01       	movw	r28, r24
     b36:	69 81       	ldd	r22, Y+1	; 0x01
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	88 81       	ld	r24, Y
     b3c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b40:	6b 81       	ldd	r22, Y+3	; 0x03
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b4a:	6d 81       	ldd	r22, Y+5	; 0x05
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	8c 81       	ldd	r24, Y+4	; 0x04
     b50:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b54:	69 81       	ldd	r22, Y+1	; 0x01
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	88 81       	ld	r24, Y
     b5a:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     b5e:	6b 81       	ldd	r22, Y+3	; 0x03
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     b68:	6d 81       	ldd	r22, Y+5	; 0x05
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     b72:	6f 81       	ldd	r22, Y+7	; 0x07
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b7c:	69 85       	ldd	r22, Y+9	; 0x09
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	88 85       	ldd	r24, Y+8	; 0x08
     b82:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b86:	6b 85       	ldd	r22, Y+11	; 0x0b
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     b8c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b90:	6d 85       	ldd	r22, Y+13	; 0x0d
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	8c 85       	ldd	r24, Y+12	; 0x0c
     b96:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <KEYPAD_init+0x74>
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <KEYPAD_read>:
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	1f 92       	push	r1
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	7c 01       	movw	r14, r24
     bbc:	07 e6       	ldi	r16, 0x67	; 103
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	f8 01       	movw	r30, r16
     bc2:	67 81       	ldd	r22, Z+7	; 0x07
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	86 81       	ldd	r24, Z+6	; 0x06
     bc8:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     bcc:	f8 01       	movw	r30, r16
     bce:	61 85       	ldd	r22, Z+9	; 0x09
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	80 85       	ldd	r24, Z+8	; 0x08
     bd4:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     bd8:	f8 01       	movw	r30, r16
     bda:	63 85       	ldd	r22, Z+11	; 0x0b
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	82 85       	ldd	r24, Z+10	; 0x0a
     be0:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     be4:	f8 01       	movw	r30, r16
     be6:	65 85       	ldd	r22, Z+13	; 0x0d
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	84 85       	ldd	r24, Z+12	; 0x0c
     bec:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     bf0:	00 e0       	ldi	r16, 0x00	; 0
     bf2:	d1 2c       	mov	r13, r1
     bf4:	42 c0       	rjmp	.+132    	; 0xc7a <KEYPAD_read+0xd4>
     bf6:	e7 e6       	ldi	r30, 0x67	; 103
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	67 81       	ldd	r22, Z+7	; 0x07
     bfc:	60 0f       	add	r22, r16
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	86 81       	ldd	r24, Z+6	; 0x06
     c02:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     c06:	10 e0       	ldi	r17, 0x00	; 0
     c08:	2d c0       	rjmp	.+90     	; 0xc64 <KEYPAD_read+0xbe>
     c0a:	e7 e6       	ldi	r30, 0x67	; 103
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	61 81       	ldd	r22, Z+1	; 0x01
     c10:	61 0f       	add	r22, r17
     c12:	ae 01       	movw	r20, r28
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	80 81       	ld	r24, Z
     c1a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_readPIN>
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	81 11       	cpse	r24, r1
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <KEYPAD_read+0xbc>
     c24:	0a c0       	rjmp	.+20     	; 0xc3a <KEYPAD_read+0x94>
     c26:	e7 e6       	ldi	r30, 0x67	; 103
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	61 81       	ldd	r22, Z+1	; 0x01
     c2c:	61 0f       	add	r22, r17
     c2e:	ae 01       	movw	r20, r28
     c30:	4f 5f       	subi	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	80 81       	ld	r24, Z
     c36:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_readPIN>
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	88 23       	and	r24, r24
     c3e:	99 f3       	breq	.-26     	; 0xc26 <KEYPAD_read+0x80>
     c40:	80 2f       	mov	r24, r16
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fc 01       	movw	r30, r24
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	e8 0f       	add	r30, r24
     c4c:	f9 1f       	adc	r31, r25
     c4e:	ef 5e       	subi	r30, 0xEF	; 239
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	e1 0f       	add	r30, r17
     c54:	f1 1d       	adc	r31, r1
     c56:	80 81       	ld	r24, Z
     c58:	f7 01       	movw	r30, r14
     c5a:	80 83       	st	Z, r24
     c5c:	dd 24       	eor	r13, r13
     c5e:	d3 94       	inc	r13
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <KEYPAD_read+0xc2>
     c62:	1f 5f       	subi	r17, 0xFF	; 255
     c64:	13 30       	cpi	r17, 0x03	; 3
     c66:	88 f2       	brcs	.-94     	; 0xc0a <KEYPAD_read+0x64>
     c68:	e7 e6       	ldi	r30, 0x67	; 103
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	67 81       	ldd	r22, Z+7	; 0x07
     c6e:	60 0f       	add	r22, r16
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	86 81       	ldd	r24, Z+6	; 0x06
     c74:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     c78:	0f 5f       	subi	r16, 0xFF	; 255
     c7a:	04 30       	cpi	r16, 0x04	; 4
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <KEYPAD_read+0xda>
     c7e:	bb cf       	rjmp	.-138    	; 0xbf6 <KEYPAD_read+0x50>
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	df 16       	cp	r13, r31
     c84:	19 f0       	breq	.+6      	; 0xc8c <KEYPAD_read+0xe6>
     c86:	8e e4       	ldi	r24, 0x4E	; 78
     c88:	f7 01       	movw	r30, r14
     c8a:	80 83       	st	Z, r24
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	08 95       	ret

00000ca0 <MOTOR_INIT>:
/*including sections*/
#include "motor.h"

/* APIs impelementation*/
EN_motor_error_t MOTOR_INIT(const ST_motor_t* motor)
{
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
	if((DIO_init(motor->port,motor->pin_num1,STD_OUTPUT)==DIO_E_OK) && (DIO_init(motor->port,motor->pin_num2,STD_OUTPUT)==DIO_E_OK ))
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	69 81       	ldd	r22, Y+1	; 0x01
     caa:	88 81       	ld	r24, Y
     cac:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     cb0:	81 11       	cpse	r24, r1
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <MOTOR_INIT+0x24>
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	6a 81       	ldd	r22, Y+2	; 0x02
     cb8:	88 81       	ld	r24, Y
     cba:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
     cbe:	81 11       	cpse	r24, r1
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <MOTOR_INIT+0x28>
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <MOTOR_INIT+0x2a>
	{
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     cc4:	89 e0       	ldi	r24, 0x09	; 9
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <MOTOR_INIT+0x2a>
     cc8:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <MOTOR_FORWARD>:
EN_motor_error_t MOTOR_FORWARD(const ST_motor_t* motor)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_HIGH)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	69 81       	ldd	r22, Y+1	; 0x01
     cda:	88 81       	ld	r24, Y
     cdc:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     ce0:	81 11       	cpse	r24, r1
     ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <MOTOR_FORWARD+0x24>
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	6a 81       	ldd	r22, Y+2	; 0x02
     ce8:	88 81       	ld	r24, Y
     cea:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     cee:	81 11       	cpse	r24, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <MOTOR_FORWARD+0x28>
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <MOTOR_FORWARD+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     cf4:	89 e0       	ldi	r24, 0x09	; 9
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <MOTOR_FORWARD+0x2a>
     cf8:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <MOTOR_BACKWARD>:
EN_motor_error_t MOTOR_BACKWARD(const ST_motor_t* motor)
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_HIGH)==DIO_E_OK)
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	69 81       	ldd	r22, Y+1	; 0x01
     d0a:	88 81       	ld	r24, Y
     d0c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     d10:	81 11       	cpse	r24, r1
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <MOTOR_BACKWARD+0x24>
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	6a 81       	ldd	r22, Y+2	; 0x02
     d18:	88 81       	ld	r24, Y
     d1a:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     d1e:	81 11       	cpse	r24, r1
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <MOTOR_BACKWARD+0x28>
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <MOTOR_BACKWARD+0x2a>
	{    
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     d24:	89 e0       	ldi	r24, 0x09	; 9
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <MOTOR_BACKWARD+0x2a>
     d28:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <MOTOR_STOP>:
EN_motor_error_t MOTOR_STOP(const ST_motor_t* motor)
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	69 81       	ldd	r22, Y+1	; 0x01
     d3a:	88 81       	ld	r24, Y
     d3c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     d40:	81 11       	cpse	r24, r1
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <MOTOR_STOP+0x24>
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	6a 81       	ldd	r22, Y+2	; 0x02
     d48:	88 81       	ld	r24, Y
     d4a:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     d4e:	81 11       	cpse	r24, r1
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <MOTOR_STOP+0x28>
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <MOTOR_STOP+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     d54:	89 e0       	ldi	r24, 0x09	; 9
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <MOTOR_STOP+0x2a>
     d58:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <TIMER0_callBackFunc>:



void TIMER0_callBackFunc(void)
{
	u8_gs_pwm_counter++;
     d60:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_gs_pwm_counter>
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <u8_gs_pwm_counter>
	TIMER_Manager_reset(&st_timer0Config);
     d6a:	85 e8       	ldi	r24, 0x85	; 133
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <TIMER_Manager_reset>
     d72:	08 95       	ret

00000d74 <PWM_init>:
static uint8_t u8_gs_duty = 0;
static uint8_t u8_gs_cycle = 0;
static uint8_t u8_gs_dir = 0;

u8_pwmErrorType PWM_init(void)
{
     d74:	cf 93       	push	r28
	uint8_t u8_retVal = PWM_ERROR_OK;
	u8_retVal = TIMER_Manager_init(&st_timer0Config);
     d76:	85 e8       	ldi	r24, 0x85	; 133
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 15 07 	call	0xe2a	; 0xe2a <TIMER_Manager_init>
     d7e:	c8 2f       	mov	r28, r24
	u8_retVal |= CAR_init();
     d80:	0e 94 3a 03 	call	0x674	; 0x674 <CAR_init>
     d84:	8c 2b       	or	r24, r28
	if (u8_retVal == PWM_ERROR_OK)
     d86:	19 f4       	brne	.+6      	; 0xd8e <PWM_init+0x1a>
	{
		u8_gs_pwm_state = INIT;
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <u8_gs_pwm_state>
	}
	return u8_retVal;
}
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <PWM_start>:
u8_pwmErrorType PWM_start(uint8_t u8_duty , uint8_t u8_cycle , en_motor_dir_t u8_motor_dir)
{
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state == INIT)
     d9a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <u8_gs_pwm_state>
     d9e:	91 30       	cpi	r25, 0x01	; 1
     da0:	e9 f5       	brne	.+122    	; 0xe1c <PWM_start+0x8a>
	{
		if (u8_gs_pwm_state == START &&  (u8_gs_duty != u8_duty || u8_gs_cycle != u8_cycle || u8_gs_dir != u8_motor_dir ))
     da2:	92 30       	cpi	r25, 0x02	; 2
     da4:	69 f4       	brne	.+26     	; 0xdc0 <PWM_start+0x2e>
     da6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <u8_gs_duty>
     daa:	98 13       	cpse	r25, r24
     dac:	07 c0       	rjmp	.+14     	; 0xdbc <PWM_start+0x2a>
     dae:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <u8_gs_cycle>
     db2:	96 13       	cpse	r25, r22
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <PWM_start+0x2a>
     db6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <u8_gs_dir>
     dba:	94 13       	cpse	r25, r20
		{
			u8_gs_pwm_counter = 0;
     dbc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <u8_gs_pwm_counter>
     dc0:	14 2f       	mov	r17, r20
     dc2:	d6 2f       	mov	r29, r22
		}
		u8_duty = (u8_cycle * u8_duty) / 100;
     dc4:	68 9f       	mul	r22, r24
     dc6:	c0 01       	movw	r24, r0
     dc8:	11 24       	eor	r1, r1
     dca:	64 e6       	ldi	r22, 0x64	; 100
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divmodhi4>
     dd2:	06 2f       	mov	r16, r22
		u8_retVal |= TIMER_Manager_start(&st_timer0Config);
     dd4:	85 e8       	ldi	r24, 0x85	; 133
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 35 07 	call	0xe6a	; 0xe6a <TIMER_Manager_start>
     ddc:	c8 2f       	mov	r28, r24
		if (u8_gs_pwm_counter < u8_cycle)
     dde:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <u8_gs_pwm_counter>
     de2:	8d 17       	cp	r24, r29
     de4:	60 f4       	brcc	.+24     	; 0xdfe <PWM_start+0x6c>
		{
			if (u8_motor_dir == FORWARD)
     de6:	11 11       	cpse	r17, r1
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <PWM_start+0x60>
			{
				u8_retVal |= CAR_forward();
     dea:	0e 94 4e 03 	call	0x69c	; 0x69c <CAR_forward>
     dee:	c8 2b       	or	r28, r24
     df0:	0b c0       	rjmp	.+22     	; 0xe08 <PWM_start+0x76>
			}
			else if (u8_motor_dir == BACKWARD)
     df2:	11 30       	cpi	r17, 0x01	; 1
     df4:	49 f4       	brne	.+18     	; 0xe08 <PWM_start+0x76>
			{
				u8_retVal |= CAR_backword();
     df6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <CAR_backword>
     dfa:	c8 2b       	or	r28, r24
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <PWM_start+0x76>
			}
			else{
				// do nothing
			}
		}
		else if (u8_gs_pwm_counter < u8_cycle)
     dfe:	8d 17       	cp	r24, r29
     e00:	18 f4       	brcc	.+6      	; 0xe08 <PWM_start+0x76>
		{
			u8_retVal |= CAR_stop();
     e02:	0e 94 9e 03 	call	0x73c	; 0x73c <CAR_stop>
     e06:	c8 2b       	or	r28, r24
		}
		u8_gs_pwm_state = START;
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <u8_gs_pwm_state>
		u8_gs_duty = u8_duty;
     e0e:	00 93 28 01 	sts	0x0128, r16	; 0x800128 <u8_gs_duty>
		u8_gs_cycle = u8_cycle;
     e12:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <u8_gs_cycle>
		u8_gs_dir = u8_motor_dir;
     e16:	10 93 26 01 	sts	0x0126, r17	; 0x800126 <u8_gs_dir>
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <PWM_start+0x8c>
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     e1c:	ca e0       	ldi	r28, 0x0A	; 10
	}
	
	return u8_retVal;
}
     e1e:	8c 2f       	mov	r24, r28
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <TIMER_Manager_init>:
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	91 f0       	breq	.+36     	; 0xe58 <TIMER_Manager_init+0x2e>
     e34:	fc 01       	movw	r30, r24
     e36:	20 81       	ld	r18, Z
     e38:	23 30       	cpi	r18, 0x03	; 3
     e3a:	80 f4       	brcc	.+32     	; 0xe5c <TIMER_Manager_init+0x32>
     e3c:	21 81       	ldd	r18, Z+1	; 0x01
     e3e:	2a 30       	cpi	r18, 0x0A	; 10
     e40:	78 f4       	brcc	.+30     	; 0xe60 <TIMER_Manager_init+0x36>
     e42:	ec 01       	movw	r28, r24
     e44:	0e 94 bf 0a 	call	0x157e	; 0x157e <TIMER_init>
     e48:	18 2f       	mov	r17, r24
     e4a:	68 81       	ld	r22, Y
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	9e 81       	ldd	r25, Y+6	; 0x06
     e50:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <TIMER_setCallBack>
     e54:	81 2b       	or	r24, r17
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <TIMER_Manager_init+0x38>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <TIMER_Manager_init+0x38>
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <TIMER_Manager_init+0x38>
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	08 95       	ret

00000e6a <TIMER_Manager_start>:
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	51 f0       	breq	.+20     	; 0xe82 <TIMER_Manager_start+0x18>
     e6e:	fc 01       	movw	r30, r24
     e70:	20 81       	ld	r18, Z
     e72:	23 30       	cpi	r18, 0x03	; 3
     e74:	40 f4       	brcc	.+16     	; 0xe86 <TIMER_Manager_start+0x1c>
     e76:	21 81       	ldd	r18, Z+1	; 0x01
     e78:	2a 30       	cpi	r18, 0x0A	; 10
     e7a:	38 f4       	brcc	.+14     	; 0xe8a <TIMER_Manager_start+0x20>
     e7c:	0e 94 48 0b 	call	0x1690	; 0x1690 <TIMER_start>
     e80:	08 95       	ret
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	08 95       	ret
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	08 95       	ret
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	08 95       	ret

00000e8e <TIMER_Manager_stop>:
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	18 f4       	brcc	.+6      	; 0xe98 <TIMER_Manager_stop+0xa>
     e92:	0e 94 94 0c 	call	0x1928	; 0x1928 <TIMER_stop>
     e96:	08 95       	ret
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	08 95       	ret

00000e9c <TIMER_Manager_reset>:
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	51 f0       	breq	.+20     	; 0xeb4 <TIMER_Manager_reset+0x18>
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 81       	ld	r18, Z
     ea4:	23 30       	cpi	r18, 0x03	; 3
     ea6:	40 f4       	brcc	.+16     	; 0xeb8 <TIMER_Manager_reset+0x1c>
     ea8:	21 81       	ldd	r18, Z+1	; 0x01
     eaa:	2a 30       	cpi	r18, 0x0A	; 10
     eac:	38 f4       	brcc	.+14     	; 0xebc <TIMER_Manager_reset+0x20>
     eae:	0e 94 c1 0c 	call	0x1982	; 0x1982 <TIMER_reset>
     eb2:	08 95       	ret
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	08 95       	ret
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	08 95       	ret
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	08 95       	ret

00000ec0 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	63 e0       	ldi	r22, 0x03	; 3
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eca:	8a e1       	ldi	r24, 0x1A	; 26
     ecc:	8a 95       	dec	r24
     ece:	f1 f7       	brne	.-4      	; 0xecc <HULTRASONIC_vidTrigger+0xc>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	63 e0       	ldi	r22, 0x03	; 3
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>
     edc:	08 95       	ret

00000ede <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     ede:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_v_u16_ovfCounts>
     ee2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_v_u16_ovfCounts+0x1>
     ee6:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <g_v_u16_ovfCounts+0x2>
     eea:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <g_v_u16_ovfCounts+0x3>
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	a1 1d       	adc	r26, r1
     ef2:	b1 1d       	adc	r27, r1
     ef4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_v_u16_ovfCounts>
     ef8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <g_v_u16_ovfCounts+0x1>
     efc:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <g_v_u16_ovfCounts+0x2>
     f00:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <g_v_u16_ovfCounts+0x3>
     f04:	08 95       	ret

00000f06 <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
     f06:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_v_u8_flag>
     f0a:	81 11       	cpse	r24, r1
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
     f0e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
     f12:	62 e0       	ldi	r22, 0x02	; 2
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	0e 94 4d 09 	call	0x129a	; 0x129a <vidExtInt_init>
		g_v_u8_flag = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
     f20:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <g_v_u16_ovfCounts>
     f24:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_v_u16_ovfCounts+0x1>
     f28:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <g_v_u16_ovfCounts+0x2>
     f2c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
     f30:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vidTimer2_start>
     f34:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
     f36:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_v_u8_flag>
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <HULTRASONIC_vidSigCalc+0x3a>
     f3e:	50 c0       	rjmp	.+160    	; 0xfe0 <HULTRASONIC_vidSigCalc+0xda>
	{
		vidTimer2_stop();
     f40:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
     f44:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <MTIMER_u8GetTCNT>
     f48:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
     f4c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_v_u16_ovfCounts>
     f50:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_v_u16_ovfCounts+0x1>
     f54:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <g_v_u16_ovfCounts+0x2>
     f58:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <g_v_u16_ovfCounts+0x3>
     f5c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <g_v_u16_ovf>
     f60:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <g_v_u16_ovf+0x1>
     f64:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <g_v_u16_ovf+0x2>
     f68:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
     f6c:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <g_v_u8_cap>
     f70:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <g_v_u16_ovf>
     f74:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <g_v_u16_ovf+0x1>
     f78:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <g_v_u16_ovf+0x2>
     f7c:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <g_v_u16_ovf+0x3>
     f80:	ba 2f       	mov	r27, r26
     f82:	a9 2f       	mov	r26, r25
     f84:	98 2f       	mov	r25, r24
     f86:	88 27       	eor	r24, r24
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	62 0f       	add	r22, r18
     f8e:	71 1d       	adc	r23, r1
     f90:	81 1d       	adc	r24, r1
     f92:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = (float64_t)global_u32Ticks / 932.95;
     f94:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
     f98:	2d ec       	ldi	r18, 0xCD	; 205
     f9a:	3c e3       	ldi	r19, 0x3C	; 60
     f9c:	49 e6       	ldi	r20, 0x69	; 105
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
     fa4:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <global_f64distance>
     fa8:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <global_f64distance+0x1>
     fac:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <global_f64distance+0x2>
     fb0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
     fb4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <g_v_u16_ovf>
     fb8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <g_v_u16_ovf+0x1>
     fbc:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <g_v_u16_ovf+0x2>
     fc0:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <g_v_u16_ovf+0x3>
     fc4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <g_v_u16_ovfCounts>
     fc8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_v_u16_ovfCounts+0x1>
     fcc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <g_v_u16_ovfCounts+0x2>
     fd0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <g_v_u16_ovfCounts+0x3>
     fd4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
     fd8:	63 e0       	ldi	r22, 0x03	; 3
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	0e 94 4d 09 	call	0x129a	; 0x129a <vidExtInt_init>
     fe0:	08 95       	ret

00000fe2 <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	63 e0       	ldi	r22, 0x03	; 3
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
    1000:	63 e0       	ldi	r22, 0x03	; 3
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	0e 94 4d 09 	call	0x129a	; 0x129a <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <u8Timer2_setPrescallar>
    1014:	08 95       	ret

00001016 <HULTRASONIC_vidInterruptEnable>:
}

void HULTRASONIC_vidInterruptEnable(void)
{
	(void) vidTimer2_OvfIrqEnable();
    1016:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <vidTimer2_OvfIrqEnable>
	MEXTINT2_vidEnableInterrupt();
    101a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <MEXTINT2_vidEnableInterrupt>
	MTIMER_vidEnableGlobalInterrupt();
    101e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <MTIMER_vidEnableGlobalInterrupt>
    1022:	08 95       	ret

00001024 <HULTRASONIC_vidInterruptDisable>:
}

void HULTRASONIC_vidInterruptDisable(void)
{
	(void) vidTimer2_OvfIrqDisable();
    1024:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vidTimer2_OvfIrqDisable>
	MEXTINT2_vidDisableInterrupt();
    1028:	0e 94 df 09 	call	0x13be	; 0x13be <MEXTINT2_vidDisableInterrupt>
    102c:	08 95       	ret

0000102e <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
    102e:	0e 94 60 07 	call	0xec0	; 0xec0 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
    1032:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <global_f64distance>
    1036:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <global_f64distance+0x1>
    103a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <global_f64distance+0x2>
    103e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <global_f64distance+0x3>
}
    1042:	08 95       	ret

00001044 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
    1044:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vidTimer2_setcbf_OVF>
    1048:	08 95       	ret

0000104a <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
    104a:	0e 94 cf 09 	call	0x139e	; 0x139e <MEXTINT_vidCallBackFunc>
    104e:	08 95       	ret

00001050 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
    1050:	0e 94 76 00 	call	0xec	; 0xec <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
    1054:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <APP_vidStart>
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <main+0x4>

0000105a <DIO_init>:
    105a:	68 30       	cpi	r22, 0x08	; 8
    105c:	a0 f5       	brcc	.+104    	; 0x10c6 <DIO_init+0x6c>
    105e:	81 11       	cpse	r24, r1
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <DIO_init+0x1e>
    1062:	8a b3       	in	r24, 0x1a	; 26
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_init+0x12>
    1068:	44 0f       	add	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	6a 95       	dec	r22
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_init+0xe>
    1070:	48 2b       	or	r20, r24
    1072:	4a bb       	out	0x1a, r20	; 26
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	59 f4       	brne	.+22     	; 0x1092 <DIO_init+0x38>
    107c:	87 b3       	in	r24, 0x17	; 23
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_init+0x2c>
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	6a 95       	dec	r22
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_init+0x28>
    108a:	48 2b       	or	r20, r24
    108c:	47 bb       	out	0x17, r20	; 23
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	59 f4       	brne	.+22     	; 0x10ac <DIO_init+0x52>
    1096:	84 b3       	in	r24, 0x14	; 20
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_init+0x46>
    109c:	44 0f       	add	r20, r20
    109e:	55 1f       	adc	r21, r21
    10a0:	6a 95       	dec	r22
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_init+0x42>
    10a4:	48 2b       	or	r20, r24
    10a6:	44 bb       	out	0x14, r20	; 20
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	08 95       	ret
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	69 f4       	brne	.+26     	; 0x10ca <DIO_init+0x70>
    10b0:	81 b3       	in	r24, 0x11	; 17
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_init+0x60>
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	6a 95       	dec	r22
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_init+0x5c>
    10be:	48 2b       	or	r20, r24
    10c0:	41 bb       	out	0x11, r20	; 17
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	08 95       	ret
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	08 95       	ret
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	08 95       	ret

000010ce <DIO_writePIN>:
    10ce:	68 30       	cpi	r22, 0x08	; 8
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <DIO_writePIN+0x6>
    10d2:	74 c0       	rjmp	.+232    	; 0x11bc <DIO_writePIN+0xee>
    10d4:	81 11       	cpse	r24, r1
    10d6:	1b c0       	rjmp	.+54     	; 0x110e <DIO_writePIN+0x40>
    10d8:	41 30       	cpi	r20, 0x01	; 1
    10da:	61 f4       	brne	.+24     	; 0x10f4 <DIO_writePIN+0x26>
    10dc:	2b b3       	in	r18, 0x1b	; 27
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_writePIN+0x1a>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	6a 95       	dec	r22
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_writePIN+0x16>
    10ec:	82 2b       	or	r24, r18
    10ee:	8b bb       	out	0x1b, r24	; 27
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
    10f4:	2b b3       	in	r18, 0x1b	; 27
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_writePIN+0x32>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	6a 95       	dec	r22
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_writePIN+0x2e>
    1104:	80 95       	com	r24
    1106:	82 23       	and	r24, r18
    1108:	8b bb       	out	0x1b, r24	; 27
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	08 95       	ret
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	d9 f4       	brne	.+54     	; 0x1148 <DIO_writePIN+0x7a>
    1112:	41 30       	cpi	r20, 0x01	; 1
    1114:	61 f4       	brne	.+24     	; 0x112e <DIO_writePIN+0x60>
    1116:	28 b3       	in	r18, 0x18	; 24
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_writePIN+0x54>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	6a 95       	dec	r22
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_writePIN+0x50>
    1126:	82 2b       	or	r24, r18
    1128:	88 bb       	out	0x18, r24	; 24
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	08 95       	ret
    112e:	28 b3       	in	r18, 0x18	; 24
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_writePIN+0x6c>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	6a 95       	dec	r22
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_writePIN+0x68>
    113e:	80 95       	com	r24
    1140:	82 23       	and	r24, r18
    1142:	88 bb       	out	0x18, r24	; 24
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	08 95       	ret
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	d9 f4       	brne	.+54     	; 0x1182 <DIO_writePIN+0xb4>
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	61 f4       	brne	.+24     	; 0x1168 <DIO_writePIN+0x9a>
    1150:	25 b3       	in	r18, 0x15	; 21
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_writePIN+0x8e>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	6a 95       	dec	r22
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_writePIN+0x8a>
    1160:	82 2b       	or	r24, r18
    1162:	85 bb       	out	0x15, r24	; 21
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	08 95       	ret
    1168:	25 b3       	in	r18, 0x15	; 21
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_writePIN+0xa6>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	6a 95       	dec	r22
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_writePIN+0xa2>
    1178:	80 95       	com	r24
    117a:	82 23       	and	r24, r18
    117c:	85 bb       	out	0x15, r24	; 21
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 95       	ret
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	e9 f4       	brne	.+58     	; 0x11c0 <DIO_writePIN+0xf2>
    1186:	41 30       	cpi	r20, 0x01	; 1
    1188:	61 f4       	brne	.+24     	; 0x11a2 <DIO_writePIN+0xd4>
    118a:	22 b3       	in	r18, 0x12	; 18
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_writePIN+0xc8>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	6a 95       	dec	r22
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_writePIN+0xc4>
    119a:	82 2b       	or	r24, r18
    119c:	82 bb       	out	0x12, r24	; 18
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	08 95       	ret
    11a2:	22 b3       	in	r18, 0x12	; 18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_writePIN+0xe0>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	6a 95       	dec	r22
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_writePIN+0xdc>
    11b2:	80 95       	com	r24
    11b4:	82 23       	and	r24, r18
    11b6:	82 bb       	out	0x12, r24	; 18
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	08 95       	ret

000011c4 <DIO_readPIN>:
    11c4:	68 30       	cpi	r22, 0x08	; 8
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <DIO_readPIN+0x6>
    11c8:	64 c0       	rjmp	.+200    	; 0x1292 <DIO_readPIN+0xce>
    11ca:	81 11       	cpse	r24, r1
    11cc:	17 c0       	rjmp	.+46     	; 0x11fc <DIO_readPIN+0x38>
    11ce:	79 b3       	in	r23, 0x19	; 25
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 01       	movw	r18, r24
    11d6:	06 2e       	mov	r0, r22
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_readPIN+0x1a>
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_readPIN+0x16>
    11e2:	87 2f       	mov	r24, r23
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	82 23       	and	r24, r18
    11e8:	93 23       	and	r25, r19
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_readPIN+0x2c>
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	6a 95       	dec	r22
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_readPIN+0x28>
    11f4:	fa 01       	movw	r30, r20
    11f6:	80 83       	st	Z, r24
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	b9 f4       	brne	.+46     	; 0x122e <DIO_readPIN+0x6a>
    1200:	76 b3       	in	r23, 0x16	; 22
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9c 01       	movw	r18, r24
    1208:	06 2e       	mov	r0, r22
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_readPIN+0x4c>
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_readPIN+0x48>
    1214:	87 2f       	mov	r24, r23
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	82 23       	and	r24, r18
    121a:	93 23       	and	r25, r19
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_readPIN+0x5e>
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	6a 95       	dec	r22
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_readPIN+0x5a>
    1226:	fa 01       	movw	r30, r20
    1228:	80 83       	st	Z, r24
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	08 95       	ret
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	b9 f4       	brne	.+46     	; 0x1260 <DIO_readPIN+0x9c>
    1232:	73 b3       	in	r23, 0x13	; 19
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9c 01       	movw	r18, r24
    123a:	06 2e       	mov	r0, r22
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_readPIN+0x7e>
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_readPIN+0x7a>
    1246:	87 2f       	mov	r24, r23
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	82 23       	and	r24, r18
    124c:	93 23       	and	r25, r19
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_readPIN+0x90>
    1250:	96 95       	lsr	r25
    1252:	87 95       	ror	r24
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_readPIN+0x8c>
    1258:	fa 01       	movw	r30, r20
    125a:	80 83       	st	Z, r24
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	08 95       	ret
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	c9 f4       	brne	.+50     	; 0x1296 <DIO_readPIN+0xd2>
    1264:	70 b3       	in	r23, 0x10	; 16
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 01       	movw	r18, r24
    126c:	06 2e       	mov	r0, r22
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_readPIN+0xb0>
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_readPIN+0xac>
    1278:	87 2f       	mov	r24, r23
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	82 23       	and	r24, r18
    127e:	93 23       	and	r25, r19
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_readPIN+0xc2>
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	6a 95       	dec	r22
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_readPIN+0xbe>
    128a:	fa 01       	movw	r30, r20
    128c:	80 83       	st	Z, r24
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	08 95       	ret
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	08 95       	ret
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	08 95       	ret

0000129a <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <vidExtInt_init+0x6>
    129e:	70 c0       	rjmp	.+224    	; 0x1380 <vidExtInt_init+0xe6>
    12a0:	64 30       	cpi	r22, 0x04	; 4
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <vidExtInt_init+0xc>
    12a4:	6f c0       	rjmp	.+222    	; 0x1384 <vidExtInt_init+0xea>
    12a6:	81 11       	cpse	r24, r1
    12a8:	28 c0       	rjmp	.+80     	; 0x12fa <vidExtInt_init+0x60>
    12aa:	61 30       	cpi	r22, 0x01	; 1
    12ac:	71 f0       	breq	.+28     	; 0x12ca <vidExtInt_init+0x30>
    12ae:	28 f0       	brcs	.+10     	; 0x12ba <vidExtInt_init+0x20>
    12b0:	62 30       	cpi	r22, 0x02	; 2
    12b2:	99 f0       	breq	.+38     	; 0x12da <vidExtInt_init+0x40>
    12b4:	63 30       	cpi	r22, 0x03	; 3
    12b6:	c9 f0       	breq	.+50     	; 0x12ea <vidExtInt_init+0x50>
    12b8:	67 c0       	rjmp	.+206    	; 0x1388 <vidExtInt_init+0xee>
    12ba:	85 b7       	in	r24, 0x35	; 53
    12bc:	8e 7f       	andi	r24, 0xFE	; 254
    12be:	85 bf       	out	0x35, r24	; 53
    12c0:	85 b7       	in	r24, 0x35	; 53
    12c2:	8d 7f       	andi	r24, 0xFD	; 253
    12c4:	85 bf       	out	0x35, r24	; 53
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	08 95       	ret
    12ca:	85 b7       	in	r24, 0x35	; 53
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	85 bf       	out	0x35, r24	; 53
    12d0:	85 b7       	in	r24, 0x35	; 53
    12d2:	8d 7f       	andi	r24, 0xFD	; 253
    12d4:	85 bf       	out	0x35, r24	; 53
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	08 95       	ret
    12da:	85 b7       	in	r24, 0x35	; 53
    12dc:	8e 7f       	andi	r24, 0xFE	; 254
    12de:	85 bf       	out	0x35, r24	; 53
    12e0:	85 b7       	in	r24, 0x35	; 53
    12e2:	82 60       	ori	r24, 0x02	; 2
    12e4:	85 bf       	out	0x35, r24	; 53
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret
    12ea:	85 b7       	in	r24, 0x35	; 53
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	85 bf       	out	0x35, r24	; 53
    12f0:	85 b7       	in	r24, 0x35	; 53
    12f2:	82 60       	ori	r24, 0x02	; 2
    12f4:	85 bf       	out	0x35, r24	; 53
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	08 95       	ret
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	81 f5       	brne	.+96     	; 0x135e <vidExtInt_init+0xc4>
    12fe:	61 30       	cpi	r22, 0x01	; 1
    1300:	71 f0       	breq	.+28     	; 0x131e <vidExtInt_init+0x84>
    1302:	28 f0       	brcs	.+10     	; 0x130e <vidExtInt_init+0x74>
    1304:	62 30       	cpi	r22, 0x02	; 2
    1306:	99 f0       	breq	.+38     	; 0x132e <vidExtInt_init+0x94>
    1308:	63 30       	cpi	r22, 0x03	; 3
    130a:	c9 f0       	breq	.+50     	; 0x133e <vidExtInt_init+0xa4>
    130c:	20 c0       	rjmp	.+64     	; 0x134e <vidExtInt_init+0xb4>
    130e:	85 b7       	in	r24, 0x35	; 53
    1310:	8b 7f       	andi	r24, 0xFB	; 251
    1312:	85 bf       	out	0x35, r24	; 53
    1314:	85 b7       	in	r24, 0x35	; 53
    1316:	87 7f       	andi	r24, 0xF7	; 247
    1318:	85 bf       	out	0x35, r24	; 53
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	19 c0       	rjmp	.+50     	; 0x1350 <vidExtInt_init+0xb6>
    131e:	85 b7       	in	r24, 0x35	; 53
    1320:	84 60       	ori	r24, 0x04	; 4
    1322:	85 bf       	out	0x35, r24	; 53
    1324:	85 b7       	in	r24, 0x35	; 53
    1326:	87 7f       	andi	r24, 0xF7	; 247
    1328:	85 bf       	out	0x35, r24	; 53
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	11 c0       	rjmp	.+34     	; 0x1350 <vidExtInt_init+0xb6>
    132e:	85 b7       	in	r24, 0x35	; 53
    1330:	8b 7f       	andi	r24, 0xFB	; 251
    1332:	85 bf       	out	0x35, r24	; 53
    1334:	85 b7       	in	r24, 0x35	; 53
    1336:	88 60       	ori	r24, 0x08	; 8
    1338:	85 bf       	out	0x35, r24	; 53
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <vidExtInt_init+0xb6>
    133e:	85 b7       	in	r24, 0x35	; 53
    1340:	84 60       	ori	r24, 0x04	; 4
    1342:	85 bf       	out	0x35, r24	; 53
    1344:	85 b7       	in	r24, 0x35	; 53
    1346:	88 60       	ori	r24, 0x08	; 8
    1348:	85 bf       	out	0x35, r24	; 53
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <vidExtInt_init+0xb6>
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	9b b7       	in	r25, 0x3b	; 59
    1352:	90 68       	ori	r25, 0x80	; 128
    1354:	9b bf       	out	0x3b, r25	; 59
    1356:	9a b7       	in	r25, 0x3a	; 58
    1358:	90 68       	ori	r25, 0x80	; 128
    135a:	9a bf       	out	0x3a, r25	; 58
    135c:	08 95       	ret
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	a9 f4       	brne	.+42     	; 0x138c <vidExtInt_init+0xf2>
    1362:	62 30       	cpi	r22, 0x02	; 2
    1364:	19 f0       	breq	.+6      	; 0x136c <vidExtInt_init+0xd2>
    1366:	63 30       	cpi	r22, 0x03	; 3
    1368:	31 f0       	breq	.+12     	; 0x1376 <vidExtInt_init+0xdc>
    136a:	12 c0       	rjmp	.+36     	; 0x1390 <vidExtInt_init+0xf6>
    136c:	84 b7       	in	r24, 0x34	; 52
    136e:	8f 7b       	andi	r24, 0xBF	; 191
    1370:	84 bf       	out	0x34, r24	; 52
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	08 95       	ret
    1376:	84 b7       	in	r24, 0x34	; 52
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	84 bf       	out	0x34, r24	; 52
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	08 95       	ret
    1380:	84 e0       	ldi	r24, 0x04	; 4
    1382:	08 95       	ret
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	08 95       	ret
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	08 95       	ret
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	08 95       	ret
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	08 95       	ret

00001394 <MEXTINT_vidCallBackFuncInt0>:
    1394:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <callBackFuncInt0+0x1>
    1398:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <callBackFuncInt0>
    139c:	08 95       	ret

0000139e <MEXTINT_vidCallBackFunc>:
    139e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <callBack+0x1>
    13a2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <callBack>
    13a6:	08 95       	ret

000013a8 <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
    13a8:	8b b7       	in	r24, 0x3b	; 59
    13aa:	8f 7b       	andi	r24, 0xBF	; 191
    13ac:	8b bf       	out	0x3b, r24	; 59
    13ae:	08 95       	ret

000013b0 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
    13b0:	8a b7       	in	r24, 0x3a	; 58
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
    13b6:	8b b7       	in	r24, 0x3b	; 59
    13b8:	80 64       	ori	r24, 0x40	; 64
    13ba:	8b bf       	out	0x3b, r24	; 59
    13bc:	08 95       	ret

000013be <MEXTINT2_vidDisableInterrupt>:
}

void MEXTINT2_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT2);
    13be:	8b b7       	in	r24, 0x3b	; 59
    13c0:	8f 7d       	andi	r24, 0xDF	; 223
    13c2:	8b bf       	out	0x3b, r24	; 59
    13c4:	08 95       	ret

000013c6 <MEXTINT2_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT2_vidEnableInterrupt(void)
{
		SET_BIT(GICR_REG, INT2);
    13c6:	8b b7       	in	r24, 0x3b	; 59
    13c8:	80 62       	ori	r24, 0x20	; 32
    13ca:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR_REG, INTF2);
    13cc:	8a b7       	in	r24, 0x3a	; 58
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	8a bf       	out	0x3a, r24	; 58
    13d2:	08 95       	ret

000013d4 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	2f 93       	push	r18
    13e0:	3f 93       	push	r19
    13e2:	4f 93       	push	r20
    13e4:	5f 93       	push	r21
    13e6:	6f 93       	push	r22
    13e8:	7f 93       	push	r23
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
	callBackFuncInt0();
    13f6:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <callBackFuncInt0>
    13fa:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <callBackFuncInt0+0x1>
    13fe:	09 95       	icall
}
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_2>:

ISR(INT1_vect)
{
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
	callBackFunc();
    1444:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <callBackFunc>
    1448:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <callBackFunc+0x1>
    144c:	09 95       	icall
}
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_3>:

ISR(INT2_vect)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	callBack();
    1492:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <callBack>
    1496:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <callBack+0x1>
    149a:	09 95       	icall
}
    149c:	ff 91       	pop	r31
    149e:	ef 91       	pop	r30
    14a0:	bf 91       	pop	r27
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	7f 91       	pop	r23
    14aa:	6f 91       	pop	r22
    14ac:	5f 91       	pop	r21
    14ae:	4f 91       	pop	r20
    14b0:	3f 91       	pop	r19
    14b2:	2f 91       	pop	r18
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <__vector_11>:
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <sg_Timer0_callBackPtr>
    14e4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <sg_Timer0_callBackPtr+0x1>
    14e8:	89 2b       	or	r24, r25
    14ea:	41 f0       	breq	.+16     	; 0x14fc <__vector_11+0x3e>
    14ec:	88 b7       	in	r24, 0x38	; 56
    14ee:	8e 7f       	andi	r24, 0xFE	; 254
    14f0:	88 bf       	out	0x38, r24	; 56
    14f2:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <sg_Timer0_callBackPtr>
    14f6:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <sg_Timer0_callBackPtr+0x1>
    14fa:	09 95       	icall
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	bf 91       	pop	r27
    1502:	af 91       	pop	r26
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	7f 91       	pop	r23
    150a:	6f 91       	pop	r22
    150c:	5f 91       	pop	r21
    150e:	4f 91       	pop	r20
    1510:	3f 91       	pop	r19
    1512:	2f 91       	pop	r18
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_9>:
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	3f 93       	push	r19
    152c:	4f 93       	push	r20
    152e:	5f 93       	push	r21
    1530:	6f 93       	push	r22
    1532:	7f 93       	push	r23
    1534:	8f 93       	push	r24
    1536:	9f 93       	push	r25
    1538:	af 93       	push	r26
    153a:	bf 93       	push	r27
    153c:	ef 93       	push	r30
    153e:	ff 93       	push	r31
    1540:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_Timer1_callBackPtr>
    1544:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_Timer1_callBackPtr+0x1>
    1548:	89 2b       	or	r24, r25
    154a:	41 f0       	breq	.+16     	; 0x155c <__vector_9+0x3e>
    154c:	88 b7       	in	r24, 0x38	; 56
    154e:	8b 7f       	andi	r24, 0xFB	; 251
    1550:	88 bf       	out	0x38, r24	; 56
    1552:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <sg_Timer1_callBackPtr>
    1556:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <sg_Timer1_callBackPtr+0x1>
    155a:	09 95       	icall
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <TIMER_init>:
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	09 f4       	brne	.+2      	; 0x1584 <TIMER_init+0x6>
    1582:	78 c0       	rjmp	.+240    	; 0x1674 <TIMER_init+0xf6>
    1584:	fc 01       	movw	r30, r24
    1586:	20 81       	ld	r18, Z
    1588:	23 30       	cpi	r18, 0x03	; 3
    158a:	08 f0       	brcs	.+2      	; 0x158e <TIMER_init+0x10>
    158c:	75 c0       	rjmp	.+234    	; 0x1678 <TIMER_init+0xfa>
    158e:	31 81       	ldd	r19, Z+1	; 0x01
    1590:	3a 30       	cpi	r19, 0x0A	; 10
    1592:	08 f0       	brcs	.+2      	; 0x1596 <TIMER_init+0x18>
    1594:	73 c0       	rjmp	.+230    	; 0x167c <TIMER_init+0xfe>
    1596:	21 30       	cpi	r18, 0x01	; 1
    1598:	19 f1       	breq	.+70     	; 0x15e0 <TIMER_init+0x62>
    159a:	20 f0       	brcs	.+8      	; 0x15a4 <TIMER_init+0x26>
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	09 f4       	brne	.+2      	; 0x15a2 <TIMER_init+0x24>
    15a0:	50 c0       	rjmp	.+160    	; 0x1642 <TIMER_init+0xc4>
    15a2:	6e c0       	rjmp	.+220    	; 0x1680 <TIMER_init+0x102>
    15a4:	12 be       	out	0x32, r1	; 50
    15a6:	13 be       	out	0x33, r1	; 51
    15a8:	1c be       	out	0x3c, r1	; 60
    15aa:	fc 01       	movw	r30, r24
    15ac:	22 81       	ldd	r18, Z+2	; 0x02
    15ae:	22 bf       	out	0x32, r18	; 50
    15b0:	23 b7       	in	r18, 0x33	; 51
    15b2:	20 68       	ori	r18, 0x80	; 128
    15b4:	23 bf       	out	0x33, r18	; 51
    15b6:	23 b7       	in	r18, 0x33	; 51
    15b8:	2f 7b       	andi	r18, 0xBF	; 191
    15ba:	23 bf       	out	0x33, r18	; 51
    15bc:	23 b7       	in	r18, 0x33	; 51
    15be:	27 7f       	andi	r18, 0xF7	; 247
    15c0:	23 bf       	out	0x33, r18	; 51
    15c2:	23 b7       	in	r18, 0x33	; 51
    15c4:	2f 7e       	andi	r18, 0xEF	; 239
    15c6:	23 bf       	out	0x33, r18	; 51
    15c8:	23 b7       	in	r18, 0x33	; 51
    15ca:	2f 7d       	andi	r18, 0xDF	; 223
    15cc:	23 bf       	out	0x33, r18	; 51
    15ce:	84 81       	ldd	r24, Z+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <TIMER_init+0x58>
    15d4:	57 c0       	rjmp	.+174    	; 0x1684 <TIMER_init+0x106>
    15d6:	89 b7       	in	r24, 0x39	; 57
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	89 bf       	out	0x39, r24	; 57
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	08 95       	ret
    15e0:	1c bc       	out	0x2c, r1	; 44
    15e2:	1d bc       	out	0x2d, r1	; 45
    15e4:	1f bc       	out	0x2f, r1	; 47
    15e6:	1e bc       	out	0x2e, r1	; 46
    15e8:	1b bc       	out	0x2b, r1	; 43
    15ea:	1a bc       	out	0x2a, r1	; 42
    15ec:	fc 01       	movw	r30, r24
    15ee:	22 81       	ldd	r18, Z+2	; 0x02
    15f0:	33 81       	ldd	r19, Z+3	; 0x03
    15f2:	3d bd       	out	0x2d, r19	; 45
    15f4:	2c bd       	out	0x2c, r18	; 44
    15f6:	2f b5       	in	r18, 0x2f	; 47
    15f8:	28 60       	ori	r18, 0x08	; 8
    15fa:	2f bd       	out	0x2f, r18	; 47
    15fc:	2f b5       	in	r18, 0x2f	; 47
    15fe:	24 60       	ori	r18, 0x04	; 4
    1600:	2f bd       	out	0x2f, r18	; 47
    1602:	2f b5       	in	r18, 0x2f	; 47
    1604:	2e 7f       	andi	r18, 0xFE	; 254
    1606:	2f bd       	out	0x2f, r18	; 47
    1608:	2f b5       	in	r18, 0x2f	; 47
    160a:	2d 7f       	andi	r18, 0xFD	; 253
    160c:	2f bd       	out	0x2f, r18	; 47
    160e:	2e b5       	in	r18, 0x2e	; 46
    1610:	2f 7e       	andi	r18, 0xEF	; 239
    1612:	2e bd       	out	0x2e, r18	; 46
    1614:	2e b5       	in	r18, 0x2e	; 46
    1616:	27 7f       	andi	r18, 0xF7	; 247
    1618:	2e bd       	out	0x2e, r18	; 46
    161a:	2f b5       	in	r18, 0x2f	; 47
    161c:	2f 7b       	andi	r18, 0xBF	; 191
    161e:	2f bd       	out	0x2f, r18	; 47
    1620:	2f b5       	in	r18, 0x2f	; 47
    1622:	2f 77       	andi	r18, 0x7F	; 127
    1624:	2f bd       	out	0x2f, r18	; 47
    1626:	2f b5       	in	r18, 0x2f	; 47
    1628:	2f 7e       	andi	r18, 0xEF	; 239
    162a:	2f bd       	out	0x2f, r18	; 47
    162c:	2f b5       	in	r18, 0x2f	; 47
    162e:	2f 7d       	andi	r18, 0xDF	; 223
    1630:	2f bd       	out	0x2f, r18	; 47
    1632:	84 81       	ldd	r24, Z+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	41 f5       	brne	.+80     	; 0x1688 <TIMER_init+0x10a>
    1638:	89 b7       	in	r24, 0x39	; 57
    163a:	84 60       	ori	r24, 0x04	; 4
    163c:	89 bf       	out	0x39, r24	; 57
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret
    1642:	14 bc       	out	0x24, r1	; 36
    1644:	15 bc       	out	0x25, r1	; 37
    1646:	13 bc       	out	0x23, r1	; 35
    1648:	14 bc       	out	0x24, r1	; 36
    164a:	25 b5       	in	r18, 0x25	; 37
    164c:	2f 7b       	andi	r18, 0xBF	; 191
    164e:	25 bd       	out	0x25, r18	; 37
    1650:	25 b5       	in	r18, 0x25	; 37
    1652:	27 7f       	andi	r18, 0xF7	; 247
    1654:	25 bd       	out	0x25, r18	; 37
    1656:	25 b5       	in	r18, 0x25	; 37
    1658:	2f 7e       	andi	r18, 0xEF	; 239
    165a:	25 bd       	out	0x25, r18	; 37
    165c:	25 b5       	in	r18, 0x25	; 37
    165e:	2f 7d       	andi	r18, 0xDF	; 223
    1660:	25 bd       	out	0x25, r18	; 37
    1662:	fc 01       	movw	r30, r24
    1664:	84 81       	ldd	r24, Z+4	; 0x04
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	89 f4       	brne	.+34     	; 0x168c <TIMER_init+0x10e>
    166a:	89 b7       	in	r24, 0x39	; 57
    166c:	80 64       	ori	r24, 0x40	; 64
    166e:	89 bf       	out	0x39, r24	; 57
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	08 95       	ret
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	08 95       	ret
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	08 95       	ret
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	08 95       	ret
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	08 95       	ret
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	08 95       	ret
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	08 95       	ret
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	08 95       	ret

00001690 <TIMER_start>:
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	09 f4       	brne	.+2      	; 0x1696 <TIMER_start+0x6>
    1694:	3b c1       	rjmp	.+630    	; 0x190c <TIMER_start+0x27c>
    1696:	dc 01       	movw	r26, r24
    1698:	2c 91       	ld	r18, X
    169a:	23 30       	cpi	r18, 0x03	; 3
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <TIMER_start+0x10>
    169e:	38 c1       	rjmp	.+624    	; 0x1910 <TIMER_start+0x280>
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	ec 91       	ld	r30, X
    16a4:	ea 30       	cpi	r30, 0x0A	; 10
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <TIMER_start+0x1a>
    16a8:	35 c1       	rjmp	.+618    	; 0x1914 <TIMER_start+0x284>
    16aa:	21 30       	cpi	r18, 0x01	; 1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <TIMER_start+0x20>
    16ae:	68 c0       	rjmp	.+208    	; 0x1780 <TIMER_start+0xf0>
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <TIMER_start+0x2a>
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <TIMER_start+0x28>
    16b6:	c7 c0       	rjmp	.+398    	; 0x1846 <TIMER_start+0x1b6>
    16b8:	2f c1       	rjmp	.+606    	; 0x1918 <TIMER_start+0x288>
    16ba:	8e 2f       	mov	r24, r30
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	8a 30       	cpi	r24, 0x0A	; 10
    16c0:	91 05       	cpc	r25, r1
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <TIMER_start+0x36>
    16c4:	2b c1       	rjmp	.+598    	; 0x191c <TIMER_start+0x28c>
    16c6:	fc 01       	movw	r30, r24
    16c8:	e6 5d       	subi	r30, 0xD6	; 214
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__tablejump2__>
    16d0:	83 b7       	in	r24, 0x33	; 51
    16d2:	8e 7f       	andi	r24, 0xFE	; 254
    16d4:	83 bf       	out	0x33, r24	; 51
    16d6:	83 b7       	in	r24, 0x33	; 51
    16d8:	8d 7f       	andi	r24, 0xFD	; 253
    16da:	83 bf       	out	0x33, r24	; 51
    16dc:	83 b7       	in	r24, 0x33	; 51
    16de:	8b 7f       	andi	r24, 0xFB	; 251
    16e0:	83 bf       	out	0x33, r24	; 51
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	08 95       	ret
    16e6:	83 b7       	in	r24, 0x33	; 51
    16e8:	81 60       	ori	r24, 0x01	; 1
    16ea:	83 bf       	out	0x33, r24	; 51
    16ec:	83 b7       	in	r24, 0x33	; 51
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	83 bf       	out	0x33, r24	; 51
    16f2:	83 b7       	in	r24, 0x33	; 51
    16f4:	8b 7f       	andi	r24, 0xFB	; 251
    16f6:	83 bf       	out	0x33, r24	; 51
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	08 95       	ret
    16fc:	83 b7       	in	r24, 0x33	; 51
    16fe:	8e 7f       	andi	r24, 0xFE	; 254
    1700:	83 bf       	out	0x33, r24	; 51
    1702:	83 b7       	in	r24, 0x33	; 51
    1704:	82 60       	ori	r24, 0x02	; 2
    1706:	83 bf       	out	0x33, r24	; 51
    1708:	83 b7       	in	r24, 0x33	; 51
    170a:	8b 7f       	andi	r24, 0xFB	; 251
    170c:	83 bf       	out	0x33, r24	; 51
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	08 95       	ret
    1712:	83 b7       	in	r24, 0x33	; 51
    1714:	81 60       	ori	r24, 0x01	; 1
    1716:	83 bf       	out	0x33, r24	; 51
    1718:	83 b7       	in	r24, 0x33	; 51
    171a:	82 60       	ori	r24, 0x02	; 2
    171c:	83 bf       	out	0x33, r24	; 51
    171e:	83 b7       	in	r24, 0x33	; 51
    1720:	8b 7f       	andi	r24, 0xFB	; 251
    1722:	83 bf       	out	0x33, r24	; 51
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	08 95       	ret
    1728:	83 b7       	in	r24, 0x33	; 51
    172a:	8e 7f       	andi	r24, 0xFE	; 254
    172c:	83 bf       	out	0x33, r24	; 51
    172e:	83 b7       	in	r24, 0x33	; 51
    1730:	8d 7f       	andi	r24, 0xFD	; 253
    1732:	83 bf       	out	0x33, r24	; 51
    1734:	83 b7       	in	r24, 0x33	; 51
    1736:	84 60       	ori	r24, 0x04	; 4
    1738:	83 bf       	out	0x33, r24	; 51
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	08 95       	ret
    173e:	83 b7       	in	r24, 0x33	; 51
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	83 bf       	out	0x33, r24	; 51
    1744:	83 b7       	in	r24, 0x33	; 51
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	83 bf       	out	0x33, r24	; 51
    174a:	83 b7       	in	r24, 0x33	; 51
    174c:	84 60       	ori	r24, 0x04	; 4
    174e:	83 bf       	out	0x33, r24	; 51
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
    1754:	83 b7       	in	r24, 0x33	; 51
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	83 bf       	out	0x33, r24	; 51
    175a:	83 b7       	in	r24, 0x33	; 51
    175c:	82 60       	ori	r24, 0x02	; 2
    175e:	83 bf       	out	0x33, r24	; 51
    1760:	83 b7       	in	r24, 0x33	; 51
    1762:	84 60       	ori	r24, 0x04	; 4
    1764:	83 bf       	out	0x33, r24	; 51
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	08 95       	ret
    176a:	83 b7       	in	r24, 0x33	; 51
    176c:	81 60       	ori	r24, 0x01	; 1
    176e:	83 bf       	out	0x33, r24	; 51
    1770:	83 b7       	in	r24, 0x33	; 51
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	83 bf       	out	0x33, r24	; 51
    1776:	83 b7       	in	r24, 0x33	; 51
    1778:	84 60       	ori	r24, 0x04	; 4
    177a:	83 bf       	out	0x33, r24	; 51
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	08 95       	ret
    1780:	8e 2f       	mov	r24, r30
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	8a 30       	cpi	r24, 0x0A	; 10
    1786:	91 05       	cpc	r25, r1
    1788:	08 f0       	brcs	.+2      	; 0x178c <TIMER_start+0xfc>
    178a:	ca c0       	rjmp	.+404    	; 0x1920 <TIMER_start+0x290>
    178c:	fc 01       	movw	r30, r24
    178e:	ec 5c       	subi	r30, 0xCC	; 204
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__tablejump2__>
    1796:	8e b5       	in	r24, 0x2e	; 46
    1798:	8e 7f       	andi	r24, 0xFE	; 254
    179a:	8e bd       	out	0x2e, r24	; 46
    179c:	8e b5       	in	r24, 0x2e	; 46
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	8e bd       	out	0x2e, r24	; 46
    17a2:	8e b5       	in	r24, 0x2e	; 46
    17a4:	8b 7f       	andi	r24, 0xFB	; 251
    17a6:	8e bd       	out	0x2e, r24	; 46
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret
    17ac:	8e b5       	in	r24, 0x2e	; 46
    17ae:	81 60       	ori	r24, 0x01	; 1
    17b0:	8e bd       	out	0x2e, r24	; 46
    17b2:	8e b5       	in	r24, 0x2e	; 46
    17b4:	8d 7f       	andi	r24, 0xFD	; 253
    17b6:	8e bd       	out	0x2e, r24	; 46
    17b8:	8e b5       	in	r24, 0x2e	; 46
    17ba:	8b 7f       	andi	r24, 0xFB	; 251
    17bc:	8e bd       	out	0x2e, r24	; 46
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
    17c2:	8e b5       	in	r24, 0x2e	; 46
    17c4:	8e 7f       	andi	r24, 0xFE	; 254
    17c6:	8e bd       	out	0x2e, r24	; 46
    17c8:	8e b5       	in	r24, 0x2e	; 46
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	8e bd       	out	0x2e, r24	; 46
    17ce:	8e b5       	in	r24, 0x2e	; 46
    17d0:	8b 7f       	andi	r24, 0xFB	; 251
    17d2:	8e bd       	out	0x2e, r24	; 46
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	08 95       	ret
    17d8:	8e b5       	in	r24, 0x2e	; 46
    17da:	81 60       	ori	r24, 0x01	; 1
    17dc:	8e bd       	out	0x2e, r24	; 46
    17de:	8e b5       	in	r24, 0x2e	; 46
    17e0:	82 60       	ori	r24, 0x02	; 2
    17e2:	8e bd       	out	0x2e, r24	; 46
    17e4:	8e b5       	in	r24, 0x2e	; 46
    17e6:	8b 7f       	andi	r24, 0xFB	; 251
    17e8:	8e bd       	out	0x2e, r24	; 46
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	08 95       	ret
    17ee:	8e b5       	in	r24, 0x2e	; 46
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	8e bd       	out	0x2e, r24	; 46
    17f4:	8e b5       	in	r24, 0x2e	; 46
    17f6:	8d 7f       	andi	r24, 0xFD	; 253
    17f8:	8e bd       	out	0x2e, r24	; 46
    17fa:	8e b5       	in	r24, 0x2e	; 46
    17fc:	84 60       	ori	r24, 0x04	; 4
    17fe:	8e bd       	out	0x2e, r24	; 46
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	08 95       	ret
    1804:	8e b5       	in	r24, 0x2e	; 46
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	8e bd       	out	0x2e, r24	; 46
    180a:	8e b5       	in	r24, 0x2e	; 46
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	8e bd       	out	0x2e, r24	; 46
    1810:	8e b5       	in	r24, 0x2e	; 46
    1812:	84 60       	ori	r24, 0x04	; 4
    1814:	8e bd       	out	0x2e, r24	; 46
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	08 95       	ret
    181a:	8e b5       	in	r24, 0x2e	; 46
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	8e bd       	out	0x2e, r24	; 46
    1820:	8e b5       	in	r24, 0x2e	; 46
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	8e bd       	out	0x2e, r24	; 46
    1826:	8e b5       	in	r24, 0x2e	; 46
    1828:	84 60       	ori	r24, 0x04	; 4
    182a:	8e bd       	out	0x2e, r24	; 46
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	08 95       	ret
    1830:	8e b5       	in	r24, 0x2e	; 46
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	8e bd       	out	0x2e, r24	; 46
    1836:	8e b5       	in	r24, 0x2e	; 46
    1838:	82 60       	ori	r24, 0x02	; 2
    183a:	8e bd       	out	0x2e, r24	; 46
    183c:	8e b5       	in	r24, 0x2e	; 46
    183e:	84 60       	ori	r24, 0x04	; 4
    1840:	8e bd       	out	0x2e, r24	; 46
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	08 95       	ret
    1846:	8e 2f       	mov	r24, r30
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	88 30       	cpi	r24, 0x08	; 8
    184c:	91 05       	cpc	r25, r1
    184e:	08 f0       	brcs	.+2      	; 0x1852 <TIMER_start+0x1c2>
    1850:	69 c0       	rjmp	.+210    	; 0x1924 <TIMER_start+0x294>
    1852:	fc 01       	movw	r30, r24
    1854:	e2 5c       	subi	r30, 0xC2	; 194
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__tablejump2__>
    185c:	85 b5       	in	r24, 0x25	; 37
    185e:	8b 7f       	andi	r24, 0xFB	; 251
    1860:	85 bd       	out	0x25, r24	; 37
    1862:	85 b5       	in	r24, 0x25	; 37
    1864:	8d 7f       	andi	r24, 0xFD	; 253
    1866:	85 bd       	out	0x25, r24	; 37
    1868:	85 b5       	in	r24, 0x25	; 37
    186a:	8e 7f       	andi	r24, 0xFE	; 254
    186c:	85 bd       	out	0x25, r24	; 37
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret
    1872:	85 b5       	in	r24, 0x25	; 37
    1874:	84 60       	ori	r24, 0x04	; 4
    1876:	85 bd       	out	0x25, r24	; 37
    1878:	85 b5       	in	r24, 0x25	; 37
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	85 bd       	out	0x25, r24	; 37
    187e:	85 b5       	in	r24, 0x25	; 37
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	85 bd       	out	0x25, r24	; 37
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	08 95       	ret
    1888:	85 b5       	in	r24, 0x25	; 37
    188a:	8b 7f       	andi	r24, 0xFB	; 251
    188c:	85 bd       	out	0x25, r24	; 37
    188e:	85 b5       	in	r24, 0x25	; 37
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	85 bd       	out	0x25, r24	; 37
    1894:	85 b5       	in	r24, 0x25	; 37
    1896:	8e 7f       	andi	r24, 0xFE	; 254
    1898:	85 bd       	out	0x25, r24	; 37
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	08 95       	ret
    189e:	85 b5       	in	r24, 0x25	; 37
    18a0:	84 60       	ori	r24, 0x04	; 4
    18a2:	85 bd       	out	0x25, r24	; 37
    18a4:	85 b5       	in	r24, 0x25	; 37
    18a6:	82 60       	ori	r24, 0x02	; 2
    18a8:	85 bd       	out	0x25, r24	; 37
    18aa:	85 b5       	in	r24, 0x25	; 37
    18ac:	8e 7f       	andi	r24, 0xFE	; 254
    18ae:	85 bd       	out	0x25, r24	; 37
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	08 95       	ret
    18b4:	85 b5       	in	r24, 0x25	; 37
    18b6:	8b 7f       	andi	r24, 0xFB	; 251
    18b8:	85 bd       	out	0x25, r24	; 37
    18ba:	85 b5       	in	r24, 0x25	; 37
    18bc:	8d 7f       	andi	r24, 0xFD	; 253
    18be:	85 bd       	out	0x25, r24	; 37
    18c0:	85 b5       	in	r24, 0x25	; 37
    18c2:	81 60       	ori	r24, 0x01	; 1
    18c4:	85 bd       	out	0x25, r24	; 37
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret
    18ca:	85 b5       	in	r24, 0x25	; 37
    18cc:	84 60       	ori	r24, 0x04	; 4
    18ce:	85 bd       	out	0x25, r24	; 37
    18d0:	85 b5       	in	r24, 0x25	; 37
    18d2:	8d 7f       	andi	r24, 0xFD	; 253
    18d4:	85 bd       	out	0x25, r24	; 37
    18d6:	85 b5       	in	r24, 0x25	; 37
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	85 bd       	out	0x25, r24	; 37
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	08 95       	ret
    18e0:	85 b5       	in	r24, 0x25	; 37
    18e2:	8b 7f       	andi	r24, 0xFB	; 251
    18e4:	85 bd       	out	0x25, r24	; 37
    18e6:	85 b5       	in	r24, 0x25	; 37
    18e8:	82 60       	ori	r24, 0x02	; 2
    18ea:	85 bd       	out	0x25, r24	; 37
    18ec:	85 b5       	in	r24, 0x25	; 37
    18ee:	81 60       	ori	r24, 0x01	; 1
    18f0:	85 bd       	out	0x25, r24	; 37
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	08 95       	ret
    18f6:	85 b5       	in	r24, 0x25	; 37
    18f8:	84 60       	ori	r24, 0x04	; 4
    18fa:	85 bd       	out	0x25, r24	; 37
    18fc:	85 b5       	in	r24, 0x25	; 37
    18fe:	82 60       	ori	r24, 0x02	; 2
    1900:	85 bd       	out	0x25, r24	; 37
    1902:	85 b5       	in	r24, 0x25	; 37
    1904:	81 60       	ori	r24, 0x01	; 1
    1906:	85 bd       	out	0x25, r24	; 37
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	08 95       	ret
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	08 95       	ret
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	08 95       	ret
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	08 95       	ret
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	08 95       	ret
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	08 95       	ret
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	08 95       	ret
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	08 95       	ret

00001928 <TIMER_stop>:
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	38 f5       	brcc	.+78     	; 0x197a <TIMER_stop+0x52>
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	79 f0       	breq	.+30     	; 0x194e <TIMER_stop+0x26>
    1930:	18 f0       	brcs	.+6      	; 0x1938 <TIMER_stop+0x10>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	b9 f0       	breq	.+46     	; 0x1964 <TIMER_stop+0x3c>
    1936:	23 c0       	rjmp	.+70     	; 0x197e <TIMER_stop+0x56>
    1938:	83 b7       	in	r24, 0x33	; 51
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	83 bf       	out	0x33, r24	; 51
    193e:	83 b7       	in	r24, 0x33	; 51
    1940:	8d 7f       	andi	r24, 0xFD	; 253
    1942:	83 bf       	out	0x33, r24	; 51
    1944:	83 b7       	in	r24, 0x33	; 51
    1946:	8b 7f       	andi	r24, 0xFB	; 251
    1948:	83 bf       	out	0x33, r24	; 51
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
    194e:	8e b5       	in	r24, 0x2e	; 46
    1950:	8e 7f       	andi	r24, 0xFE	; 254
    1952:	8e bd       	out	0x2e, r24	; 46
    1954:	8e b5       	in	r24, 0x2e	; 46
    1956:	8d 7f       	andi	r24, 0xFD	; 253
    1958:	8e bd       	out	0x2e, r24	; 46
    195a:	8e b5       	in	r24, 0x2e	; 46
    195c:	8b 7f       	andi	r24, 0xFB	; 251
    195e:	8e bd       	out	0x2e, r24	; 46
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret
    1964:	85 b5       	in	r24, 0x25	; 37
    1966:	8b 7f       	andi	r24, 0xFB	; 251
    1968:	85 bd       	out	0x25, r24	; 37
    196a:	85 b5       	in	r24, 0x25	; 37
    196c:	8d 7f       	andi	r24, 0xFD	; 253
    196e:	85 bd       	out	0x25, r24	; 37
    1970:	85 b5       	in	r24, 0x25	; 37
    1972:	8e 7f       	andi	r24, 0xFE	; 254
    1974:	85 bd       	out	0x25, r24	; 37
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	08 95       	ret
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	08 95       	ret
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	08 95       	ret

00001982 <TIMER_reset>:
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	f1 f0       	breq	.+60     	; 0x19c2 <TIMER_reset+0x40>
    1986:	fc 01       	movw	r30, r24
    1988:	20 81       	ld	r18, Z
    198a:	23 30       	cpi	r18, 0x03	; 3
    198c:	e0 f4       	brcc	.+56     	; 0x19c6 <TIMER_reset+0x44>
    198e:	31 81       	ldd	r19, Z+1	; 0x01
    1990:	3a 30       	cpi	r19, 0x0A	; 10
    1992:	d8 f4       	brcc	.+54     	; 0x19ca <TIMER_reset+0x48>
    1994:	21 30       	cpi	r18, 0x01	; 1
    1996:	49 f0       	breq	.+18     	; 0x19aa <TIMER_reset+0x28>
    1998:	18 f0       	brcs	.+6      	; 0x19a0 <TIMER_reset+0x1e>
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	69 f0       	breq	.+26     	; 0x19b8 <TIMER_reset+0x36>
    199e:	17 c0       	rjmp	.+46     	; 0x19ce <TIMER_reset+0x4c>
    19a0:	fc 01       	movw	r30, r24
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	82 bf       	out	0x32, r24	; 50
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	08 95       	ret
    19aa:	fc 01       	movw	r30, r24
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	9d bd       	out	0x2d, r25	; 45
    19b2:	8c bd       	out	0x2c, r24	; 44
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	08 95       	ret
    19b8:	fc 01       	movw	r30, r24
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	84 bd       	out	0x24, r24	; 36
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	08 95       	ret
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	08 95       	ret
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	08 95       	ret
    19ca:	83 e0       	ldi	r24, 0x03	; 3
    19cc:	08 95       	ret
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	08 95       	ret

000019d2 <TIMER_setCallBack>:
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	a9 f0       	breq	.+42     	; 0x1a00 <TIMER_setCallBack+0x2e>
    19d6:	63 30       	cpi	r22, 0x03	; 3
    19d8:	a8 f4       	brcc	.+42     	; 0x1a04 <TIMER_setCallBack+0x32>
    19da:	61 30       	cpi	r22, 0x01	; 1
    19dc:	59 f0       	breq	.+22     	; 0x19f4 <TIMER_setCallBack+0x22>
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <TIMER_setCallBack+0x16>
    19e0:	62 30       	cpi	r22, 0x02	; 2
    19e2:	91 f0       	breq	.+36     	; 0x1a08 <TIMER_setCallBack+0x36>
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	08 95       	ret
    19e8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <sg_Timer0_callBackPtr+0x1>
    19ec:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <sg_Timer0_callBackPtr>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	08 95       	ret
    19f4:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <sg_Timer1_callBackPtr+0x1>
    19f8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sg_Timer1_callBackPtr>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	08 95       	ret
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	08 95       	ret
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	08 95       	ret
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	08 95       	ret

00001a0c <enuTimer2_init>:
    1a0c:	84 30       	cpi	r24, 0x04	; 4
    1a0e:	48 f5       	brcc	.+82     	; 0x1a62 <enuTimer2_init+0x56>
    1a10:	14 bc       	out	0x24, r1	; 36
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	71 f0       	breq	.+28     	; 0x1a32 <enuTimer2_init+0x26>
    1a16:	28 f0       	brcs	.+10     	; 0x1a22 <enuTimer2_init+0x16>
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	99 f0       	breq	.+38     	; 0x1a42 <enuTimer2_init+0x36>
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	c9 f0       	breq	.+50     	; 0x1a52 <enuTimer2_init+0x46>
    1a20:	22 c0       	rjmp	.+68     	; 0x1a66 <enuTimer2_init+0x5a>
    1a22:	85 b5       	in	r24, 0x25	; 37
    1a24:	87 7f       	andi	r24, 0xF7	; 247
    1a26:	85 bd       	out	0x25, r24	; 37
    1a28:	85 b5       	in	r24, 0x25	; 37
    1a2a:	8f 7b       	andi	r24, 0xBF	; 191
    1a2c:	85 bd       	out	0x25, r24	; 37
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	08 95       	ret
    1a32:	85 b5       	in	r24, 0x25	; 37
    1a34:	87 7f       	andi	r24, 0xF7	; 247
    1a36:	85 bd       	out	0x25, r24	; 37
    1a38:	85 b5       	in	r24, 0x25	; 37
    1a3a:	80 64       	ori	r24, 0x40	; 64
    1a3c:	85 bd       	out	0x25, r24	; 37
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	08 95       	ret
    1a42:	85 b5       	in	r24, 0x25	; 37
    1a44:	88 60       	ori	r24, 0x08	; 8
    1a46:	85 bd       	out	0x25, r24	; 37
    1a48:	85 b5       	in	r24, 0x25	; 37
    1a4a:	8f 7b       	andi	r24, 0xBF	; 191
    1a4c:	85 bd       	out	0x25, r24	; 37
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	08 95       	ret
    1a52:	85 b5       	in	r24, 0x25	; 37
    1a54:	88 60       	ori	r24, 0x08	; 8
    1a56:	85 bd       	out	0x25, r24	; 37
    1a58:	85 b5       	in	r24, 0x25	; 37
    1a5a:	80 64       	ori	r24, 0x40	; 64
    1a5c:	85 bd       	out	0x25, r24	; 37
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	08 95       	ret
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	08 95       	ret
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	08 95       	ret

00001a6a <u8Timer2_setPrescallar>:
    1a6a:	88 30       	cpi	r24, 0x08	; 8
    1a6c:	70 f4       	brcc	.+28     	; 0x1a8a <u8Timer2_setPrescallar+0x20>
    1a6e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <global_prescaller>
    1a72:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <global_timerStatus>
    1a76:	91 30       	cpi	r25, 0x01	; 1
    1a78:	51 f4       	brne	.+20     	; 0x1a8e <u8Timer2_setPrescallar+0x24>
    1a7a:	95 b5       	in	r25, 0x25	; 37
    1a7c:	98 7f       	andi	r25, 0xF8	; 248
    1a7e:	89 2b       	or	r24, r25
    1a80:	95 b5       	in	r25, 0x25	; 37
    1a82:	89 2b       	or	r24, r25
    1a84:	85 bd       	out	0x25, r24	; 37
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	08 95       	ret
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	08 95       	ret
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	08 95       	ret

00001a92 <vidTimer2_OvfIrqEnable>:
    1a92:	88 b7       	in	r24, 0x38	; 56
    1a94:	80 64       	ori	r24, 0x40	; 64
    1a96:	88 bf       	out	0x38, r24	; 56
    1a98:	89 b7       	in	r24, 0x39	; 57
    1a9a:	80 64       	ori	r24, 0x40	; 64
    1a9c:	89 bf       	out	0x39, r24	; 57
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	08 95       	ret

00001aa2 <vidTimer2_OvfIrqDisable>:
    1aa2:	89 b7       	in	r24, 0x39	; 57
    1aa4:	8f 7b       	andi	r24, 0xBF	; 191
    1aa6:	89 bf       	out	0x39, r24	; 57
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	08 95       	ret

00001aac <vidTimer2_start>:
    1aac:	95 b5       	in	r25, 0x25	; 37
    1aae:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <global_prescaller>
    1ab2:	89 2b       	or	r24, r25
    1ab4:	85 bd       	out	0x25, r24	; 37
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <global_timerStatus>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	08 95       	ret

00001ac0 <vidTimer2_stop>:
    1ac0:	85 b5       	in	r24, 0x25	; 37
    1ac2:	88 7f       	andi	r24, 0xF8	; 248
    1ac4:	85 bd       	out	0x25, r24	; 37
    1ac6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <global_timerStatus>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	08 95       	ret

00001ace <vidTimer2_setcbf_OVF>:
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <vidTimer2_setcbf_OVF+0xc>
    1ad2:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <globalCallFunc+0x1>
    1ad6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <globalCallFunc>
    1ada:	08 95       	ret

00001adc <MTIMER_vidResetTCNT>:
    1adc:	14 bc       	out	0x24, r1	; 36
    1ade:	08 95       	ret

00001ae0 <MTIMER_u8GetTCNT>:
    1ae0:	84 b5       	in	r24, 0x24	; 36
    1ae2:	08 95       	ret

00001ae4 <MTIMER_vidEnableGlobalInterrupt>:
    1ae4:	8f b7       	in	r24, 0x3f	; 63
    1ae6:	80 68       	ori	r24, 0x80	; 128
    1ae8:	8f bf       	out	0x3f, r24	; 63
    1aea:	08 95       	ret

00001aec <__vector_5>:
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	0f 92       	push	r0
    1af4:	11 24       	eor	r1, r1
    1af6:	2f 93       	push	r18
    1af8:	3f 93       	push	r19
    1afa:	4f 93       	push	r20
    1afc:	5f 93       	push	r21
    1afe:	6f 93       	push	r22
    1b00:	7f 93       	push	r23
    1b02:	8f 93       	push	r24
    1b04:	9f 93       	push	r25
    1b06:	af 93       	push	r26
    1b08:	bf 93       	push	r27
    1b0a:	ef 93       	push	r30
    1b0c:	ff 93       	push	r31
    1b0e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <counter.1817>
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
    1b14:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <counter.1817>
    1b18:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <global_ovf>
    1b1c:	89 13       	cpse	r24, r25
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <__vector_5+0x46>
    1b20:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <globalCallFunc>
    1b24:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <globalCallFunc+0x1>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <__vector_5+0x46>
    1b2c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <counter.1817>
    1b30:	09 95       	icall
    1b32:	ff 91       	pop	r31
    1b34:	ef 91       	pop	r30
    1b36:	bf 91       	pop	r27
    1b38:	af 91       	pop	r26
    1b3a:	9f 91       	pop	r25
    1b3c:	8f 91       	pop	r24
    1b3e:	7f 91       	pop	r23
    1b40:	6f 91       	pop	r22
    1b42:	5f 91       	pop	r21
    1b44:	4f 91       	pop	r20
    1b46:	3f 91       	pop	r19
    1b48:	2f 91       	pop	r18
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti

00001b54 <__cmpsf2>:
    1b54:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__fp_cmp>
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <__cmpsf2+0x8>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	08 95       	ret

00001b5e <__divsf3>:
    1b5e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__divsf3x>
    1b62:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_round>
    1b66:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_pscB>
    1b6a:	58 f0       	brcs	.+22     	; 0x1b82 <__divsf3+0x24>
    1b6c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_pscA>
    1b70:	40 f0       	brcs	.+16     	; 0x1b82 <__divsf3+0x24>
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <__divsf3+0x20>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	29 f0       	breq	.+10     	; 0x1b82 <__divsf3+0x24>
    1b78:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_inf>
    1b7c:	51 11       	cpse	r21, r1
    1b7e:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__fp_szero>
    1b82:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_nan>

00001b86 <__divsf3x>:
    1b86:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__fp_split3>
    1b8a:	68 f3       	brcs	.-38     	; 0x1b66 <__divsf3+0x8>

00001b8c <__divsf3_pse>:
    1b8c:	99 23       	and	r25, r25
    1b8e:	b1 f3       	breq	.-20     	; 0x1b7c <__divsf3+0x1e>
    1b90:	55 23       	and	r21, r21
    1b92:	91 f3       	breq	.-28     	; 0x1b78 <__divsf3+0x1a>
    1b94:	95 1b       	sub	r25, r21
    1b96:	55 0b       	sbc	r21, r21
    1b98:	bb 27       	eor	r27, r27
    1b9a:	aa 27       	eor	r26, r26
    1b9c:	62 17       	cp	r22, r18
    1b9e:	73 07       	cpc	r23, r19
    1ba0:	84 07       	cpc	r24, r20
    1ba2:	38 f0       	brcs	.+14     	; 0x1bb2 <__divsf3_pse+0x26>
    1ba4:	9f 5f       	subi	r25, 0xFF	; 255
    1ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	44 1f       	adc	r20, r20
    1bae:	aa 1f       	adc	r26, r26
    1bb0:	a9 f3       	breq	.-22     	; 0x1b9c <__divsf3_pse+0x10>
    1bb2:	35 d0       	rcall	.+106    	; 0x1c1e <__divsf3_pse+0x92>
    1bb4:	0e 2e       	mov	r0, r30
    1bb6:	3a f0       	brmi	.+14     	; 0x1bc6 <__divsf3_pse+0x3a>
    1bb8:	e0 e8       	ldi	r30, 0x80	; 128
    1bba:	32 d0       	rcall	.+100    	; 0x1c20 <__divsf3_pse+0x94>
    1bbc:	91 50       	subi	r25, 0x01	; 1
    1bbe:	50 40       	sbci	r21, 0x00	; 0
    1bc0:	e6 95       	lsr	r30
    1bc2:	00 1c       	adc	r0, r0
    1bc4:	ca f7       	brpl	.-14     	; 0x1bb8 <__divsf3_pse+0x2c>
    1bc6:	2b d0       	rcall	.+86     	; 0x1c1e <__divsf3_pse+0x92>
    1bc8:	fe 2f       	mov	r31, r30
    1bca:	29 d0       	rcall	.+82     	; 0x1c1e <__divsf3_pse+0x92>
    1bcc:	66 0f       	add	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	bb 1f       	adc	r27, r27
    1bd4:	26 17       	cp	r18, r22
    1bd6:	37 07       	cpc	r19, r23
    1bd8:	48 07       	cpc	r20, r24
    1bda:	ab 07       	cpc	r26, r27
    1bdc:	b0 e8       	ldi	r27, 0x80	; 128
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <__divsf3_pse+0x56>
    1be0:	bb 0b       	sbc	r27, r27
    1be2:	80 2d       	mov	r24, r0
    1be4:	bf 01       	movw	r22, r30
    1be6:	ff 27       	eor	r31, r31
    1be8:	93 58       	subi	r25, 0x83	; 131
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255
    1bec:	3a f0       	brmi	.+14     	; 0x1bfc <__divsf3_pse+0x70>
    1bee:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	78 f0       	brcs	.+30     	; 0x1c12 <__divsf3_pse+0x86>
    1bf4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_inf>
    1bf8:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__fp_szero>
    1bfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfe:	e4 f3       	brlt	.-8      	; 0x1bf8 <__divsf3_pse+0x6c>
    1c00:	98 3e       	cpi	r25, 0xE8	; 232
    1c02:	d4 f3       	brlt	.-12     	; 0x1bf8 <__divsf3_pse+0x6c>
    1c04:	86 95       	lsr	r24
    1c06:	77 95       	ror	r23
    1c08:	67 95       	ror	r22
    1c0a:	b7 95       	ror	r27
    1c0c:	f7 95       	ror	r31
    1c0e:	9f 5f       	subi	r25, 0xFF	; 255
    1c10:	c9 f7       	brne	.-14     	; 0x1c04 <__divsf3_pse+0x78>
    1c12:	88 0f       	add	r24, r24
    1c14:	91 1d       	adc	r25, r1
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	97 f9       	bld	r25, 7
    1c1c:	08 95       	ret
    1c1e:	e1 e0       	ldi	r30, 0x01	; 1
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	bb 1f       	adc	r27, r27
    1c28:	62 17       	cp	r22, r18
    1c2a:	73 07       	cpc	r23, r19
    1c2c:	84 07       	cpc	r24, r20
    1c2e:	ba 07       	cpc	r27, r26
    1c30:	20 f0       	brcs	.+8      	; 0x1c3a <__divsf3_pse+0xae>
    1c32:	62 1b       	sub	r22, r18
    1c34:	73 0b       	sbc	r23, r19
    1c36:	84 0b       	sbc	r24, r20
    1c38:	ba 0b       	sbc	r27, r26
    1c3a:	ee 1f       	adc	r30, r30
    1c3c:	88 f7       	brcc	.-30     	; 0x1c20 <__divsf3_pse+0x94>
    1c3e:	e0 95       	com	r30
    1c40:	08 95       	ret

00001c42 <__fixunssfsi>:
    1c42:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fp_splitA>
    1c46:	88 f0       	brcs	.+34     	; 0x1c6a <__fixunssfsi+0x28>
    1c48:	9f 57       	subi	r25, 0x7F	; 127
    1c4a:	98 f0       	brcs	.+38     	; 0x1c72 <__fixunssfsi+0x30>
    1c4c:	b9 2f       	mov	r27, r25
    1c4e:	99 27       	eor	r25, r25
    1c50:	b7 51       	subi	r27, 0x17	; 23
    1c52:	b0 f0       	brcs	.+44     	; 0x1c80 <__fixunssfsi+0x3e>
    1c54:	e1 f0       	breq	.+56     	; 0x1c8e <__fixunssfsi+0x4c>
    1c56:	66 0f       	add	r22, r22
    1c58:	77 1f       	adc	r23, r23
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	1a f0       	brmi	.+6      	; 0x1c66 <__fixunssfsi+0x24>
    1c60:	ba 95       	dec	r27
    1c62:	c9 f7       	brne	.-14     	; 0x1c56 <__fixunssfsi+0x14>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <__fixunssfsi+0x4c>
    1c66:	b1 30       	cpi	r27, 0x01	; 1
    1c68:	91 f0       	breq	.+36     	; 0x1c8e <__fixunssfsi+0x4c>
    1c6a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fp_zero>
    1c6e:	b1 e0       	ldi	r27, 0x01	; 1
    1c70:	08 95       	ret
    1c72:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__fp_zero>
    1c76:	67 2f       	mov	r22, r23
    1c78:	78 2f       	mov	r23, r24
    1c7a:	88 27       	eor	r24, r24
    1c7c:	b8 5f       	subi	r27, 0xF8	; 248
    1c7e:	39 f0       	breq	.+14     	; 0x1c8e <__fixunssfsi+0x4c>
    1c80:	b9 3f       	cpi	r27, 0xF9	; 249
    1c82:	cc f3       	brlt	.-14     	; 0x1c76 <__fixunssfsi+0x34>
    1c84:	86 95       	lsr	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	b3 95       	inc	r27
    1c8c:	d9 f7       	brne	.-10     	; 0x1c84 <__fixunssfsi+0x42>
    1c8e:	3e f4       	brtc	.+14     	; 0x1c9e <__fixunssfsi+0x5c>
    1c90:	90 95       	com	r25
    1c92:	80 95       	com	r24
    1c94:	70 95       	com	r23
    1c96:	61 95       	neg	r22
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9e:	08 95       	ret

00001ca0 <__floatunsisf>:
    1ca0:	e8 94       	clt
    1ca2:	09 c0       	rjmp	.+18     	; 0x1cb6 <__floatsisf+0x12>

00001ca4 <__floatsisf>:
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	3e f4       	brtc	.+14     	; 0x1cb6 <__floatsisf+0x12>
    1ca8:	90 95       	com	r25
    1caa:	80 95       	com	r24
    1cac:	70 95       	com	r23
    1cae:	61 95       	neg	r22
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	99 23       	and	r25, r25
    1cb8:	a9 f0       	breq	.+42     	; 0x1ce4 <__floatsisf+0x40>
    1cba:	f9 2f       	mov	r31, r25
    1cbc:	96 e9       	ldi	r25, 0x96	; 150
    1cbe:	bb 27       	eor	r27, r27
    1cc0:	93 95       	inc	r25
    1cc2:	f6 95       	lsr	r31
    1cc4:	87 95       	ror	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b7 95       	ror	r27
    1ccc:	f1 11       	cpse	r31, r1
    1cce:	f8 cf       	rjmp	.-16     	; 0x1cc0 <__floatsisf+0x1c>
    1cd0:	fa f4       	brpl	.+62     	; 0x1d10 <__floatsisf+0x6c>
    1cd2:	bb 0f       	add	r27, r27
    1cd4:	11 f4       	brne	.+4      	; 0x1cda <__floatsisf+0x36>
    1cd6:	60 ff       	sbrs	r22, 0
    1cd8:	1b c0       	rjmp	.+54     	; 0x1d10 <__floatsisf+0x6c>
    1cda:	6f 5f       	subi	r22, 0xFF	; 255
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	16 c0       	rjmp	.+44     	; 0x1d10 <__floatsisf+0x6c>
    1ce4:	88 23       	and	r24, r24
    1ce6:	11 f0       	breq	.+4      	; 0x1cec <__floatsisf+0x48>
    1ce8:	96 e9       	ldi	r25, 0x96	; 150
    1cea:	11 c0       	rjmp	.+34     	; 0x1d0e <__floatsisf+0x6a>
    1cec:	77 23       	and	r23, r23
    1cee:	21 f0       	breq	.+8      	; 0x1cf8 <__floatsisf+0x54>
    1cf0:	9e e8       	ldi	r25, 0x8E	; 142
    1cf2:	87 2f       	mov	r24, r23
    1cf4:	76 2f       	mov	r23, r22
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <__floatsisf+0x5e>
    1cf8:	66 23       	and	r22, r22
    1cfa:	71 f0       	breq	.+28     	; 0x1d18 <__floatsisf+0x74>
    1cfc:	96 e8       	ldi	r25, 0x86	; 134
    1cfe:	86 2f       	mov	r24, r22
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	2a f0       	brmi	.+10     	; 0x1d10 <__floatsisf+0x6c>
    1d06:	9a 95       	dec	r25
    1d08:	66 0f       	add	r22, r22
    1d0a:	77 1f       	adc	r23, r23
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	da f7       	brpl	.-10     	; 0x1d06 <__floatsisf+0x62>
    1d10:	88 0f       	add	r24, r24
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	97 f9       	bld	r25, 7
    1d18:	08 95       	ret

00001d1a <__fp_cmp>:
    1d1a:	99 0f       	add	r25, r25
    1d1c:	00 08       	sbc	r0, r0
    1d1e:	55 0f       	add	r21, r21
    1d20:	aa 0b       	sbc	r26, r26
    1d22:	e0 e8       	ldi	r30, 0x80	; 128
    1d24:	fe ef       	ldi	r31, 0xFE	; 254
    1d26:	16 16       	cp	r1, r22
    1d28:	17 06       	cpc	r1, r23
    1d2a:	e8 07       	cpc	r30, r24
    1d2c:	f9 07       	cpc	r31, r25
    1d2e:	c0 f0       	brcs	.+48     	; 0x1d60 <__fp_cmp+0x46>
    1d30:	12 16       	cp	r1, r18
    1d32:	13 06       	cpc	r1, r19
    1d34:	e4 07       	cpc	r30, r20
    1d36:	f5 07       	cpc	r31, r21
    1d38:	98 f0       	brcs	.+38     	; 0x1d60 <__fp_cmp+0x46>
    1d3a:	62 1b       	sub	r22, r18
    1d3c:	73 0b       	sbc	r23, r19
    1d3e:	84 0b       	sbc	r24, r20
    1d40:	95 0b       	sbc	r25, r21
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <__fp_cmp+0x38>
    1d44:	0a 26       	eor	r0, r26
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <__fp_cmp+0x46>
    1d48:	23 2b       	or	r18, r19
    1d4a:	24 2b       	or	r18, r20
    1d4c:	25 2b       	or	r18, r21
    1d4e:	21 f4       	brne	.+8      	; 0x1d58 <__fp_cmp+0x3e>
    1d50:	08 95       	ret
    1d52:	0a 26       	eor	r0, r26
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <__fp_cmp+0x3e>
    1d56:	a1 40       	sbci	r26, 0x01	; 1
    1d58:	a6 95       	lsr	r26
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	81 1d       	adc	r24, r1
    1d5e:	81 1d       	adc	r24, r1
    1d60:	08 95       	ret

00001d62 <__fp_inf>:
    1d62:	97 f9       	bld	r25, 7
    1d64:	9f 67       	ori	r25, 0x7F	; 127
    1d66:	80 e8       	ldi	r24, 0x80	; 128
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	08 95       	ret

00001d6e <__fp_nan>:
    1d6e:	9f ef       	ldi	r25, 0xFF	; 255
    1d70:	80 ec       	ldi	r24, 0xC0	; 192
    1d72:	08 95       	ret

00001d74 <__fp_pscA>:
    1d74:	00 24       	eor	r0, r0
    1d76:	0a 94       	dec	r0
    1d78:	16 16       	cp	r1, r22
    1d7a:	17 06       	cpc	r1, r23
    1d7c:	18 06       	cpc	r1, r24
    1d7e:	09 06       	cpc	r0, r25
    1d80:	08 95       	ret

00001d82 <__fp_pscB>:
    1d82:	00 24       	eor	r0, r0
    1d84:	0a 94       	dec	r0
    1d86:	12 16       	cp	r1, r18
    1d88:	13 06       	cpc	r1, r19
    1d8a:	14 06       	cpc	r1, r20
    1d8c:	05 06       	cpc	r0, r21
    1d8e:	08 95       	ret

00001d90 <__fp_round>:
    1d90:	09 2e       	mov	r0, r25
    1d92:	03 94       	inc	r0
    1d94:	00 0c       	add	r0, r0
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <__fp_round+0xc>
    1d98:	88 23       	and	r24, r24
    1d9a:	52 f0       	brmi	.+20     	; 0x1db0 <__fp_round+0x20>
    1d9c:	bb 0f       	add	r27, r27
    1d9e:	40 f4       	brcc	.+16     	; 0x1db0 <__fp_round+0x20>
    1da0:	bf 2b       	or	r27, r31
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <__fp_round+0x18>
    1da4:	60 ff       	sbrs	r22, 0
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <__fp_round+0x20>
    1da8:	6f 5f       	subi	r22, 0xFF	; 255
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	8f 4f       	sbci	r24, 0xFF	; 255
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	08 95       	ret

00001db2 <__fp_split3>:
    1db2:	57 fd       	sbrc	r21, 7
    1db4:	90 58       	subi	r25, 0x80	; 128
    1db6:	44 0f       	add	r20, r20
    1db8:	55 1f       	adc	r21, r21
    1dba:	59 f0       	breq	.+22     	; 0x1dd2 <__fp_splitA+0x10>
    1dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dbe:	71 f0       	breq	.+28     	; 0x1ddc <__fp_splitA+0x1a>
    1dc0:	47 95       	ror	r20

00001dc2 <__fp_splitA>:
    1dc2:	88 0f       	add	r24, r24
    1dc4:	97 fb       	bst	r25, 7
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <__fp_splitA+0x20>
    1dca:	9f 3f       	cpi	r25, 0xFF	; 255
    1dcc:	79 f0       	breq	.+30     	; 0x1dec <__fp_splitA+0x2a>
    1dce:	87 95       	ror	r24
    1dd0:	08 95       	ret
    1dd2:	12 16       	cp	r1, r18
    1dd4:	13 06       	cpc	r1, r19
    1dd6:	14 06       	cpc	r1, r20
    1dd8:	55 1f       	adc	r21, r21
    1dda:	f2 cf       	rjmp	.-28     	; 0x1dc0 <__fp_split3+0xe>
    1ddc:	46 95       	lsr	r20
    1dde:	f1 df       	rcall	.-30     	; 0x1dc2 <__fp_splitA>
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <__fp_splitA+0x30>
    1de2:	16 16       	cp	r1, r22
    1de4:	17 06       	cpc	r1, r23
    1de6:	18 06       	cpc	r1, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	f1 cf       	rjmp	.-30     	; 0x1dce <__fp_splitA+0xc>
    1dec:	86 95       	lsr	r24
    1dee:	71 05       	cpc	r23, r1
    1df0:	61 05       	cpc	r22, r1
    1df2:	08 94       	sec
    1df4:	08 95       	ret

00001df6 <__fp_zero>:
    1df6:	e8 94       	clt

00001df8 <__fp_szero>:
    1df8:	bb 27       	eor	r27, r27
    1dfa:	66 27       	eor	r22, r22
    1dfc:	77 27       	eor	r23, r23
    1dfe:	cb 01       	movw	r24, r22
    1e00:	97 f9       	bld	r25, 7
    1e02:	08 95       	ret

00001e04 <__gesf2>:
    1e04:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__fp_cmp>
    1e08:	08 f4       	brcc	.+2      	; 0x1e0c <__gesf2+0x8>
    1e0a:	8f ef       	ldi	r24, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__divmodhi4>:
    1e0e:	97 fb       	bst	r25, 7
    1e10:	07 2e       	mov	r0, r23
    1e12:	16 f4       	brtc	.+4      	; 0x1e18 <__divmodhi4+0xa>
    1e14:	00 94       	com	r0
    1e16:	07 d0       	rcall	.+14     	; 0x1e26 <__divmodhi4_neg1>
    1e18:	77 fd       	sbrc	r23, 7
    1e1a:	09 d0       	rcall	.+18     	; 0x1e2e <__divmodhi4_neg2>
    1e1c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodhi4>
    1e20:	07 fc       	sbrc	r0, 7
    1e22:	05 d0       	rcall	.+10     	; 0x1e2e <__divmodhi4_neg2>
    1e24:	3e f4       	brtc	.+14     	; 0x1e34 <__divmodhi4_exit>

00001e26 <__divmodhi4_neg1>:
    1e26:	90 95       	com	r25
    1e28:	81 95       	neg	r24
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	08 95       	ret

00001e2e <__divmodhi4_neg2>:
    1e2e:	70 95       	com	r23
    1e30:	61 95       	neg	r22
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255

00001e34 <__divmodhi4_exit>:
    1e34:	08 95       	ret

00001e36 <__tablejump2__>:
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	05 90       	lpm	r0, Z+
    1e3c:	f4 91       	lpm	r31, Z
    1e3e:	e0 2d       	mov	r30, r0
    1e40:	09 94       	ijmp

00001e42 <__udivmodhi4>:
    1e42:	aa 1b       	sub	r26, r26
    1e44:	bb 1b       	sub	r27, r27
    1e46:	51 e1       	ldi	r21, 0x11	; 17
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <__udivmodhi4_ep>

00001e4a <__udivmodhi4_loop>:
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	a6 17       	cp	r26, r22
    1e50:	b7 07       	cpc	r27, r23
    1e52:	10 f0       	brcs	.+4      	; 0x1e58 <__udivmodhi4_ep>
    1e54:	a6 1b       	sub	r26, r22
    1e56:	b7 0b       	sbc	r27, r23

00001e58 <__udivmodhi4_ep>:
    1e58:	88 1f       	adc	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	5a 95       	dec	r21
    1e5e:	a9 f7       	brne	.-22     	; 0x1e4a <__udivmodhi4_loop>
    1e60:	80 95       	com	r24
    1e62:	90 95       	com	r25
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	08 95       	ret

00001e6a <__itoa_ncheck>:
    1e6a:	bb 27       	eor	r27, r27
    1e6c:	4a 30       	cpi	r20, 0x0A	; 10
    1e6e:	31 f4       	brne	.+12     	; 0x1e7c <__itoa_ncheck+0x12>
    1e70:	99 23       	and	r25, r25
    1e72:	22 f4       	brpl	.+8      	; 0x1e7c <__itoa_ncheck+0x12>
    1e74:	bd e2       	ldi	r27, 0x2D	; 45
    1e76:	90 95       	com	r25
    1e78:	81 95       	neg	r24
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__utoa_common>

00001e80 <__utoa_ncheck>:
    1e80:	bb 27       	eor	r27, r27

00001e82 <__utoa_common>:
    1e82:	fb 01       	movw	r30, r22
    1e84:	55 27       	eor	r21, r21
    1e86:	aa 27       	eor	r26, r26
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	aa 1f       	adc	r26, r26
    1e8e:	a4 17       	cp	r26, r20
    1e90:	10 f0       	brcs	.+4      	; 0x1e96 <__utoa_common+0x14>
    1e92:	a4 1b       	sub	r26, r20
    1e94:	83 95       	inc	r24
    1e96:	50 51       	subi	r21, 0x10	; 16
    1e98:	b9 f7       	brne	.-18     	; 0x1e88 <__utoa_common+0x6>
    1e9a:	a0 5d       	subi	r26, 0xD0	; 208
    1e9c:	aa 33       	cpi	r26, 0x3A	; 58
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <__utoa_common+0x20>
    1ea0:	a9 5d       	subi	r26, 0xD9	; 217
    1ea2:	a1 93       	st	Z+, r26
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	79 f7       	brne	.-34     	; 0x1e86 <__utoa_common+0x4>
    1ea8:	b1 11       	cpse	r27, r1
    1eaa:	b1 93       	st	Z+, r27
    1eac:	11 92       	st	Z+, r1
    1eae:	cb 01       	movw	r24, r22
    1eb0:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <strrev>

00001eb4 <strrev>:
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	67 2f       	mov	r22, r23
    1eba:	71 91       	ld	r23, Z+
    1ebc:	77 23       	and	r23, r23
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <strrev+0x4>
    1ec0:	32 97       	sbiw	r30, 0x02	; 2
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <strrev+0x18>
    1ec4:	7c 91       	ld	r23, X
    1ec6:	6d 93       	st	X+, r22
    1ec8:	70 83       	st	Z, r23
    1eca:	62 91       	ld	r22, -Z
    1ecc:	ae 17       	cp	r26, r30
    1ece:	bf 07       	cpc	r27, r31
    1ed0:	c8 f3       	brcs	.-14     	; 0x1ec4 <strrev+0x10>
    1ed2:	08 95       	ret

00001ed4 <_exit>:
    1ed4:	f8 94       	cli

00001ed6 <__stop_program>:
    1ed6:	ff cf       	rjmp	.-2      	; 0x1ed6 <__stop_program>
