
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800068  00800068  00000e2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153c  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b37  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000138d  00000000  00000000  000030bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  0000444c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099f  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df9  00000000  00000000  000051db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_1>
   8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_2>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_5>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_9>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_11>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	35 04       	cpc	r3, r5
  56:	40 04       	cpc	r4, r0
  58:	4b 04       	cpc	r4, r11
  5a:	5b 05       	cpc	r21, r11
  5c:	56 04       	cpc	r5, r6
  5e:	5b 05       	cpc	r21, r11
  60:	61 04       	cpc	r6, r1
  62:	6c 04       	cpc	r6, r12
  64:	77 04       	cpc	r7, r7
  66:	82 04       	cpc	r8, r2
  68:	98 04       	cpc	r9, r8
  6a:	a3 04       	cpc	r10, r3
  6c:	ae 04       	cpc	r10, r14
  6e:	5d 05       	cpc	r21, r13
  70:	b9 04       	cpc	r11, r9
  72:	5d 05       	cpc	r21, r13
  74:	c4 04       	cpc	r12, r4
  76:	cf 04       	cpc	r12, r15
  78:	da 04       	cpc	r13, r10
  7a:	e5 04       	cpc	r14, r5
  7c:	fb 04       	cpc	r15, r11
  7e:	06 05       	cpc	r16, r6
  80:	11 05       	cpc	r17, r1
  82:	1c 05       	cpc	r17, r12
  84:	27 05       	cpc	r18, r7
  86:	32 05       	cpc	r19, r2
  88:	3d 05       	cpc	r19, r13
  8a:	48 05       	cpc	r20, r8

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf e5       	ldi	r28, 0x5F	; 95
  92:	d8 e0       	ldi	r29, 0x08	; 8
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	10 e0       	ldi	r17, 0x00	; 0
  9a:	a0 e6       	ldi	r26, 0x60	; 96
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a8 36       	cpi	r26, 0x68	; 104
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	a8 e6       	ldi	r26, 0x68	; 104
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a4 38       	cpi	r26, 0x84	; 132
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  c2:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <APP_vidInit>:
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    
    HULTRASONIC_vidInit();
  ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <HULTRASONIC_vidInit>
    HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
  ce:	80 e9       	ldi	r24, 0x90	; 144
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 4c 01 	call	0x298	; 0x298 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <HULTRASONIC_vidCBF_INT>
  de:	08 95       	ret

000000e0 <APP_vidStart>:

}

void APP_vidStart(void)
{
    global_f64Dist = HULTRASONIC_u8Read();
  e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <HULTRASONIC_u8Read>
  e4:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <global_f64Dist>
  e8:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <global_f64Dist+0x1>
  ec:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <global_f64Dist+0x2>
  f0:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e2       	ldi	r24, 0x2F	; 47
  f6:	95 e7       	ldi	r25, 0x75	; 117
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <APP_vidStart+0x18>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <APP_vidStart+0x1e>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 93 01 	call	0x326	; 0x326 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <HULTRASONIC_vidTrigger+0xc>
 112:	00 00       	nop
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 93 01 	call	0x326	; 0x326 <DIO_writePIN>
 11e:	08 95       	ret

00000120 <HULTRASONIC_vidTimerCBF>:
/************************************************************************************************/
/*									Functions for CBF										*/
/************************************************************************************************/
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
 120:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <g_v_u16_ovfCounts>
 124:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <g_v_u16_ovfCounts+0x1>
 128:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <g_v_u16_ovfCounts+0x2>
 12c:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <g_v_u16_ovfCounts+0x3>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	a1 1d       	adc	r26, r1
 134:	b1 1d       	adc	r27, r1
 136:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_v_u16_ovfCounts>
 13a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <g_v_u16_ovfCounts+0x1>
 13e:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <g_v_u16_ovfCounts+0x2>
 142:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <g_v_u16_ovfCounts+0x3>
 146:	08 95       	ret

00000148 <HULTRASONIC_vidSigCalc>:
}

void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
 148:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_v_u8_flag>
 14c:	81 11       	cpse	r24, r1
 14e:	12 c0       	rjmp	.+36     	; 0x174 <HULTRASONIC_vidSigCalc+0x2c>
	{
		MTIMER_vidResetTCNT();
 150:	0e 94 bd 05 	call	0xb7a	; 0xb7a <MTIMER_vidResetTCNT>
		g_v_u16_ovfCounts = 0;
 154:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_v_u16_ovfCounts>
 158:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <g_v_u16_ovfCounts+0x1>
 15c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <g_v_u16_ovfCounts+0x2>
 160:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <g_v_u16_ovfCounts+0x3>
		(void) vidExtInt_init(INT_0 , FALL_EDGE);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 0e 02 	call	0x41c	; 0x41c <vidExtInt_init>
		g_v_u8_flag = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <g_v_u8_flag>
 172:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
 174:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_v_u8_flag>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	f9 f4       	brne	.+62     	; 0x1ba <HULTRASONIC_vidSigCalc+0x72>
	{
		(void) TIMER_stop (&st_timer2Config);
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
 184:	0e 94 bf 05 	call	0xb7e	; 0xb7e <MTIMER_u8GetTCNT>
 188:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
 18c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <g_v_u16_ovfCounts>
 190:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <g_v_u16_ovfCounts+0x1>
 194:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <g_v_u16_ovfCounts+0x2>
 198:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <g_v_u16_ovfCounts+0x3>
 19c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <g_v_u16_ovf>
 1a0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <g_v_u16_ovf+0x1>
 1a4:	a0 93 82 00 	sts	0x0082, r26	; 0x800082 <g_v_u16_ovf+0x2>
 1a8:	b0 93 83 00 	sts	0x0083, r27	; 0x800083 <g_v_u16_ovf+0x3>
		g_v_u8_flag = 2;
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <g_v_u8_flag>
		(void) vidTimer2_OvfIrqDisable();
 1b2:	0e 94 b8 05 	call	0xb70	; 0xb70 <vidTimer2_OvfIrqDisable>
		MEXTINT_vidDisableInterrupt();
 1b6:	0e 94 9f 02 	call	0x53e	; 0x53e <MEXTINT_vidDisableInterrupt>
 1ba:	08 95       	ret

000001bc <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_writePIN>

	(void) vidExtInt_init(INT_0 , RISE_EDGE);
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 0e 02 	call	0x41c	; 0x41c <vidExtInt_init>

	(void) TIMER_init(&st_timer2Config);
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 88 03 	call	0x710	; 0x710 <TIMER_init>
	(void) TIMER_start(&st_timer2Config);
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 15 04 	call	0x82a	; 0x82a <TIMER_start>
 1f2:	08 95       	ret

000001f4 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: float64_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
 1f4:	0e 94 81 00 	call	0x102	; 0x102 <HULTRASONIC_vidTrigger>

	if (g_v_u8_flag == 2)
 1f8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_v_u8_flag>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	09 f0       	breq	.+2      	; 0x202 <HULTRASONIC_u8Read+0xe>
 200:	42 c0       	rjmp	.+132    	; 0x286 <HULTRASONIC_u8Read+0x92>
	{
		/*********************  reset global flag    *******************************************/
		g_v_u8_flag = 0;
 202:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <g_v_u8_flag>
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
 206:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <g_v_u8_cap>
 20a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_v_u16_ovf>
 20e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <g_v_u16_ovf+0x1>
 212:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <g_v_u16_ovf+0x2>
 216:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <g_v_u16_ovf+0x3>
 21a:	ba 2f       	mov	r27, r26
 21c:	a9 2f       	mov	r26, r25
 21e:	98 2f       	mov	r25, r24
 220:	88 27       	eor	r24, r24
 222:	bc 01       	movw	r22, r24
 224:	cd 01       	movw	r24, r26
 226:	62 0f       	add	r22, r18
 228:	71 1d       	adc	r23, r1
 22a:	81 1d       	adc	r24, r1
 22c:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (34300 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */
		global_f64distance = (float64_t)global_u32Ticks / 932.95;
 22e:	0e 94 33 06 	call	0xc66	; 0xc66 <__floatunsisf>
 232:	2d ec       	ldi	r18, 0xCD	; 205
 234:	3c e3       	ldi	r19, 0x3C	; 60
 236:	49 e6       	ldi	r20, 0x69	; 105
 238:	54 e4       	ldi	r21, 0x44	; 68
 23a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__divsf3>
 23e:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
 242:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
 246:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end+0x2>
 24a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x3>

		/*********************  reset global ovf counts    *******************************************/
		g_v_u16_ovf = 0;
 24e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <g_v_u16_ovf>
 252:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <g_v_u16_ovf+0x1>
 256:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <g_v_u16_ovf+0x2>
 25a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <g_v_u16_ovf+0x3>
		g_v_u16_ovfCounts = 0;
 25e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_v_u16_ovfCounts>
 262:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <g_v_u16_ovfCounts+0x1>
 266:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <g_v_u16_ovfCounts+0x2>
 26a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <g_v_u16_ovfCounts+0x3>
		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_0 , RISE_EDGE);
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 0e 02 	call	0x41c	; 0x41c <vidExtInt_init>

		/*********************  Start Timer    *******************************************/
		(void) TIMER_start(&st_timer2Config);
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 15 04 	call	0x82a	; 0x82a <TIMER_start>

		/*********************  Enable EXTITNT and Timer interrupts    *******************************************/
		(void) vidTimer2_OvfIrqEnable();
 27e:	0e 94 b0 05 	call	0xb60	; 0xb60 <vidTimer2_OvfIrqEnable>
		MEXTINT_vidEnableInterrupt();
 282:	0e 94 a3 02 	call	0x546	; 0x546 <MEXTINT_vidEnableInterrupt>

	}
	return global_f64distance;
 286:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
 28a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
 28e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
 292:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
}
 296:	08 95       	ret

00000298 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	(void) TIMER_setCallBack(TIMER_ptrFunction2, st_timer2Config.u8_timerNum);
 298:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <TIMER_setCallBack>
 2a0:	08 95       	ret

000002a2 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
 2a2:	0e 94 9a 02 	call	0x534	; 0x534 <MEXTINT_vidCallBackFunc>
 2a6:	08 95       	ret

000002a8 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
 2a8:	0e 94 65 00 	call	0xca	; 0xca <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
 2ac:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_vidStart>
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <main+0x4>

000002b2 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 2b2:	68 30       	cpi	r22, 0x08	; 8
 2b4:	a0 f5       	brcc	.+104    	; 0x31e <DIO_init+0x6c>
	{
		if (port == porta)
 2b6:	81 11       	cpse	r24, r1
 2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 2ba:	8a b3       	in	r24, 0x1a	; 26
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_init+0x12>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_init+0xe>
 2c8:	48 2b       	or	r20, r24
 2ca:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
		}
		else if (port == portb)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	59 f4       	brne	.+22     	; 0x2ea <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 2d4:	87 b3       	in	r24, 0x17	; 23
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_init+0x2c>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_init+0x28>
 2e2:	48 2b       	or	r20, r24
 2e4:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
		}
		else if (port == portc)
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	59 f4       	brne	.+22     	; 0x304 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 2ee:	84 b3       	in	r24, 0x14	; 20
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_init+0x46>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_init+0x42>
 2fc:	48 2b       	or	r20, r24
 2fe:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
		}
		else if (port == portd)
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	69 f4       	brne	.+26     	; 0x322 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 308:	81 b3       	in	r24, 0x11	; 17
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_init+0x60>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_init+0x5c>
 316:	48 2b       	or	r20, r24
 318:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 322:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 324:	08 95       	ret

00000326 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 326:	68 30       	cpi	r22, 0x08	; 8
 328:	08 f0       	brcs	.+2      	; 0x32c <DIO_writePIN+0x6>
 32a:	74 c0       	rjmp	.+232    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		if (port == porta)
 32c:	81 11       	cpse	r24, r1
 32e:	1b c0       	rjmp	.+54     	; 0x366 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	61 f4       	brne	.+24     	; 0x34c <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 334:	2b b3       	in	r18, 0x1b	; 27
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_writePIN+0x1a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_writePIN+0x16>
 344:	82 2b       	or	r24, r18
 346:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 34c:	2b b3       	in	r18, 0x1b	; 27
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_writePIN+0x32>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_writePIN+0x2e>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
		}
		else if (port == portb)
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	d9 f4       	brne	.+54     	; 0x3a0 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 36a:	41 30       	cpi	r20, 0x01	; 1
 36c:	61 f4       	brne	.+24     	; 0x386 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 36e:	28 b3       	in	r18, 0x18	; 24
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_writePIN+0x54>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_writePIN+0x50>
 37e:	82 2b       	or	r24, r18
 380:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 386:	28 b3       	in	r18, 0x18	; 24
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_writePIN+0x6c>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_writePIN+0x68>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
		}
		else if (port == portc)
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	d9 f4       	brne	.+54     	; 0x3da <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	61 f4       	brne	.+24     	; 0x3c0 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 3a8:	25 b3       	in	r18, 0x15	; 21
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_writePIN+0x8e>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_writePIN+0x8a>
 3b8:	82 2b       	or	r24, r18
 3ba:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 3c0:	25 b3       	in	r18, 0x15	; 21
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_writePIN+0xa6>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_writePIN+0xa2>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
		}
		else if (port == portd)
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	e9 f4       	brne	.+58     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			if (state == STD_HIGH)
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	61 f4       	brne	.+24     	; 0x3fa <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 3e2:	22 b3       	in	r18, 0x12	; 18
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_writePIN+0xc8>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_writePIN+0xc4>
 3f2:	82 2b       	or	r24, r18
 3f4:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 3fa:	22 b3       	in	r18, 0x12	; 18
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	82 23       	and	r24, r18
 40e:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 418:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 41a:	08 95       	ret

0000041c <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	08 f0       	brcs	.+2      	; 0x422 <vidExtInt_init+0x6>
 420:	80 c0       	rjmp	.+256    	; 0x522 <vidExtInt_init+0x106>
 422:	64 30       	cpi	r22, 0x04	; 4
 424:	08 f0       	brcs	.+2      	; 0x428 <vidExtInt_init+0xc>
 426:	7f c0       	rjmp	.+254    	; 0x526 <vidExtInt_init+0x10a>
 428:	81 11       	cpse	r24, r1
 42a:	30 c0       	rjmp	.+96     	; 0x48c <vidExtInt_init+0x70>
 42c:	61 30       	cpi	r22, 0x01	; 1
 42e:	71 f0       	breq	.+28     	; 0x44c <vidExtInt_init+0x30>
 430:	28 f0       	brcs	.+10     	; 0x43c <vidExtInt_init+0x20>
 432:	62 30       	cpi	r22, 0x02	; 2
 434:	99 f0       	breq	.+38     	; 0x45c <vidExtInt_init+0x40>
 436:	63 30       	cpi	r22, 0x03	; 3
 438:	c9 f0       	breq	.+50     	; 0x46c <vidExtInt_init+0x50>
 43a:	20 c0       	rjmp	.+64     	; 0x47c <vidExtInt_init+0x60>
 43c:	85 b7       	in	r24, 0x35	; 53
 43e:	8e 7f       	andi	r24, 0xFE	; 254
 440:	85 bf       	out	0x35, r24	; 53
 442:	85 b7       	in	r24, 0x35	; 53
 444:	8d 7f       	andi	r24, 0xFD	; 253
 446:	85 bf       	out	0x35, r24	; 53
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	19 c0       	rjmp	.+50     	; 0x47e <vidExtInt_init+0x62>
 44c:	85 b7       	in	r24, 0x35	; 53
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	85 bf       	out	0x35, r24	; 53
 452:	85 b7       	in	r24, 0x35	; 53
 454:	8d 7f       	andi	r24, 0xFD	; 253
 456:	85 bf       	out	0x35, r24	; 53
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	11 c0       	rjmp	.+34     	; 0x47e <vidExtInt_init+0x62>
 45c:	85 b7       	in	r24, 0x35	; 53
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	85 bf       	out	0x35, r24	; 53
 462:	85 b7       	in	r24, 0x35	; 53
 464:	82 60       	ori	r24, 0x02	; 2
 466:	85 bf       	out	0x35, r24	; 53
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	09 c0       	rjmp	.+18     	; 0x47e <vidExtInt_init+0x62>
 46c:	85 b7       	in	r24, 0x35	; 53
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	85 bf       	out	0x35, r24	; 53
 472:	85 b7       	in	r24, 0x35	; 53
 474:	82 60       	ori	r24, 0x02	; 2
 476:	85 bf       	out	0x35, r24	; 53
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	01 c0       	rjmp	.+2      	; 0x47e <vidExtInt_init+0x62>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	9b b7       	in	r25, 0x3b	; 59
 480:	90 64       	ori	r25, 0x40	; 64
 482:	9b bf       	out	0x3b, r25	; 59
 484:	9a b7       	in	r25, 0x3a	; 58
 486:	90 64       	ori	r25, 0x40	; 64
 488:	9a bf       	out	0x3a, r25	; 58
 48a:	50 c0       	rjmp	.+160    	; 0x52c <vidExtInt_init+0x110>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	81 f5       	brne	.+96     	; 0x4f0 <vidExtInt_init+0xd4>
 490:	61 30       	cpi	r22, 0x01	; 1
 492:	71 f0       	breq	.+28     	; 0x4b0 <vidExtInt_init+0x94>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <vidExtInt_init+0x84>
 496:	62 30       	cpi	r22, 0x02	; 2
 498:	99 f0       	breq	.+38     	; 0x4c0 <vidExtInt_init+0xa4>
 49a:	63 30       	cpi	r22, 0x03	; 3
 49c:	c9 f0       	breq	.+50     	; 0x4d0 <vidExtInt_init+0xb4>
 49e:	20 c0       	rjmp	.+64     	; 0x4e0 <vidExtInt_init+0xc4>
 4a0:	85 b7       	in	r24, 0x35	; 53
 4a2:	8b 7f       	andi	r24, 0xFB	; 251
 4a4:	85 bf       	out	0x35, r24	; 53
 4a6:	85 b7       	in	r24, 0x35	; 53
 4a8:	87 7f       	andi	r24, 0xF7	; 247
 4aa:	85 bf       	out	0x35, r24	; 53
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	19 c0       	rjmp	.+50     	; 0x4e2 <vidExtInt_init+0xc6>
 4b0:	85 b7       	in	r24, 0x35	; 53
 4b2:	84 60       	ori	r24, 0x04	; 4
 4b4:	85 bf       	out	0x35, r24	; 53
 4b6:	85 b7       	in	r24, 0x35	; 53
 4b8:	87 7f       	andi	r24, 0xF7	; 247
 4ba:	85 bf       	out	0x35, r24	; 53
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	11 c0       	rjmp	.+34     	; 0x4e2 <vidExtInt_init+0xc6>
 4c0:	85 b7       	in	r24, 0x35	; 53
 4c2:	8b 7f       	andi	r24, 0xFB	; 251
 4c4:	85 bf       	out	0x35, r24	; 53
 4c6:	85 b7       	in	r24, 0x35	; 53
 4c8:	88 60       	ori	r24, 0x08	; 8
 4ca:	85 bf       	out	0x35, r24	; 53
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <vidExtInt_init+0xc6>
 4d0:	85 b7       	in	r24, 0x35	; 53
 4d2:	84 60       	ori	r24, 0x04	; 4
 4d4:	85 bf       	out	0x35, r24	; 53
 4d6:	85 b7       	in	r24, 0x35	; 53
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	85 bf       	out	0x35, r24	; 53
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <vidExtInt_init+0xc6>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	9b b7       	in	r25, 0x3b	; 59
 4e4:	90 68       	ori	r25, 0x80	; 128
 4e6:	9b bf       	out	0x3b, r25	; 59
 4e8:	9a b7       	in	r25, 0x3a	; 58
 4ea:	90 68       	ori	r25, 0x80	; 128
 4ec:	9a bf       	out	0x3a, r25	; 58
 4ee:	1e c0       	rjmp	.+60     	; 0x52c <vidExtInt_init+0x110>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	d9 f4       	brne	.+54     	; 0x52a <vidExtInt_init+0x10e>
 4f4:	62 30       	cpi	r22, 0x02	; 2
 4f6:	19 f0       	breq	.+6      	; 0x4fe <vidExtInt_init+0xe2>
 4f8:	63 30       	cpi	r22, 0x03	; 3
 4fa:	31 f0       	breq	.+12     	; 0x508 <vidExtInt_init+0xec>
 4fc:	0a c0       	rjmp	.+20     	; 0x512 <vidExtInt_init+0xf6>
 4fe:	84 b7       	in	r24, 0x34	; 52
 500:	8f 7b       	andi	r24, 0xBF	; 191
 502:	84 bf       	out	0x34, r24	; 52
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	06 c0       	rjmp	.+12     	; 0x514 <vidExtInt_init+0xf8>
 508:	84 b7       	in	r24, 0x34	; 52
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	84 bf       	out	0x34, r24	; 52
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	01 c0       	rjmp	.+2      	; 0x514 <vidExtInt_init+0xf8>
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	9b b7       	in	r25, 0x3b	; 59
 516:	90 62       	ori	r25, 0x20	; 32
 518:	9b bf       	out	0x3b, r25	; 59
 51a:	9a b7       	in	r25, 0x3a	; 58
 51c:	90 62       	ori	r25, 0x20	; 32
 51e:	9a bf       	out	0x3a, r25	; 58
 520:	05 c0       	rjmp	.+10     	; 0x52c <vidExtInt_init+0x110>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	03 c0       	rjmp	.+6      	; 0x52c <vidExtInt_init+0x110>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	01 c0       	rjmp	.+2      	; 0x52c <vidExtInt_init+0x110>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	9f b7       	in	r25, 0x3f	; 63
 52e:	90 68       	ori	r25, 0x80	; 128
 530:	9f bf       	out	0x3f, r25	; 63
 532:	08 95       	ret

00000534 <MEXTINT_vidCallBackFunc>:
 534:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <callBack+0x1>
 538:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <callBack>
 53c:	08 95       	ret

0000053e <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
 53e:	8b b7       	in	r24, 0x3b	; 59
 540:	8f 7b       	andi	r24, 0xBF	; 191
 542:	8b bf       	out	0x3b, r24	; 59
 544:	08 95       	ret

00000546 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF1);
 546:	8a b7       	in	r24, 0x3a	; 58
 548:	80 68       	ori	r24, 0x80	; 128
 54a:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
 54c:	8b b7       	in	r24, 0x3b	; 59
 54e:	80 64       	ori	r24, 0x40	; 64
 550:	8b bf       	out	0x3b, r24	; 59
 552:	08 95       	ret

00000554 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	callBack();
 576:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <callBack>
 57a:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <callBack+0x1>
 57e:	09 95       	icall
}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_2>:

ISR(INT1_vect)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	callBackFunc();
 5c4:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <callBackFunc>
 5c8:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <callBackFunc+0x1>
 5cc:	09 95       	icall
}
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	4f 91       	pop	r20
 5e2:	3f 91       	pop	r19
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <__vector_11>:
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
 612:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sg_Timer0_callBackPtr>
 616:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <sg_Timer0_callBackPtr+0x1>
 61a:	89 2b       	or	r24, r25
 61c:	41 f0       	breq	.+16     	; 0x62e <__vector_11+0x3e>
 61e:	88 b7       	in	r24, 0x38	; 56
 620:	8e 7f       	andi	r24, 0xFE	; 254
 622:	88 bf       	out	0x38, r24	; 56
 624:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sg_Timer0_callBackPtr>
 628:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sg_Timer0_callBackPtr+0x1>
 62c:	09 95       	icall
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_9>:
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
 672:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sg_Timer1_callBackPtr>
 676:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sg_Timer1_callBackPtr+0x1>
 67a:	89 2b       	or	r24, r25
 67c:	41 f0       	breq	.+16     	; 0x68e <__vector_9+0x3e>
 67e:	88 b7       	in	r24, 0x38	; 56
 680:	8b 7f       	andi	r24, 0xFB	; 251
 682:	88 bf       	out	0x38, r24	; 56
 684:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <sg_Timer1_callBackPtr>
 688:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <sg_Timer1_callBackPtr+0x1>
 68c:	09 95       	icall
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__vector_5>:
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
 6d2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <sg_Timer2_callBackPtr>
 6d6:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <sg_Timer2_callBackPtr+0x1>
 6da:	89 2b       	or	r24, r25
 6dc:	41 f0       	breq	.+16     	; 0x6ee <__vector_5+0x3e>
 6de:	88 b7       	in	r24, 0x38	; 56
 6e0:	8f 7b       	andi	r24, 0xBF	; 191
 6e2:	88 bf       	out	0x38, r24	; 56
 6e4:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <sg_Timer2_callBackPtr>
 6e8:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <sg_Timer2_callBackPtr+0x1>
 6ec:	09 95       	icall
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <TIMER_init>:
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	09 f4       	brne	.+2      	; 0x716 <TIMER_init+0x6>
 714:	7c c0       	rjmp	.+248    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 716:	fc 01       	movw	r30, r24
 718:	20 81       	ld	r18, Z
 71a:	23 30       	cpi	r18, 0x03	; 3
 71c:	08 f0       	brcs	.+2      	; 0x720 <TIMER_init+0x10>
 71e:	79 c0       	rjmp	.+242    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 720:	31 81       	ldd	r19, Z+1	; 0x01
 722:	3a 30       	cpi	r19, 0x0A	; 10
 724:	08 f0       	brcs	.+2      	; 0x728 <TIMER_init+0x18>
 726:	77 c0       	rjmp	.+238    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 728:	21 30       	cpi	r18, 0x01	; 1
 72a:	19 f1       	breq	.+70     	; 0x772 <TIMER_init+0x62>
 72c:	20 f0       	brcs	.+8      	; 0x736 <TIMER_init+0x26>
 72e:	22 30       	cpi	r18, 0x02	; 2
 730:	09 f4       	brne	.+2      	; 0x734 <TIMER_init+0x24>
 732:	50 c0       	rjmp	.+160    	; 0x7d4 <TIMER_init+0xc4>
 734:	72 c0       	rjmp	.+228    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 736:	12 be       	out	0x32, r1	; 50
 738:	13 be       	out	0x33, r1	; 51
 73a:	1c be       	out	0x3c, r1	; 60
 73c:	fc 01       	movw	r30, r24
 73e:	22 81       	ldd	r18, Z+2	; 0x02
 740:	22 bf       	out	0x32, r18	; 50
 742:	23 b7       	in	r18, 0x33	; 51
 744:	20 68       	ori	r18, 0x80	; 128
 746:	23 bf       	out	0x33, r18	; 51
 748:	23 b7       	in	r18, 0x33	; 51
 74a:	2f 7b       	andi	r18, 0xBF	; 191
 74c:	23 bf       	out	0x33, r18	; 51
 74e:	23 b7       	in	r18, 0x33	; 51
 750:	27 7f       	andi	r18, 0xF7	; 247
 752:	23 bf       	out	0x33, r18	; 51
 754:	23 b7       	in	r18, 0x33	; 51
 756:	2f 7e       	andi	r18, 0xEF	; 239
 758:	23 bf       	out	0x33, r18	; 51
 75a:	23 b7       	in	r18, 0x33	; 51
 75c:	2f 7d       	andi	r18, 0xDF	; 223
 75e:	23 bf       	out	0x33, r18	; 51
 760:	84 81       	ldd	r24, Z+4	; 0x04
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	09 f0       	breq	.+2      	; 0x768 <TIMER_init+0x58>
 766:	5b c0       	rjmp	.+182    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 768:	89 b7       	in	r24, 0x39	; 57
 76a:	81 60       	ori	r24, 0x01	; 1
 76c:	89 bf       	out	0x39, r24	; 57
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	08 95       	ret
 772:	1c bc       	out	0x2c, r1	; 44
 774:	1d bc       	out	0x2d, r1	; 45
 776:	1f bc       	out	0x2f, r1	; 47
 778:	1e bc       	out	0x2e, r1	; 46
 77a:	1b bc       	out	0x2b, r1	; 43
 77c:	1a bc       	out	0x2a, r1	; 42
 77e:	fc 01       	movw	r30, r24
 780:	22 81       	ldd	r18, Z+2	; 0x02
 782:	33 81       	ldd	r19, Z+3	; 0x03
 784:	3d bd       	out	0x2d, r19	; 45
 786:	2c bd       	out	0x2c, r18	; 44
 788:	2f b5       	in	r18, 0x2f	; 47
 78a:	28 60       	ori	r18, 0x08	; 8
 78c:	2f bd       	out	0x2f, r18	; 47
 78e:	2f b5       	in	r18, 0x2f	; 47
 790:	24 60       	ori	r18, 0x04	; 4
 792:	2f bd       	out	0x2f, r18	; 47
 794:	2f b5       	in	r18, 0x2f	; 47
 796:	2e 7f       	andi	r18, 0xFE	; 254
 798:	2f bd       	out	0x2f, r18	; 47
 79a:	2f b5       	in	r18, 0x2f	; 47
 79c:	2d 7f       	andi	r18, 0xFD	; 253
 79e:	2f bd       	out	0x2f, r18	; 47
 7a0:	2e b5       	in	r18, 0x2e	; 46
 7a2:	2f 7e       	andi	r18, 0xEF	; 239
 7a4:	2e bd       	out	0x2e, r18	; 46
 7a6:	2e b5       	in	r18, 0x2e	; 46
 7a8:	27 7f       	andi	r18, 0xF7	; 247
 7aa:	2e bd       	out	0x2e, r18	; 46
 7ac:	2f b5       	in	r18, 0x2f	; 47
 7ae:	2f 7b       	andi	r18, 0xBF	; 191
 7b0:	2f bd       	out	0x2f, r18	; 47
 7b2:	2f b5       	in	r18, 0x2f	; 47
 7b4:	2f 77       	andi	r18, 0x7F	; 127
 7b6:	2f bd       	out	0x2f, r18	; 47
 7b8:	2f b5       	in	r18, 0x2f	; 47
 7ba:	2f 7e       	andi	r18, 0xEF	; 239
 7bc:	2f bd       	out	0x2f, r18	; 47
 7be:	2f b5       	in	r18, 0x2f	; 47
 7c0:	2f 7d       	andi	r18, 0xDF	; 223
 7c2:	2f bd       	out	0x2f, r18	; 47
 7c4:	84 81       	ldd	r24, Z+4	; 0x04
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	61 f5       	brne	.+88     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7ca:	89 b7       	in	r24, 0x39	; 57
 7cc:	84 60       	ori	r24, 0x04	; 4
 7ce:	89 bf       	out	0x39, r24	; 57
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	08 95       	ret
 7d4:	14 bc       	out	0x24, r1	; 36
 7d6:	15 bc       	out	0x25, r1	; 37
 7d8:	13 bc       	out	0x23, r1	; 35
 7da:	fc 01       	movw	r30, r24
 7dc:	22 81       	ldd	r18, Z+2	; 0x02
 7de:	24 bd       	out	0x24, r18	; 36
 7e0:	25 b5       	in	r18, 0x25	; 37
 7e2:	20 68       	ori	r18, 0x80	; 128
 7e4:	25 bd       	out	0x25, r18	; 37
 7e6:	25 b5       	in	r18, 0x25	; 37
 7e8:	2f 7b       	andi	r18, 0xBF	; 191
 7ea:	25 bd       	out	0x25, r18	; 37
 7ec:	25 b5       	in	r18, 0x25	; 37
 7ee:	27 7f       	andi	r18, 0xF7	; 247
 7f0:	25 bd       	out	0x25, r18	; 37
 7f2:	25 b5       	in	r18, 0x25	; 37
 7f4:	2f 7e       	andi	r18, 0xEF	; 239
 7f6:	25 bd       	out	0x25, r18	; 37
 7f8:	25 b5       	in	r18, 0x25	; 37
 7fa:	2f 7d       	andi	r18, 0xDF	; 223
 7fc:	25 bd       	out	0x25, r18	; 37
 7fe:	84 81       	ldd	r24, Z+4	; 0x04
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	89 f4       	brne	.+34     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 804:	89 b7       	in	r24, 0x39	; 57
 806:	80 64       	ori	r24, 0x40	; 64
 808:	89 bf       	out	0x39, r24	; 57
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	08 95       	ret
 80e:	83 e0       	ldi	r24, 0x03	; 3
 810:	08 95       	ret
 812:	83 e0       	ldi	r24, 0x03	; 3
 814:	08 95       	ret
 816:	83 e0       	ldi	r24, 0x03	; 3
 818:	08 95       	ret
 81a:	83 e0       	ldi	r24, 0x03	; 3
 81c:	08 95       	ret
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	08 95       	ret
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	08 95       	ret

0000082a <TIMER_start>:
 82a:	00 97       	sbiw	r24, 0x00	; 0
 82c:	09 f4       	brne	.+2      	; 0x830 <TIMER_start+0x6>
 82e:	3b c1       	rjmp	.+630    	; 0xaa6 <__stack+0x247>
 830:	dc 01       	movw	r26, r24
 832:	2c 91       	ld	r18, X
 834:	23 30       	cpi	r18, 0x03	; 3
 836:	08 f0       	brcs	.+2      	; 0x83a <TIMER_start+0x10>
 838:	38 c1       	rjmp	.+624    	; 0xaaa <__stack+0x24b>
 83a:	11 96       	adiw	r26, 0x01	; 1
 83c:	ec 91       	ld	r30, X
 83e:	ea 30       	cpi	r30, 0x0A	; 10
 840:	08 f0       	brcs	.+2      	; 0x844 <TIMER_start+0x1a>
 842:	35 c1       	rjmp	.+618    	; 0xaae <__stack+0x24f>
 844:	21 30       	cpi	r18, 0x01	; 1
 846:	09 f4       	brne	.+2      	; 0x84a <TIMER_start+0x20>
 848:	68 c0       	rjmp	.+208    	; 0x91a <__stack+0xbb>
 84a:	20 f0       	brcs	.+8      	; 0x854 <TIMER_start+0x2a>
 84c:	22 30       	cpi	r18, 0x02	; 2
 84e:	09 f4       	brne	.+2      	; 0x852 <TIMER_start+0x28>
 850:	c7 c0       	rjmp	.+398    	; 0x9e0 <__stack+0x181>
 852:	2f c1       	rjmp	.+606    	; 0xab2 <__stack+0x253>
 854:	8e 2f       	mov	r24, r30
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	8a 30       	cpi	r24, 0x0A	; 10
 85a:	91 05       	cpc	r25, r1
 85c:	08 f0       	brcs	.+2      	; 0x860 <__stack+0x1>
 85e:	2b c1       	rjmp	.+598    	; 0xab6 <__stack+0x257>
 860:	fc 01       	movw	r30, r24
 862:	e6 5d       	subi	r30, 0xD6	; 214
 864:	ff 4f       	sbci	r31, 0xFF	; 255
 866:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__tablejump2__>
 86a:	83 b7       	in	r24, 0x33	; 51
 86c:	8e 7f       	andi	r24, 0xFE	; 254
 86e:	83 bf       	out	0x33, r24	; 51
 870:	83 b7       	in	r24, 0x33	; 51
 872:	8d 7f       	andi	r24, 0xFD	; 253
 874:	83 bf       	out	0x33, r24	; 51
 876:	83 b7       	in	r24, 0x33	; 51
 878:	8b 7f       	andi	r24, 0xFB	; 251
 87a:	83 bf       	out	0x33, r24	; 51
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	08 95       	ret
 880:	83 b7       	in	r24, 0x33	; 51
 882:	81 60       	ori	r24, 0x01	; 1
 884:	83 bf       	out	0x33, r24	; 51
 886:	83 b7       	in	r24, 0x33	; 51
 888:	8d 7f       	andi	r24, 0xFD	; 253
 88a:	83 bf       	out	0x33, r24	; 51
 88c:	83 b7       	in	r24, 0x33	; 51
 88e:	8b 7f       	andi	r24, 0xFB	; 251
 890:	83 bf       	out	0x33, r24	; 51
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	08 95       	ret
 896:	83 b7       	in	r24, 0x33	; 51
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	83 bf       	out	0x33, r24	; 51
 89c:	83 b7       	in	r24, 0x33	; 51
 89e:	82 60       	ori	r24, 0x02	; 2
 8a0:	83 bf       	out	0x33, r24	; 51
 8a2:	83 b7       	in	r24, 0x33	; 51
 8a4:	8b 7f       	andi	r24, 0xFB	; 251
 8a6:	83 bf       	out	0x33, r24	; 51
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	08 95       	ret
 8ac:	83 b7       	in	r24, 0x33	; 51
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	83 bf       	out	0x33, r24	; 51
 8b2:	83 b7       	in	r24, 0x33	; 51
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	83 bf       	out	0x33, r24	; 51
 8b8:	83 b7       	in	r24, 0x33	; 51
 8ba:	8b 7f       	andi	r24, 0xFB	; 251
 8bc:	83 bf       	out	0x33, r24	; 51
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	08 95       	ret
 8c2:	83 b7       	in	r24, 0x33	; 51
 8c4:	8e 7f       	andi	r24, 0xFE	; 254
 8c6:	83 bf       	out	0x33, r24	; 51
 8c8:	83 b7       	in	r24, 0x33	; 51
 8ca:	8d 7f       	andi	r24, 0xFD	; 253
 8cc:	83 bf       	out	0x33, r24	; 51
 8ce:	83 b7       	in	r24, 0x33	; 51
 8d0:	84 60       	ori	r24, 0x04	; 4
 8d2:	83 bf       	out	0x33, r24	; 51
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
 8d8:	83 b7       	in	r24, 0x33	; 51
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	83 bf       	out	0x33, r24	; 51
 8de:	83 b7       	in	r24, 0x33	; 51
 8e0:	8d 7f       	andi	r24, 0xFD	; 253
 8e2:	83 bf       	out	0x33, r24	; 51
 8e4:	83 b7       	in	r24, 0x33	; 51
 8e6:	84 60       	ori	r24, 0x04	; 4
 8e8:	83 bf       	out	0x33, r24	; 51
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	08 95       	ret
 8ee:	83 b7       	in	r24, 0x33	; 51
 8f0:	8e 7f       	andi	r24, 0xFE	; 254
 8f2:	83 bf       	out	0x33, r24	; 51
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	82 60       	ori	r24, 0x02	; 2
 8f8:	83 bf       	out	0x33, r24	; 51
 8fa:	83 b7       	in	r24, 0x33	; 51
 8fc:	84 60       	ori	r24, 0x04	; 4
 8fe:	83 bf       	out	0x33, r24	; 51
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	08 95       	ret
 904:	83 b7       	in	r24, 0x33	; 51
 906:	81 60       	ori	r24, 0x01	; 1
 908:	83 bf       	out	0x33, r24	; 51
 90a:	83 b7       	in	r24, 0x33	; 51
 90c:	82 60       	ori	r24, 0x02	; 2
 90e:	83 bf       	out	0x33, r24	; 51
 910:	83 b7       	in	r24, 0x33	; 51
 912:	84 60       	ori	r24, 0x04	; 4
 914:	83 bf       	out	0x33, r24	; 51
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	08 95       	ret
 91a:	8e 2f       	mov	r24, r30
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	8a 30       	cpi	r24, 0x0A	; 10
 920:	91 05       	cpc	r25, r1
 922:	08 f0       	brcs	.+2      	; 0x926 <__stack+0xc7>
 924:	ca c0       	rjmp	.+404    	; 0xaba <__stack+0x25b>
 926:	fc 01       	movw	r30, r24
 928:	ec 5c       	subi	r30, 0xCC	; 204
 92a:	ff 4f       	sbci	r31, 0xFF	; 255
 92c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__tablejump2__>
 930:	8e b5       	in	r24, 0x2e	; 46
 932:	8e 7f       	andi	r24, 0xFE	; 254
 934:	8e bd       	out	0x2e, r24	; 46
 936:	8e b5       	in	r24, 0x2e	; 46
 938:	8d 7f       	andi	r24, 0xFD	; 253
 93a:	8e bd       	out	0x2e, r24	; 46
 93c:	8e b5       	in	r24, 0x2e	; 46
 93e:	8b 7f       	andi	r24, 0xFB	; 251
 940:	8e bd       	out	0x2e, r24	; 46
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	08 95       	ret
 946:	8e b5       	in	r24, 0x2e	; 46
 948:	81 60       	ori	r24, 0x01	; 1
 94a:	8e bd       	out	0x2e, r24	; 46
 94c:	8e b5       	in	r24, 0x2e	; 46
 94e:	8d 7f       	andi	r24, 0xFD	; 253
 950:	8e bd       	out	0x2e, r24	; 46
 952:	8e b5       	in	r24, 0x2e	; 46
 954:	8b 7f       	andi	r24, 0xFB	; 251
 956:	8e bd       	out	0x2e, r24	; 46
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	08 95       	ret
 95c:	8e b5       	in	r24, 0x2e	; 46
 95e:	8e 7f       	andi	r24, 0xFE	; 254
 960:	8e bd       	out	0x2e, r24	; 46
 962:	8e b5       	in	r24, 0x2e	; 46
 964:	82 60       	ori	r24, 0x02	; 2
 966:	8e bd       	out	0x2e, r24	; 46
 968:	8e b5       	in	r24, 0x2e	; 46
 96a:	8b 7f       	andi	r24, 0xFB	; 251
 96c:	8e bd       	out	0x2e, r24	; 46
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	08 95       	ret
 972:	8e b5       	in	r24, 0x2e	; 46
 974:	81 60       	ori	r24, 0x01	; 1
 976:	8e bd       	out	0x2e, r24	; 46
 978:	8e b5       	in	r24, 0x2e	; 46
 97a:	82 60       	ori	r24, 0x02	; 2
 97c:	8e bd       	out	0x2e, r24	; 46
 97e:	8e b5       	in	r24, 0x2e	; 46
 980:	8b 7f       	andi	r24, 0xFB	; 251
 982:	8e bd       	out	0x2e, r24	; 46
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	08 95       	ret
 988:	8e b5       	in	r24, 0x2e	; 46
 98a:	8e 7f       	andi	r24, 0xFE	; 254
 98c:	8e bd       	out	0x2e, r24	; 46
 98e:	8e b5       	in	r24, 0x2e	; 46
 990:	8d 7f       	andi	r24, 0xFD	; 253
 992:	8e bd       	out	0x2e, r24	; 46
 994:	8e b5       	in	r24, 0x2e	; 46
 996:	84 60       	ori	r24, 0x04	; 4
 998:	8e bd       	out	0x2e, r24	; 46
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	08 95       	ret
 99e:	8e b5       	in	r24, 0x2e	; 46
 9a0:	81 60       	ori	r24, 0x01	; 1
 9a2:	8e bd       	out	0x2e, r24	; 46
 9a4:	8e b5       	in	r24, 0x2e	; 46
 9a6:	8d 7f       	andi	r24, 0xFD	; 253
 9a8:	8e bd       	out	0x2e, r24	; 46
 9aa:	8e b5       	in	r24, 0x2e	; 46
 9ac:	84 60       	ori	r24, 0x04	; 4
 9ae:	8e bd       	out	0x2e, r24	; 46
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	08 95       	ret
 9b4:	8e b5       	in	r24, 0x2e	; 46
 9b6:	8e 7f       	andi	r24, 0xFE	; 254
 9b8:	8e bd       	out	0x2e, r24	; 46
 9ba:	8e b5       	in	r24, 0x2e	; 46
 9bc:	82 60       	ori	r24, 0x02	; 2
 9be:	8e bd       	out	0x2e, r24	; 46
 9c0:	8e b5       	in	r24, 0x2e	; 46
 9c2:	84 60       	ori	r24, 0x04	; 4
 9c4:	8e bd       	out	0x2e, r24	; 46
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	08 95       	ret
 9ca:	8e b5       	in	r24, 0x2e	; 46
 9cc:	81 60       	ori	r24, 0x01	; 1
 9ce:	8e bd       	out	0x2e, r24	; 46
 9d0:	8e b5       	in	r24, 0x2e	; 46
 9d2:	82 60       	ori	r24, 0x02	; 2
 9d4:	8e bd       	out	0x2e, r24	; 46
 9d6:	8e b5       	in	r24, 0x2e	; 46
 9d8:	84 60       	ori	r24, 0x04	; 4
 9da:	8e bd       	out	0x2e, r24	; 46
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	08 95       	ret
 9e0:	8e 2f       	mov	r24, r30
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	88 30       	cpi	r24, 0x08	; 8
 9e6:	91 05       	cpc	r25, r1
 9e8:	08 f0       	brcs	.+2      	; 0x9ec <__stack+0x18d>
 9ea:	69 c0       	rjmp	.+210    	; 0xabe <__stack+0x25f>
 9ec:	fc 01       	movw	r30, r24
 9ee:	e2 5c       	subi	r30, 0xC2	; 194
 9f0:	ff 4f       	sbci	r31, 0xFF	; 255
 9f2:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__tablejump2__>
 9f6:	85 b5       	in	r24, 0x25	; 37
 9f8:	8b 7f       	andi	r24, 0xFB	; 251
 9fa:	85 bd       	out	0x25, r24	; 37
 9fc:	85 b5       	in	r24, 0x25	; 37
 9fe:	8d 7f       	andi	r24, 0xFD	; 253
 a00:	85 bd       	out	0x25, r24	; 37
 a02:	85 b5       	in	r24, 0x25	; 37
 a04:	8e 7f       	andi	r24, 0xFE	; 254
 a06:	85 bd       	out	0x25, r24	; 37
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	08 95       	ret
 a0c:	85 b5       	in	r24, 0x25	; 37
 a0e:	84 60       	ori	r24, 0x04	; 4
 a10:	85 bd       	out	0x25, r24	; 37
 a12:	85 b5       	in	r24, 0x25	; 37
 a14:	8d 7f       	andi	r24, 0xFD	; 253
 a16:	85 bd       	out	0x25, r24	; 37
 a18:	85 b5       	in	r24, 0x25	; 37
 a1a:	8e 7f       	andi	r24, 0xFE	; 254
 a1c:	85 bd       	out	0x25, r24	; 37
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	08 95       	ret
 a22:	85 b5       	in	r24, 0x25	; 37
 a24:	8b 7f       	andi	r24, 0xFB	; 251
 a26:	85 bd       	out	0x25, r24	; 37
 a28:	85 b5       	in	r24, 0x25	; 37
 a2a:	82 60       	ori	r24, 0x02	; 2
 a2c:	85 bd       	out	0x25, r24	; 37
 a2e:	85 b5       	in	r24, 0x25	; 37
 a30:	8e 7f       	andi	r24, 0xFE	; 254
 a32:	85 bd       	out	0x25, r24	; 37
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	08 95       	ret
 a38:	85 b5       	in	r24, 0x25	; 37
 a3a:	84 60       	ori	r24, 0x04	; 4
 a3c:	85 bd       	out	0x25, r24	; 37
 a3e:	85 b5       	in	r24, 0x25	; 37
 a40:	82 60       	ori	r24, 0x02	; 2
 a42:	85 bd       	out	0x25, r24	; 37
 a44:	85 b5       	in	r24, 0x25	; 37
 a46:	8e 7f       	andi	r24, 0xFE	; 254
 a48:	85 bd       	out	0x25, r24	; 37
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	08 95       	ret
 a4e:	85 b5       	in	r24, 0x25	; 37
 a50:	8b 7f       	andi	r24, 0xFB	; 251
 a52:	85 bd       	out	0x25, r24	; 37
 a54:	85 b5       	in	r24, 0x25	; 37
 a56:	8d 7f       	andi	r24, 0xFD	; 253
 a58:	85 bd       	out	0x25, r24	; 37
 a5a:	85 b5       	in	r24, 0x25	; 37
 a5c:	81 60       	ori	r24, 0x01	; 1
 a5e:	85 bd       	out	0x25, r24	; 37
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	08 95       	ret
 a64:	85 b5       	in	r24, 0x25	; 37
 a66:	84 60       	ori	r24, 0x04	; 4
 a68:	85 bd       	out	0x25, r24	; 37
 a6a:	85 b5       	in	r24, 0x25	; 37
 a6c:	8d 7f       	andi	r24, 0xFD	; 253
 a6e:	85 bd       	out	0x25, r24	; 37
 a70:	85 b5       	in	r24, 0x25	; 37
 a72:	81 60       	ori	r24, 0x01	; 1
 a74:	85 bd       	out	0x25, r24	; 37
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	08 95       	ret
 a7a:	85 b5       	in	r24, 0x25	; 37
 a7c:	8b 7f       	andi	r24, 0xFB	; 251
 a7e:	85 bd       	out	0x25, r24	; 37
 a80:	85 b5       	in	r24, 0x25	; 37
 a82:	82 60       	ori	r24, 0x02	; 2
 a84:	85 bd       	out	0x25, r24	; 37
 a86:	85 b5       	in	r24, 0x25	; 37
 a88:	81 60       	ori	r24, 0x01	; 1
 a8a:	85 bd       	out	0x25, r24	; 37
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	08 95       	ret
 a90:	85 b5       	in	r24, 0x25	; 37
 a92:	84 60       	ori	r24, 0x04	; 4
 a94:	85 bd       	out	0x25, r24	; 37
 a96:	85 b5       	in	r24, 0x25	; 37
 a98:	82 60       	ori	r24, 0x02	; 2
 a9a:	85 bd       	out	0x25, r24	; 37
 a9c:	85 b5       	in	r24, 0x25	; 37
 a9e:	81 60       	ori	r24, 0x01	; 1
 aa0:	85 bd       	out	0x25, r24	; 37
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	08 95       	ret
 aa6:	83 e0       	ldi	r24, 0x03	; 3
 aa8:	08 95       	ret
 aaa:	83 e0       	ldi	r24, 0x03	; 3
 aac:	08 95       	ret
 aae:	83 e0       	ldi	r24, 0x03	; 3
 ab0:	08 95       	ret
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	08 95       	ret
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	08 95       	ret
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	08 95       	ret
 abe:	83 e0       	ldi	r24, 0x03	; 3
 ac0:	08 95       	ret

00000ac2 <TIMER_stop>:
 ac2:	83 30       	cpi	r24, 0x03	; 3
 ac4:	38 f5       	brcc	.+78     	; 0xb14 <TIMER_stop+0x52>
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	79 f0       	breq	.+30     	; 0xae8 <TIMER_stop+0x26>
 aca:	18 f0       	brcs	.+6      	; 0xad2 <TIMER_stop+0x10>
 acc:	82 30       	cpi	r24, 0x02	; 2
 ace:	b9 f0       	breq	.+46     	; 0xafe <TIMER_stop+0x3c>
 ad0:	23 c0       	rjmp	.+70     	; 0xb18 <TIMER_stop+0x56>
 ad2:	83 b7       	in	r24, 0x33	; 51
 ad4:	8e 7f       	andi	r24, 0xFE	; 254
 ad6:	83 bf       	out	0x33, r24	; 51
 ad8:	83 b7       	in	r24, 0x33	; 51
 ada:	8d 7f       	andi	r24, 0xFD	; 253
 adc:	83 bf       	out	0x33, r24	; 51
 ade:	83 b7       	in	r24, 0x33	; 51
 ae0:	8b 7f       	andi	r24, 0xFB	; 251
 ae2:	83 bf       	out	0x33, r24	; 51
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	08 95       	ret
 ae8:	8e b5       	in	r24, 0x2e	; 46
 aea:	8e 7f       	andi	r24, 0xFE	; 254
 aec:	8e bd       	out	0x2e, r24	; 46
 aee:	8e b5       	in	r24, 0x2e	; 46
 af0:	8d 7f       	andi	r24, 0xFD	; 253
 af2:	8e bd       	out	0x2e, r24	; 46
 af4:	8e b5       	in	r24, 0x2e	; 46
 af6:	8b 7f       	andi	r24, 0xFB	; 251
 af8:	8e bd       	out	0x2e, r24	; 46
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	08 95       	ret
 afe:	85 b5       	in	r24, 0x25	; 37
 b00:	8b 7f       	andi	r24, 0xFB	; 251
 b02:	85 bd       	out	0x25, r24	; 37
 b04:	85 b5       	in	r24, 0x25	; 37
 b06:	8d 7f       	andi	r24, 0xFD	; 253
 b08:	85 bd       	out	0x25, r24	; 37
 b0a:	85 b5       	in	r24, 0x25	; 37
 b0c:	8e 7f       	andi	r24, 0xFE	; 254
 b0e:	85 bd       	out	0x25, r24	; 37
 b10:	80 e0       	ldi	r24, 0x00	; 0
 b12:	08 95       	ret
 b14:	83 e0       	ldi	r24, 0x03	; 3
 b16:	08 95       	ret
 b18:	83 e0       	ldi	r24, 0x03	; 3
 b1a:	08 95       	ret

00000b1c <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	d1 f0       	breq	.+52     	; 0xb54 <TIMER_setCallBack+0x38>
 b20:	63 30       	cpi	r22, 0x03	; 3
 b22:	d0 f4       	brcc	.+52     	; 0xb58 <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
 b24:	61 30       	cpi	r22, 0x01	; 1
 b26:	51 f0       	breq	.+20     	; 0xb3c <TIMER_setCallBack+0x20>
 b28:	18 f0       	brcs	.+6      	; 0xb30 <TIMER_setCallBack+0x14>
 b2a:	62 30       	cpi	r22, 0x02	; 2
 b2c:	69 f0       	breq	.+26     	; 0xb48 <TIMER_setCallBack+0x2c>
 b2e:	16 c0       	rjmp	.+44     	; 0xb5c <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
 b30:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <sg_Timer0_callBackPtr+0x1>
 b34:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b38:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
 b3a:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
 b3c:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <sg_Timer1_callBackPtr+0x1>
 b40:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b44:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
 b46:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
 b48:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <sg_Timer2_callBackPtr+0x1>
 b4c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b50:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
 b52:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
 b54:	83 e0       	ldi	r24, 0x03	; 3
 b56:	08 95       	ret
 b58:	83 e0       	ldi	r24, 0x03	; 3
 b5a:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
 b5c:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
 b5e:	08 95       	ret

00000b60 <vidTimer2_OvfIrqEnable>:

u8_en_timerErrorsType vidTimer2_OvfIrqEnable(void)
{
	u8_en_timerErrorsType errorStatus = TIMER_E_OK;

	SET_BIT(TIFR, 6);
 b60:	88 b7       	in	r24, 0x38	; 56
 b62:	80 64       	ori	r24, 0x40	; 64
 b64:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIMSK, TOIE2);
 b66:	89 b7       	in	r24, 0x39	; 57
 b68:	80 64       	ori	r24, 0x40	; 64
 b6a:	89 bf       	out	0x39, r24	; 57
//	SET_BIT(SREG, 7);

	return errorStatus;
}
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	08 95       	ret

00000b70 <vidTimer2_OvfIrqDisable>:
/*************************************************************************************************************/
u8_en_timerErrorsType vidTimer2_OvfIrqDisable(void)
{
	u8_en_timerErrorsType errorStatus = TIMER_E_OK;

	CLEAR_BIT(TIMSK, TOIE2);
 b70:	89 b7       	in	r24, 0x39	; 57
 b72:	8f 7b       	andi	r24, 0xBF	; 191
 b74:	89 bf       	out	0x39, r24	; 57

	return errorStatus;
}
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	08 95       	ret

00000b7a <MTIMER_vidResetTCNT>:

/*************************************************************************************************************/
void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
 b7a:	14 bc       	out	0x24, r1	; 36
 b7c:	08 95       	ret

00000b7e <MTIMER_u8GetTCNT>:


/*************************************************************************************************************/
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
 b7e:	84 b5       	in	r24, 0x24	; 36
}
 b80:	08 95       	ret

00000b82 <__divsf3>:
 b82:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3x>
 b86:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
 b8a:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
 b8e:	58 f0       	brcs	.+22     	; 0xba6 <__divsf3+0x24>
 b90:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
 b94:	40 f0       	brcs	.+16     	; 0xba6 <__divsf3+0x24>
 b96:	29 f4       	brne	.+10     	; 0xba2 <__divsf3+0x20>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	29 f0       	breq	.+10     	; 0xba6 <__divsf3+0x24>
 b9c:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 ba0:	51 11       	cpse	r21, r1
 ba2:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 ba6:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>

00000baa <__divsf3x>:
 baa:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 bae:	68 f3       	brcs	.-38     	; 0xb8a <__divsf3+0x8>

00000bb0 <__divsf3_pse>:
 bb0:	99 23       	and	r25, r25
 bb2:	b1 f3       	breq	.-20     	; 0xba0 <__divsf3+0x1e>
 bb4:	55 23       	and	r21, r21
 bb6:	91 f3       	breq	.-28     	; 0xb9c <__divsf3+0x1a>
 bb8:	95 1b       	sub	r25, r21
 bba:	55 0b       	sbc	r21, r21
 bbc:	bb 27       	eor	r27, r27
 bbe:	aa 27       	eor	r26, r26
 bc0:	62 17       	cp	r22, r18
 bc2:	73 07       	cpc	r23, r19
 bc4:	84 07       	cpc	r24, r20
 bc6:	38 f0       	brcs	.+14     	; 0xbd6 <__divsf3_pse+0x26>
 bc8:	9f 5f       	subi	r25, 0xFF	; 255
 bca:	5f 4f       	sbci	r21, 0xFF	; 255
 bcc:	22 0f       	add	r18, r18
 bce:	33 1f       	adc	r19, r19
 bd0:	44 1f       	adc	r20, r20
 bd2:	aa 1f       	adc	r26, r26
 bd4:	a9 f3       	breq	.-22     	; 0xbc0 <__divsf3_pse+0x10>
 bd6:	35 d0       	rcall	.+106    	; 0xc42 <__divsf3_pse+0x92>
 bd8:	0e 2e       	mov	r0, r30
 bda:	3a f0       	brmi	.+14     	; 0xbea <__divsf3_pse+0x3a>
 bdc:	e0 e8       	ldi	r30, 0x80	; 128
 bde:	32 d0       	rcall	.+100    	; 0xc44 <__divsf3_pse+0x94>
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	e6 95       	lsr	r30
 be6:	00 1c       	adc	r0, r0
 be8:	ca f7       	brpl	.-14     	; 0xbdc <__divsf3_pse+0x2c>
 bea:	2b d0       	rcall	.+86     	; 0xc42 <__divsf3_pse+0x92>
 bec:	fe 2f       	mov	r31, r30
 bee:	29 d0       	rcall	.+82     	; 0xc42 <__divsf3_pse+0x92>
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	bb 1f       	adc	r27, r27
 bf8:	26 17       	cp	r18, r22
 bfa:	37 07       	cpc	r19, r23
 bfc:	48 07       	cpc	r20, r24
 bfe:	ab 07       	cpc	r26, r27
 c00:	b0 e8       	ldi	r27, 0x80	; 128
 c02:	09 f0       	breq	.+2      	; 0xc06 <__divsf3_pse+0x56>
 c04:	bb 0b       	sbc	r27, r27
 c06:	80 2d       	mov	r24, r0
 c08:	bf 01       	movw	r22, r30
 c0a:	ff 27       	eor	r31, r31
 c0c:	93 58       	subi	r25, 0x83	; 131
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255
 c10:	3a f0       	brmi	.+14     	; 0xc20 <__divsf3_pse+0x70>
 c12:	9e 3f       	cpi	r25, 0xFE	; 254
 c14:	51 05       	cpc	r21, r1
 c16:	78 f0       	brcs	.+30     	; 0xc36 <__divsf3_pse+0x86>
 c18:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 c1c:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 c20:	5f 3f       	cpi	r21, 0xFF	; 255
 c22:	e4 f3       	brlt	.-8      	; 0xc1c <__divsf3_pse+0x6c>
 c24:	98 3e       	cpi	r25, 0xE8	; 232
 c26:	d4 f3       	brlt	.-12     	; 0xc1c <__divsf3_pse+0x6c>
 c28:	86 95       	lsr	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	b7 95       	ror	r27
 c30:	f7 95       	ror	r31
 c32:	9f 5f       	subi	r25, 0xFF	; 255
 c34:	c9 f7       	brne	.-14     	; 0xc28 <__divsf3_pse+0x78>
 c36:	88 0f       	add	r24, r24
 c38:	91 1d       	adc	r25, r1
 c3a:	96 95       	lsr	r25
 c3c:	87 95       	ror	r24
 c3e:	97 f9       	bld	r25, 7
 c40:	08 95       	ret
 c42:	e1 e0       	ldi	r30, 0x01	; 1
 c44:	66 0f       	add	r22, r22
 c46:	77 1f       	adc	r23, r23
 c48:	88 1f       	adc	r24, r24
 c4a:	bb 1f       	adc	r27, r27
 c4c:	62 17       	cp	r22, r18
 c4e:	73 07       	cpc	r23, r19
 c50:	84 07       	cpc	r24, r20
 c52:	ba 07       	cpc	r27, r26
 c54:	20 f0       	brcs	.+8      	; 0xc5e <__divsf3_pse+0xae>
 c56:	62 1b       	sub	r22, r18
 c58:	73 0b       	sbc	r23, r19
 c5a:	84 0b       	sbc	r24, r20
 c5c:	ba 0b       	sbc	r27, r26
 c5e:	ee 1f       	adc	r30, r30
 c60:	88 f7       	brcc	.-30     	; 0xc44 <__divsf3_pse+0x94>
 c62:	e0 95       	com	r30
 c64:	08 95       	ret

00000c66 <__floatunsisf>:
 c66:	e8 94       	clt
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <__floatsisf+0x12>

00000c6a <__floatsisf>:
 c6a:	97 fb       	bst	r25, 7
 c6c:	3e f4       	brtc	.+14     	; 0xc7c <__floatsisf+0x12>
 c6e:	90 95       	com	r25
 c70:	80 95       	com	r24
 c72:	70 95       	com	r23
 c74:	61 95       	neg	r22
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	99 23       	and	r25, r25
 c7e:	a9 f0       	breq	.+42     	; 0xcaa <__floatsisf+0x40>
 c80:	f9 2f       	mov	r31, r25
 c82:	96 e9       	ldi	r25, 0x96	; 150
 c84:	bb 27       	eor	r27, r27
 c86:	93 95       	inc	r25
 c88:	f6 95       	lsr	r31
 c8a:	87 95       	ror	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	b7 95       	ror	r27
 c92:	f1 11       	cpse	r31, r1
 c94:	f8 cf       	rjmp	.-16     	; 0xc86 <__floatsisf+0x1c>
 c96:	fa f4       	brpl	.+62     	; 0xcd6 <__floatsisf+0x6c>
 c98:	bb 0f       	add	r27, r27
 c9a:	11 f4       	brne	.+4      	; 0xca0 <__floatsisf+0x36>
 c9c:	60 ff       	sbrs	r22, 0
 c9e:	1b c0       	rjmp	.+54     	; 0xcd6 <__floatsisf+0x6c>
 ca0:	6f 5f       	subi	r22, 0xFF	; 255
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <__floatsisf+0x6c>
 caa:	88 23       	and	r24, r24
 cac:	11 f0       	breq	.+4      	; 0xcb2 <__floatsisf+0x48>
 cae:	96 e9       	ldi	r25, 0x96	; 150
 cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__floatsisf+0x6a>
 cb2:	77 23       	and	r23, r23
 cb4:	21 f0       	breq	.+8      	; 0xcbe <__floatsisf+0x54>
 cb6:	9e e8       	ldi	r25, 0x8E	; 142
 cb8:	87 2f       	mov	r24, r23
 cba:	76 2f       	mov	r23, r22
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <__floatsisf+0x5e>
 cbe:	66 23       	and	r22, r22
 cc0:	71 f0       	breq	.+28     	; 0xcde <__floatsisf+0x74>
 cc2:	96 e8       	ldi	r25, 0x86	; 134
 cc4:	86 2f       	mov	r24, r22
 cc6:	70 e0       	ldi	r23, 0x00	; 0
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	2a f0       	brmi	.+10     	; 0xcd6 <__floatsisf+0x6c>
 ccc:	9a 95       	dec	r25
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	da f7       	brpl	.-10     	; 0xccc <__floatsisf+0x62>
 cd6:	88 0f       	add	r24, r24
 cd8:	96 95       	lsr	r25
 cda:	87 95       	ror	r24
 cdc:	97 f9       	bld	r25, 7
 cde:	08 95       	ret

00000ce0 <__fp_inf>:
 ce0:	97 f9       	bld	r25, 7
 ce2:	9f 67       	ori	r25, 0x7F	; 127
 ce4:	80 e8       	ldi	r24, 0x80	; 128
 ce6:	70 e0       	ldi	r23, 0x00	; 0
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	08 95       	ret

00000cec <__fp_nan>:
 cec:	9f ef       	ldi	r25, 0xFF	; 255
 cee:	80 ec       	ldi	r24, 0xC0	; 192
 cf0:	08 95       	ret

00000cf2 <__fp_pscA>:
 cf2:	00 24       	eor	r0, r0
 cf4:	0a 94       	dec	r0
 cf6:	16 16       	cp	r1, r22
 cf8:	17 06       	cpc	r1, r23
 cfa:	18 06       	cpc	r1, r24
 cfc:	09 06       	cpc	r0, r25
 cfe:	08 95       	ret

00000d00 <__fp_pscB>:
 d00:	00 24       	eor	r0, r0
 d02:	0a 94       	dec	r0
 d04:	12 16       	cp	r1, r18
 d06:	13 06       	cpc	r1, r19
 d08:	14 06       	cpc	r1, r20
 d0a:	05 06       	cpc	r0, r21
 d0c:	08 95       	ret

00000d0e <__fp_round>:
 d0e:	09 2e       	mov	r0, r25
 d10:	03 94       	inc	r0
 d12:	00 0c       	add	r0, r0
 d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0xc>
 d16:	88 23       	and	r24, r24
 d18:	52 f0       	brmi	.+20     	; 0xd2e <__fp_round+0x20>
 d1a:	bb 0f       	add	r27, r27
 d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fp_round+0x20>
 d1e:	bf 2b       	or	r27, r31
 d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0x18>
 d22:	60 ff       	sbrs	r22, 0
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <__fp_round+0x20>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	08 95       	ret

00000d30 <__fp_split3>:
 d30:	57 fd       	sbrc	r21, 7
 d32:	90 58       	subi	r25, 0x80	; 128
 d34:	44 0f       	add	r20, r20
 d36:	55 1f       	adc	r21, r21
 d38:	59 f0       	breq	.+22     	; 0xd50 <__fp_splitA+0x10>
 d3a:	5f 3f       	cpi	r21, 0xFF	; 255
 d3c:	71 f0       	breq	.+28     	; 0xd5a <__fp_splitA+0x1a>
 d3e:	47 95       	ror	r20

00000d40 <__fp_splitA>:
 d40:	88 0f       	add	r24, r24
 d42:	97 fb       	bst	r25, 7
 d44:	99 1f       	adc	r25, r25
 d46:	61 f0       	breq	.+24     	; 0xd60 <__fp_splitA+0x20>
 d48:	9f 3f       	cpi	r25, 0xFF	; 255
 d4a:	79 f0       	breq	.+30     	; 0xd6a <__fp_splitA+0x2a>
 d4c:	87 95       	ror	r24
 d4e:	08 95       	ret
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	55 1f       	adc	r21, r21
 d58:	f2 cf       	rjmp	.-28     	; 0xd3e <__fp_split3+0xe>
 d5a:	46 95       	lsr	r20
 d5c:	f1 df       	rcall	.-30     	; 0xd40 <__fp_splitA>
 d5e:	08 c0       	rjmp	.+16     	; 0xd70 <__fp_splitA+0x30>
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	99 1f       	adc	r25, r25
 d68:	f1 cf       	rjmp	.-30     	; 0xd4c <__fp_splitA+0xc>
 d6a:	86 95       	lsr	r24
 d6c:	71 05       	cpc	r23, r1
 d6e:	61 05       	cpc	r22, r1
 d70:	08 94       	sec
 d72:	08 95       	ret

00000d74 <__fp_zero>:
 d74:	e8 94       	clt

00000d76 <__fp_szero>:
 d76:	bb 27       	eor	r27, r27
 d78:	66 27       	eor	r22, r22
 d7a:	77 27       	eor	r23, r23
 d7c:	cb 01       	movw	r24, r22
 d7e:	97 f9       	bld	r25, 7
 d80:	08 95       	ret

00000d82 <__tablejump2__>:
 d82:	ee 0f       	add	r30, r30
 d84:	ff 1f       	adc	r31, r31
 d86:	05 90       	lpm	r0, Z+
 d88:	f4 91       	lpm	r31, Z
 d8a:	e0 2d       	mov	r30, r0
 d8c:	09 94       	ijmp

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
