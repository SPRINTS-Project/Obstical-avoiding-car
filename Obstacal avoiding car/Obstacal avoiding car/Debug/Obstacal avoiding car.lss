
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00001fac  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  0080013c  0080013c  0000211c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a2f  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001640  00000000  00000000  00006fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bd2  00000000  00000000  000085e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  0000b1bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000143b  00000000  00000000  0000bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bd0  00000000  00000000  0000cf77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000fb47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_1>
       8:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_2>
       c:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	d2 0b       	sbc	r29, r18
      56:	dd 0b       	sbc	r29, r29
      58:	e8 0b       	sbc	r30, r24
      5a:	f8 0c       	add	r15, r8
      5c:	f3 0b       	sbc	r31, r19
      5e:	f8 0c       	add	r15, r8
      60:	fe 0b       	sbc	r31, r30
      62:	09 0c       	add	r0, r9
      64:	14 0c       	add	r1, r4
      66:	1f 0c       	add	r1, r15
      68:	35 0c       	add	r3, r5
      6a:	40 0c       	add	r4, r0
      6c:	4b 0c       	add	r4, r11
      6e:	fa 0c       	add	r15, r10
      70:	56 0c       	add	r5, r6
      72:	fa 0c       	add	r15, r10
      74:	61 0c       	add	r6, r1
      76:	6c 0c       	add	r6, r12
      78:	77 0c       	add	r7, r7
      7a:	82 0c       	add	r8, r2
      7c:	98 0c       	add	r9, r8
      7e:	a3 0c       	add	r10, r3
      80:	ae 0c       	add	r10, r14
      82:	b9 0c       	add	r11, r9
      84:	c4 0c       	add	r12, r4
      86:	cf 0c       	add	r12, r15
      88:	da 0c       	add	r13, r10
      8a:	e5 0c       	add	r14, r5

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ec ea       	ldi	r30, 0xAC	; 172
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 33       	cpi	r26, 0x3C	; 60
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	ac e3       	ldi	r26, 0x3C	; 60
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ab 36       	cpi	r26, 0x6B	; 107
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 92 08 	call	0x1124	; 0x1124 <main>
      c2:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <BUTTON_vidChangeDir>:
/*									Static Function Implementation                				*/
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	u8_g_dirStateCounter ^= 1 ;
      ca:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <u8_g_dirStateCounter>
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	89 27       	eor	r24, r25
      d2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <u8_g_dirStateCounter>
      d6:	08 95       	ret

000000d8 <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      d8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8_g_OneSecTicks>
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 b8 07 	call	0xf70	; 0xf70 <TIMER_Manager_reset>
      ea:	08 95       	ret

000000ec <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      ec:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
      f0:	0e 94 75 08 	call	0x10ea	; 0x10ea <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
      f4:	0e 94 a1 04 	call	0x942	; 0x942 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
      f8:	87 e6       	ldi	r24, 0x67	; 103
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 e7 05 	call	0xbce	; 0xbce <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 03 04 	call	0x806	; 0x806 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     108:	80 e6       	ldi	r24, 0x60	; 96
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 7f 07 	call	0xefe	; 0xefe <TIMER_Manager_init>
	(void) PWM_init();
     110:	0e 94 0b 07 	call	0xe16	; 0xe16 <PWM_init>
	(void) CAR_init();
     114:	0e 94 8b 03 	call	0x716	; 0x716 <CAR_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     118:	89 ed       	ldi	r24, 0xD9	; 217
     11a:	97 e0       	ldi	r25, 0x07	; 7
     11c:	0e 94 8c 08 	call	0x1118	; 0x1118 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     120:	8d ee       	ldi	r24, 0xED	; 237
     122:	97 e0       	ldi	r25, 0x07	; 7
     124:	0e 94 8f 08 	call	0x111e	; 0x111e <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     128:	85 e6       	ldi	r24, 0x65	; 101
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 19 04 	call	0x832	; 0x832 <HExtInt_enCBFInt0>
     130:	08 95       	ret

00000132 <APP_updateDirection>:
	TIMER_Manager_reset(&st_timer1Config);
}

void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     132:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <HULTRASONIC_vidInterruptDisable>
	u8_g_OneSecTicks = 0;
     136:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8_g_OneSecTicks>
	TIMER_Manager_start (&st_timer1Config);
     13a:	80 e6       	ldi	r24, 0x60	; 96
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TIMER_Manager_start>
	HExtInt0_enIntEnable();
     142:	0e 94 24 04 	call	0x848	; 0x848 <HExtInt0_enIntEnable>
	while(u8_g_OneSecTicks <= 2)
     146:	1d c0       	rjmp	.+58     	; 0x182 <APP_updateDirection+0x50>
	{
		if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     148:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_g_dirStateCounter>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	79 f4       	brne	.+30     	; 0x16e <APP_updateDirection+0x3c>
		{
			HLCD_gotoXY(1,4);
     150:	64 e0       	ldi	r22, 0x04	; 4
     152:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
			HLCD_vidWriteChar(' ');
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	0e 94 02 05 	call	0xa04	; 0xa04 <HLCD_vidWriteChar>
			HLCD_gotoXY(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
			HLCD_WriteString("Left");
     164:	8d e8       	ldi	r24, 0x8D	; 141
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
     16c:	0a c0       	rjmp	.+20     	; 0x182 <APP_updateDirection+0x50>
		}
		else if(u8_g_dirStateCounter == MOTOR_TURN_RIGHT){
     16e:	81 11       	cpse	r24, r1
     170:	08 c0       	rjmp	.+16     	; 0x182 <APP_updateDirection+0x50>
			HLCD_gotoXY(1,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
			HLCD_WriteString("Right");
     17a:	82 e9       	ldi	r24, 0x92	; 146
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
{
	HULTRASONIC_vidInterruptDisable();
	u8_g_OneSecTicks = 0;
	TIMER_Manager_start (&st_timer1Config);
	HExtInt0_enIntEnable();
	while(u8_g_OneSecTicks <= 2)
     182:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8_g_OneSecTicks>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	f8 f2       	brcs	.-66     	; 0x148 <APP_updateDirection+0x16>
		else {
			/* do nothing  */
		}
	}
	//while(u8_g_OneSecTicks <= 7);
	HLCD_ClrDisplay();
     18a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HLCD_ClrDisplay>
	(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     192:	0e 94 b1 07 	call	0xf62	; 0xf62 <TIMER_Manager_stop>
	HExtInt0_enIntDisable();
     196:	0e 94 21 04 	call	0x842	; 0x842 <HExtInt0_enIntDisable>
	HULTRASONIC_vidInterruptEnable();
     19a:	0e 94 75 08 	call	0x10ea	; 0x10ea <HULTRASONIC_vidInterruptEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	83 ed       	ldi	r24, 0xD3	; 211
     1a2:	90 e3       	ldi	r25, 0x30	; 48
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	80 40       	sbci	r24, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <APP_updateDirection+0x72>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <APP_updateDirection+0x7c>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <APP_vidStart>:
/*	sei();*/
	//DDRA = 0xFF;
}

void APP_vidStart(void)
{
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
// 	if (en_motorSel == EN_MOTOR_IDLE)
// 	{
		(void) KEYPAD_read(&u8KeyRead);
     1ba:	81 e6       	ldi	r24, 0x61	; 97
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 24 06 	call	0xc48	; 0xc48 <KEYPAD_read>
		
		if (u8KeyRead != 'N')
     1c2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u8KeyRead>
     1c6:	8e 34       	cpi	r24, 0x4E	; 78
     1c8:	59 f0       	breq	.+22     	; 0x1e0 <APP_vidStart+0x2e>
		{
			switch(u8KeyRead)
     1ca:	81 33       	cpi	r24, 0x31	; 49
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <APP_vidStart+0x22>
     1ce:	82 33       	cpi	r24, 0x32	; 50
     1d0:	21 f0       	breq	.+8      	; 0x1da <APP_vidStart+0x28>
     1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <APP_vidStart+0x2e>
			{
				case '1' : {
					en_motorSel = EN_MOTOR_START;
     1d4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
					break;
     1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <APP_vidStart+0x2e>
				}
				case '2' : {
					en_motorSel = EN_MOTOR_STOP;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					break;
				}
			}
		}
/*	}*/
	if (en_motorSel == EN_MOTOR_START)
     1e0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     1e4:	81 11       	cpse	r24, r1
     1e6:	2e c2       	rjmp	.+1116   	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
	 { 				
		if (en_start_state == EN_UPDATE_DIR)
     1e8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <en_start_state>
     1ec:	81 11       	cpse	r24, r1
     1ee:	10 c0       	rjmp	.+32     	; 0x210 <APP_vidStart+0x5e>
		{
			HLCD_ClrDisplay();
     1f0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HLCD_ClrDisplay>
			HLCD_gotoXY(0,0);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
			HLCD_WriteString( (uint8_t*) "Set Def. Rot.");
     1fc:	88 e9       	ldi	r24, 0x98	; 152
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
			APP_updateDirection();
     204:	0e 94 99 00 	call	0x132	; 0x132 <APP_updateDirection>
			en_start_state = UPDATE_OBISTICAL_STATE;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <en_start_state>
     20e:	66 c0       	rjmp	.+204    	; 0x2dc <APP_vidStart+0x12a>
		}
		else if (en_start_state == UPDATE_OBISTICAL_STATE )
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	09 f0       	breq	.+2      	; 0x216 <APP_vidStart+0x64>
     214:	63 c0       	rjmp	.+198    	; 0x2dc <APP_vidStart+0x12a>
		{
		  global_f64Dist = HULTRASONIC_u8Read();
     216:	0e 94 81 08 	call	0x1102	; 0x1102 <HULTRASONIC_u8Read>
     21a:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <global_f64Dist>
     21e:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <global_f64Dist+0x1>
     222:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <global_f64Dist+0x2>
     226:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <global_f64Dist+0x3>
     22a:	8f e2       	ldi	r24, 0x2F	; 47
     22c:	95 e7       	ldi	r25, 0x75	; 117
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <APP_vidStart+0x7c>
     232:	00 c0       	rjmp	.+0      	; 0x234 <APP_vidStart+0x82>
     234:	00 00       	nop
		  _delay_ms(15);
		  
			if		(global_f64Dist > 70.0 )							{ en_Dist_states = NO_OBISTICALS;  }		
     236:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <global_f64Dist>
     23a:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <global_f64Dist+0x1>
     23e:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <global_f64Dist+0x2>
     242:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <global_f64Dist+0x3>
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	4c e8       	ldi	r20, 0x8C	; 140
     24c:	52 e4       	ldi	r21, 0x42	; 66
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	24 f4       	brge	.+8      	; 0x262 <APP_vidStart+0xb0>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     260:	3d c0       	rjmp	.+122    	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist > 30.0 && global_f64Dist <= 70.0)	{ en_Dist_states = OBISTICAL_70_30; }	
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 ef       	ldi	r20, 0xF0	; 240
     268:	51 e4       	ldi	r21, 0x41	; 65
     26a:	c7 01       	movw	r24, r14
     26c:	b6 01       	movw	r22, r12
     26e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	74 f4       	brge	.+28     	; 0x292 <APP_vidStart+0xe0>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	4c e8       	ldi	r20, 0x8C	; 140
     27c:	52 e4       	ldi	r21, 0x42	; 66
     27e:	c7 01       	movw	r24, r14
     280:	b6 01       	movw	r22, r12
     282:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     286:	18 16       	cp	r1, r24
     288:	24 f0       	brlt	.+8      	; 0x292 <APP_vidStart+0xe0>
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     290:	25 c0       	rjmp	.+74     	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist >= 20.0 && global_f64Dist <= 30)	{ en_Dist_states = OBISTICAL_30_20;}	
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 ea       	ldi	r20, 0xA0	; 160
     298:	51 e4       	ldi	r21, 0x41	; 65
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__gesf2>
     2a2:	88 23       	and	r24, r24
     2a4:	74 f0       	brlt	.+28     	; 0x2c2 <APP_vidStart+0x110>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 ef       	ldi	r20, 0xF0	; 240
     2ac:	51 e4       	ldi	r21, 0x41	; 65
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     2b6:	18 16       	cp	r1, r24
     2b8:	24 f0       	brlt	.+8      	; 0x2c2 <APP_vidStart+0x110>
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     2c0:	0d c0       	rjmp	.+26     	; 0x2dc <APP_vidStart+0x12a>
			else if (global_f64Dist < 20.0)								{ en_Dist_states = OBISTICAL_LESS_20;}	
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 ea       	ldi	r20, 0xA0	; 160
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	c7 01       	movw	r24, r14
     2cc:	b6 01       	movw	r22, r12
     2ce:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     2d2:	88 23       	and	r24, r24
     2d4:	1c f4       	brge	.+6      	; 0x2dc <APP_vidStart+0x12a>
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			else{  /* do nothing */ }	
				
			}	else { /*do nothing*/}
				
		if (en_Dist_states == NO_OBISTICALS)
     2dc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <APP_vidStart+0x134>
     2e4:	50 c0       	rjmp	.+160    	; 0x386 <APP_vidStart+0x1d4>
		{
				HLCD_gotoXY(1,0);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     2ec:	86 ea       	ldi	r24, 0xA6	; 166
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     2f4:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     2f8:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     2fc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     300:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     304:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fixunssfsi>
     308:	0e 94 c8 05 	call	0xb90	; 0xb90 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     30c:	8d ea       	ldi	r24, 0xAD	; 173
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
     314:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <u8_g_OneSecTicks>
				TIMER_Manager_start (&st_timer1Config);
     318:	80 e6       	ldi	r24, 0x60	; 96
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TIMER_Manager_start>
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     320:	11 c0       	rjmp	.+34     	; 0x344 <APP_vidStart+0x192>
				{
					HLCD_gotoXY(0,0);
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
					HLCD_WriteString("Speed:30% ");
     32a:	81 eb       	ldi	r24, 0xB1	; 177
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
					HLCD_WriteString("Dir:F");
     332:	8c eb       	ldi	r24, 0xBC	; 188
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
					PWM_start(30,20,FORWARD);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	64 e1       	ldi	r22, 0x14	; 20
     33e:	8e e1       	ldi	r24, 0x1E	; 30
     340:	0e 94 1a 07 	call	0xe34	; 0xe34 <PWM_start>
				
				/* Motor move forward with duty cycle 30% for 5 sec */
				u8_g_OneSecTicks = 0;
				TIMER_Manager_start (&st_timer1Config);
				
				while(u8_g_OneSecTicks <= 5 && flag4 == 0)
     344:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8_g_OneSecTicks>
     348:	86 30       	cpi	r24, 0x06	; 6
     34a:	20 f4       	brcc	.+8      	; 0x354 <APP_vidStart+0x1a2>
     34c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <flag4>
     350:	88 23       	and	r24, r24
     352:	39 f3       	breq	.-50     	; 0x322 <APP_vidStart+0x170>
					HLCD_gotoXY(0,0);
					HLCD_WriteString("Speed:30% ");
					HLCD_WriteString("Dir:F");
					PWM_start(30,20,FORWARD);
				}
				flag4=1;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <flag4>
				(void) TIMER_Manager_stop (st_timer1Config.u8_timerNum);
     35a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     35e:	0e 94 b1 07 	call	0xf62	; 0xf62 <TIMER_Manager_stop>
				/* Motor move forward with duty cycle 50%  */
				HLCD_gotoXY(0,0);
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Speed:50% ");
     36a:	82 ec       	ldi	r24, 0xC2	; 194
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				PWM_start(50,20,FORWARD);
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	64 e1       	ldi	r22, 0x14	; 20
     37e:	82 e3       	ldi	r24, 0x32	; 50
     380:	0e 94 1a 07 	call	0xe34	; 0xe34 <PWM_start>
     384:	c3 c1       	rjmp	.+902    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
		}
		else if (en_Dist_states == OBISTICAL_70_30)
     386:	82 30       	cpi	r24, 0x02	; 2
     388:	61 f5       	brne	.+88     	; 0x3e2 <APP_vidStart+0x230>
		{
				flag4=0;
     38a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <flag4>
				HLCD_gotoXY(1,0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     396:	86 ea       	ldi	r24, 0xA6	; 166
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     39e:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     3a2:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     3a6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     3aa:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     3ae:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fixunssfsi>
     3b2:	0e 94 c8 05 	call	0xb90	; 0xb90 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     3b6:	8d ea       	ldi	r24, 0xAD	; 173
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     3c6:	81 eb       	ldi	r24, 0xB1	; 177
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteString("Dir:F");
     3ce:	8c eb       	ldi	r24, 0xBC	; 188
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				/* Motor move forward with duty cycle 30% */		
				PWM_start(30,20,FORWARD);
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	64 e1       	ldi	r22, 0x14	; 20
     3da:	8e e1       	ldi	r24, 0x1E	; 30
     3dc:	0e 94 1a 07 	call	0xe34	; 0xe34 <PWM_start>
     3e0:	95 c1       	rjmp	.+810    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
		}
		else if (en_Dist_states == OBISTICAL_30_20)
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <APP_vidStart+0x236>
     3e6:	b5 c0       	rjmp	.+362    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		{
			flag4=0;
     3e8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <flag4>
			PWM_stop();
     3ec:	0e 94 6e 07 	call	0xedc	; 0xedc <PWM_stop>
				HLCD_gotoXY(1,0);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     3f8:	86 ea       	ldi	r24, 0xA6	; 166
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     400:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     404:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     408:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     40c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     410:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fixunssfsi>
     414:	0e 94 c8 05 	call	0xb90	; 0xb90 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     418:	8d ea       	ldi	r24, 0xAD	; 173
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Speed:0%");
     428:	8d ec       	ldi	r24, 0xCD	; 205
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     430:	86 ed       	ldi	r24, 0xD6	; 214
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				/* Motor Stop Implementation  */
				CAR_stop();
     438:	0e 94 ef 03 	call	0x7de	; 0x7de <CAR_stop>
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	24 e3       	ldi	r18, 0x34	; 52
     440:	8c e0       	ldi	r24, 0x0C	; 12
     442:	91 50       	subi	r25, 0x01	; 1
     444:	20 40       	sbci	r18, 0x00	; 0
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     44c:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Speed:100%");
     456:	8c ed       	ldi	r24, 0xDC	; 220
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteString("Dir:R");
     45e:	87 ee       	ldi	r24, 0xE7	; 231
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				while (global_f64Dist <= 30.0)
     466:	63 c0       	rjmp	.+198    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
				{
					/* rotate depend on u8_g_dirStateCounter  */
					if (u8_gs_rotate_counter <= 4)
     468:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     46c:	85 30       	cpi	r24, 0x05	; 5
     46e:	40 f5       	brcc	.+80     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
					{
						if (u8_g_dirStateCounter == MOTOR_TURN_LEFT)
     470:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <u8_g_dirStateCounter>
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	89 f4       	brne	.+34     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
						{
							CAR_reverse_left();
     478:	0e 94 db 03 	call	0x7b6	; 0x7b6 <CAR_reverse_left>
     47c:	9f ef       	ldi	r25, 0xFF	; 255
     47e:	29 e6       	ldi	r18, 0x69	; 105
     480:	88 e1       	ldi	r24, 0x18	; 24
     482:	91 50       	subi	r25, 0x01	; 1
     484:	20 40       	sbci	r18, 0x00	; 0
     486:	80 40       	sbci	r24, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     48c:	00 00       	nop
							_delay_ms(1000);
							u8_gs_rotate_counter++;
     48e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     492:	8f 5f       	subi	r24, 0xFF	; 255
     494:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
						}
						else if (u8_g_dirStateCounter == MOTOR_TURN_RIGHT)
     49a:	81 11       	cpse	r24, r1
     49c:	15 c0       	rjmp	.+42     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
						{
							CAR_reverse_right();
     49e:	0e 94 c7 03 	call	0x78e	; 0x78e <CAR_reverse_right>
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	29 e6       	ldi	r18, 0x69	; 105
     4a6:	88 e1       	ldi	r24, 0x18	; 24
     4a8:	91 50       	subi	r25, 0x01	; 1
     4aa:	20 40       	sbci	r18, 0x00	; 0
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
							_delay_ms(1000);
							u8_gs_rotate_counter++;
     4b4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_gs_rotate_counter>
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8_gs_rotate_counter>
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
							// do nothing
						}
						/*u8_gs_rotate_counter++;*/
					}
					else{
						en_motorSel = EN_MOTOR_STOP_V2;
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
						break;
     4c6:	22 c1       	rjmp	.+580    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
					}
					global_f64Dist = HULTRASONIC_u8Read();
     4c8:	0e 94 81 08 	call	0x1102	; 0x1102 <HULTRASONIC_u8Read>
     4cc:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <global_f64Dist>
     4d0:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <global_f64Dist+0x1>
     4d4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <global_f64Dist+0x2>
     4d8:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     4e4:	86 ea       	ldi	r24, 0xA6	; 166
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     4ec:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     4f0:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     4f4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     4f8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     4fc:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fixunssfsi>
     500:	0e 94 c8 05 	call	0xb90	; 0xb90 <HLCD_WriteInt>
					HLCD_WriteString(" cm");
     504:	8d ea       	ldi	r24, 0xAD	; 173
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
					if (global_f64Dist <= 20.0) break;
     50c:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     510:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     514:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     518:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 ea       	ldi	r20, 0xA0	; 160
     522:	51 e4       	ldi	r21, 0x41	; 65
     524:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     528:	18 16       	cp	r1, r24
     52a:	0c f0       	brlt	.+2      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     52c:	ef c0       	rjmp	.+478    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:100%");
				HLCD_WriteString("Dir:R");
				while (global_f64Dist <= 30.0)
     52e:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     532:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     536:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     53a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 ef       	ldi	r20, 0xF0	; 240
     544:	51 e4       	ldi	r21, 0x41	; 65
     546:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     54a:	18 16       	cp	r1, r24
     54c:	0c f0       	brlt	.+2      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     54e:	8c cf       	rjmp	.-232    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     550:	dd c0       	rjmp	.+442    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
					HLCD_WriteString(" cm");
					if (global_f64Dist <= 20.0) break;
				}

		}
		else if (en_Dist_states == OBISTICAL_LESS_20)
     552:	84 30       	cpi	r24, 0x04	; 4
     554:	09 f0       	breq	.+2      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
     556:	da c0       	rjmp	.+436    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
		{
			flag4=0;
     558:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <flag4>
				HLCD_gotoXY(1,0);
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Dist: ");
     564:	86 ea       	ldi	r24, 0xA6	; 166
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     56c:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     570:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     574:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     578:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     57c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fixunssfsi>
     580:	0e 94 c8 05 	call	0xb90	; 0xb90 <HLCD_WriteInt>
				HLCD_WriteString(" cm");
     584:	8d ea       	ldi	r24, 0xAD	; 173
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				
				HLCD_gotoXY(0,0);
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Speed:0% ");
     594:	8d ee       	ldi	r24, 0xED	; 237
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteString("Dir:S");
     59c:	86 ed       	ldi	r24, 0xD6	; 214
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				/*  Motor Stop Implementation  */
				CAR_stop();
     5a4:	0e 94 ef 03 	call	0x7de	; 0x7de <CAR_stop>
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
     5aa:	24 e3       	ldi	r18, 0x34	; 52
     5ac:	8c e0       	ldi	r24, 0x0C	; 12
     5ae:	91 50       	subi	r25, 0x01	; 1
     5b0:	20 40       	sbci	r18, 0x00	; 0
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
     5b8:	00 00       	nop
				_delay_ms(500);
				HLCD_gotoXY(0,0);
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
				HLCD_WriteString("Speed:30% ");
     5c2:	81 eb       	ldi	r24, 0xB1	; 177
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				HLCD_WriteString("Dir:b");
     5ca:	87 ef       	ldi	r24, 0xF7	; 247
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				while (global_f64Dist <= 20.0)
     5d2:	27 c0       	rjmp	.+78     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
				{
					/* Motor move backward with duty cycle 30%  */
					PWM_start(30,20,BACKWARD);
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	64 e1       	ldi	r22, 0x14	; 20
     5d8:	8e e1       	ldi	r24, 0x1E	; 30
     5da:	0e 94 1a 07 	call	0xe34	; 0xe34 <PWM_start>
					global_f64Dist = HULTRASONIC_u8Read();
     5de:	0e 94 81 08 	call	0x1102	; 0x1102 <HULTRASONIC_u8Read>
     5e2:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <global_f64Dist>
     5e6:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <global_f64Dist+0x1>
     5ea:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <global_f64Dist+0x2>
     5ee:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <global_f64Dist+0x3>
					HLCD_gotoXY(1,0);
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
					HLCD_WriteString("Dist: ");
     5fa:	86 ea       	ldi	r24, 0xA6	; 166
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
     602:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     606:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     60a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     60e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     612:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fixunssfsi>
     616:	0e 94 c8 05 	call	0xb90	; 0xb90 <HLCD_WriteInt>
					HLCD_WriteString(" cm");						
     61a:	8d ea       	ldi	r24, 0xAD	; 173
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
				CAR_stop();
				_delay_ms(500);
				HLCD_gotoXY(0,0);
				HLCD_WriteString("Speed:30% ");
				HLCD_WriteString("Dir:b");
				while (global_f64Dist <= 20.0)
     622:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <global_f64Dist>
     626:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <global_f64Dist+0x1>
     62a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <global_f64Dist+0x2>
     62e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <global_f64Dist+0x3>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 ea       	ldi	r20, 0xA0	; 160
     638:	51 e4       	ldi	r21, 0x41	; 65
     63a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     63e:	18 16       	cp	r1, r24
     640:	4c f6       	brge	.-110    	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
     642:	64 c0       	rjmp	.+200    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
					HLCD_WriteInt( (Uint32_t)  global_f64Dist);
					HLCD_WriteString(" cm");						
				}
		}
	 } 
	else if (en_motorSel == EN_MOTOR_STOP)
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	b1 f4       	brne	.+44     	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     648:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <flag2>
     64c:	81 11       	cpse	r24, r1
     64e:	09 c0       	rjmp	.+18     	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
     650:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HLCD_ClrDisplay>
     654:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <flag1>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <flag2>
     65e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <flag3>
		  HLCD_gotoXY(0,0);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     66a:	8d ef       	ldi	r24, 0xFD	; 253
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
     672:	4c c0       	rjmp	.+152    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
	  }
	  else if (en_motorSel == EN_MOTOR_STOP_V2)
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	a9 f5       	brne	.+106    	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
	  {
		  
		  HLCD_ClrDisplay();
     678:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HLCD_ClrDisplay>
		  HLCD_gotoXY(0,0);
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");
     684:	8d ef       	ldi	r24, 0xFD	; 253
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
		  CAR_stop();
     68c:	0e 94 ef 03 	call	0x7de	; 0x7de <CAR_stop>
     690:	9f ef       	ldi	r25, 0xFF	; 255
     692:	23 ed       	ldi	r18, 0xD3	; 211
     694:	80 e3       	ldi	r24, 0x30	; 48
     696:	91 50       	subi	r25, 0x01	; 1
     698:	20 40       	sbci	r18, 0x00	; 0
     69a:	80 40       	sbci	r24, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
     6a0:	00 00       	nop
		  _delay_ms(2000);
		  HLCD_ClrDisplay();
     6a2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HLCD_ClrDisplay>
		  HLCD_gotoXY(0,0);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Trying again in");
     6ae:	8b e0       	ldi	r24, 0x0B	; 11
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
		  HLCD_gotoXY(1,0);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "1 sec");
     6be:	8b e1       	ldi	r24, 0x1B	; 27
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
     6c6:	9f ef       	ldi	r25, 0xFF	; 255
     6c8:	29 e6       	ldi	r18, 0x69	; 105
     6ca:	88 e1       	ldi	r24, 0x18	; 24
     6cc:	91 50       	subi	r25, 0x01	; 1
     6ce:	20 40       	sbci	r18, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
     6d6:	00 00       	nop
		  _delay_ms(1000);
		  u8_gs_rotate_counter=0;
     6d8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <u8_gs_rotate_counter>
		  en_motorSel = EN_MOTOR_START;
     6dc:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     6e0:	15 c0       	rjmp	.+42     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     6e2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <flag1>
     6e6:	81 11       	cpse	r24, r1
     6e8:	09 c0       	rjmp	.+18     	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
     6ea:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HLCD_ClrDisplay>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <flag1>
     6f4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <flag2>
     6f8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <flag3>
		  HLCD_gotoXY(0,0);
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 93 05 	call	0xb26	; 0xb26 <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     704:	81 e2       	ldi	r24, 0x21	; 33
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
	  }
}
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <CAR_init>:
*description : used to initialize the two motor as output 
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK                                                             
************************************************************************/
EN_car_error_t CAR_init(void)
{
     716:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(&ST_motor_1);
     718:	8a e7       	ldi	r24, 0x7A	; 122
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 a1 06 	call	0xd42	; 0xd42 <MOTOR_INIT>
     720:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_INIT(&ST_motor_2);
     722:	87 e7       	ldi	r24, 0x77	; 119
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 a1 06 	call	0xd42	; 0xd42 <MOTOR_INIT>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     72a:	c1 11       	cpse	r28, r1
     72c:	03 c0       	rjmp	.+6      	; 0x734 <CAR_init+0x1e>
     72e:	81 11       	cpse	r24, r1
     730:	03 c0       	rjmp	.+6      	; 0x738 <CAR_init+0x22>
     732:	03 c0       	rjmp	.+6      	; 0x73a <CAR_init+0x24>
	{
		ret_val=CAR_NOK;
     734:	8b e0       	ldi	r24, 0x0B	; 11
     736:	01 c0       	rjmp	.+2      	; 0x73a <CAR_init+0x24>
     738:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <CAR_forward>:
*description : used to move the car forward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_forward(void)
{
     73e:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     740:	8a e7       	ldi	r24, 0x7A	; 122
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 b9 06 	call	0xd72	; 0xd72 <MOTOR_FORWARD>
     748:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_2);
     74a:	87 e7       	ldi	r24, 0x77	; 119
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 b9 06 	call	0xd72	; 0xd72 <MOTOR_FORWARD>
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     752:	c1 11       	cpse	r28, r1
     754:	03 c0       	rjmp	.+6      	; 0x75c <CAR_forward+0x1e>
     756:	81 11       	cpse	r24, r1
     758:	03 c0       	rjmp	.+6      	; 0x760 <CAR_forward+0x22>
     75a:	03 c0       	rjmp	.+6      	; 0x762 <CAR_forward+0x24>
	{
		ret_val=CAR_NOK;
     75c:	8b e0       	ldi	r24, 0x0B	; 11
     75e:	01 c0       	rjmp	.+2      	; 0x762 <CAR_forward+0x24>
     760:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <CAR_backword>:
*description : used to move the car backward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_backword(void)
{
     766:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_1);
     768:	8a e7       	ldi	r24, 0x7A	; 122
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 d1 06 	call	0xda2	; 0xda2 <MOTOR_BACKWARD>
     770:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     772:	87 e7       	ldi	r24, 0x77	; 119
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 d1 06 	call	0xda2	; 0xda2 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     77a:	c1 11       	cpse	r28, r1
     77c:	03 c0       	rjmp	.+6      	; 0x784 <CAR_backword+0x1e>
     77e:	81 11       	cpse	r24, r1
     780:	03 c0       	rjmp	.+6      	; 0x788 <CAR_backword+0x22>
     782:	03 c0       	rjmp	.+6      	; 0x78a <CAR_backword+0x24>
	{
		ret_val=CAR_NOK;
     784:	8b e0       	ldi	r24, 0x0B	; 11
     786:	01 c0       	rjmp	.+2      	; 0x78a <CAR_backword+0x24>
     788:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <CAR_reverse_right>:
*description : used to reverse the car to the right
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_right(void)
{
     78e:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(&ST_motor_1);
     790:	8a e7       	ldi	r24, 0x7A	; 122
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 b9 06 	call	0xd72	; 0xd72 <MOTOR_FORWARD>
     798:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(&ST_motor_2);
     79a:	87 e7       	ldi	r24, 0x77	; 119
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 d1 06 	call	0xda2	; 0xda2 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7a2:	c1 11       	cpse	r28, r1
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <CAR_reverse_right+0x1e>
     7a6:	81 11       	cpse	r24, r1
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <CAR_reverse_right+0x22>
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <CAR_reverse_right+0x24>
	{
		ret_val=CAR_NOK;
     7ac:	8b e0       	ldi	r24, 0x0B	; 11
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <CAR_reverse_right+0x24>
     7b0:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <CAR_reverse_left>:
*description : used to reverse the car to the left
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_reverse_left(void)
{
     7b6:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error2=MOTOR_FORWARD(&ST_motor_1);
     7b8:	8a e7       	ldi	r24, 0x7A	; 122
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 b9 06 	call	0xd72	; 0xd72 <MOTOR_FORWARD>
     7c0:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error1=MOTOR_BACKWARD(&ST_motor_2);
     7c2:	87 e7       	ldi	r24, 0x77	; 119
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 d1 06 	call	0xda2	; 0xda2 <MOTOR_BACKWARD>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7ca:	81 11       	cpse	r24, r1
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <CAR_reverse_left+0x1e>
     7ce:	c1 11       	cpse	r28, r1
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <CAR_reverse_left+0x22>
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <CAR_reverse_left+0x24>
	{
		ret_val=CAR_NOK;
     7d4:	8b e0       	ldi	r24, 0x0B	; 11
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <CAR_reverse_left+0x24>
     7d8:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
}
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <CAR_stop>:
*description : used to stop the car
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_stop(void)
{
     7de:	cf 93       	push	r28
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(&ST_motor_1);
     7e0:	8a e7       	ldi	r24, 0x7A	; 122
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <MOTOR_STOP>
     7e8:	c8 2f       	mov	r28, r24
	EN_motor_error_t motor_error2=MOTOR_STOP(&ST_motor_2);
     7ea:	87 e7       	ldi	r24, 0x77	; 119
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <MOTOR_STOP>
	
	if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7f2:	c1 11       	cpse	r28, r1
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <CAR_stop+0x1e>
     7f6:	81 11       	cpse	r24, r1
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <__DATA_REGION_LENGTH__>
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		ret_val=CAR_NOK;
     7fc:	8b e0       	ldi	r24, 0x0B	; 11
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	8b e0       	ldi	r24, 0x0B	; 11
	else
	{
		// do nothing
	}
	return ret_val;
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <HExtInt_enInit>:
		errorStatus = HEXTINT_NOK;
	}


	return errorStatus;
}
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	c8 2f       	mov	r28, r24
     80c:	d6 2f       	mov	r29, r22
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     822:	6d 2f       	mov	r22, r29
     824:	8c 2f       	mov	r24, r28
     826:	0e 94 b7 09 	call	0x136e	; 0x136e <vidExtInt_init>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <HExtInt_enCBFInt0>:
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	21 f0       	breq	.+8      	; 0x83e <HExtInt_enCBFInt0+0xc>
     836:	0e 94 34 0a 	call	0x1468	; 0x1468 <MEXTINT_vidCallBackFuncInt0>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	08 95       	ret

00000842 <HExtInt0_enIntDisable>:

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     842:	0e 94 3e 0a 	call	0x147c	; 0x147c <MEXTINT_vidDisableInterrupt>
     846:	08 95       	ret

00000848 <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     848:	0e 94 42 0a 	call	0x1484	; 0x1484 <MEXTINT_vidEnableInterrupt>
     84c:	08 95       	ret

0000084e <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	18 2f       	mov	r17, r24
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     862:	c8 2f       	mov	r28, r24
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	67 e0       	ldi	r22, 0x07	; 7
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     86e:	c8 2b       	or	r28, r24
     870:	01 2f       	mov	r16, r17
     872:	02 95       	swap	r16
     874:	0f 70       	andi	r16, 0x0F	; 15
     876:	d0 e0       	ldi	r29, 0x00	; 0
     878:	15 c0       	rjmp	.+42     	; 0x8a4 <__stack+0x45>
     87a:	ed 2f       	mov	r30, r29
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	40 2f       	mov	r20, r16
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	0d 2e       	mov	r0, r29
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	55 95       	asr	r21
     888:	47 95       	ror	r20
     88a:	0a 94       	dec	r0
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	41 70       	andi	r20, 0x01	; 1
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	e3 58       	subi	r30, 0x83	; 131
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	61 81       	ldd	r22, Z+1	; 0x01
     89a:	80 81       	ld	r24, Z
     89c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     8a0:	c8 2b       	or	r28, r24
     8a2:	df 5f       	subi	r29, 0xFF	; 255
     8a4:	d4 30       	cpi	r29, 0x04	; 4
     8a6:	48 f3       	brcs	.-46     	; 0x87a <__stack+0x1b>
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     8b2:	c8 2b       	or	r28, r24
     8b4:	89 ef       	ldi	r24, 0xF9	; 249
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
     8be:	00 00       	nop
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     8ca:	c8 2b       	or	r28, r24
     8cc:	92 e4       	ldi	r25, 0x42	; 66
     8ce:	9a 95       	dec	r25
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <__stack+0x6f>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__stack+0x75>
     8d4:	1f 70       	andi	r17, 0x0F	; 15
     8d6:	d0 e0       	ldi	r29, 0x00	; 0
     8d8:	15 c0       	rjmp	.+42     	; 0x904 <__stack+0xa5>
     8da:	ed 2f       	mov	r30, r29
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	41 2f       	mov	r20, r17
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	0d 2e       	mov	r0, r29
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	55 95       	asr	r21
     8e8:	47 95       	ror	r20
     8ea:	0a 94       	dec	r0
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	41 70       	andi	r20, 0x01	; 1
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e3 58       	subi	r30, 0x83	; 131
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	61 81       	ldd	r22, Z+1	; 0x01
     8fa:	80 81       	ld	r24, Z
     8fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     900:	c8 2b       	or	r28, r24
     902:	df 5f       	subi	r29, 0xFF	; 255
     904:	d4 30       	cpi	r29, 0x04	; 4
     906:	48 f3       	brcs	.-46     	; 0x8da <__stack+0x7b>
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     912:	c8 2b       	or	r28, r24
     914:	e9 ef       	ldi	r30, 0xF9	; 249
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0xb9>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0xbf>
     91e:	00 00       	nop
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     92a:	8c 2b       	or	r24, r28
     92c:	e3 ef       	ldi	r30, 0xF3	; 243
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <__stack+0xd1>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
     936:	00 00       	nop
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <HLCD_vidInit>:
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	c0 e0       	ldi	r28, 0x00	; 0
     94a:	0d c0       	rjmp	.+26     	; 0x966 <HLCD_vidInit+0x24>
     94c:	ed 2f       	mov	r30, r29
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	e3 58       	subi	r30, 0x83	; 131
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	61 81       	ldd	r22, Z+1	; 0x01
     95c:	80 81       	ld	r24, Z
     95e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     962:	c8 2b       	or	r28, r24
     964:	df 5f       	subi	r29, 0xFF	; 255
     966:	d4 30       	cpi	r29, 0x04	; 4
     968:	88 f3       	brcs	.-30     	; 0x94c <HLCD_vidInit+0xa>
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	67 e0       	ldi	r22, 0x07	; 7
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     974:	c8 2b       	or	r28, r24
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     980:	c8 2b       	or	r28, r24
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     98c:	c8 2b       	or	r28, r24
     98e:	8f e0       	ldi	r24, 0x0F	; 15
     990:	97 e2       	ldi	r25, 0x27	; 39
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <HLCD_vidInit+0x50>
     996:	00 c0       	rjmp	.+0      	; 0x998 <HLCD_vidInit+0x56>
     998:	00 00       	nop
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     9a0:	c8 2b       	or	r28, r24
     9a2:	e9 ef       	ldi	r30, 0xF9	; 249
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <HLCD_vidInit+0x64>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <HLCD_vidInit+0x6a>
     9ac:	00 00       	nop
     9ae:	88 e2       	ldi	r24, 0x28	; 40
     9b0:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     9b4:	c8 2b       	or	r28, r24
     9b6:	89 ef       	ldi	r24, 0xF9	; 249
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <HLCD_vidInit+0x78>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <HLCD_vidInit+0x7e>
     9c0:	00 00       	nop
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     9c8:	c8 2b       	or	r28, r24
     9ca:	e7 ee       	ldi	r30, 0xE7	; 231
     9cc:	f3 e0       	ldi	r31, 0x03	; 3
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <HLCD_vidInit+0x8c>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <HLCD_vidInit+0x92>
     9d4:	00 00       	nop
     9d6:	86 e0       	ldi	r24, 0x06	; 6
     9d8:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     9dc:	c8 2b       	or	r28, r24
     9de:	89 ef       	ldi	r24, 0xF9	; 249
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <HLCD_vidInit+0xa0>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <HLCD_vidInit+0xa6>
     9e8:	00 00       	nop
     9ea:	8c e0       	ldi	r24, 0x0C	; 12
     9ec:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     9f0:	8c 2b       	or	r24, r28
     9f2:	e9 ef       	ldi	r30, 0xF9	; 249
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <HLCD_vidInit+0xb4>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <HLCD_vidInit+0xba>
     9fc:	00 00       	nop
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <HLCD_vidWriteChar>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	18 2f       	mov	r17, r24
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     a18:	c8 2f       	mov	r28, r24
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	67 e0       	ldi	r22, 0x07	; 7
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     a24:	c8 2b       	or	r28, r24
     a26:	01 2f       	mov	r16, r17
     a28:	02 95       	swap	r16
     a2a:	0f 70       	andi	r16, 0x0F	; 15
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	15 c0       	rjmp	.+42     	; 0xa5a <HLCD_vidWriteChar+0x56>
     a30:	ed 2f       	mov	r30, r29
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	40 2f       	mov	r20, r16
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	0d 2e       	mov	r0, r29
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <HLCD_vidWriteChar+0x3c>
     a3c:	55 95       	asr	r21
     a3e:	47 95       	ror	r20
     a40:	0a 94       	dec	r0
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <HLCD_vidWriteChar+0x38>
     a44:	41 70       	andi	r20, 0x01	; 1
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	e3 58       	subi	r30, 0x83	; 131
     a4c:	ff 4f       	sbci	r31, 0xFF	; 255
     a4e:	61 81       	ldd	r22, Z+1	; 0x01
     a50:	80 81       	ld	r24, Z
     a52:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     a56:	c8 2b       	or	r28, r24
     a58:	df 5f       	subi	r29, 0xFF	; 255
     a5a:	d4 30       	cpi	r29, 0x04	; 4
     a5c:	48 f3       	brcs	.-46     	; 0xa30 <HLCD_vidWriteChar+0x2c>
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     a68:	c8 2b       	or	r28, r24
     a6a:	89 ef       	ldi	r24, 0xF9	; 249
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <HLCD_vidWriteChar+0x6a>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <HLCD_vidWriteChar+0x70>
     a74:	00 00       	nop
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     a80:	c8 2b       	or	r28, r24
     a82:	92 e4       	ldi	r25, 0x42	; 66
     a84:	9a 95       	dec	r25
     a86:	f1 f7       	brne	.-4      	; 0xa84 <HLCD_vidWriteChar+0x80>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <HLCD_vidWriteChar+0x86>
     a8a:	1f 70       	andi	r17, 0x0F	; 15
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	15 c0       	rjmp	.+42     	; 0xaba <HLCD_vidWriteChar+0xb6>
     a90:	ed 2f       	mov	r30, r29
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	41 2f       	mov	r20, r17
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	0d 2e       	mov	r0, r29
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <HLCD_vidWriteChar+0x9c>
     a9c:	55 95       	asr	r21
     a9e:	47 95       	ror	r20
     aa0:	0a 94       	dec	r0
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <HLCD_vidWriteChar+0x98>
     aa4:	41 70       	andi	r20, 0x01	; 1
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	e3 58       	subi	r30, 0x83	; 131
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	61 81       	ldd	r22, Z+1	; 0x01
     ab0:	80 81       	ld	r24, Z
     ab2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     ab6:	c8 2b       	or	r28, r24
     ab8:	df 5f       	subi	r29, 0xFF	; 255
     aba:	d4 30       	cpi	r29, 0x04	; 4
     abc:	48 f3       	brcs	.-46     	; 0xa90 <HLCD_vidWriteChar+0x8c>
     abe:	41 e0       	ldi	r20, 0x01	; 1
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     ac8:	c8 2b       	or	r28, r24
     aca:	e9 ef       	ldi	r30, 0xF9	; 249
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <HLCD_vidWriteChar+0xca>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <HLCD_vidWriteChar+0xd0>
     ad4:	00 00       	nop
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     ae0:	8c 2b       	or	r24, r28
     ae2:	e3 ef       	ldi	r30, 0xF3	; 243
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <HLCD_vidWriteChar+0xe2>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <HLCD_vidWriteChar+0xe8>
     aec:	00 00       	nop
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <HLCD_ClrDisplay>:
     af8:	cf 93       	push	r28
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     b00:	c8 2f       	mov	r28, r24
     b02:	87 ee       	ldi	r24, 0xE7	; 231
     b04:	93 e0       	ldi	r25, 0x03	; 3
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <HLCD_ClrDisplay+0xe>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <HLCD_ClrDisplay+0x14>
     b0c:	00 00       	nop
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     b14:	8c 2b       	or	r24, r28
     b16:	e7 ee       	ldi	r30, 0xE7	; 231
     b18:	f3 e0       	ldi	r31, 0x03	; 3
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <HLCD_ClrDisplay+0x22>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <HLCD_ClrDisplay+0x28>
     b20:	00 00       	nop
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     b26:	81 11       	cpse	r24, r1
     b28:	08 c0       	rjmp	.+16     	; 0xb3a <HLCD_gotoXY+0x14>
     b2a:	60 31       	cpi	r22, 0x10	; 16
     b2c:	30 f4       	brcc	.+12     	; 0xb3a <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     b2e:	86 2f       	mov	r24, r22
     b30:	8f 70       	andi	r24, 0x0F	; 15
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     b38:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	41 f4       	brne	.+16     	; 0xb4e <HLCD_gotoXY+0x28>
     b3e:	60 31       	cpi	r22, 0x10	; 16
     b40:	40 f4       	brcc	.+16     	; 0xb52 <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     b42:	86 2f       	mov	r24, r22
     b44:	8f 70       	andi	r24, 0x0F	; 15
     b46:	80 6c       	ori	r24, 0xC0	; 192
     b48:	0e 94 27 04 	call	0x84e	; 0x84e <HLCD_vidWritecmd>
     b4c:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     b4e:	88 e0       	ldi	r24, 0x08	; 8
     b50:	08 95       	ret
     b52:	88 e0       	ldi	r24, 0x08	; 8
	}
	return errorStatus;
}
     b54:	08 95       	ret

00000b56 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     b62:	fc 01       	movw	r30, r24
     b64:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     b66:	c0 e0       	ldi	r28, 0x00	; 0
     b68:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     b6a:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     b6e:	0e 94 02 05 	call	0xa04	; 0xa04 <HLCD_vidWriteChar>
     b72:	18 2b       	or	r17, r24
		string = str[++count];
     b74:	21 96       	adiw	r28, 0x01	; 1
     b76:	f7 01       	movw	r30, r14
     b78:	ec 0f       	add	r30, r28
     b7a:	fd 1f       	adc	r31, r29
     b7c:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     b7e:	81 11       	cpse	r24, r1
     b80:	f6 cf       	rjmp	.-20     	; 0xb6e <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     b82:	81 2f       	mov	r24, r17
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	08 95       	ret

00000b90 <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	2a 97       	sbiw	r28, 0x0a	; 10
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ba8:	4a e0       	ldi	r20, 0x0A	; 10
     baa:	be 01       	movw	r22, r28
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0e 94 ab 05 	call	0xb56	; 0xb56 <HLCD_WriteString>
	return errorStatus;
}
     bbc:	2a 96       	adiw	r28, 0x0a	; 10
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	a9 f1       	breq	.+106    	; 0xc40 <KEYPAD_init+0x72>
     bd6:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     bd8:	69 81       	ldd	r22, Y+1	; 0x01
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	88 81       	ld	r24, Y
     bde:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     be2:	6b 81       	ldd	r22, Y+3	; 0x03
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     bec:	6d 81       	ldd	r22, Y+5	; 0x05
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
     bf2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     bf6:	69 81       	ldd	r22, Y+1	; 0x01
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	88 81       	ld	r24, Y
     bfc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     c00:	6b 81       	ldd	r22, Y+3	; 0x03
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     c0a:	6d 81       	ldd	r22, Y+5	; 0x05
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     c14:	6f 81       	ldd	r22, Y+7	; 0x07
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	8e 81       	ldd	r24, Y+6	; 0x06
     c1a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     c1e:	69 85       	ldd	r22, Y+9	; 0x09
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c2e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     c32:	6d 85       	ldd	r22, Y+13	; 0x0d
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	8c 85       	ldd	r24, Y+12	; 0x0c
     c38:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     c40:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	1f 92       	push	r1
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     c5e:	07 e6       	ldi	r16, 0x67	; 103
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	f8 01       	movw	r30, r16
     c64:	67 81       	ldd	r22, Z+7	; 0x07
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	86 81       	ldd	r24, Z+6	; 0x06
     c6a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     c6e:	f8 01       	movw	r30, r16
     c70:	61 85       	ldd	r22, Z+9	; 0x09
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	80 85       	ldd	r24, Z+8	; 0x08
     c76:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     c7a:	f8 01       	movw	r30, r16
     c7c:	63 85       	ldd	r22, Z+11	; 0x0b
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	82 85       	ldd	r24, Z+10	; 0x0a
     c82:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     c86:	f8 01       	movw	r30, r16
     c88:	65 85       	ldd	r22, Z+13	; 0x0d
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	84 85       	ldd	r24, Z+12	; 0x0c
     c8e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     c92:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     c94:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     c96:	42 c0       	rjmp	.+132    	; 0xd1c <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     c98:	e7 e6       	ldi	r30, 0x67	; 103
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	67 81       	ldd	r22, Z+7	; 0x07
     c9e:	60 0f       	add	r22, r16
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	86 81       	ldd	r24, Z+6	; 0x06
     ca4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
		for(j=0;j<3;j++)
     ca8:	10 e0       	ldi	r17, 0x00	; 0
     caa:	2d c0       	rjmp	.+90     	; 0xd06 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     cac:	e7 e6       	ldi	r30, 0x67	; 103
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	61 81       	ldd	r22, Z+1	; 0x01
     cb2:	61 0f       	add	r22, r17
     cb4:	ae 01       	movw	r20, r28
     cb6:	4f 5f       	subi	r20, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	80 81       	ld	r24, Z
     cbc:	0e 94 4c 09 	call	0x1298	; 0x1298 <DIO_readPIN>
			if(value==0)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	81 11       	cpse	r24, r1
     cc4:	1f c0       	rjmp	.+62     	; 0xd04 <KEYPAD_read+0xbc>
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     cc8:	e7 e6       	ldi	r30, 0x67	; 103
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	61 81       	ldd	r22, Z+1	; 0x01
     cce:	61 0f       	add	r22, r17
     cd0:	ae 01       	movw	r20, r28
     cd2:	4f 5f       	subi	r20, 0xFF	; 255
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	80 81       	ld	r24, Z
     cd8:	0e 94 4c 09 	call	0x1298	; 0x1298 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	88 23       	and	r24, r24
     ce0:	99 f3       	breq	.-26     	; 0xcc8 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     ce2:	80 2f       	mov	r24, r16
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	e8 0f       	add	r30, r24
     cee:	f9 1f       	adc	r31, r25
     cf0:	e1 5d       	subi	r30, 0xD1	; 209
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	e1 0f       	add	r30, r17
     cf6:	f1 1d       	adc	r31, r1
     cf8:	80 81       	ld	r24, Z
     cfa:	f7 01       	movw	r30, r14
     cfc:	80 83       	st	Z, r24
				flag=1;
     cfe:	dd 24       	eor	r13, r13
     d00:	d3 94       	inc	r13
				
				break;
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     d04:	1f 5f       	subi	r17, 0xFF	; 255
     d06:	13 30       	cpi	r17, 0x03	; 3
     d08:	88 f2       	brcs	.-94     	; 0xcac <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     d0a:	e7 e6       	ldi	r30, 0x67	; 103
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	67 81       	ldd	r22, Z+7	; 0x07
     d10:	60 0f       	add	r22, r16
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	86 81       	ldd	r24, Z+6	; 0x06
     d16:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	04 30       	cpi	r16, 0x04	; 4
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <KEYPAD_read+0xda>
     d20:	bb cf       	rjmp	.-138    	; 0xc98 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	df 16       	cp	r13, r31
     d26:	19 f0       	breq	.+6      	; 0xd2e <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     d28:	8e e4       	ldi	r24, 0x4E	; 78
     d2a:	f7 01       	movw	r30, r14
     d2c:	80 83       	st	Z, r24
		return ret_val;
	}
	
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	08 95       	ret

00000d42 <MOTOR_INIT>:
/*including sections*/
#include "motor.h"

/* APIs impelementation*/
EN_motor_error_t MOTOR_INIT(const ST_motor_t* motor)
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
	if((DIO_init(motor->port,motor->pin_num1,STD_OUTPUT)==DIO_E_OK) && (DIO_init(motor->port,motor->pin_num2,STD_OUTPUT)==DIO_E_OK ))
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	88 81       	ld	r24, Y
     d4e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     d52:	81 11       	cpse	r24, r1
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <MOTOR_INIT+0x24>
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	6a 81       	ldd	r22, Y+2	; 0x02
     d5a:	88 81       	ld	r24, Y
     d5c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
     d60:	81 11       	cpse	r24, r1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <MOTOR_INIT+0x28>
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <MOTOR_INIT+0x2a>
	{
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     d66:	89 e0       	ldi	r24, 0x09	; 9
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <MOTOR_INIT+0x2a>
     d6a:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <MOTOR_FORWARD>:
EN_motor_error_t MOTOR_FORWARD(const ST_motor_t* motor)
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_HIGH)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	88 81       	ld	r24, Y
     d7e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     d82:	81 11       	cpse	r24, r1
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <MOTOR_FORWARD+0x24>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	6a 81       	ldd	r22, Y+2	; 0x02
     d8a:	88 81       	ld	r24, Y
     d8c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     d90:	81 11       	cpse	r24, r1
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <MOTOR_FORWARD+0x28>
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <MOTOR_FORWARD+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     d96:	89 e0       	ldi	r24, 0x09	; 9
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <MOTOR_FORWARD+0x2a>
     d9a:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <MOTOR_BACKWARD>:
EN_motor_error_t MOTOR_BACKWARD(const ST_motor_t* motor)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_HIGH)==DIO_E_OK)
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	69 81       	ldd	r22, Y+1	; 0x01
     dac:	88 81       	ld	r24, Y
     dae:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     db2:	81 11       	cpse	r24, r1
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <MOTOR_BACKWARD+0x24>
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	6a 81       	ldd	r22, Y+2	; 0x02
     dba:	88 81       	ld	r24, Y
     dbc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     dc0:	81 11       	cpse	r24, r1
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <MOTOR_BACKWARD+0x28>
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <MOTOR_BACKWARD+0x2a>
	{    
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     dc6:	89 e0       	ldi	r24, 0x09	; 9
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <MOTOR_BACKWARD+0x2a>
     dca:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <MOTOR_STOP>:
EN_motor_error_t MOTOR_STOP(const ST_motor_t* motor)
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	69 81       	ldd	r22, Y+1	; 0x01
     ddc:	88 81       	ld	r24, Y
     dde:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     de2:	81 11       	cpse	r24, r1
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <MOTOR_STOP+0x24>
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	6a 81       	ldd	r22, Y+2	; 0x02
     dea:	88 81       	ld	r24, Y
     dec:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     df0:	81 11       	cpse	r24, r1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <MOTOR_STOP+0x28>
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <MOTOR_STOP+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     df6:	89 e0       	ldi	r24, 0x09	; 9
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <MOTOR_STOP+0x2a>
     dfa:	89 e0       	ldi	r24, 0x09	; 9
	}
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <TIMER0_callBackFunc>:



void TIMER0_callBackFunc(void)
{
	u8_gs_pwm_counter++;
     e02:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_gs_pwm_counter>
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8_gs_pwm_counter>
	TIMER_Manager_reset(&st_timer0Config);
     e0c:	85 e8       	ldi	r24, 0x85	; 133
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 b8 07 	call	0xf70	; 0xf70 <TIMER_Manager_reset>
     e14:	08 95       	ret

00000e16 <PWM_init>:
static uint8_t u8_gs_duty_counter = 0;
static uint8_t u8_gs_cycle = 0;
static uint8_t u8_gs_dir = 0;

u8_pwmErrorType PWM_init(void)
{
     e16:	cf 93       	push	r28
	//DDRB = 0xff;
	uint8_t u8_retVal = PWM_ERROR_OK;
	u8_retVal = TIMER_Manager_init(&st_timer0Config);
     e18:	85 e8       	ldi	r24, 0x85	; 133
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 7f 07 	call	0xefe	; 0xefe <TIMER_Manager_init>
     e20:	c8 2f       	mov	r28, r24
	u8_retVal |= CAR_init();
     e22:	0e 94 8b 03 	call	0x716	; 0x716 <CAR_init>
     e26:	8c 2b       	or	r24, r28
	if (u8_retVal == PWM_ERROR_OK)
     e28:	19 f4       	brne	.+6      	; 0xe30 <PWM_init+0x1a>
	{
		u8_gs_pwm_state = INIT;
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <u8_gs_pwm_state>
	}
	return u8_retVal;
}
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <PWM_start>:
u8_pwmErrorType PWM_start(uint8_t u8_duty , uint8_t u8_cycle , en_motor_dir_t u8_motor_dir)
{
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
	
	//_delay_ms(2000);
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state != NOT_INIT)
     e3c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <u8_gs_pwm_state>
     e40:	99 23       	and	r25, r25
     e42:	09 f4       	brne	.+2      	; 0xe46 <PWM_start+0x12>
     e44:	44 c0       	rjmp	.+136    	; 0xece <PWM_start+0x9a>
	{
		if (u8_gs_pwm_state == START &&  (u8_gs_duty != u8_duty || u8_gs_cycle != u8_cycle || u8_gs_dir != u8_motor_dir ))
     e46:	92 30       	cpi	r25, 0x02	; 2
     e48:	69 f4       	brne	.+26     	; 0xe64 <PWM_start+0x30>
     e4a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <u8_gs_duty>
     e4e:	98 13       	cpse	r25, r24
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <PWM_start+0x2c>
     e52:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <u8_gs_cycle>
     e56:	96 13       	cpse	r25, r22
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <PWM_start+0x2c>
     e5a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <u8_gs_dir>
     e5e:	94 13       	cpse	r25, r20
		{
			u8_gs_pwm_counter = 0;
     e60:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <u8_gs_pwm_counter>
     e64:	14 2f       	mov	r17, r20
     e66:	06 2f       	mov	r16, r22
		}
		u8_gs_duty = u8_duty;
     e68:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <u8_gs_duty>
		u8_gs_cycle = u8_cycle;
     e6c:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <u8_gs_cycle>
		u8_gs_dir = u8_motor_dir;
     e70:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <u8_gs_dir>
		u8_duty = (u8_cycle * u8_duty) / 100;
     e74:	68 9f       	mul	r22, r24
     e76:	c0 01       	movw	r24, r0
     e78:	11 24       	eor	r1, r1
     e7a:	64 e6       	ldi	r22, 0x64	; 100
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divmodhi4>
     e82:	d6 2f       	mov	r29, r22
		//PORTB = u8_duty;
		u8_retVal |= TIMER_Manager_start(&st_timer0Config);
     e84:	85 e8       	ldi	r24, 0x85	; 133
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TIMER_Manager_start>
     e8c:	c8 2f       	mov	r28, r24
		while (u8_gs_pwm_counter < u8_duty)
     e8e:	0b c0       	rjmp	.+22     	; 0xea6 <PWM_start+0x72>
		{
			if (u8_motor_dir == FORWARD)
     e90:	11 11       	cpse	r17, r1
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <PWM_start+0x68>
			{
				u8_retVal |= CAR_forward();
     e94:	0e 94 9f 03 	call	0x73e	; 0x73e <CAR_forward>
     e98:	c8 2b       	or	r28, r24
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <PWM_start+0x72>
			}
			else if (u8_motor_dir == BACKWARD)
     e9c:	11 30       	cpi	r17, 0x01	; 1
     e9e:	19 f4       	brne	.+6      	; 0xea6 <PWM_start+0x72>
			{
				u8_retVal |= CAR_backword();
     ea0:	0e 94 b3 03 	call	0x766	; 0x766 <CAR_backword>
     ea4:	c8 2b       	or	r28, r24
		u8_gs_cycle = u8_cycle;
		u8_gs_dir = u8_motor_dir;
		u8_duty = (u8_cycle * u8_duty) / 100;
		//PORTB = u8_duty;
		u8_retVal |= TIMER_Manager_start(&st_timer0Config);
		while (u8_gs_pwm_counter < u8_duty)
     ea6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_gs_pwm_counter>
     eaa:	8d 17       	cp	r24, r29
     eac:	88 f3       	brcs	.-30     	; 0xe90 <PWM_start+0x5c>
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <PWM_start+0x82>
				// do nothing
			}
		}
		while (u8_gs_pwm_counter < u8_cycle && u8_gs_pwm_counter>= u8_duty)
		{
			u8_retVal |= CAR_stop();
     eb0:	0e 94 ef 03 	call	0x7de	; 0x7de <CAR_stop>
     eb4:	c8 2b       	or	r28, r24
			}
			else{
				// do nothing
			}
		}
		while (u8_gs_pwm_counter < u8_cycle && u8_gs_pwm_counter>= u8_duty)
     eb6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_gs_pwm_counter>
     eba:	80 17       	cp	r24, r16
     ebc:	10 f4       	brcc	.+4      	; 0xec2 <PWM_start+0x8e>
     ebe:	8d 17       	cp	r24, r29
     ec0:	b8 f7       	brcc	.-18     	; 0xeb0 <PWM_start+0x7c>
		{
			u8_retVal |= CAR_stop();
		}
		u8_gs_pwm_counter = 0;
     ec2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <u8_gs_pwm_counter>
		u8_gs_pwm_state = START;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8_gs_pwm_state>
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <PWM_start+0x9c>
		
		//PORTB = u8_gs_pwm_counter;
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     ece:	ca e0       	ldi	r28, 0x0A	; 10
	}
	//PORTB = u8_retVal;
	return u8_retVal;
}
     ed0:	8c 2f       	mov	r24, r28
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <PWM_stop>:
u8_pwmErrorType PWM_stop(void)
{
	uint8_t u8_retVal = PWM_ERROR_OK;
	if (u8_gs_pwm_state == START )
     edc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8_gs_pwm_state>
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	59 f4       	brne	.+22     	; 0xefa <PWM_stop+0x1e>
	{
		TIMER_Manager_stop(st_timer0Config.u8_timerNum);
     ee4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <st_timer0Config>
     ee8:	0e 94 b1 07 	call	0xf62	; 0xf62 <TIMER_Manager_stop>
		u8_gs_pwm_counter = 0;
     eec:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <u8_gs_pwm_counter>
		u8_gs_pwm_state = STOP;
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8_gs_pwm_state>
	//PORTB = u8_retVal;
	return u8_retVal;
}
u8_pwmErrorType PWM_stop(void)
{
	uint8_t u8_retVal = PWM_ERROR_OK;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
		TIMER_Manager_stop(st_timer0Config.u8_timerNum);
		u8_gs_pwm_counter = 0;
		u8_gs_pwm_state = STOP;
	}
	else{
		u8_retVal = PWM_ERROR_NOT_OK;
     efa:	8a e0       	ldi	r24, 0x0A	; 10
	}
	return u8_retVal;
}
     efc:	08 95       	ret

00000efe <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	91 f0       	breq	.+36     	; 0xf2c <TIMER_Manager_init+0x2e>
     f08:	fc 01       	movw	r30, r24
     f0a:	20 81       	ld	r18, Z
     f0c:	23 30       	cpi	r18, 0x03	; 3
     f0e:	80 f4       	brcc	.+32     	; 0xf30 <TIMER_Manager_init+0x32>
     f10:	21 81       	ldd	r18, Z+1	; 0x01
     f12:	2a 30       	cpi	r18, 0x0A	; 10
     f14:	78 f4       	brcc	.+30     	; 0xf34 <TIMER_Manager_init+0x36>
     f16:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     f18:	0e 94 29 0b 	call	0x1652	; 0x1652 <TIMER_init>
     f1c:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     f1e:	68 81       	ld	r22, Y
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TIMER_setCallBack>
     f28:	81 2b       	or	r24, r17
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <TIMER_Manager_init+0x38>
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <TIMER_Manager_init+0x38>
     f34:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	51 f0       	breq	.+20     	; 0xf56 <TIMER_Manager_start+0x18>
     f42:	fc 01       	movw	r30, r24
     f44:	20 81       	ld	r18, Z
     f46:	23 30       	cpi	r18, 0x03	; 3
     f48:	40 f4       	brcc	.+16     	; 0xf5a <TIMER_Manager_start+0x1c>
     f4a:	21 81       	ldd	r18, Z+1	; 0x01
     f4c:	2a 30       	cpi	r18, 0x0A	; 10
     f4e:	38 f4       	brcc	.+14     	; 0xf5e <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
     f50:	0e 94 b2 0b 	call	0x1764	; 0x1764 <TIMER_start>
     f54:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	08 95       	ret
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	08 95       	ret
     f5e:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
     f60:	08 95       	ret

00000f62 <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	18 f4       	brcc	.+6      	; 0xf6c <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
     f66:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TIMER_stop>
     f6a:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     f6c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     f6e:	08 95       	ret

00000f70 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	51 f0       	breq	.+20     	; 0xf88 <TIMER_Manager_reset+0x18>
     f74:	fc 01       	movw	r30, r24
     f76:	20 81       	ld	r18, Z
     f78:	23 30       	cpi	r18, 0x03	; 3
     f7a:	40 f4       	brcc	.+16     	; 0xf8c <TIMER_Manager_reset+0x1c>
     f7c:	21 81       	ldd	r18, Z+1	; 0x01
     f7e:	2a 30       	cpi	r18, 0x0A	; 10
     f80:	38 f4       	brcc	.+14     	; 0xf90 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     f82:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TIMER_reset>
     f86:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	08 95       	ret
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	08 95       	ret
     f90:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     f92:	08 95       	ret

00000f94 <HULTRASONIC_vidTrigger>:
 * input param 	: void
 * return		: void
 * */
static void HULTRASONIC_vidTrigger(void)
{
	(void) DIO_writePIN(TRIG_PIN, STD_HIGH);
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	63 e0       	ldi	r22, 0x03	; 3
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9e:	8a e1       	ldi	r24, 0x1A	; 26
     fa0:	8a 95       	dec	r24
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <HULTRASONIC_vidTrigger+0xc>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <HULTRASONIC_vidTrigger+0x12>
	_delay_us(10);
	(void) DIO_writePIN(TRIG_PIN, STD_LOW);
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	63 e0       	ldi	r22, 0x03	; 3
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>
     fb0:	08 95       	ret

00000fb2 <HULTRASONIC_vidTimerCBF>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
     fb2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <g_v_u16_ovfCounts>
     fb6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <g_v_u16_ovfCounts+0x1>
     fba:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <g_v_u16_ovfCounts+0x2>
     fbe:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <g_v_u16_ovfCounts+0x3>
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	a1 1d       	adc	r26, r1
     fc6:	b1 1d       	adc	r27, r1
     fc8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <g_v_u16_ovfCounts>
     fcc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <g_v_u16_ovfCounts+0x1>
     fd0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <g_v_u16_ovfCounts+0x2>
     fd4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <g_v_u16_ovfCounts+0x3>
     fd8:	08 95       	ret

00000fda <HULTRASONIC_vidSigCalc>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidSigCalc(void)
{
	if (g_v_u8_flag == 0)
     fda:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <g_v_u8_flag>
     fde:	81 11       	cpse	r24, r1
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <HULTRASONIC_vidSigCalc+0x30>
	{
		MTIMER_vidResetTCNT();
     fe2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <MTIMER_vidResetTCNT>
		(void) vidExtInt_init(INT_2 , FALL_EDGE);
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	0e 94 b7 09 	call	0x136e	; 0x136e <vidExtInt_init>
		g_v_u8_flag = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
     ff4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <g_v_u16_ovfCounts>
     ff8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <g_v_u16_ovfCounts+0x1>
     ffc:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <g_v_u16_ovfCounts+0x2>
    1000:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <g_v_u16_ovfCounts+0x3>
		(void) vidTimer2_start();	
    1004:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vidTimer2_start>
    1008:	08 95       	ret
	}
	else if (g_v_u8_flag == 1)
    100a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <g_v_u8_flag>
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	09 f0       	breq	.+2      	; 0x1014 <HULTRASONIC_vidSigCalc+0x3a>
    1012:	50 c0       	rjmp	.+160    	; 0x10b4 <HULTRASONIC_vidSigCalc+0xda>
	{
		vidTimer2_stop();
    1014:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <vidTimer2_stop>
		g_v_u8_cap = MTIMER_u8GetTCNT();
    1018:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <MTIMER_u8GetTCNT>
    101c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <g_v_u8_cap>
		g_v_u16_ovf = g_v_u16_ovfCounts;
    1020:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <g_v_u16_ovfCounts>
    1024:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <g_v_u16_ovfCounts+0x1>
    1028:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <g_v_u16_ovfCounts+0x2>
    102c:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <g_v_u16_ovfCounts+0x3>
    1030:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <g_v_u16_ovf>
    1034:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <g_v_u16_ovf+0x1>
    1038:	a0 93 69 01 	sts	0x0169, r26	; 0x800169 <g_v_u16_ovf+0x2>
    103c:	b0 93 6a 01 	sts	0x016A, r27	; 0x80016a <g_v_u16_ovf+0x3>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*g_v_u16_ovf);
    1040:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <g_v_u8_cap>
    1044:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <g_v_u16_ovf>
    1048:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <g_v_u16_ovf+0x1>
    104c:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <g_v_u16_ovf+0x2>
    1050:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <g_v_u16_ovf+0x3>
    1054:	ba 2f       	mov	r27, r26
    1056:	a9 2f       	mov	r26, r25
    1058:	98 2f       	mov	r25, r24
    105a:	88 27       	eor	r24, r24
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	62 0f       	add	r22, r18
    1062:	71 1d       	adc	r23, r1
    1064:	81 1d       	adc	r24, r1
    1066:	91 1d       	adc	r25, r1
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 62.5 ns -> 62.5e-9 sec
			 total_time = t_ticks * 62.5e-9 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 62.5e-9) -> (t_ticks / 932.95)
		 */		
		global_f64distance = (float64_t)global_u32Ticks / 932.95;
    1068:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__floatunsisf>
    106c:	2d ec       	ldi	r18, 0xCD	; 205
    106e:	3c e3       	ldi	r19, 0x3C	; 60
    1070:	49 e6       	ldi	r20, 0x69	; 105
    1072:	54 e4       	ldi	r21, 0x44	; 68
    1074:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__divsf3>
    1078:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <global_f64distance>
    107c:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <global_f64distance+0x1>
    1080:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <global_f64distance+0x2>
    1084:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
    1088:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <g_v_u16_ovf>
    108c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <g_v_u16_ovf+0x1>
    1090:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <g_v_u16_ovf+0x2>
    1094:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <g_v_u16_ovf+0x3>
    1098:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <g_v_u16_ovfCounts>
    109c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <g_v_u16_ovfCounts+0x1>
    10a0:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <g_v_u16_ovfCounts+0x2>
    10a4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <g_v_u16_ovfCounts+0x3>
    10a8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		(void) vidExtInt_init(INT_2 , RISE_EDGE);
    10ac:	63 e0       	ldi	r22, 0x03	; 3
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	0e 94 b7 09 	call	0x136e	; 0x136e <vidExtInt_init>
    10b4:	08 95       	ret

000010b6 <HULTRASONIC_vidInit>:
 * Param		: void
 * return		: void
 * */
void HULTRASONIC_vidInit(void)
{
	(void) DIO_init(TRIG_PIN, STD_OUTPUT);
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	63 e0       	ldi	r22, 0x03	; 3
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
	(void) DIO_init(SIG_PIN, STD_INPUT);
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_init>
	(void) DIO_writePIN(SIG_PIN, STD_LOW);
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_writePIN>

	(void) vidExtInt_init(INT_2 , RISE_EDGE);
    10d4:	63 e0       	ldi	r22, 0x03	; 3
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	0e 94 b7 09 	call	0x136e	; 0x136e <vidExtInt_init>

	(void) enuTimer2_init (OVF_MODE);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <enuTimer2_init>
	(void) u8Timer2_setPrescallar(TIMER_PRE_1);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <u8Timer2_setPrescallar>
    10e8:	08 95       	ret

000010ea <HULTRASONIC_vidInterruptEnable>:
}

void HULTRASONIC_vidInterruptEnable(void)
{
	(void) vidTimer2_OvfIrqEnable();
    10ea:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vidTimer2_OvfIrqEnable>
	MEXTINT2_vidEnableInterrupt();
    10ee:	0e 94 4d 0a 	call	0x149a	; 0x149a <MEXTINT2_vidEnableInterrupt>
	MTIMER_vidEnableGlobalInterrupt();
    10f2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <MTIMER_vidEnableGlobalInterrupt>
    10f6:	08 95       	ret

000010f8 <HULTRASONIC_vidInterruptDisable>:
}

void HULTRASONIC_vidInterruptDisable(void)
{
	(void) vidTimer2_OvfIrqDisable();
    10f8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <vidTimer2_OvfIrqDisable>
	MEXTINT2_vidDisableInterrupt();
    10fc:	0e 94 49 0a 	call	0x1492	; 0x1492 <MEXTINT2_vidDisableInterrupt>
    1100:	08 95       	ret

00001102 <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
    1102:	0e 94 ca 07 	call	0xf94	; 0xf94 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
    1106:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <global_f64distance>
    110a:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <global_f64distance+0x1>
    110e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <global_f64distance+0x2>
    1112:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <global_f64distance+0x3>
}
    1116:	08 95       	ret

00001118 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
    1118:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vidTimer2_setcbf_OVF>
    111c:	08 95       	ret

0000111e <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
    111e:	0e 94 39 0a 	call	0x1472	; 0x1472 <MEXTINT_vidCallBackFunc>
    1122:	08 95       	ret

00001124 <main>:

#include "APP/app.h"

int main(void)
{
    APP_vidInit();
    1124:	0e 94 76 00 	call	0xec	; 0xec <APP_vidInit>
    /* Replace with your application code */
    while (1) 
    {
        APP_vidStart();
    1128:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <APP_vidStart>
    112c:	fd cf       	rjmp	.-6      	; 0x1128 <main+0x4>

0000112e <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
    112e:	68 30       	cpi	r22, 0x08	; 8
    1130:	a0 f5       	brcc	.+104    	; 0x119a <DIO_init+0x6c>
	{
		if (port == porta)
    1132:	81 11       	cpse	r24, r1
    1134:	0b c0       	rjmp	.+22     	; 0x114c <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
    1136:	8a b3       	in	r24, 0x1a	; 26
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_init+0x12>
    113c:	44 0f       	add	r20, r20
    113e:	55 1f       	adc	r21, r21
    1140:	6a 95       	dec	r22
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_init+0xe>
    1144:	48 2b       	or	r20, r24
    1146:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret
		}
		else if (port == portb)
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	59 f4       	brne	.+22     	; 0x1166 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
    1150:	87 b3       	in	r24, 0x17	; 23
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_init+0x2c>
    1156:	44 0f       	add	r20, r20
    1158:	55 1f       	adc	r21, r21
    115a:	6a 95       	dec	r22
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_init+0x28>
    115e:	48 2b       	or	r20, r24
    1160:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	08 95       	ret
		}
		else if (port == portc)
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	59 f4       	brne	.+22     	; 0x1180 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
    116a:	84 b3       	in	r24, 0x14	; 20
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_init+0x46>
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	6a 95       	dec	r22
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_init+0x42>
    1178:	48 2b       	or	r20, r24
    117a:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret
		}
		else if (port == portd)
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	69 f4       	brne	.+26     	; 0x119e <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
    1184:	81 b3       	in	r24, 0x11	; 17
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_init+0x60>
    118a:	44 0f       	add	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	6a 95       	dec	r22
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_init+0x5c>
    1192:	48 2b       	or	r20, r24
    1194:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    119e:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    11a0:	08 95       	ret

000011a2 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
    11a2:	68 30       	cpi	r22, 0x08	; 8
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <DIO_writePIN+0x6>
    11a6:	74 c0       	rjmp	.+232    	; 0x1290 <DIO_writePIN+0xee>
	{
		if (port == porta)
    11a8:	81 11       	cpse	r24, r1
    11aa:	1b c0       	rjmp	.+54     	; 0x11e2 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
    11ac:	41 30       	cpi	r20, 0x01	; 1
    11ae:	61 f4       	brne	.+24     	; 0x11c8 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
    11b0:	2b b3       	in	r18, 0x1b	; 27
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_writePIN+0x1a>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	6a 95       	dec	r22
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_writePIN+0x16>
    11c0:	82 2b       	or	r24, r18
    11c2:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
    11c8:	2b b3       	in	r18, 0x1b	; 27
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_writePIN+0x32>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	6a 95       	dec	r22
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_writePIN+0x2e>
    11d8:	80 95       	com	r24
    11da:	82 23       	and	r24, r18
    11dc:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	08 95       	ret
		}
		else if (port == portb)
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	d9 f4       	brne	.+54     	; 0x121c <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
    11e6:	41 30       	cpi	r20, 0x01	; 1
    11e8:	61 f4       	brne	.+24     	; 0x1202 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
    11ea:	28 b3       	in	r18, 0x18	; 24
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_writePIN+0x54>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	6a 95       	dec	r22
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_writePIN+0x50>
    11fa:	82 2b       	or	r24, r18
    11fc:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
    1202:	28 b3       	in	r18, 0x18	; 24
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_writePIN+0x6c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	6a 95       	dec	r22
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_writePIN+0x68>
    1212:	80 95       	com	r24
    1214:	82 23       	and	r24, r18
    1216:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	08 95       	ret
		}
		else if (port == portc)
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	d9 f4       	brne	.+54     	; 0x1256 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
    1220:	41 30       	cpi	r20, 0x01	; 1
    1222:	61 f4       	brne	.+24     	; 0x123c <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
    1224:	25 b3       	in	r18, 0x15	; 21
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_writePIN+0x8e>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	6a 95       	dec	r22
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_writePIN+0x8a>
    1234:	82 2b       	or	r24, r18
    1236:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
    123c:	25 b3       	in	r18, 0x15	; 21
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_writePIN+0xa6>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	6a 95       	dec	r22
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_writePIN+0xa2>
    124c:	80 95       	com	r24
    124e:	82 23       	and	r24, r18
    1250:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret
		}
		else if (port == portd)
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	e9 f4       	brne	.+58     	; 0x1294 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
    125a:	41 30       	cpi	r20, 0x01	; 1
    125c:	61 f4       	brne	.+24     	; 0x1276 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
    125e:	22 b3       	in	r18, 0x12	; 18
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_writePIN+0xc8>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	6a 95       	dec	r22
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_writePIN+0xc4>
    126e:	82 2b       	or	r24, r18
    1270:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
    1276:	22 b3       	in	r18, 0x12	; 18
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_writePIN+0xe0>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	6a 95       	dec	r22
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_writePIN+0xdc>
    1286:	80 95       	com	r24
    1288:	82 23       	and	r24, r18
    128a:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    1294:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
    1296:	08 95       	ret

00001298 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
    1298:	68 30       	cpi	r22, 0x08	; 8
    129a:	08 f0       	brcs	.+2      	; 0x129e <DIO_readPIN+0x6>
    129c:	64 c0       	rjmp	.+200    	; 0x1366 <DIO_readPIN+0xce>
	{
		if (port == porta)
    129e:	81 11       	cpse	r24, r1
    12a0:	17 c0       	rjmp	.+46     	; 0x12d0 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
    12a2:	79 b3       	in	r23, 0x19	; 25
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9c 01       	movw	r18, r24
    12aa:	06 2e       	mov	r0, r22
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_readPIN+0x1a>
    12ae:	22 0f       	add	r18, r18
    12b0:	33 1f       	adc	r19, r19
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_readPIN+0x16>
    12b6:	87 2f       	mov	r24, r23
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	82 23       	and	r24, r18
    12bc:	93 23       	and	r25, r19
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_readPIN+0x2c>
    12c0:	96 95       	lsr	r25
    12c2:	87 95       	ror	r24
    12c4:	6a 95       	dec	r22
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_readPIN+0x28>
    12c8:	fa 01       	movw	r30, r20
    12ca:	80 83       	st	Z, r24
			return DIO_E_OK;
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret
		}
		else if (port == portb)
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	b9 f4       	brne	.+46     	; 0x1302 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
    12d4:	76 b3       	in	r23, 0x16	; 22
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9c 01       	movw	r18, r24
    12dc:	06 2e       	mov	r0, r22
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_readPIN+0x4c>
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_readPIN+0x48>
    12e8:	87 2f       	mov	r24, r23
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	82 23       	and	r24, r18
    12ee:	93 23       	and	r25, r19
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_readPIN+0x5e>
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	6a 95       	dec	r22
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_readPIN+0x5a>
    12fa:	fa 01       	movw	r30, r20
    12fc:	80 83       	st	Z, r24
			return DIO_E_OK;
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
		}
		else if (port == portc)
    1302:	82 30       	cpi	r24, 0x02	; 2
    1304:	b9 f4       	brne	.+46     	; 0x1334 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
    1306:	73 b3       	in	r23, 0x13	; 19
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 01       	movw	r18, r24
    130e:	06 2e       	mov	r0, r22
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_readPIN+0x7e>
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_readPIN+0x7a>
    131a:	87 2f       	mov	r24, r23
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	82 23       	and	r24, r18
    1320:	93 23       	and	r25, r19
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_readPIN+0x90>
    1324:	96 95       	lsr	r25
    1326:	87 95       	ror	r24
    1328:	6a 95       	dec	r22
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_readPIN+0x8c>
    132c:	fa 01       	movw	r30, r20
    132e:	80 83       	st	Z, r24
			return DIO_E_OK;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret
		}
		else if (port == portd)
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	c9 f4       	brne	.+50     	; 0x136a <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
    1338:	70 b3       	in	r23, 0x10	; 16
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9c 01       	movw	r18, r24
    1340:	06 2e       	mov	r0, r22
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_readPIN+0xb0>
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_readPIN+0xac>
    134c:	87 2f       	mov	r24, r23
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	82 23       	and	r24, r18
    1352:	93 23       	and	r25, r19
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_readPIN+0xc2>
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	6a 95       	dec	r22
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_readPIN+0xbe>
    135e:	fa 01       	movw	r30, r20
    1360:	80 83       	st	Z, r24
			return DIO_E_OK;
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
    136a:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
    136c:	08 95       	ret

0000136e <vidExtInt_init>:
 * return		: void
 * */
void MEXTINT_vidWaitFlag(void)
{
	while( !( READ_BIT(GIFR_REG, INTF0) ) );
}
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	08 f0       	brcs	.+2      	; 0x1374 <vidExtInt_init+0x6>
    1372:	70 c0       	rjmp	.+224    	; 0x1454 <vidExtInt_init+0xe6>
    1374:	64 30       	cpi	r22, 0x04	; 4
    1376:	08 f0       	brcs	.+2      	; 0x137a <vidExtInt_init+0xc>
    1378:	6f c0       	rjmp	.+222    	; 0x1458 <vidExtInt_init+0xea>
    137a:	81 11       	cpse	r24, r1
    137c:	28 c0       	rjmp	.+80     	; 0x13ce <vidExtInt_init+0x60>
    137e:	61 30       	cpi	r22, 0x01	; 1
    1380:	71 f0       	breq	.+28     	; 0x139e <vidExtInt_init+0x30>
    1382:	28 f0       	brcs	.+10     	; 0x138e <vidExtInt_init+0x20>
    1384:	62 30       	cpi	r22, 0x02	; 2
    1386:	99 f0       	breq	.+38     	; 0x13ae <vidExtInt_init+0x40>
    1388:	63 30       	cpi	r22, 0x03	; 3
    138a:	c9 f0       	breq	.+50     	; 0x13be <vidExtInt_init+0x50>
    138c:	67 c0       	rjmp	.+206    	; 0x145c <vidExtInt_init+0xee>
    138e:	85 b7       	in	r24, 0x35	; 53
    1390:	8e 7f       	andi	r24, 0xFE	; 254
    1392:	85 bf       	out	0x35, r24	; 53
    1394:	85 b7       	in	r24, 0x35	; 53
    1396:	8d 7f       	andi	r24, 0xFD	; 253
    1398:	85 bf       	out	0x35, r24	; 53
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	08 95       	ret
    139e:	85 b7       	in	r24, 0x35	; 53
    13a0:	81 60       	ori	r24, 0x01	; 1
    13a2:	85 bf       	out	0x35, r24	; 53
    13a4:	85 b7       	in	r24, 0x35	; 53
    13a6:	8d 7f       	andi	r24, 0xFD	; 253
    13a8:	85 bf       	out	0x35, r24	; 53
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
    13ae:	85 b7       	in	r24, 0x35	; 53
    13b0:	8e 7f       	andi	r24, 0xFE	; 254
    13b2:	85 bf       	out	0x35, r24	; 53
    13b4:	85 b7       	in	r24, 0x35	; 53
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	85 bf       	out	0x35, r24	; 53
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	08 95       	ret
    13be:	85 b7       	in	r24, 0x35	; 53
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	85 bf       	out	0x35, r24	; 53
    13c4:	85 b7       	in	r24, 0x35	; 53
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	85 bf       	out	0x35, r24	; 53
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	81 f5       	brne	.+96     	; 0x1432 <vidExtInt_init+0xc4>
    13d2:	61 30       	cpi	r22, 0x01	; 1
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <vidExtInt_init+0x84>
    13d6:	28 f0       	brcs	.+10     	; 0x13e2 <vidExtInt_init+0x74>
    13d8:	62 30       	cpi	r22, 0x02	; 2
    13da:	99 f0       	breq	.+38     	; 0x1402 <vidExtInt_init+0x94>
    13dc:	63 30       	cpi	r22, 0x03	; 3
    13de:	c9 f0       	breq	.+50     	; 0x1412 <vidExtInt_init+0xa4>
    13e0:	20 c0       	rjmp	.+64     	; 0x1422 <vidExtInt_init+0xb4>
    13e2:	85 b7       	in	r24, 0x35	; 53
    13e4:	8b 7f       	andi	r24, 0xFB	; 251
    13e6:	85 bf       	out	0x35, r24	; 53
    13e8:	85 b7       	in	r24, 0x35	; 53
    13ea:	87 7f       	andi	r24, 0xF7	; 247
    13ec:	85 bf       	out	0x35, r24	; 53
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	19 c0       	rjmp	.+50     	; 0x1424 <vidExtInt_init+0xb6>
    13f2:	85 b7       	in	r24, 0x35	; 53
    13f4:	84 60       	ori	r24, 0x04	; 4
    13f6:	85 bf       	out	0x35, r24	; 53
    13f8:	85 b7       	in	r24, 0x35	; 53
    13fa:	87 7f       	andi	r24, 0xF7	; 247
    13fc:	85 bf       	out	0x35, r24	; 53
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	11 c0       	rjmp	.+34     	; 0x1424 <vidExtInt_init+0xb6>
    1402:	85 b7       	in	r24, 0x35	; 53
    1404:	8b 7f       	andi	r24, 0xFB	; 251
    1406:	85 bf       	out	0x35, r24	; 53
    1408:	85 b7       	in	r24, 0x35	; 53
    140a:	88 60       	ori	r24, 0x08	; 8
    140c:	85 bf       	out	0x35, r24	; 53
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <vidExtInt_init+0xb6>
    1412:	85 b7       	in	r24, 0x35	; 53
    1414:	84 60       	ori	r24, 0x04	; 4
    1416:	85 bf       	out	0x35, r24	; 53
    1418:	85 b7       	in	r24, 0x35	; 53
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	85 bf       	out	0x35, r24	; 53
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <vidExtInt_init+0xb6>
    1422:	84 e0       	ldi	r24, 0x04	; 4
    1424:	9b b7       	in	r25, 0x3b	; 59
    1426:	90 68       	ori	r25, 0x80	; 128
    1428:	9b bf       	out	0x3b, r25	; 59
    142a:	9a b7       	in	r25, 0x3a	; 58
    142c:	90 68       	ori	r25, 0x80	; 128
    142e:	9a bf       	out	0x3a, r25	; 58
    1430:	08 95       	ret
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	a9 f4       	brne	.+42     	; 0x1460 <vidExtInt_init+0xf2>
    1436:	62 30       	cpi	r22, 0x02	; 2
    1438:	19 f0       	breq	.+6      	; 0x1440 <vidExtInt_init+0xd2>
    143a:	63 30       	cpi	r22, 0x03	; 3
    143c:	31 f0       	breq	.+12     	; 0x144a <vidExtInt_init+0xdc>
    143e:	12 c0       	rjmp	.+36     	; 0x1464 <vidExtInt_init+0xf6>
    1440:	84 b7       	in	r24, 0x34	; 52
    1442:	8f 7b       	andi	r24, 0xBF	; 191
    1444:	84 bf       	out	0x34, r24	; 52
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	08 95       	ret
    144a:	84 b7       	in	r24, 0x34	; 52
    144c:	80 64       	ori	r24, 0x40	; 64
    144e:	84 bf       	out	0x34, r24	; 52
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	08 95       	ret
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	08 95       	ret
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	08 95       	ret
    145c:	84 e0       	ldi	r24, 0x04	; 4
    145e:	08 95       	ret
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	08 95       	ret
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	08 95       	ret

00001468 <MEXTINT_vidCallBackFuncInt0>:
    1468:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <callBackFuncInt0+0x1>
    146c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <callBackFuncInt0>
    1470:	08 95       	ret

00001472 <MEXTINT_vidCallBackFunc>:
    1472:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <callBack+0x1>
    1476:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <callBack>
    147a:	08 95       	ret

0000147c <MEXTINT_vidDisableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT0);
    147c:	8b b7       	in	r24, 0x3b	; 59
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	8b bf       	out	0x3b, r24	; 59
    1482:	08 95       	ret

00001484 <MEXTINT_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT_vidEnableInterrupt(void)
{
	SET_BIT(GIFR_REG, INTF0);
    1484:	8a b7       	in	r24, 0x3a	; 58
    1486:	80 64       	ori	r24, 0x40	; 64
    1488:	8a bf       	out	0x3a, r24	; 58
	SET_BIT(GICR_REG, INT0);
    148a:	8b b7       	in	r24, 0x3b	; 59
    148c:	80 64       	ori	r24, 0x40	; 64
    148e:	8b bf       	out	0x3b, r24	; 59
    1490:	08 95       	ret

00001492 <MEXTINT2_vidDisableInterrupt>:
}

void MEXTINT2_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT2);
    1492:	8b b7       	in	r24, 0x3b	; 59
    1494:	8f 7d       	andi	r24, 0xDF	; 223
    1496:	8b bf       	out	0x3b, r24	; 59
    1498:	08 95       	ret

0000149a <MEXTINT2_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT2_vidEnableInterrupt(void)
{
		SET_BIT(GICR_REG, INT2);
    149a:	8b b7       	in	r24, 0x3b	; 59
    149c:	80 62       	ori	r24, 0x20	; 32
    149e:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR_REG, INTF2);
    14a0:	8a b7       	in	r24, 0x3a	; 58
    14a2:	80 62       	ori	r24, 0x20	; 32
    14a4:	8a bf       	out	0x3a, r24	; 58
    14a6:	08 95       	ret

000014a8 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
	callBackFuncInt0();
    14ca:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <callBackFuncInt0>
    14ce:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <callBackFuncInt0+0x1>
    14d2:	09 95       	icall
}
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_2>:

ISR(INT1_vect)
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
	callBackFunc();
    1518:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <callBackFunc>
    151c:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <callBackFunc+0x1>
    1520:	09 95       	icall
}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <__vector_3>:

ISR(INT2_vect)
{
    1544:	1f 92       	push	r1
    1546:	0f 92       	push	r0
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	0f 92       	push	r0
    154c:	11 24       	eor	r1, r1
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
	callBack();
    1566:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <callBack>
    156a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <callBack+0x1>
    156e:	09 95       	icall
}
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
    15b4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <sg_Timer0_callBackPtr>
    15b8:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <sg_Timer0_callBackPtr+0x1>
    15bc:	89 2b       	or	r24, r25
    15be:	41 f0       	breq	.+16     	; 0x15d0 <__vector_11+0x3e>
    15c0:	88 b7       	in	r24, 0x38	; 56
    15c2:	8e 7f       	andi	r24, 0xFE	; 254
    15c4:	88 bf       	out	0x38, r24	; 56
    15c6:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <sg_Timer0_callBackPtr>
    15ca:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <sg_Timer0_callBackPtr+0x1>
    15ce:	09 95       	icall
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_9>:
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <sg_Timer1_callBackPtr>
    1618:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <sg_Timer1_callBackPtr+0x1>
    161c:	89 2b       	or	r24, r25
    161e:	41 f0       	breq	.+16     	; 0x1630 <__vector_9+0x3e>
    1620:	88 b7       	in	r24, 0x38	; 56
    1622:	8b 7f       	andi	r24, 0xFB	; 251
    1624:	88 bf       	out	0x38, r24	; 56
    1626:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <sg_Timer1_callBackPtr>
    162a:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <sg_Timer1_callBackPtr+0x1>
    162e:	09 95       	icall
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <TIMER_init>:
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	09 f4       	brne	.+2      	; 0x1658 <TIMER_init+0x6>
    1656:	78 c0       	rjmp	.+240    	; 0x1748 <TIMER_init+0xf6>
    1658:	fc 01       	movw	r30, r24
    165a:	20 81       	ld	r18, Z
    165c:	23 30       	cpi	r18, 0x03	; 3
    165e:	08 f0       	brcs	.+2      	; 0x1662 <TIMER_init+0x10>
    1660:	75 c0       	rjmp	.+234    	; 0x174c <TIMER_init+0xfa>
    1662:	31 81       	ldd	r19, Z+1	; 0x01
    1664:	3a 30       	cpi	r19, 0x0A	; 10
    1666:	08 f0       	brcs	.+2      	; 0x166a <TIMER_init+0x18>
    1668:	73 c0       	rjmp	.+230    	; 0x1750 <TIMER_init+0xfe>
    166a:	21 30       	cpi	r18, 0x01	; 1
    166c:	19 f1       	breq	.+70     	; 0x16b4 <TIMER_init+0x62>
    166e:	20 f0       	brcs	.+8      	; 0x1678 <TIMER_init+0x26>
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	09 f4       	brne	.+2      	; 0x1676 <TIMER_init+0x24>
    1674:	50 c0       	rjmp	.+160    	; 0x1716 <TIMER_init+0xc4>
    1676:	6e c0       	rjmp	.+220    	; 0x1754 <TIMER_init+0x102>
    1678:	12 be       	out	0x32, r1	; 50
    167a:	13 be       	out	0x33, r1	; 51
    167c:	1c be       	out	0x3c, r1	; 60
    167e:	fc 01       	movw	r30, r24
    1680:	22 81       	ldd	r18, Z+2	; 0x02
    1682:	22 bf       	out	0x32, r18	; 50
    1684:	23 b7       	in	r18, 0x33	; 51
    1686:	20 68       	ori	r18, 0x80	; 128
    1688:	23 bf       	out	0x33, r18	; 51
    168a:	23 b7       	in	r18, 0x33	; 51
    168c:	2f 7b       	andi	r18, 0xBF	; 191
    168e:	23 bf       	out	0x33, r18	; 51
    1690:	23 b7       	in	r18, 0x33	; 51
    1692:	27 7f       	andi	r18, 0xF7	; 247
    1694:	23 bf       	out	0x33, r18	; 51
    1696:	23 b7       	in	r18, 0x33	; 51
    1698:	2f 7e       	andi	r18, 0xEF	; 239
    169a:	23 bf       	out	0x33, r18	; 51
    169c:	23 b7       	in	r18, 0x33	; 51
    169e:	2f 7d       	andi	r18, 0xDF	; 223
    16a0:	23 bf       	out	0x33, r18	; 51
    16a2:	84 81       	ldd	r24, Z+4	; 0x04
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	09 f0       	breq	.+2      	; 0x16aa <TIMER_init+0x58>
    16a8:	57 c0       	rjmp	.+174    	; 0x1758 <TIMER_init+0x106>
    16aa:	89 b7       	in	r24, 0x39	; 57
    16ac:	81 60       	ori	r24, 0x01	; 1
    16ae:	89 bf       	out	0x39, r24	; 57
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	08 95       	ret
    16b4:	1c bc       	out	0x2c, r1	; 44
    16b6:	1d bc       	out	0x2d, r1	; 45
    16b8:	1f bc       	out	0x2f, r1	; 47
    16ba:	1e bc       	out	0x2e, r1	; 46
    16bc:	1b bc       	out	0x2b, r1	; 43
    16be:	1a bc       	out	0x2a, r1	; 42
    16c0:	fc 01       	movw	r30, r24
    16c2:	22 81       	ldd	r18, Z+2	; 0x02
    16c4:	33 81       	ldd	r19, Z+3	; 0x03
    16c6:	3d bd       	out	0x2d, r19	; 45
    16c8:	2c bd       	out	0x2c, r18	; 44
    16ca:	2f b5       	in	r18, 0x2f	; 47
    16cc:	28 60       	ori	r18, 0x08	; 8
    16ce:	2f bd       	out	0x2f, r18	; 47
    16d0:	2f b5       	in	r18, 0x2f	; 47
    16d2:	24 60       	ori	r18, 0x04	; 4
    16d4:	2f bd       	out	0x2f, r18	; 47
    16d6:	2f b5       	in	r18, 0x2f	; 47
    16d8:	2e 7f       	andi	r18, 0xFE	; 254
    16da:	2f bd       	out	0x2f, r18	; 47
    16dc:	2f b5       	in	r18, 0x2f	; 47
    16de:	2d 7f       	andi	r18, 0xFD	; 253
    16e0:	2f bd       	out	0x2f, r18	; 47
    16e2:	2e b5       	in	r18, 0x2e	; 46
    16e4:	2f 7e       	andi	r18, 0xEF	; 239
    16e6:	2e bd       	out	0x2e, r18	; 46
    16e8:	2e b5       	in	r18, 0x2e	; 46
    16ea:	27 7f       	andi	r18, 0xF7	; 247
    16ec:	2e bd       	out	0x2e, r18	; 46
    16ee:	2f b5       	in	r18, 0x2f	; 47
    16f0:	2f 7b       	andi	r18, 0xBF	; 191
    16f2:	2f bd       	out	0x2f, r18	; 47
    16f4:	2f b5       	in	r18, 0x2f	; 47
    16f6:	2f 77       	andi	r18, 0x7F	; 127
    16f8:	2f bd       	out	0x2f, r18	; 47
    16fa:	2f b5       	in	r18, 0x2f	; 47
    16fc:	2f 7e       	andi	r18, 0xEF	; 239
    16fe:	2f bd       	out	0x2f, r18	; 47
    1700:	2f b5       	in	r18, 0x2f	; 47
    1702:	2f 7d       	andi	r18, 0xDF	; 223
    1704:	2f bd       	out	0x2f, r18	; 47
    1706:	84 81       	ldd	r24, Z+4	; 0x04
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	41 f5       	brne	.+80     	; 0x175c <TIMER_init+0x10a>
    170c:	89 b7       	in	r24, 0x39	; 57
    170e:	84 60       	ori	r24, 0x04	; 4
    1710:	89 bf       	out	0x39, r24	; 57
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	08 95       	ret
    1716:	14 bc       	out	0x24, r1	; 36
    1718:	15 bc       	out	0x25, r1	; 37
    171a:	13 bc       	out	0x23, r1	; 35
    171c:	14 bc       	out	0x24, r1	; 36
    171e:	25 b5       	in	r18, 0x25	; 37
    1720:	2f 7b       	andi	r18, 0xBF	; 191
    1722:	25 bd       	out	0x25, r18	; 37
    1724:	25 b5       	in	r18, 0x25	; 37
    1726:	27 7f       	andi	r18, 0xF7	; 247
    1728:	25 bd       	out	0x25, r18	; 37
    172a:	25 b5       	in	r18, 0x25	; 37
    172c:	2f 7e       	andi	r18, 0xEF	; 239
    172e:	25 bd       	out	0x25, r18	; 37
    1730:	25 b5       	in	r18, 0x25	; 37
    1732:	2f 7d       	andi	r18, 0xDF	; 223
    1734:	25 bd       	out	0x25, r18	; 37
    1736:	fc 01       	movw	r30, r24
    1738:	84 81       	ldd	r24, Z+4	; 0x04
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	89 f4       	brne	.+34     	; 0x1760 <TIMER_init+0x10e>
    173e:	89 b7       	in	r24, 0x39	; 57
    1740:	80 64       	ori	r24, 0x40	; 64
    1742:	89 bf       	out	0x39, r24	; 57
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	08 95       	ret
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	08 95       	ret
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	08 95       	ret
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	08 95       	ret
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	08 95       	ret
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	08 95       	ret
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	08 95       	ret
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	08 95       	ret

00001764 <TIMER_start>:
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	09 f4       	brne	.+2      	; 0x176a <TIMER_start+0x6>
    1768:	3b c1       	rjmp	.+630    	; 0x19e0 <TIMER_start+0x27c>
    176a:	dc 01       	movw	r26, r24
    176c:	2c 91       	ld	r18, X
    176e:	23 30       	cpi	r18, 0x03	; 3
    1770:	08 f0       	brcs	.+2      	; 0x1774 <TIMER_start+0x10>
    1772:	38 c1       	rjmp	.+624    	; 0x19e4 <TIMER_start+0x280>
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	ec 91       	ld	r30, X
    1778:	ea 30       	cpi	r30, 0x0A	; 10
    177a:	08 f0       	brcs	.+2      	; 0x177e <TIMER_start+0x1a>
    177c:	35 c1       	rjmp	.+618    	; 0x19e8 <TIMER_start+0x284>
    177e:	21 30       	cpi	r18, 0x01	; 1
    1780:	09 f4       	brne	.+2      	; 0x1784 <TIMER_start+0x20>
    1782:	68 c0       	rjmp	.+208    	; 0x1854 <TIMER_start+0xf0>
    1784:	20 f0       	brcs	.+8      	; 0x178e <TIMER_start+0x2a>
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	09 f4       	brne	.+2      	; 0x178c <TIMER_start+0x28>
    178a:	c7 c0       	rjmp	.+398    	; 0x191a <TIMER_start+0x1b6>
    178c:	2f c1       	rjmp	.+606    	; 0x19ec <TIMER_start+0x288>
    178e:	8e 2f       	mov	r24, r30
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	8a 30       	cpi	r24, 0x0A	; 10
    1794:	91 05       	cpc	r25, r1
    1796:	08 f0       	brcs	.+2      	; 0x179a <TIMER_start+0x36>
    1798:	2b c1       	rjmp	.+598    	; 0x19f0 <TIMER_start+0x28c>
    179a:	fc 01       	movw	r30, r24
    179c:	e6 5d       	subi	r30, 0xD6	; 214
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__tablejump2__>
    17a4:	83 b7       	in	r24, 0x33	; 51
    17a6:	8e 7f       	andi	r24, 0xFE	; 254
    17a8:	83 bf       	out	0x33, r24	; 51
    17aa:	83 b7       	in	r24, 0x33	; 51
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	83 bf       	out	0x33, r24	; 51
    17b0:	83 b7       	in	r24, 0x33	; 51
    17b2:	8b 7f       	andi	r24, 0xFB	; 251
    17b4:	83 bf       	out	0x33, r24	; 51
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	08 95       	ret
    17ba:	83 b7       	in	r24, 0x33	; 51
    17bc:	81 60       	ori	r24, 0x01	; 1
    17be:	83 bf       	out	0x33, r24	; 51
    17c0:	83 b7       	in	r24, 0x33	; 51
    17c2:	8d 7f       	andi	r24, 0xFD	; 253
    17c4:	83 bf       	out	0x33, r24	; 51
    17c6:	83 b7       	in	r24, 0x33	; 51
    17c8:	8b 7f       	andi	r24, 0xFB	; 251
    17ca:	83 bf       	out	0x33, r24	; 51
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	08 95       	ret
    17d0:	83 b7       	in	r24, 0x33	; 51
    17d2:	8e 7f       	andi	r24, 0xFE	; 254
    17d4:	83 bf       	out	0x33, r24	; 51
    17d6:	83 b7       	in	r24, 0x33	; 51
    17d8:	82 60       	ori	r24, 0x02	; 2
    17da:	83 bf       	out	0x33, r24	; 51
    17dc:	83 b7       	in	r24, 0x33	; 51
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	83 bf       	out	0x33, r24	; 51
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	08 95       	ret
    17e6:	83 b7       	in	r24, 0x33	; 51
    17e8:	81 60       	ori	r24, 0x01	; 1
    17ea:	83 bf       	out	0x33, r24	; 51
    17ec:	83 b7       	in	r24, 0x33	; 51
    17ee:	82 60       	ori	r24, 0x02	; 2
    17f0:	83 bf       	out	0x33, r24	; 51
    17f2:	83 b7       	in	r24, 0x33	; 51
    17f4:	8b 7f       	andi	r24, 0xFB	; 251
    17f6:	83 bf       	out	0x33, r24	; 51
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	08 95       	ret
    17fc:	83 b7       	in	r24, 0x33	; 51
    17fe:	8e 7f       	andi	r24, 0xFE	; 254
    1800:	83 bf       	out	0x33, r24	; 51
    1802:	83 b7       	in	r24, 0x33	; 51
    1804:	8d 7f       	andi	r24, 0xFD	; 253
    1806:	83 bf       	out	0x33, r24	; 51
    1808:	83 b7       	in	r24, 0x33	; 51
    180a:	84 60       	ori	r24, 0x04	; 4
    180c:	83 bf       	out	0x33, r24	; 51
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	08 95       	ret
    1812:	83 b7       	in	r24, 0x33	; 51
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	83 bf       	out	0x33, r24	; 51
    1818:	83 b7       	in	r24, 0x33	; 51
    181a:	8d 7f       	andi	r24, 0xFD	; 253
    181c:	83 bf       	out	0x33, r24	; 51
    181e:	83 b7       	in	r24, 0x33	; 51
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	83 bf       	out	0x33, r24	; 51
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	08 95       	ret
    1828:	83 b7       	in	r24, 0x33	; 51
    182a:	8e 7f       	andi	r24, 0xFE	; 254
    182c:	83 bf       	out	0x33, r24	; 51
    182e:	83 b7       	in	r24, 0x33	; 51
    1830:	82 60       	ori	r24, 0x02	; 2
    1832:	83 bf       	out	0x33, r24	; 51
    1834:	83 b7       	in	r24, 0x33	; 51
    1836:	84 60       	ori	r24, 0x04	; 4
    1838:	83 bf       	out	0x33, r24	; 51
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	08 95       	ret
    183e:	83 b7       	in	r24, 0x33	; 51
    1840:	81 60       	ori	r24, 0x01	; 1
    1842:	83 bf       	out	0x33, r24	; 51
    1844:	83 b7       	in	r24, 0x33	; 51
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	83 bf       	out	0x33, r24	; 51
    184a:	83 b7       	in	r24, 0x33	; 51
    184c:	84 60       	ori	r24, 0x04	; 4
    184e:	83 bf       	out	0x33, r24	; 51
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	08 95       	ret
    1854:	8e 2f       	mov	r24, r30
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	8a 30       	cpi	r24, 0x0A	; 10
    185a:	91 05       	cpc	r25, r1
    185c:	08 f0       	brcs	.+2      	; 0x1860 <TIMER_start+0xfc>
    185e:	ca c0       	rjmp	.+404    	; 0x19f4 <TIMER_start+0x290>
    1860:	fc 01       	movw	r30, r24
    1862:	ec 5c       	subi	r30, 0xCC	; 204
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__tablejump2__>
    186a:	8e b5       	in	r24, 0x2e	; 46
    186c:	8e 7f       	andi	r24, 0xFE	; 254
    186e:	8e bd       	out	0x2e, r24	; 46
    1870:	8e b5       	in	r24, 0x2e	; 46
    1872:	8d 7f       	andi	r24, 0xFD	; 253
    1874:	8e bd       	out	0x2e, r24	; 46
    1876:	8e b5       	in	r24, 0x2e	; 46
    1878:	8b 7f       	andi	r24, 0xFB	; 251
    187a:	8e bd       	out	0x2e, r24	; 46
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	08 95       	ret
    1880:	8e b5       	in	r24, 0x2e	; 46
    1882:	81 60       	ori	r24, 0x01	; 1
    1884:	8e bd       	out	0x2e, r24	; 46
    1886:	8e b5       	in	r24, 0x2e	; 46
    1888:	8d 7f       	andi	r24, 0xFD	; 253
    188a:	8e bd       	out	0x2e, r24	; 46
    188c:	8e b5       	in	r24, 0x2e	; 46
    188e:	8b 7f       	andi	r24, 0xFB	; 251
    1890:	8e bd       	out	0x2e, r24	; 46
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	08 95       	ret
    1896:	8e b5       	in	r24, 0x2e	; 46
    1898:	8e 7f       	andi	r24, 0xFE	; 254
    189a:	8e bd       	out	0x2e, r24	; 46
    189c:	8e b5       	in	r24, 0x2e	; 46
    189e:	82 60       	ori	r24, 0x02	; 2
    18a0:	8e bd       	out	0x2e, r24	; 46
    18a2:	8e b5       	in	r24, 0x2e	; 46
    18a4:	8b 7f       	andi	r24, 0xFB	; 251
    18a6:	8e bd       	out	0x2e, r24	; 46
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	08 95       	ret
    18ac:	8e b5       	in	r24, 0x2e	; 46
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	8e bd       	out	0x2e, r24	; 46
    18b2:	8e b5       	in	r24, 0x2e	; 46
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	8e bd       	out	0x2e, r24	; 46
    18b8:	8e b5       	in	r24, 0x2e	; 46
    18ba:	8b 7f       	andi	r24, 0xFB	; 251
    18bc:	8e bd       	out	0x2e, r24	; 46
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	08 95       	ret
    18c2:	8e b5       	in	r24, 0x2e	; 46
    18c4:	8e 7f       	andi	r24, 0xFE	; 254
    18c6:	8e bd       	out	0x2e, r24	; 46
    18c8:	8e b5       	in	r24, 0x2e	; 46
    18ca:	8d 7f       	andi	r24, 0xFD	; 253
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	8e b5       	in	r24, 0x2e	; 46
    18d0:	84 60       	ori	r24, 0x04	; 4
    18d2:	8e bd       	out	0x2e, r24	; 46
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	08 95       	ret
    18d8:	8e b5       	in	r24, 0x2e	; 46
    18da:	81 60       	ori	r24, 0x01	; 1
    18dc:	8e bd       	out	0x2e, r24	; 46
    18de:	8e b5       	in	r24, 0x2e	; 46
    18e0:	8d 7f       	andi	r24, 0xFD	; 253
    18e2:	8e bd       	out	0x2e, r24	; 46
    18e4:	8e b5       	in	r24, 0x2e	; 46
    18e6:	84 60       	ori	r24, 0x04	; 4
    18e8:	8e bd       	out	0x2e, r24	; 46
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	08 95       	ret
    18ee:	8e b5       	in	r24, 0x2e	; 46
    18f0:	8e 7f       	andi	r24, 0xFE	; 254
    18f2:	8e bd       	out	0x2e, r24	; 46
    18f4:	8e b5       	in	r24, 0x2e	; 46
    18f6:	82 60       	ori	r24, 0x02	; 2
    18f8:	8e bd       	out	0x2e, r24	; 46
    18fa:	8e b5       	in	r24, 0x2e	; 46
    18fc:	84 60       	ori	r24, 0x04	; 4
    18fe:	8e bd       	out	0x2e, r24	; 46
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	08 95       	ret
    1904:	8e b5       	in	r24, 0x2e	; 46
    1906:	81 60       	ori	r24, 0x01	; 1
    1908:	8e bd       	out	0x2e, r24	; 46
    190a:	8e b5       	in	r24, 0x2e	; 46
    190c:	82 60       	ori	r24, 0x02	; 2
    190e:	8e bd       	out	0x2e, r24	; 46
    1910:	8e b5       	in	r24, 0x2e	; 46
    1912:	84 60       	ori	r24, 0x04	; 4
    1914:	8e bd       	out	0x2e, r24	; 46
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	08 95       	ret
    191a:	8e 2f       	mov	r24, r30
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	91 05       	cpc	r25, r1
    1922:	08 f0       	brcs	.+2      	; 0x1926 <TIMER_start+0x1c2>
    1924:	69 c0       	rjmp	.+210    	; 0x19f8 <TIMER_start+0x294>
    1926:	fc 01       	movw	r30, r24
    1928:	e2 5c       	subi	r30, 0xC2	; 194
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__tablejump2__>
    1930:	85 b5       	in	r24, 0x25	; 37
    1932:	8b 7f       	andi	r24, 0xFB	; 251
    1934:	85 bd       	out	0x25, r24	; 37
    1936:	85 b5       	in	r24, 0x25	; 37
    1938:	8d 7f       	andi	r24, 0xFD	; 253
    193a:	85 bd       	out	0x25, r24	; 37
    193c:	85 b5       	in	r24, 0x25	; 37
    193e:	8e 7f       	andi	r24, 0xFE	; 254
    1940:	85 bd       	out	0x25, r24	; 37
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 95       	ret
    1946:	85 b5       	in	r24, 0x25	; 37
    1948:	84 60       	ori	r24, 0x04	; 4
    194a:	85 bd       	out	0x25, r24	; 37
    194c:	85 b5       	in	r24, 0x25	; 37
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	85 bd       	out	0x25, r24	; 37
    1952:	85 b5       	in	r24, 0x25	; 37
    1954:	8e 7f       	andi	r24, 0xFE	; 254
    1956:	85 bd       	out	0x25, r24	; 37
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret
    195c:	85 b5       	in	r24, 0x25	; 37
    195e:	8b 7f       	andi	r24, 0xFB	; 251
    1960:	85 bd       	out	0x25, r24	; 37
    1962:	85 b5       	in	r24, 0x25	; 37
    1964:	82 60       	ori	r24, 0x02	; 2
    1966:	85 bd       	out	0x25, r24	; 37
    1968:	85 b5       	in	r24, 0x25	; 37
    196a:	8e 7f       	andi	r24, 0xFE	; 254
    196c:	85 bd       	out	0x25, r24	; 37
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	08 95       	ret
    1972:	85 b5       	in	r24, 0x25	; 37
    1974:	84 60       	ori	r24, 0x04	; 4
    1976:	85 bd       	out	0x25, r24	; 37
    1978:	85 b5       	in	r24, 0x25	; 37
    197a:	82 60       	ori	r24, 0x02	; 2
    197c:	85 bd       	out	0x25, r24	; 37
    197e:	85 b5       	in	r24, 0x25	; 37
    1980:	8e 7f       	andi	r24, 0xFE	; 254
    1982:	85 bd       	out	0x25, r24	; 37
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	08 95       	ret
    1988:	85 b5       	in	r24, 0x25	; 37
    198a:	8b 7f       	andi	r24, 0xFB	; 251
    198c:	85 bd       	out	0x25, r24	; 37
    198e:	85 b5       	in	r24, 0x25	; 37
    1990:	8d 7f       	andi	r24, 0xFD	; 253
    1992:	85 bd       	out	0x25, r24	; 37
    1994:	85 b5       	in	r24, 0x25	; 37
    1996:	81 60       	ori	r24, 0x01	; 1
    1998:	85 bd       	out	0x25, r24	; 37
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	08 95       	ret
    199e:	85 b5       	in	r24, 0x25	; 37
    19a0:	84 60       	ori	r24, 0x04	; 4
    19a2:	85 bd       	out	0x25, r24	; 37
    19a4:	85 b5       	in	r24, 0x25	; 37
    19a6:	8d 7f       	andi	r24, 0xFD	; 253
    19a8:	85 bd       	out	0x25, r24	; 37
    19aa:	85 b5       	in	r24, 0x25	; 37
    19ac:	81 60       	ori	r24, 0x01	; 1
    19ae:	85 bd       	out	0x25, r24	; 37
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	08 95       	ret
    19b4:	85 b5       	in	r24, 0x25	; 37
    19b6:	8b 7f       	andi	r24, 0xFB	; 251
    19b8:	85 bd       	out	0x25, r24	; 37
    19ba:	85 b5       	in	r24, 0x25	; 37
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	85 bd       	out	0x25, r24	; 37
    19c0:	85 b5       	in	r24, 0x25	; 37
    19c2:	81 60       	ori	r24, 0x01	; 1
    19c4:	85 bd       	out	0x25, r24	; 37
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	08 95       	ret
    19ca:	85 b5       	in	r24, 0x25	; 37
    19cc:	84 60       	ori	r24, 0x04	; 4
    19ce:	85 bd       	out	0x25, r24	; 37
    19d0:	85 b5       	in	r24, 0x25	; 37
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	85 bd       	out	0x25, r24	; 37
    19d6:	85 b5       	in	r24, 0x25	; 37
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	85 bd       	out	0x25, r24	; 37
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	08 95       	ret
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	08 95       	ret
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	08 95       	ret
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	08 95       	ret
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	08 95       	ret
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	08 95       	ret
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	08 95       	ret
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	08 95       	ret

000019fc <TIMER_stop>:
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	38 f5       	brcc	.+78     	; 0x1a4e <TIMER_stop+0x52>
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	79 f0       	breq	.+30     	; 0x1a22 <TIMER_stop+0x26>
    1a04:	18 f0       	brcs	.+6      	; 0x1a0c <TIMER_stop+0x10>
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	b9 f0       	breq	.+46     	; 0x1a38 <TIMER_stop+0x3c>
    1a0a:	23 c0       	rjmp	.+70     	; 0x1a52 <TIMER_stop+0x56>
    1a0c:	83 b7       	in	r24, 0x33	; 51
    1a0e:	8e 7f       	andi	r24, 0xFE	; 254
    1a10:	83 bf       	out	0x33, r24	; 51
    1a12:	83 b7       	in	r24, 0x33	; 51
    1a14:	8d 7f       	andi	r24, 0xFD	; 253
    1a16:	83 bf       	out	0x33, r24	; 51
    1a18:	83 b7       	in	r24, 0x33	; 51
    1a1a:	8b 7f       	andi	r24, 0xFB	; 251
    1a1c:	83 bf       	out	0x33, r24	; 51
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	08 95       	ret
    1a22:	8e b5       	in	r24, 0x2e	; 46
    1a24:	8e 7f       	andi	r24, 0xFE	; 254
    1a26:	8e bd       	out	0x2e, r24	; 46
    1a28:	8e b5       	in	r24, 0x2e	; 46
    1a2a:	8d 7f       	andi	r24, 0xFD	; 253
    1a2c:	8e bd       	out	0x2e, r24	; 46
    1a2e:	8e b5       	in	r24, 0x2e	; 46
    1a30:	8b 7f       	andi	r24, 0xFB	; 251
    1a32:	8e bd       	out	0x2e, r24	; 46
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	08 95       	ret
    1a38:	85 b5       	in	r24, 0x25	; 37
    1a3a:	8b 7f       	andi	r24, 0xFB	; 251
    1a3c:	85 bd       	out	0x25, r24	; 37
    1a3e:	85 b5       	in	r24, 0x25	; 37
    1a40:	8d 7f       	andi	r24, 0xFD	; 253
    1a42:	85 bd       	out	0x25, r24	; 37
    1a44:	85 b5       	in	r24, 0x25	; 37
    1a46:	8e 7f       	andi	r24, 0xFE	; 254
    1a48:	85 bd       	out	0x25, r24	; 37
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	08 95       	ret
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	08 95       	ret
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	08 95       	ret

00001a56 <TIMER_reset>:
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	f1 f0       	breq	.+60     	; 0x1a96 <TIMER_reset+0x40>
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	20 81       	ld	r18, Z
    1a5e:	23 30       	cpi	r18, 0x03	; 3
    1a60:	e0 f4       	brcc	.+56     	; 0x1a9a <TIMER_reset+0x44>
    1a62:	31 81       	ldd	r19, Z+1	; 0x01
    1a64:	3a 30       	cpi	r19, 0x0A	; 10
    1a66:	d8 f4       	brcc	.+54     	; 0x1a9e <TIMER_reset+0x48>
    1a68:	21 30       	cpi	r18, 0x01	; 1
    1a6a:	49 f0       	breq	.+18     	; 0x1a7e <TIMER_reset+0x28>
    1a6c:	18 f0       	brcs	.+6      	; 0x1a74 <TIMER_reset+0x1e>
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	69 f0       	breq	.+26     	; 0x1a8c <TIMER_reset+0x36>
    1a72:	17 c0       	rjmp	.+46     	; 0x1aa2 <TIMER_reset+0x4c>
    1a74:	fc 01       	movw	r30, r24
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	82 bf       	out	0x32, r24	; 50
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	08 95       	ret
    1a7e:	fc 01       	movw	r30, r24
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	9d bd       	out	0x2d, r25	; 45
    1a86:	8c bd       	out	0x2c, r24	; 44
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	08 95       	ret
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	84 bd       	out	0x24, r24	; 36
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	08 95       	ret
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	08 95       	ret
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	08 95       	ret
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	08 95       	ret
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	08 95       	ret

00001aa6 <TIMER_setCallBack>:
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	a9 f0       	breq	.+42     	; 0x1ad4 <TIMER_setCallBack+0x2e>
    1aaa:	63 30       	cpi	r22, 0x03	; 3
    1aac:	a8 f4       	brcc	.+42     	; 0x1ad8 <TIMER_setCallBack+0x32>
    1aae:	61 30       	cpi	r22, 0x01	; 1
    1ab0:	59 f0       	breq	.+22     	; 0x1ac8 <TIMER_setCallBack+0x22>
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <TIMER_setCallBack+0x16>
    1ab4:	62 30       	cpi	r22, 0x02	; 2
    1ab6:	91 f0       	breq	.+36     	; 0x1adc <TIMER_setCallBack+0x36>
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	08 95       	ret
    1abc:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <sg_Timer0_callBackPtr+0x1>
    1ac0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <sg_Timer0_callBackPtr>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	08 95       	ret
    1ac8:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <sg_Timer1_callBackPtr+0x1>
    1acc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <sg_Timer1_callBackPtr>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	08 95       	ret
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	08 95       	ret
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	08 95       	ret
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	08 95       	ret

00001ae0 <enuTimer2_init>:
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	48 f5       	brcc	.+82     	; 0x1b36 <enuTimer2_init+0x56>
    1ae4:	14 bc       	out	0x24, r1	; 36
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	71 f0       	breq	.+28     	; 0x1b06 <enuTimer2_init+0x26>
    1aea:	28 f0       	brcs	.+10     	; 0x1af6 <enuTimer2_init+0x16>
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	99 f0       	breq	.+38     	; 0x1b16 <enuTimer2_init+0x36>
    1af0:	83 30       	cpi	r24, 0x03	; 3
    1af2:	c9 f0       	breq	.+50     	; 0x1b26 <enuTimer2_init+0x46>
    1af4:	22 c0       	rjmp	.+68     	; 0x1b3a <enuTimer2_init+0x5a>
    1af6:	85 b5       	in	r24, 0x25	; 37
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	85 bd       	out	0x25, r24	; 37
    1afc:	85 b5       	in	r24, 0x25	; 37
    1afe:	8f 7b       	andi	r24, 0xBF	; 191
    1b00:	85 bd       	out	0x25, r24	; 37
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	08 95       	ret
    1b06:	85 b5       	in	r24, 0x25	; 37
    1b08:	87 7f       	andi	r24, 0xF7	; 247
    1b0a:	85 bd       	out	0x25, r24	; 37
    1b0c:	85 b5       	in	r24, 0x25	; 37
    1b0e:	80 64       	ori	r24, 0x40	; 64
    1b10:	85 bd       	out	0x25, r24	; 37
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	08 95       	ret
    1b16:	85 b5       	in	r24, 0x25	; 37
    1b18:	88 60       	ori	r24, 0x08	; 8
    1b1a:	85 bd       	out	0x25, r24	; 37
    1b1c:	85 b5       	in	r24, 0x25	; 37
    1b1e:	8f 7b       	andi	r24, 0xBF	; 191
    1b20:	85 bd       	out	0x25, r24	; 37
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	08 95       	ret
    1b26:	85 b5       	in	r24, 0x25	; 37
    1b28:	88 60       	ori	r24, 0x08	; 8
    1b2a:	85 bd       	out	0x25, r24	; 37
    1b2c:	85 b5       	in	r24, 0x25	; 37
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	85 bd       	out	0x25, r24	; 37
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	08 95       	ret
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	08 95       	ret
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	08 95       	ret

00001b3e <u8Timer2_setPrescallar>:
    1b3e:	88 30       	cpi	r24, 0x08	; 8
    1b40:	70 f4       	brcc	.+28     	; 0x1b5e <u8Timer2_setPrescallar+0x20>
    1b42:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <global_prescaller>
    1b46:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <global_timerStatus>
    1b4a:	91 30       	cpi	r25, 0x01	; 1
    1b4c:	51 f4       	brne	.+20     	; 0x1b62 <u8Timer2_setPrescallar+0x24>
    1b4e:	95 b5       	in	r25, 0x25	; 37
    1b50:	98 7f       	andi	r25, 0xF8	; 248
    1b52:	89 2b       	or	r24, r25
    1b54:	95 b5       	in	r25, 0x25	; 37
    1b56:	89 2b       	or	r24, r25
    1b58:	85 bd       	out	0x25, r24	; 37
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	08 95       	ret
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	08 95       	ret
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	08 95       	ret

00001b66 <vidTimer2_OvfIrqEnable>:
    1b66:	88 b7       	in	r24, 0x38	; 56
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	88 bf       	out	0x38, r24	; 56
    1b6c:	89 b7       	in	r24, 0x39	; 57
    1b6e:	80 64       	ori	r24, 0x40	; 64
    1b70:	89 bf       	out	0x39, r24	; 57
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	08 95       	ret

00001b76 <vidTimer2_OvfIrqDisable>:
    1b76:	89 b7       	in	r24, 0x39	; 57
    1b78:	8f 7b       	andi	r24, 0xBF	; 191
    1b7a:	89 bf       	out	0x39, r24	; 57
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	08 95       	ret

00001b80 <vidTimer2_start>:
    1b80:	95 b5       	in	r25, 0x25	; 37
    1b82:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <global_prescaller>
    1b86:	89 2b       	or	r24, r25
    1b88:	85 bd       	out	0x25, r24	; 37
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <global_timerStatus>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	08 95       	ret

00001b94 <vidTimer2_stop>:
    1b94:	85 b5       	in	r24, 0x25	; 37
    1b96:	88 7f       	andi	r24, 0xF8	; 248
    1b98:	85 bd       	out	0x25, r24	; 37
    1b9a:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <global_timerStatus>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	08 95       	ret

00001ba2 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	21 f0       	breq	.+8      	; 0x1bae <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    1ba6:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <globalCallFunc+0x1>
    1baa:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <globalCallFunc>
    1bae:	08 95       	ret

00001bb0 <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    1bb0:	14 bc       	out	0x24, r1	; 36
    1bb2:	08 95       	ret

00001bb4 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    1bb4:	84 b5       	in	r24, 0x24	; 36
}
    1bb6:	08 95       	ret

00001bb8 <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    1bb8:	8f b7       	in	r24, 0x3f	; 63
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	8f bf       	out	0x3f, r24	; 63
    1bbe:	08 95       	ret

00001bc0 <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    1be2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <counter.1817>
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <counter.1817>
	if(counter == global_ovf)
    1bec:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <global_ovf>
    1bf0:	89 13       	cpse	r24, r25
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1bf4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <globalCallFunc>
    1bf8:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <globalCallFunc+0x1>
    1bfc:	30 97       	sbiw	r30, 0x00	; 0
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <__vector_5+0x46>
		{
			counter = 0;
    1c00:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <counter.1817>

			globalCallFunc();
    1c04:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1c06:	ff 91       	pop	r31
    1c08:	ef 91       	pop	r30
    1c0a:	bf 91       	pop	r27
    1c0c:	af 91       	pop	r26
    1c0e:	9f 91       	pop	r25
    1c10:	8f 91       	pop	r24
    1c12:	7f 91       	pop	r23
    1c14:	6f 91       	pop	r22
    1c16:	5f 91       	pop	r21
    1c18:	4f 91       	pop	r20
    1c1a:	3f 91       	pop	r19
    1c1c:	2f 91       	pop	r18
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__cmpsf2>:
    1c28:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fp_cmp>
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <__cmpsf2+0x8>
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	08 95       	ret

00001c32 <__divsf3>:
    1c32:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__divsf3x>
    1c36:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__fp_round>
    1c3a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__fp_pscB>
    1c3e:	58 f0       	brcs	.+22     	; 0x1c56 <__divsf3+0x24>
    1c40:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__fp_pscA>
    1c44:	40 f0       	brcs	.+16     	; 0x1c56 <__divsf3+0x24>
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <__divsf3+0x20>
    1c48:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4a:	29 f0       	breq	.+10     	; 0x1c56 <__divsf3+0x24>
    1c4c:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__fp_inf>
    1c50:	51 11       	cpse	r21, r1
    1c52:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_szero>
    1c56:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__fp_nan>

00001c5a <__divsf3x>:
    1c5a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fp_split3>
    1c5e:	68 f3       	brcs	.-38     	; 0x1c3a <__divsf3+0x8>

00001c60 <__divsf3_pse>:
    1c60:	99 23       	and	r25, r25
    1c62:	b1 f3       	breq	.-20     	; 0x1c50 <__divsf3+0x1e>
    1c64:	55 23       	and	r21, r21
    1c66:	91 f3       	breq	.-28     	; 0x1c4c <__divsf3+0x1a>
    1c68:	95 1b       	sub	r25, r21
    1c6a:	55 0b       	sbc	r21, r21
    1c6c:	bb 27       	eor	r27, r27
    1c6e:	aa 27       	eor	r26, r26
    1c70:	62 17       	cp	r22, r18
    1c72:	73 07       	cpc	r23, r19
    1c74:	84 07       	cpc	r24, r20
    1c76:	38 f0       	brcs	.+14     	; 0x1c86 <__divsf3_pse+0x26>
    1c78:	9f 5f       	subi	r25, 0xFF	; 255
    1c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	44 1f       	adc	r20, r20
    1c82:	aa 1f       	adc	r26, r26
    1c84:	a9 f3       	breq	.-22     	; 0x1c70 <__divsf3_pse+0x10>
    1c86:	35 d0       	rcall	.+106    	; 0x1cf2 <__divsf3_pse+0x92>
    1c88:	0e 2e       	mov	r0, r30
    1c8a:	3a f0       	brmi	.+14     	; 0x1c9a <__divsf3_pse+0x3a>
    1c8c:	e0 e8       	ldi	r30, 0x80	; 128
    1c8e:	32 d0       	rcall	.+100    	; 0x1cf4 <__divsf3_pse+0x94>
    1c90:	91 50       	subi	r25, 0x01	; 1
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	e6 95       	lsr	r30
    1c96:	00 1c       	adc	r0, r0
    1c98:	ca f7       	brpl	.-14     	; 0x1c8c <__divsf3_pse+0x2c>
    1c9a:	2b d0       	rcall	.+86     	; 0x1cf2 <__divsf3_pse+0x92>
    1c9c:	fe 2f       	mov	r31, r30
    1c9e:	29 d0       	rcall	.+82     	; 0x1cf2 <__divsf3_pse+0x92>
    1ca0:	66 0f       	add	r22, r22
    1ca2:	77 1f       	adc	r23, r23
    1ca4:	88 1f       	adc	r24, r24
    1ca6:	bb 1f       	adc	r27, r27
    1ca8:	26 17       	cp	r18, r22
    1caa:	37 07       	cpc	r19, r23
    1cac:	48 07       	cpc	r20, r24
    1cae:	ab 07       	cpc	r26, r27
    1cb0:	b0 e8       	ldi	r27, 0x80	; 128
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <__divsf3_pse+0x56>
    1cb4:	bb 0b       	sbc	r27, r27
    1cb6:	80 2d       	mov	r24, r0
    1cb8:	bf 01       	movw	r22, r30
    1cba:	ff 27       	eor	r31, r31
    1cbc:	93 58       	subi	r25, 0x83	; 131
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	3a f0       	brmi	.+14     	; 0x1cd0 <__divsf3_pse+0x70>
    1cc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc4:	51 05       	cpc	r21, r1
    1cc6:	78 f0       	brcs	.+30     	; 0x1ce6 <__divsf3_pse+0x86>
    1cc8:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__fp_inf>
    1ccc:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_szero>
    1cd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd2:	e4 f3       	brlt	.-8      	; 0x1ccc <__divsf3_pse+0x6c>
    1cd4:	98 3e       	cpi	r25, 0xE8	; 232
    1cd6:	d4 f3       	brlt	.-12     	; 0x1ccc <__divsf3_pse+0x6c>
    1cd8:	86 95       	lsr	r24
    1cda:	77 95       	ror	r23
    1cdc:	67 95       	ror	r22
    1cde:	b7 95       	ror	r27
    1ce0:	f7 95       	ror	r31
    1ce2:	9f 5f       	subi	r25, 0xFF	; 255
    1ce4:	c9 f7       	brne	.-14     	; 0x1cd8 <__divsf3_pse+0x78>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	91 1d       	adc	r25, r1
    1cea:	96 95       	lsr	r25
    1cec:	87 95       	ror	r24
    1cee:	97 f9       	bld	r25, 7
    1cf0:	08 95       	ret
    1cf2:	e1 e0       	ldi	r30, 0x01	; 1
    1cf4:	66 0f       	add	r22, r22
    1cf6:	77 1f       	adc	r23, r23
    1cf8:	88 1f       	adc	r24, r24
    1cfa:	bb 1f       	adc	r27, r27
    1cfc:	62 17       	cp	r22, r18
    1cfe:	73 07       	cpc	r23, r19
    1d00:	84 07       	cpc	r24, r20
    1d02:	ba 07       	cpc	r27, r26
    1d04:	20 f0       	brcs	.+8      	; 0x1d0e <__divsf3_pse+0xae>
    1d06:	62 1b       	sub	r22, r18
    1d08:	73 0b       	sbc	r23, r19
    1d0a:	84 0b       	sbc	r24, r20
    1d0c:	ba 0b       	sbc	r27, r26
    1d0e:	ee 1f       	adc	r30, r30
    1d10:	88 f7       	brcc	.-30     	; 0x1cf4 <__divsf3_pse+0x94>
    1d12:	e0 95       	com	r30
    1d14:	08 95       	ret

00001d16 <__fixunssfsi>:
    1d16:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__fp_splitA>
    1d1a:	88 f0       	brcs	.+34     	; 0x1d3e <__fixunssfsi+0x28>
    1d1c:	9f 57       	subi	r25, 0x7F	; 127
    1d1e:	98 f0       	brcs	.+38     	; 0x1d46 <__fixunssfsi+0x30>
    1d20:	b9 2f       	mov	r27, r25
    1d22:	99 27       	eor	r25, r25
    1d24:	b7 51       	subi	r27, 0x17	; 23
    1d26:	b0 f0       	brcs	.+44     	; 0x1d54 <__fixunssfsi+0x3e>
    1d28:	e1 f0       	breq	.+56     	; 0x1d62 <__fixunssfsi+0x4c>
    1d2a:	66 0f       	add	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	88 1f       	adc	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	1a f0       	brmi	.+6      	; 0x1d3a <__fixunssfsi+0x24>
    1d34:	ba 95       	dec	r27
    1d36:	c9 f7       	brne	.-14     	; 0x1d2a <__fixunssfsi+0x14>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <__fixunssfsi+0x4c>
    1d3a:	b1 30       	cpi	r27, 0x01	; 1
    1d3c:	91 f0       	breq	.+36     	; 0x1d62 <__fixunssfsi+0x4c>
    1d3e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__fp_zero>
    1d42:	b1 e0       	ldi	r27, 0x01	; 1
    1d44:	08 95       	ret
    1d46:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__fp_zero>
    1d4a:	67 2f       	mov	r22, r23
    1d4c:	78 2f       	mov	r23, r24
    1d4e:	88 27       	eor	r24, r24
    1d50:	b8 5f       	subi	r27, 0xF8	; 248
    1d52:	39 f0       	breq	.+14     	; 0x1d62 <__fixunssfsi+0x4c>
    1d54:	b9 3f       	cpi	r27, 0xF9	; 249
    1d56:	cc f3       	brlt	.-14     	; 0x1d4a <__fixunssfsi+0x34>
    1d58:	86 95       	lsr	r24
    1d5a:	77 95       	ror	r23
    1d5c:	67 95       	ror	r22
    1d5e:	b3 95       	inc	r27
    1d60:	d9 f7       	brne	.-10     	; 0x1d58 <__fixunssfsi+0x42>
    1d62:	3e f4       	brtc	.+14     	; 0x1d72 <__fixunssfsi+0x5c>
    1d64:	90 95       	com	r25
    1d66:	80 95       	com	r24
    1d68:	70 95       	com	r23
    1d6a:	61 95       	neg	r22
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	08 95       	ret

00001d74 <__floatunsisf>:
    1d74:	e8 94       	clt
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <__floatsisf+0x12>

00001d78 <__floatsisf>:
    1d78:	97 fb       	bst	r25, 7
    1d7a:	3e f4       	brtc	.+14     	; 0x1d8a <__floatsisf+0x12>
    1d7c:	90 95       	com	r25
    1d7e:	80 95       	com	r24
    1d80:	70 95       	com	r23
    1d82:	61 95       	neg	r22
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	99 23       	and	r25, r25
    1d8c:	a9 f0       	breq	.+42     	; 0x1db8 <__floatsisf+0x40>
    1d8e:	f9 2f       	mov	r31, r25
    1d90:	96 e9       	ldi	r25, 0x96	; 150
    1d92:	bb 27       	eor	r27, r27
    1d94:	93 95       	inc	r25
    1d96:	f6 95       	lsr	r31
    1d98:	87 95       	ror	r24
    1d9a:	77 95       	ror	r23
    1d9c:	67 95       	ror	r22
    1d9e:	b7 95       	ror	r27
    1da0:	f1 11       	cpse	r31, r1
    1da2:	f8 cf       	rjmp	.-16     	; 0x1d94 <__floatsisf+0x1c>
    1da4:	fa f4       	brpl	.+62     	; 0x1de4 <__floatsisf+0x6c>
    1da6:	bb 0f       	add	r27, r27
    1da8:	11 f4       	brne	.+4      	; 0x1dae <__floatsisf+0x36>
    1daa:	60 ff       	sbrs	r22, 0
    1dac:	1b c0       	rjmp	.+54     	; 0x1de4 <__floatsisf+0x6c>
    1dae:	6f 5f       	subi	r22, 0xFF	; 255
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	8f 4f       	sbci	r24, 0xFF	; 255
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	16 c0       	rjmp	.+44     	; 0x1de4 <__floatsisf+0x6c>
    1db8:	88 23       	and	r24, r24
    1dba:	11 f0       	breq	.+4      	; 0x1dc0 <__floatsisf+0x48>
    1dbc:	96 e9       	ldi	r25, 0x96	; 150
    1dbe:	11 c0       	rjmp	.+34     	; 0x1de2 <__floatsisf+0x6a>
    1dc0:	77 23       	and	r23, r23
    1dc2:	21 f0       	breq	.+8      	; 0x1dcc <__floatsisf+0x54>
    1dc4:	9e e8       	ldi	r25, 0x8E	; 142
    1dc6:	87 2f       	mov	r24, r23
    1dc8:	76 2f       	mov	r23, r22
    1dca:	05 c0       	rjmp	.+10     	; 0x1dd6 <__floatsisf+0x5e>
    1dcc:	66 23       	and	r22, r22
    1dce:	71 f0       	breq	.+28     	; 0x1dec <__floatsisf+0x74>
    1dd0:	96 e8       	ldi	r25, 0x86	; 134
    1dd2:	86 2f       	mov	r24, r22
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	2a f0       	brmi	.+10     	; 0x1de4 <__floatsisf+0x6c>
    1dda:	9a 95       	dec	r25
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	da f7       	brpl	.-10     	; 0x1dda <__floatsisf+0x62>
    1de4:	88 0f       	add	r24, r24
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	97 f9       	bld	r25, 7
    1dec:	08 95       	ret

00001dee <__fp_cmp>:
    1dee:	99 0f       	add	r25, r25
    1df0:	00 08       	sbc	r0, r0
    1df2:	55 0f       	add	r21, r21
    1df4:	aa 0b       	sbc	r26, r26
    1df6:	e0 e8       	ldi	r30, 0x80	; 128
    1df8:	fe ef       	ldi	r31, 0xFE	; 254
    1dfa:	16 16       	cp	r1, r22
    1dfc:	17 06       	cpc	r1, r23
    1dfe:	e8 07       	cpc	r30, r24
    1e00:	f9 07       	cpc	r31, r25
    1e02:	c0 f0       	brcs	.+48     	; 0x1e34 <__fp_cmp+0x46>
    1e04:	12 16       	cp	r1, r18
    1e06:	13 06       	cpc	r1, r19
    1e08:	e4 07       	cpc	r30, r20
    1e0a:	f5 07       	cpc	r31, r21
    1e0c:	98 f0       	brcs	.+38     	; 0x1e34 <__fp_cmp+0x46>
    1e0e:	62 1b       	sub	r22, r18
    1e10:	73 0b       	sbc	r23, r19
    1e12:	84 0b       	sbc	r24, r20
    1e14:	95 0b       	sbc	r25, r21
    1e16:	39 f4       	brne	.+14     	; 0x1e26 <__fp_cmp+0x38>
    1e18:	0a 26       	eor	r0, r26
    1e1a:	61 f0       	breq	.+24     	; 0x1e34 <__fp_cmp+0x46>
    1e1c:	23 2b       	or	r18, r19
    1e1e:	24 2b       	or	r18, r20
    1e20:	25 2b       	or	r18, r21
    1e22:	21 f4       	brne	.+8      	; 0x1e2c <__fp_cmp+0x3e>
    1e24:	08 95       	ret
    1e26:	0a 26       	eor	r0, r26
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <__fp_cmp+0x3e>
    1e2a:	a1 40       	sbci	r26, 0x01	; 1
    1e2c:	a6 95       	lsr	r26
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	81 1d       	adc	r24, r1
    1e32:	81 1d       	adc	r24, r1
    1e34:	08 95       	ret

00001e36 <__fp_inf>:
    1e36:	97 f9       	bld	r25, 7
    1e38:	9f 67       	ori	r25, 0x7F	; 127
    1e3a:	80 e8       	ldi	r24, 0x80	; 128
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	08 95       	ret

00001e42 <__fp_nan>:
    1e42:	9f ef       	ldi	r25, 0xFF	; 255
    1e44:	80 ec       	ldi	r24, 0xC0	; 192
    1e46:	08 95       	ret

00001e48 <__fp_pscA>:
    1e48:	00 24       	eor	r0, r0
    1e4a:	0a 94       	dec	r0
    1e4c:	16 16       	cp	r1, r22
    1e4e:	17 06       	cpc	r1, r23
    1e50:	18 06       	cpc	r1, r24
    1e52:	09 06       	cpc	r0, r25
    1e54:	08 95       	ret

00001e56 <__fp_pscB>:
    1e56:	00 24       	eor	r0, r0
    1e58:	0a 94       	dec	r0
    1e5a:	12 16       	cp	r1, r18
    1e5c:	13 06       	cpc	r1, r19
    1e5e:	14 06       	cpc	r1, r20
    1e60:	05 06       	cpc	r0, r21
    1e62:	08 95       	ret

00001e64 <__fp_round>:
    1e64:	09 2e       	mov	r0, r25
    1e66:	03 94       	inc	r0
    1e68:	00 0c       	add	r0, r0
    1e6a:	11 f4       	brne	.+4      	; 0x1e70 <__fp_round+0xc>
    1e6c:	88 23       	and	r24, r24
    1e6e:	52 f0       	brmi	.+20     	; 0x1e84 <__fp_round+0x20>
    1e70:	bb 0f       	add	r27, r27
    1e72:	40 f4       	brcc	.+16     	; 0x1e84 <__fp_round+0x20>
    1e74:	bf 2b       	or	r27, r31
    1e76:	11 f4       	brne	.+4      	; 0x1e7c <__fp_round+0x18>
    1e78:	60 ff       	sbrs	r22, 0
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <__fp_round+0x20>
    1e7c:	6f 5f       	subi	r22, 0xFF	; 255
    1e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e80:	8f 4f       	sbci	r24, 0xFF	; 255
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	08 95       	ret

00001e86 <__fp_split3>:
    1e86:	57 fd       	sbrc	r21, 7
    1e88:	90 58       	subi	r25, 0x80	; 128
    1e8a:	44 0f       	add	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	59 f0       	breq	.+22     	; 0x1ea6 <__fp_splitA+0x10>
    1e90:	5f 3f       	cpi	r21, 0xFF	; 255
    1e92:	71 f0       	breq	.+28     	; 0x1eb0 <__fp_splitA+0x1a>
    1e94:	47 95       	ror	r20

00001e96 <__fp_splitA>:
    1e96:	88 0f       	add	r24, r24
    1e98:	97 fb       	bst	r25, 7
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	61 f0       	breq	.+24     	; 0x1eb6 <__fp_splitA+0x20>
    1e9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea0:	79 f0       	breq	.+30     	; 0x1ec0 <__fp_splitA+0x2a>
    1ea2:	87 95       	ror	r24
    1ea4:	08 95       	ret
    1ea6:	12 16       	cp	r1, r18
    1ea8:	13 06       	cpc	r1, r19
    1eaa:	14 06       	cpc	r1, r20
    1eac:	55 1f       	adc	r21, r21
    1eae:	f2 cf       	rjmp	.-28     	; 0x1e94 <__fp_split3+0xe>
    1eb0:	46 95       	lsr	r20
    1eb2:	f1 df       	rcall	.-30     	; 0x1e96 <__fp_splitA>
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <__fp_splitA+0x30>
    1eb6:	16 16       	cp	r1, r22
    1eb8:	17 06       	cpc	r1, r23
    1eba:	18 06       	cpc	r1, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	f1 cf       	rjmp	.-30     	; 0x1ea2 <__fp_splitA+0xc>
    1ec0:	86 95       	lsr	r24
    1ec2:	71 05       	cpc	r23, r1
    1ec4:	61 05       	cpc	r22, r1
    1ec6:	08 94       	sec
    1ec8:	08 95       	ret

00001eca <__fp_zero>:
    1eca:	e8 94       	clt

00001ecc <__fp_szero>:
    1ecc:	bb 27       	eor	r27, r27
    1ece:	66 27       	eor	r22, r22
    1ed0:	77 27       	eor	r23, r23
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	97 f9       	bld	r25, 7
    1ed6:	08 95       	ret

00001ed8 <__gesf2>:
    1ed8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fp_cmp>
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <__gesf2+0x8>
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	08 95       	ret

00001ee2 <__divmodhi4>:
    1ee2:	97 fb       	bst	r25, 7
    1ee4:	07 2e       	mov	r0, r23
    1ee6:	16 f4       	brtc	.+4      	; 0x1eec <__divmodhi4+0xa>
    1ee8:	00 94       	com	r0
    1eea:	07 d0       	rcall	.+14     	; 0x1efa <__divmodhi4_neg1>
    1eec:	77 fd       	sbrc	r23, 7
    1eee:	09 d0       	rcall	.+18     	; 0x1f02 <__divmodhi4_neg2>
    1ef0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
    1ef4:	07 fc       	sbrc	r0, 7
    1ef6:	05 d0       	rcall	.+10     	; 0x1f02 <__divmodhi4_neg2>
    1ef8:	3e f4       	brtc	.+14     	; 0x1f08 <__divmodhi4_exit>

00001efa <__divmodhi4_neg1>:
    1efa:	90 95       	com	r25
    1efc:	81 95       	neg	r24
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	08 95       	ret

00001f02 <__divmodhi4_neg2>:
    1f02:	70 95       	com	r23
    1f04:	61 95       	neg	r22
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255

00001f08 <__divmodhi4_exit>:
    1f08:	08 95       	ret

00001f0a <__tablejump2__>:
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	05 90       	lpm	r0, Z+
    1f10:	f4 91       	lpm	r31, Z
    1f12:	e0 2d       	mov	r30, r0
    1f14:	09 94       	ijmp

00001f16 <__udivmodhi4>:
    1f16:	aa 1b       	sub	r26, r26
    1f18:	bb 1b       	sub	r27, r27
    1f1a:	51 e1       	ldi	r21, 0x11	; 17
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <__udivmodhi4_ep>

00001f1e <__udivmodhi4_loop>:
    1f1e:	aa 1f       	adc	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	a6 17       	cp	r26, r22
    1f24:	b7 07       	cpc	r27, r23
    1f26:	10 f0       	brcs	.+4      	; 0x1f2c <__udivmodhi4_ep>
    1f28:	a6 1b       	sub	r26, r22
    1f2a:	b7 0b       	sbc	r27, r23

00001f2c <__udivmodhi4_ep>:
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	5a 95       	dec	r21
    1f32:	a9 f7       	brne	.-22     	; 0x1f1e <__udivmodhi4_loop>
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	08 95       	ret

00001f3e <__itoa_ncheck>:
    1f3e:	bb 27       	eor	r27, r27
    1f40:	4a 30       	cpi	r20, 0x0A	; 10
    1f42:	31 f4       	brne	.+12     	; 0x1f50 <__itoa_ncheck+0x12>
    1f44:	99 23       	and	r25, r25
    1f46:	22 f4       	brpl	.+8      	; 0x1f50 <__itoa_ncheck+0x12>
    1f48:	bd e2       	ldi	r27, 0x2D	; 45
    1f4a:	90 95       	com	r25
    1f4c:	81 95       	neg	r24
    1f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f50:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__utoa_common>

00001f54 <__utoa_ncheck>:
    1f54:	bb 27       	eor	r27, r27

00001f56 <__utoa_common>:
    1f56:	fb 01       	movw	r30, r22
    1f58:	55 27       	eor	r21, r21
    1f5a:	aa 27       	eor	r26, r26
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	aa 1f       	adc	r26, r26
    1f62:	a4 17       	cp	r26, r20
    1f64:	10 f0       	brcs	.+4      	; 0x1f6a <__utoa_common+0x14>
    1f66:	a4 1b       	sub	r26, r20
    1f68:	83 95       	inc	r24
    1f6a:	50 51       	subi	r21, 0x10	; 16
    1f6c:	b9 f7       	brne	.-18     	; 0x1f5c <__utoa_common+0x6>
    1f6e:	a0 5d       	subi	r26, 0xD0	; 208
    1f70:	aa 33       	cpi	r26, 0x3A	; 58
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <__utoa_common+0x20>
    1f74:	a9 5d       	subi	r26, 0xD9	; 217
    1f76:	a1 93       	st	Z+, r26
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	79 f7       	brne	.-34     	; 0x1f5a <__utoa_common+0x4>
    1f7c:	b1 11       	cpse	r27, r1
    1f7e:	b1 93       	st	Z+, r27
    1f80:	11 92       	st	Z+, r1
    1f82:	cb 01       	movw	r24, r22
    1f84:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <strrev>

00001f88 <strrev>:
    1f88:	dc 01       	movw	r26, r24
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	67 2f       	mov	r22, r23
    1f8e:	71 91       	ld	r23, Z+
    1f90:	77 23       	and	r23, r23
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <strrev+0x4>
    1f94:	32 97       	sbiw	r30, 0x02	; 2
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <strrev+0x18>
    1f98:	7c 91       	ld	r23, X
    1f9a:	6d 93       	st	X+, r22
    1f9c:	70 83       	st	Z, r23
    1f9e:	62 91       	ld	r22, -Z
    1fa0:	ae 17       	cp	r26, r30
    1fa2:	bf 07       	cpc	r27, r31
    1fa4:	c8 f3       	brcs	.-14     	; 0x1f98 <strrev+0x10>
    1fa6:	08 95       	ret

00001fa8 <_exit>:
    1fa8:	f8 94       	cli

00001faa <__stop_program>:
    1faa:	ff cf       	rjmp	.-2      	; 0x1faa <__stop_program>
