
Obstacal avoiding car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000151a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000151a  000015ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000c2  008000c2  00001610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036da  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fc  00000000  00000000  0000508e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022d9  00000000  00000000  0000638a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  00008664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000118c  00000000  00000000  00008e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002367  00000000  00000000  00009fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000c32b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_1>
       8:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_2>
       c:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 04 	call	0x97c	; 0x97c <main>
      8a:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_vidChangeDir>:
/************************************************************************************************/

void BUTTON_vidChangeDir(void)
{
	static Uint16_t counter = 0, L_flag = 0;
	counter += 2;
      92:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <counter.1966>
      96:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <counter.1966+0x1>
      9a:	02 96       	adiw	r24, 0x02	; 2
      9c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <counter.1966+0x1>
      a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <counter.1966>
	if (counter % 2 == 0) {HLCD_ClrDisplay();}
      a4:	80 ff       	sbrs	r24, 0
      a6:	0e 94 9e 02 	call	0x53c	; 0x53c <HLCD_ClrDisplay>
		
		if (L_flag == 0)
      aa:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
      ae:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
      b2:	00 97       	sbiw	r24, 0x00	; 0
      b4:	69 f4       	brne	.+26     	; 0xd0 <BUTTON_vidChangeDir+0x3e>
			{g_u8_motorDir = "Left"; L_flag = 1;}
      b6:	81 e8       	ldi	r24, 0x81	; 129
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
      be:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <__data_end+0x1>
      ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
      ce:	08 95       	ret
		else if (L_flag == 1)
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	51 f4       	brne	.+20     	; 0xe8 <BUTTON_vidChangeDir+0x56>
		{
			g_u8_motorDir = "Right"; L_flag = 0;
      d4:	86 e8       	ldi	r24, 0x86	; 134
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_u8_motorDir+0x1>
      dc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_u8_motorDir>
      e0:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <__data_end+0x1>
      e4:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__data_end>
      e8:	08 95       	ret

000000ea <TIMER1_callBackFunc>:
}


void TIMER1_callBackFunc(void)
{
	u8_g_OneSecTicks++;
      ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <u8_g_OneSecTicks>
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <u8_g_OneSecTicks>
	TIMER_Manager_reset(&st_timer1Config);
      f4:	80 e6       	ldi	r24, 0x60	; 96
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TIMER_Manager_reset>
      fc:	08 95       	ret

000000fe <APP_vidInit>:
/************************************************************************************************/
/*									Function Implementation										*/
/************************************************************************************************/
void APP_vidInit(void)
{
    HULTRASONIC_vidInit();
      fe:	0e 94 8c 04 	call	0x918	; 0x918 <HULTRASONIC_vidInit>
	HULTRASONIC_vidInterruptEnable();
     102:	0e 94 a6 04 	call	0x94c	; 0x94c <HULTRASONIC_vidInterruptEnable>
	(void) HLCD_vidInit();
     106:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_vidInit>
	(void) KEYPAD_init(&st_gs_keypadConfig);
     10a:	87 e6       	ldi	r24, 0x67	; 103
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 09 03 	call	0x612	; 0x612 <KEYPAD_init>
	(void) HExtInt_enInit(INT_0, RISE_EDGE);
     112:	63 e0       	ldi	r22, 0x03	; 3
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	0e 94 28 01 	call	0x250	; 0x250 <HExtInt_enInit>
	(void) TIMER_Manager_init (&st_timer1Config);
     11a:	80 e6       	ldi	r24, 0x60	; 96
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER_Manager_init>
	
	HULTRASONIC_vidCBF_TIM(HULTRASONIC_vidTimerCBF);
     122:	84 e0       	ldi	r24, 0x04	; 4
     124:	94 e0       	ldi	r25, 0x04	; 4
     126:	0e 94 b8 04 	call	0x970	; 0x970 <HULTRASONIC_vidCBF_TIM>
	HULTRASONIC_vidCBF_INT(HULTRASONIC_vidSigCalc);
     12a:	88 e1       	ldi	r24, 0x18	; 24
     12c:	94 e0       	ldi	r25, 0x04	; 4
     12e:	0e 94 bb 04 	call	0x976	; 0x976 <HULTRASONIC_vidCBF_INT>
	(void) HExtInt_enCBFInt0(BUTTON_vidChangeDir);
     132:	89 e4       	ldi	r24, 0x49	; 73
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 3e 01 	call	0x27c	; 0x27c <HExtInt_enCBFInt0>
	
	HExtInt0_enIntEnable();
     13a:	0e 94 46 01 	call	0x28c	; 0x28c <HExtInt0_enIntEnable>
/*	sei();*/
	DDRA = 0xFF;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	8a bb       	out	0x1a, r24	; 26
     142:	08 95       	ret

00000144 <APP_vidStart>:
}

void APP_vidStart(void)
{
	(void) KEYPAD_read(&u8KeyRead);
     144:	82 ee       	ldi	r24, 0xE2	; 226
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 46 03 	call	0x68c	; 0x68c <KEYPAD_read>
	
	 if (u8KeyRead != 'N')
     14c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <u8KeyRead>
     150:	8e 34       	cpi	r24, 0x4E	; 78
     152:	f1 f0       	breq	.+60     	; 0x190 <APP_vidStart+0x4c>
	 {
		 switch(u8KeyRead)
     154:	81 33       	cpi	r24, 0x31	; 49
     156:	19 f0       	breq	.+6      	; 0x15e <APP_vidStart+0x1a>
     158:	82 33       	cpi	r24, 0x32	; 50
     15a:	61 f0       	breq	.+24     	; 0x174 <APP_vidStart+0x30>
     15c:	16 c0       	rjmp	.+44     	; 0x18a <APP_vidStart+0x46>
		 {
			 case '1' : {
				 en_motorSel = EN_MOTOR_START; HLCD_gotoXY(1,0); HLCD_vidWriteChar(u8KeyRead); 				 
     15e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <en_motorSel>
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 b5 02 	call	0x56a	; 0x56a <HLCD_gotoXY>
     16a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <u8KeyRead>
     16e:	0e 94 24 02 	call	0x448	; 0x448 <HLCD_vidWriteChar>
				 break;
     172:	0e c0       	rjmp	.+28     	; 0x190 <APP_vidStart+0x4c>
				 }	 
			 case '2' : {
				 en_motorSel = EN_MOTOR_STOP; HLCD_gotoXY(1,0); HLCD_vidWriteChar(u8KeyRead); 
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	0e 94 b5 02 	call	0x56a	; 0x56a <HLCD_gotoXY>
     180:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <u8KeyRead>
     184:	0e 94 24 02 	call	0x448	; 0x448 <HLCD_vidWriteChar>
				 break;
     188:	03 c0       	rjmp	.+6      	; 0x190 <APP_vidStart+0x4c>
				 }
				 default :
				 {
					 en_motorSel = EN_MOTOR_IDLE;
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <en_motorSel>
					 break;
				 }
		 } 
	 }
	 
	  if (en_motorSel == EN_MOTOR_START)
     190:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <en_motorSel>
     194:	81 11       	cpse	r24, r1
     196:	2e c0       	rjmp	.+92     	; 0x1f4 <APP_vidStart+0xb0>
	  {
		if (flag3 == 0) {HLCD_ClrDisplay();  flag1 = 0; flag2 = 0; flag3 = 1; }		
     198:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <flag3>
     19c:	81 11       	cpse	r24, r1
     19e:	09 c0       	rjmp	.+18     	; 0x1b2 <APP_vidStart+0x6e>
     1a0:	0e 94 9e 02 	call	0x53c	; 0x53c <HLCD_ClrDisplay>
     1a4:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <flag1>
     1a8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <flag2>
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <flag3>
/*		APP_updateDirection();*/
		
		global_f64Dist = HULTRASONIC_u8Read();
     1b2:	0e 94 ad 04 	call	0x95a	; 0x95a <HULTRASONIC_u8Read>
     1b6:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <global_f64Dist>
     1ba:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <global_f64Dist+0x1>
     1be:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <global_f64Dist+0x2>
     1c2:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <global_f64Dist+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	8f e2       	ldi	r24, 0x2F	; 47
     1c8:	95 e7       	ldi	r25, 0x75	; 117
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <APP_vidStart+0x86>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <APP_vidStart+0x8c>
     1d0:	00 00       	nop
		_delay_ms(15);
		HLCD_gotoXY(0,0);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 b5 02 	call	0x56a	; 0x56a <HLCD_gotoXY>
		HLCD_WriteInt( (Uint32_t) global_f64Dist);
     1da:	60 91 e3 00 	lds	r22, 0x00E3	; 0x8000e3 <global_f64Dist>
     1de:	70 91 e4 00 	lds	r23, 0x00E4	; 0x8000e4 <global_f64Dist+0x1>
     1e2:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <global_f64Dist+0x2>
     1e6:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <global_f64Dist+0x3>
     1ea:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     1ee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <HLCD_WriteInt>
     1f2:	08 95       	ret
		
		
		
	  }
	  else if (en_motorSel == EN_MOTOR_STOP)
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	b1 f4       	brne	.+44     	; 0x224 <APP_vidStart+0xe0>
	  {
		  if (flag2 == 0){HLCD_ClrDisplay();  flag1 = 0; flag2 = 1; flag3 = 0; }		  
     1f8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <flag2>
     1fc:	81 11       	cpse	r24, r1
     1fe:	09 c0       	rjmp	.+18     	; 0x212 <APP_vidStart+0xce>
     200:	0e 94 9e 02 	call	0x53c	; 0x53c <HLCD_ClrDisplay>
     204:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <flag1>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <flag2>
     20e:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <flag3>
		  HLCD_gotoXY(0,0);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	0e 94 b5 02 	call	0x56a	; 0x56a <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "Motor Stopped");   
     21a:	8c e8       	ldi	r24, 0x8C	; 140
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 cd 02 	call	0x59a	; 0x59a <HLCD_WriteString>
     222:	08 95       	ret
	  }
	  else 
	  {
		  if (flag1 == 0) {HLCD_ClrDisplay();  flag1 = 1; flag2 = 0; flag3 = 0; }
     224:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <flag1>
     228:	81 11       	cpse	r24, r1
     22a:	09 c0       	rjmp	.+18     	; 0x23e <APP_vidStart+0xfa>
     22c:	0e 94 9e 02 	call	0x53c	; 0x53c <HLCD_ClrDisplay>
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <flag1>
     236:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <flag2>
     23a:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <flag3>
		  HLCD_gotoXY(0,0);
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 b5 02 	call	0x56a	; 0x56a <HLCD_gotoXY>
		  HLCD_WriteString( (uint8_t*) "MOTOR in IDLE");  
     246:	8a e9       	ldi	r24, 0x9A	; 154
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 cd 02 	call	0x59a	; 0x59a <HLCD_WriteString>
     24e:	08 95       	ret

00000250 <HExtInt_enInit>:
	return errorStatus;
}

void HExtInt0_enIntDisable(void)
{
	MEXTINT_vidDisableInterrupt();
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	c8 2f       	mov	r28, r24
     256:	d6 2f       	mov	r29, r22
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	62 e0       	ldi	r22, 0x02	; 2
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	62 e0       	ldi	r22, 0x02	; 2
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     26c:	6d 2f       	mov	r22, r29
     26e:	8c 2f       	mov	r24, r28
     270:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <HExtInt_enCBFInt0>:
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	21 f0       	breq	.+8      	; 0x288 <HExtInt_enCBFInt0+0xc>
     280:	0e 94 60 06 	call	0xcc0	; 0xcc0 <MEXTINT_vidCallBackFuncInt0>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	08 95       	ret
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	08 95       	ret

0000028c <HExtInt0_enIntEnable>:
}

void HExtInt0_enIntEnable(void)
{
	 MEXTINT_vidEnableInterrupt();
     28c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <MEXTINT_vidEnableInterrupt>
     290:	08 95       	ret

00000292 <HLCD_vidWritecmd>:
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	errorStatus = HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
	_delay_ms(1);
	return errorStatus;

}
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	18 2f       	mov	r17, r24
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     2a6:	c8 2f       	mov	r28, r24
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	67 e0       	ldi	r22, 0x07	; 7
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     2b2:	c8 2b       	or	r28, r24
     2b4:	01 2f       	mov	r16, r17
     2b6:	02 95       	swap	r16
     2b8:	0f 70       	andi	r16, 0x0F	; 15
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	15 c0       	rjmp	.+42     	; 0x2e8 <HLCD_vidWritecmd+0x56>
     2be:	ed 2f       	mov	r30, r29
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	40 2f       	mov	r20, r16
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	0d 2e       	mov	r0, r29
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <HLCD_vidWritecmd+0x3c>
     2ca:	55 95       	asr	r21
     2cc:	47 95       	ror	r20
     2ce:	0a 94       	dec	r0
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <HLCD_vidWritecmd+0x38>
     2d2:	41 70       	andi	r20, 0x01	; 1
     2d4:	ee 0f       	add	r30, r30
     2d6:	ff 1f       	adc	r31, r31
     2d8:	e8 58       	subi	r30, 0x88	; 136
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	61 81       	ldd	r22, Z+1	; 0x01
     2de:	80 81       	ld	r24, Z
     2e0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     2e4:	c8 2b       	or	r28, r24
     2e6:	df 5f       	subi	r29, 0xFF	; 255
     2e8:	d4 30       	cpi	r29, 0x04	; 4
     2ea:	48 f3       	brcs	.-46     	; 0x2be <HLCD_vidWritecmd+0x2c>
     2ec:	41 e0       	ldi	r20, 0x01	; 1
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     2f6:	c8 2b       	or	r28, r24
     2f8:	89 ef       	ldi	r24, 0xF9	; 249
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <HLCD_vidWritecmd+0x6a>
     300:	00 c0       	rjmp	.+0      	; 0x302 <HLCD_vidWritecmd+0x70>
     302:	00 00       	nop
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     30e:	c8 2b       	or	r28, r24
     310:	92 e4       	ldi	r25, 0x42	; 66
     312:	9a 95       	dec	r25
     314:	f1 f7       	brne	.-4      	; 0x312 <HLCD_vidWritecmd+0x80>
     316:	00 c0       	rjmp	.+0      	; 0x318 <HLCD_vidWritecmd+0x86>
     318:	1f 70       	andi	r17, 0x0F	; 15
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	15 c0       	rjmp	.+42     	; 0x348 <HLCD_vidWritecmd+0xb6>
     31e:	ed 2f       	mov	r30, r29
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	41 2f       	mov	r20, r17
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	0d 2e       	mov	r0, r29
     328:	02 c0       	rjmp	.+4      	; 0x32e <HLCD_vidWritecmd+0x9c>
     32a:	55 95       	asr	r21
     32c:	47 95       	ror	r20
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <HLCD_vidWritecmd+0x98>
     332:	41 70       	andi	r20, 0x01	; 1
     334:	ee 0f       	add	r30, r30
     336:	ff 1f       	adc	r31, r31
     338:	e8 58       	subi	r30, 0x88	; 136
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	61 81       	ldd	r22, Z+1	; 0x01
     33e:	80 81       	ld	r24, Z
     340:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     344:	c8 2b       	or	r28, r24
     346:	df 5f       	subi	r29, 0xFF	; 255
     348:	d4 30       	cpi	r29, 0x04	; 4
     34a:	48 f3       	brcs	.-46     	; 0x31e <HLCD_vidWritecmd+0x8c>
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     356:	c8 2b       	or	r28, r24
     358:	e9 ef       	ldi	r30, 0xF9	; 249
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <HLCD_vidWritecmd+0xca>
     360:	00 c0       	rjmp	.+0      	; 0x362 <HLCD_vidWritecmd+0xd0>
     362:	00 00       	nop
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     36e:	8c 2b       	or	r24, r28
     370:	e3 ef       	ldi	r30, 0xF3	; 243
     372:	f1 e0       	ldi	r31, 0x01	; 1
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <HLCD_vidWritecmd+0xe2>
     378:	00 c0       	rjmp	.+0      	; 0x37a <HLCD_vidWritecmd+0xe8>
     37a:	00 00       	nop
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <HLCD_vidInit>:
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	d0 e0       	ldi	r29, 0x00	; 0
     38c:	c0 e0       	ldi	r28, 0x00	; 0
     38e:	0d c0       	rjmp	.+26     	; 0x3aa <HLCD_vidInit+0x24>
     390:	ed 2f       	mov	r30, r29
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	e8 58       	subi	r30, 0x88	; 136
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	61 81       	ldd	r22, Z+1	; 0x01
     3a0:	80 81       	ld	r24, Z
     3a2:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3a6:	c8 2b       	or	r28, r24
     3a8:	df 5f       	subi	r29, 0xFF	; 255
     3aa:	d4 30       	cpi	r29, 0x04	; 4
     3ac:	88 f3       	brcs	.-30     	; 0x390 <HLCD_vidInit+0xa>
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	67 e0       	ldi	r22, 0x07	; 7
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3b8:	c8 2b       	or	r28, r24
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3c4:	c8 2b       	or	r28, r24
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     3d0:	c8 2b       	or	r28, r24
     3d2:	8f e0       	ldi	r24, 0x0F	; 15
     3d4:	97 e2       	ldi	r25, 0x27	; 39
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <HLCD_vidInit+0x50>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <HLCD_vidInit+0x56>
     3dc:	00 00       	nop
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     3e4:	c8 2b       	or	r28, r24
     3e6:	e9 ef       	ldi	r30, 0xF9	; 249
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	31 97       	sbiw	r30, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <HLCD_vidInit+0x64>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <HLCD_vidInit+0x6a>
     3f0:	00 00       	nop
     3f2:	88 e2       	ldi	r24, 0x28	; 40
     3f4:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     3f8:	c8 2b       	or	r28, r24
     3fa:	89 ef       	ldi	r24, 0xF9	; 249
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <HLCD_vidInit+0x78>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     40c:	c8 2b       	or	r28, r24
     40e:	e7 ee       	ldi	r30, 0xE7	; 231
     410:	f3 e0       	ldi	r31, 0x03	; 3
     412:	31 97       	sbiw	r30, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     418:	00 00       	nop
     41a:	86 e0       	ldi	r24, 0x06	; 6
     41c:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     420:	c8 2b       	or	r28, r24
     422:	89 ef       	ldi	r24, 0xF9	; 249
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
     42e:	8c e0       	ldi	r24, 0x0C	; 12
     430:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     434:	8c 2b       	or	r24, r28
     436:	e9 ef       	ldi	r30, 0xF9	; 249
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     440:	00 00       	nop
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <HLCD_vidWriteChar>:
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	18 2f       	mov	r17, r24
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     45c:	c8 2f       	mov	r28, r24
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	67 e0       	ldi	r22, 0x07	; 7
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     468:	c8 2b       	or	r28, r24
     46a:	01 2f       	mov	r16, r17
     46c:	02 95       	swap	r16
     46e:	0f 70       	andi	r16, 0x0F	; 15
     470:	d0 e0       	ldi	r29, 0x00	; 0
     472:	15 c0       	rjmp	.+42     	; 0x49e <HLCD_vidWriteChar+0x56>
     474:	ed 2f       	mov	r30, r29
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	40 2f       	mov	r20, r16
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	0d 2e       	mov	r0, r29
     47e:	02 c0       	rjmp	.+4      	; 0x484 <HLCD_vidWriteChar+0x3c>
     480:	55 95       	asr	r21
     482:	47 95       	ror	r20
     484:	0a 94       	dec	r0
     486:	e2 f7       	brpl	.-8      	; 0x480 <HLCD_vidWriteChar+0x38>
     488:	41 70       	andi	r20, 0x01	; 1
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e8 58       	subi	r30, 0x88	; 136
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	61 81       	ldd	r22, Z+1	; 0x01
     494:	80 81       	ld	r24, Z
     496:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     49a:	c8 2b       	or	r28, r24
     49c:	df 5f       	subi	r29, 0xFF	; 255
     49e:	d4 30       	cpi	r29, 0x04	; 4
     4a0:	48 f3       	brcs	.-46     	; 0x474 <HLCD_vidWriteChar+0x2c>
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     4ac:	c8 2b       	or	r28, r24
     4ae:	89 ef       	ldi	r24, 0xF9	; 249
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <HLCD_vidWriteChar+0x6a>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <HLCD_vidWriteChar+0x70>
     4b8:	00 00       	nop
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     4c4:	c8 2b       	or	r28, r24
     4c6:	92 e4       	ldi	r25, 0x42	; 66
     4c8:	9a 95       	dec	r25
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <HLCD_vidWriteChar+0x80>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <HLCD_vidWriteChar+0x86>
     4ce:	1f 70       	andi	r17, 0x0F	; 15
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	15 c0       	rjmp	.+42     	; 0x4fe <HLCD_vidWriteChar+0xb6>
     4d4:	ed 2f       	mov	r30, r29
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	41 2f       	mov	r20, r17
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	0d 2e       	mov	r0, r29
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <HLCD_vidWriteChar+0x9c>
     4e0:	55 95       	asr	r21
     4e2:	47 95       	ror	r20
     4e4:	0a 94       	dec	r0
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <HLCD_vidWriteChar+0x98>
     4e8:	41 70       	andi	r20, 0x01	; 1
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e8 58       	subi	r30, 0x88	; 136
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	61 81       	ldd	r22, Z+1	; 0x01
     4f4:	80 81       	ld	r24, Z
     4f6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     4fa:	c8 2b       	or	r28, r24
     4fc:	df 5f       	subi	r29, 0xFF	; 255
     4fe:	d4 30       	cpi	r29, 0x04	; 4
     500:	48 f3       	brcs	.-46     	; 0x4d4 <HLCD_vidWriteChar+0x8c>
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     50c:	c8 2b       	or	r28, r24
     50e:	e9 ef       	ldi	r30, 0xF9	; 249
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	31 97       	sbiw	r30, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <HLCD_vidWriteChar+0xca>
     516:	00 c0       	rjmp	.+0      	; 0x518 <HLCD_vidWriteChar+0xd0>
     518:	00 00       	nop
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     524:	8c 2b       	or	r24, r28
     526:	e3 ef       	ldi	r30, 0xF3	; 243
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <HLCD_vidWriteChar+0xe2>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <HLCD_vidWriteChar+0xe8>
     530:	00 00       	nop
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <HLCD_ClrDisplay>:
     53c:	cf 93       	push	r28
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     544:	c8 2f       	mov	r28, r24
     546:	87 ee       	ldi	r24, 0xE7	; 231
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <HLCD_ClrDisplay+0xe>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <HLCD_ClrDisplay+0x14>
     550:	00 00       	nop
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     558:	8c 2b       	or	r24, r28
     55a:	e7 ee       	ldi	r30, 0xE7	; 231
     55c:	f3 e0       	ldi	r31, 0x03	; 3
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <HLCD_ClrDisplay+0x22>
     562:	00 c0       	rjmp	.+0      	; 0x564 <HLCD_ClrDisplay+0x28>
     564:	00 00       	nop
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <HLCD_gotoXY>:
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_gotoXY(uint8_t row, uint8_t pos)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	if (row==0 && pos < 16)
     56a:	81 11       	cpse	r24, r1
     56c:	08 c0       	rjmp	.+16     	; 0x57e <HLCD_gotoXY+0x14>
     56e:	60 31       	cpi	r22, 0x10	; 16
     570:	30 f4       	brcc	.+12     	; 0x57e <HLCD_gotoXY+0x14>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0x80);
     572:	86 2f       	mov	r24, r22
     574:	8f 70       	andi	r24, 0x0F	; 15
     576:	80 68       	ori	r24, 0x80	; 128
     578:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     57c:	08 95       	ret
	}
	else if (row==1 && pos < 16)
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	41 f4       	brne	.+16     	; 0x592 <HLCD_gotoXY+0x28>
     582:	60 31       	cpi	r22, 0x10	; 16
     584:	40 f4       	brcc	.+16     	; 0x596 <HLCD_gotoXY+0x2c>
	{
		errorStatus |= HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
     586:	86 2f       	mov	r24, r22
     588:	8f 70       	andi	r24, 0x0F	; 15
     58a:	80 6c       	ori	r24, 0xC0	; 192
     58c:	0e 94 49 01 	call	0x292	; 0x292 <HLCD_vidWritecmd>
     590:	08 95       	ret
	}
	else
	{
		errorStatus |= LCD_E_NOT_OK;
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	08 95       	ret
     596:	85 e0       	ldi	r24, 0x05	; 5
	}
	return errorStatus;
}
     598:	08 95       	ret

0000059a <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	7c 01       	movw	r14, r24
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
     5a6:	fc 01       	movw	r30, r24
     5a8:	80 81       	ld	r24, Z
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
     5aa:	c0 e0       	ldi	r28, 0x00	; 0
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
 * input param 	: str --> which take string as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
     5ae:	10 e0       	ldi	r17, 0x00	; 0
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <HLCD_WriteString+0x28>
	{
		errorStatus |= HLCD_vidWriteChar(string);
     5b2:	0e 94 24 02 	call	0x448	; 0x448 <HLCD_vidWriteChar>
     5b6:	18 2b       	or	r17, r24
		string = str[++count];
     5b8:	21 96       	adiw	r28, 0x01	; 1
     5ba:	f7 01       	movw	r30, r14
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	80 81       	ld	r24, Z
u8_en_lcdErrorsType HLCD_WriteString(uint8_t* str)
{
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	Uint16_t count = 0;
	uint8_t string = str[count];
	while(string)
     5c2:	81 11       	cpse	r24, r1
     5c4:	f6 cf       	rjmp	.-20     	; 0x5b2 <HLCD_WriteString+0x18>
	{
		errorStatus |= HLCD_vidWriteChar(string);
		string = str[++count];
	}
	return errorStatus;
}
     5c6:	81 2f       	mov	r24, r17
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	08 95       	ret

000005d4 <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: u8_en_lcdErrorsType
 * */
u8_en_lcdErrorsType HLCD_WriteInt(Uint32_t number)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	2a 97       	sbiw	r28, 0x0a	; 10
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5ec:	4a e0       	ldi	r20, 0x0A	; 10
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__itoa_ncheck>
	u8_en_lcdErrorsType errorStatus = LCD_E_OK;
	uint8_t STR[INDEX];
	itoa(number, STR, 10);
	errorStatus |= HLCD_WriteString(STR);
     5f8:	ce 01       	movw	r24, r28
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	0e 94 cd 02 	call	0x59a	; 0x59a <HLCD_WriteString>
	return errorStatus;
}
     600:	2a 96       	adiw	r28, 0x0a	; 10
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <KEYPAD_init>:
#define F_CPU 8000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	a9 f1       	breq	.+106    	; 0x684 <KEYPAD_init+0x72>
     61a:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     61c:	69 81       	ldd	r22, Y+1	; 0x01
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	88 81       	ld	r24, Y
     622:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     626:	6b 81       	ldd	r22, Y+3	; 0x03
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     630:	6d 81       	ldd	r22, Y+5	; 0x05
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	8c 81       	ldd	r24, Y+4	; 0x04
     636:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     63a:	69 81       	ldd	r22, Y+1	; 0x01
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	88 81       	ld	r24, Y
     640:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     644:	6b 81       	ldd	r22, Y+3	; 0x03
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     64e:	6d 81       	ldd	r22, Y+5	; 0x05
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     658:	6f 81       	ldd	r22, Y+7	; 0x07
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	8e 81       	ldd	r24, Y+6	; 0x06
     65e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     662:	69 85       	ldd	r22, Y+9	; 0x09
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	88 85       	ldd	r24, Y+8	; 0x08
     668:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     66c:	6b 85       	ldd	r22, Y+11	; 0x0b
     66e:	41 e0       	ldi	r20, 0x01	; 1
     670:	8a 85       	ldd	r24, Y+10	; 0x0a
     672:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     676:	6d 85       	ldd	r22, Y+13	; 0x0d
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	8c 85       	ldd	r24, Y+12	; 0x0c
     67c:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	01 c0       	rjmp	.+2      	; 0x686 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     684:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	1f 92       	push	r1
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     6a2:	07 e6       	ldi	r16, 0x67	; 103
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	f8 01       	movw	r30, r16
     6a8:	67 81       	ldd	r22, Z+7	; 0x07
     6aa:	41 e0       	ldi	r20, 0x01	; 1
     6ac:	86 81       	ldd	r24, Z+6	; 0x06
     6ae:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     6b2:	f8 01       	movw	r30, r16
     6b4:	61 85       	ldd	r22, Z+9	; 0x09
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	80 85       	ldd	r24, Z+8	; 0x08
     6ba:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     6be:	f8 01       	movw	r30, r16
     6c0:	63 85       	ldd	r22, Z+11	; 0x0b
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	82 85       	ldd	r24, Z+10	; 0x0a
     6c6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     6ca:	f8 01       	movw	r30, r16
     6cc:	65 85       	ldd	r22, Z+13	; 0x0d
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	84 85       	ldd	r24, Z+12	; 0x0c
     6d2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     6d6:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     6d8:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     6da:	42 c0       	rjmp	.+132    	; 0x760 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     6dc:	e7 e6       	ldi	r30, 0x67	; 103
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	67 81       	ldd	r22, Z+7	; 0x07
     6e2:	60 0f       	add	r22, r16
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	86 81       	ldd	r24, Z+6	; 0x06
     6e8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
		for(j=0;j<3;j++)
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	2d c0       	rjmp	.+90     	; 0x74a <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     6f0:	e7 e6       	ldi	r30, 0x67	; 103
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	61 81       	ldd	r22, Z+1	; 0x01
     6f6:	61 0f       	add	r22, r17
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	80 81       	ld	r24, Z
     700:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_readPIN>
			if(value==0)
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	81 11       	cpse	r24, r1
     708:	1f c0       	rjmp	.+62     	; 0x748 <KEYPAD_read+0xbc>
     70a:	0a c0       	rjmp	.+20     	; 0x720 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     70c:	e7 e6       	ldi	r30, 0x67	; 103
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	61 81       	ldd	r22, Z+1	; 0x01
     712:	61 0f       	add	r22, r17
     714:	ae 01       	movw	r20, r28
     716:	4f 5f       	subi	r20, 0xFF	; 255
     718:	5f 4f       	sbci	r21, 0xFF	; 255
     71a:	80 81       	ld	r24, Z
     71c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	88 23       	and	r24, r24
     724:	99 f3       	breq	.-26     	; 0x70c <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     726:	80 2f       	mov	r24, r16
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	fc 01       	movw	r30, r24
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	e8 0f       	add	r30, r24
     732:	f9 1f       	adc	r31, r25
     734:	ea 54       	subi	r30, 0x4A	; 74
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	e1 0f       	add	r30, r17
     73a:	f1 1d       	adc	r31, r1
     73c:	80 81       	ld	r24, Z
     73e:	f7 01       	movw	r30, r14
     740:	80 83       	st	Z, r24
				flag=1;
     742:	dd 24       	eor	r13, r13
     744:	d3 94       	inc	r13
				
				break;
     746:	03 c0       	rjmp	.+6      	; 0x74e <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     748:	1f 5f       	subi	r17, 0xFF	; 255
     74a:	13 30       	cpi	r17, 0x03	; 3
     74c:	88 f2       	brcs	.-94     	; 0x6f0 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     74e:	e7 e6       	ldi	r30, 0x67	; 103
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	67 81       	ldd	r22, Z+7	; 0x07
     754:	60 0f       	add	r22, r16
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	86 81       	ldd	r24, Z+6	; 0x06
     75a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     75e:	0f 5f       	subi	r16, 0xFF	; 255
     760:	04 30       	cpi	r16, 0x04	; 4
     762:	08 f4       	brcc	.+2      	; 0x766 <KEYPAD_read+0xda>
     764:	bb cf       	rjmp	.-138    	; 0x6dc <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	df 16       	cp	r13, r31
     76a:	19 f0       	breq	.+6      	; 0x772 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     76c:	8e e4       	ldi	r24, 0x4E	; 78
     76e:	f7 01       	movw	r30, r14
     770:	80 83       	st	Z, r24
		return ret_val;
	}
	
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	08 95       	ret

00000786 <TIMER_Manager_init>:
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	91 f0       	breq	.+36     	; 0x7b4 <TIMER_Manager_init+0x2e>
     790:	fc 01       	movw	r30, r24
     792:	20 81       	ld	r18, Z
     794:	23 30       	cpi	r18, 0x03	; 3
     796:	80 f4       	brcc	.+32     	; 0x7b8 <TIMER_Manager_init+0x32>
     798:	21 81       	ldd	r18, Z+1	; 0x01
     79a:	2a 30       	cpi	r18, 0x0A	; 10
     79c:	78 f4       	brcc	.+30     	; 0x7bc <TIMER_Manager_init+0x36>
     79e:	ec 01       	movw	r28, r24
     7a0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TIMER_init>
     7a4:	18 2f       	mov	r17, r24
     7a6:	68 81       	ld	r22, Y
     7a8:	8d 81       	ldd	r24, Y+5	; 0x05
     7aa:	9e 81       	ldd	r25, Y+6	; 0x06
     7ac:	0e 94 fe 07 	call	0xffc	; 0xffc <TIMER_setCallBack>
     7b0:	81 2b       	or	r24, r17
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <TIMER_Manager_init+0x38>
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <TIMER_Manager_init+0x38>
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <TIMER_Manager_init+0x38>
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	08 95       	ret

000007c6 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	51 f0       	breq	.+20     	; 0x7de <TIMER_Manager_reset+0x18>
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 81       	ld	r18, Z
     7ce:	23 30       	cpi	r18, 0x03	; 3
     7d0:	40 f4       	brcc	.+16     	; 0x7e2 <TIMER_Manager_reset+0x1c>
     7d2:	21 81       	ldd	r18, Z+1	; 0x01
     7d4:	2a 30       	cpi	r18, 0x0A	; 10
     7d6:	38 f4       	brcc	.+14     	; 0x7e6 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     7d8:	0e 94 d6 07 	call	0xfac	; 0xfac <TIMER_reset>
     7dc:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	08 95       	ret
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	08 95       	ret
     7e6:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     7e8:	08 95       	ret

000007ea <HULTRASONIC_vidTrigger>:
}

void HULTRASONIC_vidInterruptDisable(void)
{
	(void) vidTimer2_OvfIrqDisable();
	MEXTINT2_vidDisableInterrupt();
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	63 e0       	ldi	r22, 0x03	; 3
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     7f4:	8a e1       	ldi	r24, 0x1A	; 26
     7f6:	8a 95       	dec	r24
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <HULTRASONIC_vidTrigger+0xc>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <HULTRASONIC_vidTrigger+0x12>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	63 e0       	ldi	r22, 0x03	; 3
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     806:	08 95       	ret

00000808 <HULTRASONIC_vidTimerCBF>:
     808:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <g_v_u16_ovfCounts>
     80c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     810:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     814:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	a1 1d       	adc	r26, r1
     81c:	b1 1d       	adc	r27, r1
     81e:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <g_v_u16_ovfCounts>
     822:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     826:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     82a:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     82e:	08 95       	ret

00000830 <HULTRASONIC_vidSigCalc>:
     830:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <g_v_u8_flag>
     834:	81 11       	cpse	r24, r1
     836:	14 c0       	rjmp	.+40     	; 0x860 <__stack+0x1>
     838:	0e 94 7e 08 	call	0x10fc	; 0x10fc <MTIMER_vidResetTCNT>
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <g_v_u8_flag>
     84a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <g_v_u16_ovfCounts>
     84e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     852:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     856:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     85a:	0e 94 66 08 	call	0x10cc	; 0x10cc <vidTimer2_start>
     85e:	08 95       	ret
     860:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <g_v_u8_flag>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
     868:	56 c0       	rjmp	.+172    	; 0x916 <__stack+0xb7>
     86a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <vidTimer2_stop>
     86e:	0e 94 80 08 	call	0x1100	; 0x1100 <MTIMER_u8GetTCNT>
     872:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <g_v_u8_cap>
     876:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <g_v_u16_ovfCounts>
     87a:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     87e:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     882:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     886:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <g_v_u16_ovf>
     88a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <g_v_u16_ovf+0x1>
     88e:	a0 93 ea 00 	sts	0x00EA, r26	; 0x8000ea <g_v_u16_ovf+0x2>
     892:	b0 93 eb 00 	sts	0x00EB, r27	; 0x8000eb <g_v_u16_ovf+0x3>
     896:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <g_v_u8_cap>
     89a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_v_u16_ovf>
     89e:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_v_u16_ovf+0x1>
     8a2:	a0 91 ea 00 	lds	r26, 0x00EA	; 0x8000ea <g_v_u16_ovf+0x2>
     8a6:	b0 91 eb 00 	lds	r27, 0x00EB	; 0x8000eb <g_v_u16_ovf+0x3>
     8aa:	ba 2f       	mov	r27, r26
     8ac:	a9 2f       	mov	r26, r25
     8ae:	98 2f       	mov	r25, r24
     8b0:	88 27       	eor	r24, r24
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	62 0f       	add	r22, r18
     8b8:	71 1d       	adc	r23, r1
     8ba:	81 1d       	adc	r24, r1
     8bc:	91 1d       	adc	r25, r1
     8be:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     8c2:	2d ec       	ldi	r18, 0xCD	; 205
     8c4:	3c e3       	ldi	r19, 0x3C	; 60
     8c6:	49 e6       	ldi	r20, 0x69	; 105
     8c8:	54 e4       	ldi	r21, 0x44	; 68
     8ca:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	0e 94 ba 08 	call	0x1174	; 0x1174 <__subsf3>
     8da:	60 93 ca 00 	sts	0x00CA, r22	; 0x8000ca <global_f64distance>
     8de:	70 93 cb 00 	sts	0x00CB, r23	; 0x8000cb <global_f64distance+0x1>
     8e2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <global_f64distance+0x2>
     8e6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <global_f64distance+0x3>
     8ea:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <g_v_u16_ovf>
     8ee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <g_v_u16_ovf+0x1>
     8f2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <g_v_u16_ovf+0x2>
     8f6:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <g_v_u16_ovf+0x3>
     8fa:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <g_v_u16_ovfCounts>
     8fe:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <g_v_u16_ovfCounts+0x1>
     902:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <g_v_u16_ovfCounts+0x2>
     906:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <g_v_u16_ovfCounts+0x3>
     90a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <g_v_u8_flag>
     90e:	63 e0       	ldi	r22, 0x03	; 3
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
     916:	08 95       	ret

00000918 <HULTRASONIC_vidInit>:
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	63 e0       	ldi	r22, 0x03	; 3
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	62 e0       	ldi	r22, 0x02	; 2
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_init>
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	62 e0       	ldi	r22, 0x02	; 2
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_writePIN>
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <vidExtInt_init>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 1b 08 	call	0x1036	; 0x1036 <enuTimer2_init>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 4a 08 	call	0x1094	; 0x1094 <u8Timer2_setPrescallar>
     94a:	08 95       	ret

0000094c <HULTRASONIC_vidInterruptEnable>:
     94c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <vidTimer2_OvfIrqEnable>
     950:	0e 94 71 06 	call	0xce2	; 0xce2 <MEXTINT2_vidEnableInterrupt>
     954:	0e 94 82 08 	call	0x1104	; 0x1104 <MTIMER_vidEnableGlobalInterrupt>
     958:	08 95       	ret

0000095a <HULTRASONIC_u8Read>:
 * input param 	: void
 * return		: Uint8_t (Distance)
 * */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
     95a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
     95e:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <global_f64distance>
     962:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <global_f64distance+0x1>
     966:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <global_f64distance+0x2>
     96a:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <global_f64distance+0x3>
}
     96e:	08 95       	ret

00000970 <HULTRASONIC_vidCBF_TIM>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_TIM(HULTRASONIC_ptr_func TIMER_ptrFunction2)
{
	vidTimer2_setcbf_OVF(TIMER_ptrFunction2);
     970:	0e 94 77 08 	call	0x10ee	; 0x10ee <vidTimer2_setcbf_OVF>
     974:	08 95       	ret

00000976 <HULTRASONIC_vidCBF_INT>:
 * input param 	: void
 * return		: void
 * */
void HULTRASONIC_vidCBF_INT(HULTRASONIC_ptr_func EXTINT_ptrFunction2)
{
	MEXTINT_vidCallBackFunc(EXTINT_ptrFunction2);
     976:	0e 94 65 06 	call	0xcca	; 0xcca <MEXTINT_vidCallBackFunc>
     97a:	08 95       	ret

0000097c <main>:
     97c:	0e 94 7f 00 	call	0xfe	; 0xfe <APP_vidInit>
     980:	0e 94 a2 00 	call	0x144	; 0x144 <APP_vidStart>
     984:	fd cf       	rjmp	.-6      	; 0x980 <main+0x4>

00000986 <DIO_init>:
#include "dio.h"

u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     986:	68 30       	cpi	r22, 0x08	; 8
     988:	a0 f5       	brcc	.+104    	; 0x9f2 <DIO_init+0x6c>
	{
		if (port == porta)
     98a:	81 11       	cpse	r24, r1
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     98e:	8a b3       	in	r24, 0x1a	; 26
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_init+0x12>
     994:	44 0f       	add	r20, r20
     996:	55 1f       	adc	r21, r21
     998:	6a 95       	dec	r22
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_init+0xe>
     99c:	48 2b       	or	r20, r24
     99e:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
		}
		else if (port == portb)
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	59 f4       	brne	.+22     	; 0x9be <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     9a8:	87 b3       	in	r24, 0x17	; 23
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_init+0x2c>
     9ae:	44 0f       	add	r20, r20
     9b0:	55 1f       	adc	r21, r21
     9b2:	6a 95       	dec	r22
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_init+0x28>
     9b6:	48 2b       	or	r20, r24
     9b8:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	08 95       	ret
		}
		else if (port == portc)
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	59 f4       	brne	.+22     	; 0x9d8 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     9c2:	84 b3       	in	r24, 0x14	; 20
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_init+0x46>
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	6a 95       	dec	r22
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_init+0x42>
     9d0:	48 2b       	or	r20, r24
     9d2:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	08 95       	ret
		}
		else if (port == portd)
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	69 f4       	brne	.+26     	; 0x9f6 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     9dc:	81 b3       	in	r24, 0x11	; 17
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <DIO_init+0x60>
     9e2:	44 0f       	add	r20, r20
     9e4:	55 1f       	adc	r21, r21
     9e6:	6a 95       	dec	r22
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <DIO_init+0x5c>
     9ea:	48 2b       	or	r20, r24
     9ec:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     9f8:	08 95       	ret

000009fa <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     9fa:	68 30       	cpi	r22, 0x08	; 8
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <DIO_writePIN+0x6>
     9fe:	74 c0       	rjmp	.+232    	; 0xae8 <DIO_writePIN+0xee>
	{
		if (port == porta)
     a00:	81 11       	cpse	r24, r1
     a02:	1b c0       	rjmp	.+54     	; 0xa3a <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     a04:	41 30       	cpi	r20, 0x01	; 1
     a06:	61 f4       	brne	.+24     	; 0xa20 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     a08:	2b b3       	in	r18, 0x1b	; 27
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_writePIN+0x1a>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	6a 95       	dec	r22
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_writePIN+0x16>
     a18:	82 2b       	or	r24, r18
     a1a:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     a20:	2b b3       	in	r18, 0x1b	; 27
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_writePIN+0x32>
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	6a 95       	dec	r22
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_writePIN+0x2e>
     a30:	80 95       	com	r24
     a32:	82 23       	and	r24, r18
     a34:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	08 95       	ret
		}
		else if (port == portb)
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	d9 f4       	brne	.+54     	; 0xa74 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     a3e:	41 30       	cpi	r20, 0x01	; 1
     a40:	61 f4       	brne	.+24     	; 0xa5a <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     a42:	28 b3       	in	r18, 0x18	; 24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_writePIN+0x54>
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	6a 95       	dec	r22
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_writePIN+0x50>
     a52:	82 2b       	or	r24, r18
     a54:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     a5a:	28 b3       	in	r18, 0x18	; 24
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <DIO_writePIN+0x6c>
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	6a 95       	dec	r22
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <DIO_writePIN+0x68>
     a6a:	80 95       	com	r24
     a6c:	82 23       	and	r24, r18
     a6e:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret
		}
		else if (port == portc)
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	d9 f4       	brne	.+54     	; 0xaae <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     a78:	41 30       	cpi	r20, 0x01	; 1
     a7a:	61 f4       	brne	.+24     	; 0xa94 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     a7c:	25 b3       	in	r18, 0x15	; 21
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_writePIN+0x8e>
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	6a 95       	dec	r22
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_writePIN+0x8a>
     a8c:	82 2b       	or	r24, r18
     a8e:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     a94:	25 b3       	in	r18, 0x15	; 21
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_writePIN+0xa6>
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	6a 95       	dec	r22
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_writePIN+0xa2>
     aa4:	80 95       	com	r24
     aa6:	82 23       	and	r24, r18
     aa8:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
		}
		else if (port == portd)
     aae:	83 30       	cpi	r24, 0x03	; 3
     ab0:	e9 f4       	brne	.+58     	; 0xaec <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     ab2:	41 30       	cpi	r20, 0x01	; 1
     ab4:	61 f4       	brne	.+24     	; 0xace <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     ab6:	22 b3       	in	r18, 0x12	; 18
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_writePIN+0xc8>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	6a 95       	dec	r22
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_writePIN+0xc4>
     ac6:	82 2b       	or	r24, r18
     ac8:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     ace:	22 b3       	in	r18, 0x12	; 18
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_writePIN+0xe0>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	6a 95       	dec	r22
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_writePIN+0xdc>
     ade:	80 95       	com	r24
     ae0:	82 23       	and	r24, r18
     ae2:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     aec:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     aee:	08 95       	ret

00000af0 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     af0:	68 30       	cpi	r22, 0x08	; 8
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <DIO_readPIN+0x6>
     af4:	64 c0       	rjmp	.+200    	; 0xbbe <DIO_readPIN+0xce>
	{
		if (port == porta)
     af6:	81 11       	cpse	r24, r1
     af8:	17 c0       	rjmp	.+46     	; 0xb28 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     afa:	79 b3       	in	r23, 0x19	; 25
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9c 01       	movw	r18, r24
     b02:	06 2e       	mov	r0, r22
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_readPIN+0x1a>
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_readPIN+0x16>
     b0e:	87 2f       	mov	r24, r23
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 23       	and	r24, r18
     b14:	93 23       	and	r25, r19
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_readPIN+0x2c>
     b18:	96 95       	lsr	r25
     b1a:	87 95       	ror	r24
     b1c:	6a 95       	dec	r22
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_readPIN+0x28>
     b20:	fa 01       	movw	r30, r20
     b22:	80 83       	st	Z, r24
			return DIO_E_OK;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	08 95       	ret
		}
		else if (port == portb)
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	b9 f4       	brne	.+46     	; 0xb5a <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     b2c:	76 b3       	in	r23, 0x16	; 22
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9c 01       	movw	r18, r24
     b34:	06 2e       	mov	r0, r22
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <DIO_readPIN+0x4c>
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	0a 94       	dec	r0
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <DIO_readPIN+0x48>
     b40:	87 2f       	mov	r24, r23
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	82 23       	and	r24, r18
     b46:	93 23       	and	r25, r19
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <DIO_readPIN+0x5e>
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	6a 95       	dec	r22
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <DIO_readPIN+0x5a>
     b52:	fa 01       	movw	r30, r20
     b54:	80 83       	st	Z, r24
			return DIO_E_OK;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	08 95       	ret
		}
		else if (port == portc)
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	b9 f4       	brne	.+46     	; 0xb8c <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     b5e:	73 b3       	in	r23, 0x13	; 19
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9c 01       	movw	r18, r24
     b66:	06 2e       	mov	r0, r22
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_readPIN+0x7e>
     b6a:	22 0f       	add	r18, r18
     b6c:	33 1f       	adc	r19, r19
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_readPIN+0x7a>
     b72:	87 2f       	mov	r24, r23
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	82 23       	and	r24, r18
     b78:	93 23       	and	r25, r19
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_readPIN+0x90>
     b7c:	96 95       	lsr	r25
     b7e:	87 95       	ror	r24
     b80:	6a 95       	dec	r22
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_readPIN+0x8c>
     b84:	fa 01       	movw	r30, r20
     b86:	80 83       	st	Z, r24
			return DIO_E_OK;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	08 95       	ret
		}
		else if (port == portd)
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	c9 f4       	brne	.+50     	; 0xbc2 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     b90:	70 b3       	in	r23, 0x10	; 16
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9c 01       	movw	r18, r24
     b98:	06 2e       	mov	r0, r22
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_readPIN+0xb0>
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_readPIN+0xac>
     ba4:	87 2f       	mov	r24, r23
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 23       	and	r24, r18
     baa:	93 23       	and	r25, r19
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_readPIN+0xc2>
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	6a 95       	dec	r22
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_readPIN+0xbe>
     bb6:	fa 01       	movw	r30, r20
     bb8:	80 83       	st	Z, r24
			return DIO_E_OK;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     bc2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     bc4:	08 95       	ret

00000bc6 <vidExtInt_init>:
	SET_BIT(GICR_REG, INT0);
}

void MEXTINT2_vidDisableInterrupt(void)
{
	CLEAR_BIT(GICR_REG, INT2);
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <vidExtInt_init+0x6>
     bca:	70 c0       	rjmp	.+224    	; 0xcac <vidExtInt_init+0xe6>
     bcc:	64 30       	cpi	r22, 0x04	; 4
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <vidExtInt_init+0xc>
     bd0:	6f c0       	rjmp	.+222    	; 0xcb0 <vidExtInt_init+0xea>
     bd2:	81 11       	cpse	r24, r1
     bd4:	28 c0       	rjmp	.+80     	; 0xc26 <vidExtInt_init+0x60>
     bd6:	61 30       	cpi	r22, 0x01	; 1
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <vidExtInt_init+0x30>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <vidExtInt_init+0x20>
     bdc:	62 30       	cpi	r22, 0x02	; 2
     bde:	99 f0       	breq	.+38     	; 0xc06 <vidExtInt_init+0x40>
     be0:	63 30       	cpi	r22, 0x03	; 3
     be2:	c9 f0       	breq	.+50     	; 0xc16 <vidExtInt_init+0x50>
     be4:	67 c0       	rjmp	.+206    	; 0xcb4 <vidExtInt_init+0xee>
     be6:	85 b7       	in	r24, 0x35	; 53
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	85 bf       	out	0x35, r24	; 53
     bec:	85 b7       	in	r24, 0x35	; 53
     bee:	8d 7f       	andi	r24, 0xFD	; 253
     bf0:	85 bf       	out	0x35, r24	; 53
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	08 95       	ret
     bf6:	85 b7       	in	r24, 0x35	; 53
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	85 bf       	out	0x35, r24	; 53
     bfc:	85 b7       	in	r24, 0x35	; 53
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
     c00:	85 bf       	out	0x35, r24	; 53
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	08 95       	ret
     c06:	85 b7       	in	r24, 0x35	; 53
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	85 bf       	out	0x35, r24	; 53
     c0c:	85 b7       	in	r24, 0x35	; 53
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	85 bf       	out	0x35, r24	; 53
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
     c16:	85 b7       	in	r24, 0x35	; 53
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	85 bf       	out	0x35, r24	; 53
     c1c:	85 b7       	in	r24, 0x35	; 53
     c1e:	82 60       	ori	r24, 0x02	; 2
     c20:	85 bf       	out	0x35, r24	; 53
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	08 95       	ret
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	81 f5       	brne	.+96     	; 0xc8a <vidExtInt_init+0xc4>
     c2a:	61 30       	cpi	r22, 0x01	; 1
     c2c:	71 f0       	breq	.+28     	; 0xc4a <vidExtInt_init+0x84>
     c2e:	28 f0       	brcs	.+10     	; 0xc3a <vidExtInt_init+0x74>
     c30:	62 30       	cpi	r22, 0x02	; 2
     c32:	99 f0       	breq	.+38     	; 0xc5a <vidExtInt_init+0x94>
     c34:	63 30       	cpi	r22, 0x03	; 3
     c36:	c9 f0       	breq	.+50     	; 0xc6a <vidExtInt_init+0xa4>
     c38:	20 c0       	rjmp	.+64     	; 0xc7a <vidExtInt_init+0xb4>
     c3a:	85 b7       	in	r24, 0x35	; 53
     c3c:	8b 7f       	andi	r24, 0xFB	; 251
     c3e:	85 bf       	out	0x35, r24	; 53
     c40:	85 b7       	in	r24, 0x35	; 53
     c42:	87 7f       	andi	r24, 0xF7	; 247
     c44:	85 bf       	out	0x35, r24	; 53
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	19 c0       	rjmp	.+50     	; 0xc7c <vidExtInt_init+0xb6>
     c4a:	85 b7       	in	r24, 0x35	; 53
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	85 bf       	out	0x35, r24	; 53
     c50:	85 b7       	in	r24, 0x35	; 53
     c52:	87 7f       	andi	r24, 0xF7	; 247
     c54:	85 bf       	out	0x35, r24	; 53
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	11 c0       	rjmp	.+34     	; 0xc7c <vidExtInt_init+0xb6>
     c5a:	85 b7       	in	r24, 0x35	; 53
     c5c:	8b 7f       	andi	r24, 0xFB	; 251
     c5e:	85 bf       	out	0x35, r24	; 53
     c60:	85 b7       	in	r24, 0x35	; 53
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	85 bf       	out	0x35, r24	; 53
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	09 c0       	rjmp	.+18     	; 0xc7c <vidExtInt_init+0xb6>
     c6a:	85 b7       	in	r24, 0x35	; 53
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	85 bf       	out	0x35, r24	; 53
     c70:	85 b7       	in	r24, 0x35	; 53
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	85 bf       	out	0x35, r24	; 53
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <vidExtInt_init+0xb6>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	9b b7       	in	r25, 0x3b	; 59
     c7e:	90 68       	ori	r25, 0x80	; 128
     c80:	9b bf       	out	0x3b, r25	; 59
     c82:	9a b7       	in	r25, 0x3a	; 58
     c84:	90 68       	ori	r25, 0x80	; 128
     c86:	9a bf       	out	0x3a, r25	; 58
     c88:	08 95       	ret
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	a9 f4       	brne	.+42     	; 0xcb8 <vidExtInt_init+0xf2>
     c8e:	62 30       	cpi	r22, 0x02	; 2
     c90:	19 f0       	breq	.+6      	; 0xc98 <vidExtInt_init+0xd2>
     c92:	63 30       	cpi	r22, 0x03	; 3
     c94:	31 f0       	breq	.+12     	; 0xca2 <vidExtInt_init+0xdc>
     c96:	12 c0       	rjmp	.+36     	; 0xcbc <vidExtInt_init+0xf6>
     c98:	84 b7       	in	r24, 0x34	; 52
     c9a:	8f 7b       	andi	r24, 0xBF	; 191
     c9c:	84 bf       	out	0x34, r24	; 52
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	08 95       	ret
     ca2:	84 b7       	in	r24, 0x34	; 52
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	84 bf       	out	0x34, r24	; 52
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	08 95       	ret
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	08 95       	ret
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	08 95       	ret
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	08 95       	ret
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret

00000cc0 <MEXTINT_vidCallBackFuncInt0>:
     cc0:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <callBackFuncInt0+0x1>
     cc4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <callBackFuncInt0>
     cc8:	08 95       	ret

00000cca <MEXTINT_vidCallBackFunc>:
     cca:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <callBack+0x1>
     cce:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <callBack>
     cd2:	08 95       	ret

00000cd4 <MEXTINT_vidEnableInterrupt>:
     cd4:	8a b7       	in	r24, 0x3a	; 58
     cd6:	80 64       	ori	r24, 0x40	; 64
     cd8:	8a bf       	out	0x3a, r24	; 58
     cda:	8b b7       	in	r24, 0x3b	; 59
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	8b bf       	out	0x3b, r24	; 59
     ce0:	08 95       	ret

00000ce2 <MEXTINT2_vidEnableInterrupt>:
 * input param 	: void
 * return		: void
 * */
void MEXTINT2_vidEnableInterrupt(void)
{
		SET_BIT(GICR_REG, INT2);
     ce2:	8b b7       	in	r24, 0x3b	; 59
     ce4:	80 62       	ori	r24, 0x20	; 32
     ce6:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR_REG, INTF2);
     ce8:	8a b7       	in	r24, 0x3a	; 58
     cea:	80 62       	ori	r24, 0x20	; 32
     cec:	8a bf       	out	0x3a, r24	; 58
     cee:	08 95       	ret

00000cf0 <__vector_1>:

/************************************************************************************************/
/*									ISR															*/
/************************************************************************************************/
ISR(INT0_vect)
{
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
	callBackFuncInt0();
     d12:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <callBackFuncInt0>
     d16:	f0 91 d8 00 	lds	r31, 0x00D8	; 0x8000d8 <callBackFuncInt0+0x1>
     d1a:	09 95       	icall
}
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <__vector_2>:

ISR(INT1_vect)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
	callBackFunc();
     d60:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <callBackFunc>
     d64:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <callBackFunc+0x1>
     d68:	09 95       	icall
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_3>:

ISR(INT2_vect)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
	callBack();
     dae:	e0 91 d5 00 	lds	r30, 0x00D5	; 0x8000d5 <callBack>
     db2:	f0 91 d6 00 	lds	r31, 0x00D6	; 0x8000d6 <callBack+0x1>
     db6:	09 95       	icall
}
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	bf 91       	pop	r27
     dbe:	af 91       	pop	r26
     dc0:	9f 91       	pop	r25
     dc2:	8f 91       	pop	r24
     dc4:	7f 91       	pop	r23
     dc6:	6f 91       	pop	r22
     dc8:	5f 91       	pop	r21
     dca:	4f 91       	pop	r20
     dcc:	3f 91       	pop	r19
     dce:	2f 91       	pop	r18
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_11>:
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	2f 93       	push	r18
     de6:	3f 93       	push	r19
     de8:	4f 93       	push	r20
     dea:	5f 93       	push	r21
     dec:	6f 93       	push	r22
     dee:	7f 93       	push	r23
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
     dfc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <sg_Timer0_callBackPtr>
     e00:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <sg_Timer0_callBackPtr+0x1>
     e04:	89 2b       	or	r24, r25
     e06:	41 f0       	breq	.+16     	; 0xe18 <__vector_11+0x3e>
     e08:	88 b7       	in	r24, 0x38	; 56
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	88 bf       	out	0x38, r24	; 56
     e0e:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <sg_Timer0_callBackPtr>
     e12:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <sg_Timer0_callBackPtr+0x1>
     e16:	09 95       	icall
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_9>:
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <sg_Timer1_callBackPtr>
     e60:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <sg_Timer1_callBackPtr+0x1>
     e64:	89 2b       	or	r24, r25
     e66:	41 f0       	breq	.+16     	; 0xe78 <__vector_9+0x3e>
     e68:	88 b7       	in	r24, 0x38	; 56
     e6a:	8b 7f       	andi	r24, 0xFB	; 251
     e6c:	88 bf       	out	0x38, r24	; 56
     e6e:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <sg_Timer1_callBackPtr>
     e72:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <sg_Timer1_callBackPtr+0x1>
     e76:	09 95       	icall
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <TIMER_init>:
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	09 f4       	brne	.+2      	; 0xea0 <TIMER_init+0x6>
     e9e:	78 c0       	rjmp	.+240    	; 0xf90 <TIMER_init+0xf6>
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 81       	ld	r18, Z
     ea4:	23 30       	cpi	r18, 0x03	; 3
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <TIMER_init+0x10>
     ea8:	75 c0       	rjmp	.+234    	; 0xf94 <TIMER_init+0xfa>
     eaa:	31 81       	ldd	r19, Z+1	; 0x01
     eac:	3a 30       	cpi	r19, 0x0A	; 10
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <TIMER_init+0x18>
     eb0:	73 c0       	rjmp	.+230    	; 0xf98 <TIMER_init+0xfe>
     eb2:	21 30       	cpi	r18, 0x01	; 1
     eb4:	19 f1       	breq	.+70     	; 0xefc <TIMER_init+0x62>
     eb6:	20 f0       	brcs	.+8      	; 0xec0 <TIMER_init+0x26>
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	09 f4       	brne	.+2      	; 0xebe <TIMER_init+0x24>
     ebc:	50 c0       	rjmp	.+160    	; 0xf5e <TIMER_init+0xc4>
     ebe:	6e c0       	rjmp	.+220    	; 0xf9c <TIMER_init+0x102>
     ec0:	12 be       	out	0x32, r1	; 50
     ec2:	13 be       	out	0x33, r1	; 51
     ec4:	1c be       	out	0x3c, r1	; 60
     ec6:	fc 01       	movw	r30, r24
     ec8:	22 81       	ldd	r18, Z+2	; 0x02
     eca:	22 bf       	out	0x32, r18	; 50
     ecc:	23 b7       	in	r18, 0x33	; 51
     ece:	20 68       	ori	r18, 0x80	; 128
     ed0:	23 bf       	out	0x33, r18	; 51
     ed2:	23 b7       	in	r18, 0x33	; 51
     ed4:	2f 7b       	andi	r18, 0xBF	; 191
     ed6:	23 bf       	out	0x33, r18	; 51
     ed8:	23 b7       	in	r18, 0x33	; 51
     eda:	27 7f       	andi	r18, 0xF7	; 247
     edc:	23 bf       	out	0x33, r18	; 51
     ede:	23 b7       	in	r18, 0x33	; 51
     ee0:	2f 7e       	andi	r18, 0xEF	; 239
     ee2:	23 bf       	out	0x33, r18	; 51
     ee4:	23 b7       	in	r18, 0x33	; 51
     ee6:	2f 7d       	andi	r18, 0xDF	; 223
     ee8:	23 bf       	out	0x33, r18	; 51
     eea:	84 81       	ldd	r24, Z+4	; 0x04
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	09 f0       	breq	.+2      	; 0xef2 <TIMER_init+0x58>
     ef0:	57 c0       	rjmp	.+174    	; 0xfa0 <TIMER_init+0x106>
     ef2:	89 b7       	in	r24, 0x39	; 57
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	89 bf       	out	0x39, r24	; 57
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret
     efc:	1c bc       	out	0x2c, r1	; 44
     efe:	1d bc       	out	0x2d, r1	; 45
     f00:	1f bc       	out	0x2f, r1	; 47
     f02:	1e bc       	out	0x2e, r1	; 46
     f04:	1b bc       	out	0x2b, r1	; 43
     f06:	1a bc       	out	0x2a, r1	; 42
     f08:	fc 01       	movw	r30, r24
     f0a:	22 81       	ldd	r18, Z+2	; 0x02
     f0c:	33 81       	ldd	r19, Z+3	; 0x03
     f0e:	3d bd       	out	0x2d, r19	; 45
     f10:	2c bd       	out	0x2c, r18	; 44
     f12:	2f b5       	in	r18, 0x2f	; 47
     f14:	28 60       	ori	r18, 0x08	; 8
     f16:	2f bd       	out	0x2f, r18	; 47
     f18:	2f b5       	in	r18, 0x2f	; 47
     f1a:	24 60       	ori	r18, 0x04	; 4
     f1c:	2f bd       	out	0x2f, r18	; 47
     f1e:	2f b5       	in	r18, 0x2f	; 47
     f20:	2e 7f       	andi	r18, 0xFE	; 254
     f22:	2f bd       	out	0x2f, r18	; 47
     f24:	2f b5       	in	r18, 0x2f	; 47
     f26:	2d 7f       	andi	r18, 0xFD	; 253
     f28:	2f bd       	out	0x2f, r18	; 47
     f2a:	2e b5       	in	r18, 0x2e	; 46
     f2c:	2f 7e       	andi	r18, 0xEF	; 239
     f2e:	2e bd       	out	0x2e, r18	; 46
     f30:	2e b5       	in	r18, 0x2e	; 46
     f32:	27 7f       	andi	r18, 0xF7	; 247
     f34:	2e bd       	out	0x2e, r18	; 46
     f36:	2f b5       	in	r18, 0x2f	; 47
     f38:	2f 7b       	andi	r18, 0xBF	; 191
     f3a:	2f bd       	out	0x2f, r18	; 47
     f3c:	2f b5       	in	r18, 0x2f	; 47
     f3e:	2f 77       	andi	r18, 0x7F	; 127
     f40:	2f bd       	out	0x2f, r18	; 47
     f42:	2f b5       	in	r18, 0x2f	; 47
     f44:	2f 7e       	andi	r18, 0xEF	; 239
     f46:	2f bd       	out	0x2f, r18	; 47
     f48:	2f b5       	in	r18, 0x2f	; 47
     f4a:	2f 7d       	andi	r18, 0xDF	; 223
     f4c:	2f bd       	out	0x2f, r18	; 47
     f4e:	84 81       	ldd	r24, Z+4	; 0x04
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	41 f5       	brne	.+80     	; 0xfa4 <TIMER_init+0x10a>
     f54:	89 b7       	in	r24, 0x39	; 57
     f56:	84 60       	ori	r24, 0x04	; 4
     f58:	89 bf       	out	0x39, r24	; 57
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	08 95       	ret
     f5e:	14 bc       	out	0x24, r1	; 36
     f60:	15 bc       	out	0x25, r1	; 37
     f62:	13 bc       	out	0x23, r1	; 35
     f64:	14 bc       	out	0x24, r1	; 36
     f66:	25 b5       	in	r18, 0x25	; 37
     f68:	2f 7b       	andi	r18, 0xBF	; 191
     f6a:	25 bd       	out	0x25, r18	; 37
     f6c:	25 b5       	in	r18, 0x25	; 37
     f6e:	27 7f       	andi	r18, 0xF7	; 247
     f70:	25 bd       	out	0x25, r18	; 37
     f72:	25 b5       	in	r18, 0x25	; 37
     f74:	2f 7e       	andi	r18, 0xEF	; 239
     f76:	25 bd       	out	0x25, r18	; 37
     f78:	25 b5       	in	r18, 0x25	; 37
     f7a:	2f 7d       	andi	r18, 0xDF	; 223
     f7c:	25 bd       	out	0x25, r18	; 37
     f7e:	fc 01       	movw	r30, r24
     f80:	84 81       	ldd	r24, Z+4	; 0x04
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	89 f4       	brne	.+34     	; 0xfa8 <TIMER_init+0x10e>
     f86:	89 b7       	in	r24, 0x39	; 57
     f88:	80 64       	ori	r24, 0x40	; 64
     f8a:	89 bf       	out	0x39, r24	; 57
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	08 95       	ret
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	08 95       	ret
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	08 95       	ret
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	08 95       	ret
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	08 95       	ret
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret

00000fac <TIMER_reset>:
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	f1 f0       	breq	.+60     	; 0xfec <TIMER_reset+0x40>
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 81       	ld	r18, Z
     fb4:	23 30       	cpi	r18, 0x03	; 3
     fb6:	e0 f4       	brcc	.+56     	; 0xff0 <TIMER_reset+0x44>
     fb8:	31 81       	ldd	r19, Z+1	; 0x01
     fba:	3a 30       	cpi	r19, 0x0A	; 10
     fbc:	d8 f4       	brcc	.+54     	; 0xff4 <TIMER_reset+0x48>
     fbe:	21 30       	cpi	r18, 0x01	; 1
     fc0:	49 f0       	breq	.+18     	; 0xfd4 <TIMER_reset+0x28>
     fc2:	18 f0       	brcs	.+6      	; 0xfca <TIMER_reset+0x1e>
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	69 f0       	breq	.+26     	; 0xfe2 <TIMER_reset+0x36>
     fc8:	17 c0       	rjmp	.+46     	; 0xff8 <TIMER_reset+0x4c>
     fca:	fc 01       	movw	r30, r24
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	82 bf       	out	0x32, r24	; 50
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 95       	ret
     fd4:	fc 01       	movw	r30, r24
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	9d bd       	out	0x2d, r25	; 45
     fdc:	8c bd       	out	0x2c, r24	; 44
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	08 95       	ret
     fe2:	fc 01       	movw	r30, r24
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	84 bd       	out	0x24, r24	; 36
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	08 95       	ret
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	08 95       	ret
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	08 95       	ret
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	08 95       	ret

00000ffc <TIMER_setCallBack>:
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	a9 f0       	breq	.+42     	; 0x102a <TIMER_setCallBack+0x2e>
    1000:	63 30       	cpi	r22, 0x03	; 3
    1002:	a8 f4       	brcc	.+42     	; 0x102e <TIMER_setCallBack+0x32>
    1004:	61 30       	cpi	r22, 0x01	; 1
    1006:	59 f0       	breq	.+22     	; 0x101e <TIMER_setCallBack+0x22>
    1008:	20 f0       	brcs	.+8      	; 0x1012 <TIMER_setCallBack+0x16>
    100a:	62 30       	cpi	r22, 0x02	; 2
    100c:	91 f0       	breq	.+36     	; 0x1032 <TIMER_setCallBack+0x36>
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	08 95       	ret
    1012:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <sg_Timer0_callBackPtr+0x1>
    1016:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <sg_Timer0_callBackPtr>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	08 95       	ret
    101e:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <sg_Timer1_callBackPtr+0x1>
    1022:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <sg_Timer1_callBackPtr>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	08 95       	ret
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	08 95       	ret
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	08 95       	ret

00001036 <enuTimer2_init>:
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	48 f5       	brcc	.+82     	; 0x108c <enuTimer2_init+0x56>
    103a:	14 bc       	out	0x24, r1	; 36
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	71 f0       	breq	.+28     	; 0x105c <enuTimer2_init+0x26>
    1040:	28 f0       	brcs	.+10     	; 0x104c <enuTimer2_init+0x16>
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	99 f0       	breq	.+38     	; 0x106c <enuTimer2_init+0x36>
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	c9 f0       	breq	.+50     	; 0x107c <enuTimer2_init+0x46>
    104a:	22 c0       	rjmp	.+68     	; 0x1090 <enuTimer2_init+0x5a>
    104c:	85 b5       	in	r24, 0x25	; 37
    104e:	87 7f       	andi	r24, 0xF7	; 247
    1050:	85 bd       	out	0x25, r24	; 37
    1052:	85 b5       	in	r24, 0x25	; 37
    1054:	8f 7b       	andi	r24, 0xBF	; 191
    1056:	85 bd       	out	0x25, r24	; 37
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	08 95       	ret
    105c:	85 b5       	in	r24, 0x25	; 37
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	85 bd       	out	0x25, r24	; 37
    1062:	85 b5       	in	r24, 0x25	; 37
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	85 bd       	out	0x25, r24	; 37
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 95       	ret
    106c:	85 b5       	in	r24, 0x25	; 37
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	85 bd       	out	0x25, r24	; 37
    1072:	85 b5       	in	r24, 0x25	; 37
    1074:	8f 7b       	andi	r24, 0xBF	; 191
    1076:	85 bd       	out	0x25, r24	; 37
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	08 95       	ret
    107c:	85 b5       	in	r24, 0x25	; 37
    107e:	88 60       	ori	r24, 0x08	; 8
    1080:	85 bd       	out	0x25, r24	; 37
    1082:	85 b5       	in	r24, 0x25	; 37
    1084:	80 64       	ori	r24, 0x40	; 64
    1086:	85 bd       	out	0x25, r24	; 37
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	08 95       	ret
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	08 95       	ret

00001094 <u8Timer2_setPrescallar>:
    1094:	88 30       	cpi	r24, 0x08	; 8
    1096:	70 f4       	brcc	.+28     	; 0x10b4 <u8Timer2_setPrescallar+0x20>
    1098:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <global_prescaller>
    109c:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <global_timerStatus>
    10a0:	91 30       	cpi	r25, 0x01	; 1
    10a2:	51 f4       	brne	.+20     	; 0x10b8 <u8Timer2_setPrescallar+0x24>
    10a4:	95 b5       	in	r25, 0x25	; 37
    10a6:	98 7f       	andi	r25, 0xF8	; 248
    10a8:	89 2b       	or	r24, r25
    10aa:	95 b5       	in	r25, 0x25	; 37
    10ac:	89 2b       	or	r24, r25
    10ae:	85 bd       	out	0x25, r24	; 37
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	08 95       	ret
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	08 95       	ret
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	08 95       	ret

000010bc <vidTimer2_OvfIrqEnable>:
    10bc:	88 b7       	in	r24, 0x38	; 56
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	88 bf       	out	0x38, r24	; 56
    10c2:	89 b7       	in	r24, 0x39	; 57
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	89 bf       	out	0x39, r24	; 57
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret

000010cc <vidTimer2_start>:
    10cc:	95 b5       	in	r25, 0x25	; 37
    10ce:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <global_prescaller>
    10d2:	89 2b       	or	r24, r25
    10d4:	85 bd       	out	0x25, r24	; 37
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <global_timerStatus>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	08 95       	ret

000010e0 <vidTimer2_stop>:
    10e0:	85 b5       	in	r24, 0x25	; 37
    10e2:	88 7f       	andi	r24, 0xF8	; 248
    10e4:	85 bd       	out	0x25, r24	; 37
    10e6:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <global_timerStatus>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	21 f0       	breq	.+8      	; 0x10fa <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    10f2:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <globalCallFunc+0x1>
    10f6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <globalCallFunc>
    10fa:	08 95       	ret

000010fc <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
	TCNT2 = 0;
    10fc:	14 bc       	out	0x24, r1	; 36
    10fe:	08 95       	ret

00001100 <MTIMER_u8GetTCNT>:
}
uint8_t MTIMER_u8GetTCNT(void)
{
	return TCNT2;
    1100:	84 b5       	in	r24, 0x24	; 36
}
    1102:	08 95       	ret

00001104 <MTIMER_vidEnableGlobalInterrupt>:


void MTIMER_vidEnableGlobalInterrupt(void)
{
	
	SET_BIT(SREG,7);
    1104:	8f b7       	in	r24, 0x3f	; 63
    1106:	80 68       	ori	r24, 0x80	; 128
    1108:	8f bf       	out	0x3f, r24	; 63
    110a:	08 95       	ret

0000110c <__vector_5>:
}
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
	static uint8_t counter = 0;
	counter++;
    112e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <counter.1817>
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <counter.1817>
	if(counter == global_ovf)
    1138:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <global_ovf>
    113c:	89 13       	cpse	r24, r25
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <__vector_5+0x46>
	{
		if (globalCallFunc != NULL)
    1140:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <globalCallFunc>
    1144:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <globalCallFunc+0x1>
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	19 f0       	breq	.+6      	; 0x1152 <__vector_5+0x46>
		{
			counter = 0;
    114c:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <counter.1817>

			globalCallFunc();
    1150:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__subsf3>:
    1174:	50 58       	subi	r21, 0x80	; 128

00001176 <__addsf3>:
    1176:	bb 27       	eor	r27, r27
    1178:	aa 27       	eor	r26, r26
    117a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__addsf3x>
    117e:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_round>
    1182:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_pscA>
    1186:	38 f0       	brcs	.+14     	; 0x1196 <__addsf3+0x20>
    1188:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_pscB>
    118c:	20 f0       	brcs	.+8      	; 0x1196 <__addsf3+0x20>
    118e:	39 f4       	brne	.+14     	; 0x119e <__addsf3+0x28>
    1190:	9f 3f       	cpi	r25, 0xFF	; 255
    1192:	19 f4       	brne	.+6      	; 0x119a <__addsf3+0x24>
    1194:	26 f4       	brtc	.+8      	; 0x119e <__addsf3+0x28>
    1196:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_nan>
    119a:	0e f4       	brtc	.+2      	; 0x119e <__addsf3+0x28>
    119c:	e0 95       	com	r30
    119e:	e7 fb       	bst	r30, 7
    11a0:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>

000011a4 <__addsf3x>:
    11a4:	e9 2f       	mov	r30, r25
    11a6:	0e 94 2d 0a 	call	0x145a	; 0x145a <__fp_split3>
    11aa:	58 f3       	brcs	.-42     	; 0x1182 <__addsf3+0xc>
    11ac:	ba 17       	cp	r27, r26
    11ae:	62 07       	cpc	r22, r18
    11b0:	73 07       	cpc	r23, r19
    11b2:	84 07       	cpc	r24, r20
    11b4:	95 07       	cpc	r25, r21
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__addsf3x+0x1c>
    11b8:	79 f4       	brne	.+30     	; 0x11d8 <__addsf3x+0x34>
    11ba:	a6 f5       	brtc	.+104    	; 0x1224 <__addsf3x+0x80>
    11bc:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_zero>
    11c0:	0e f4       	brtc	.+2      	; 0x11c4 <__addsf3x+0x20>
    11c2:	e0 95       	com	r30
    11c4:	0b 2e       	mov	r0, r27
    11c6:	ba 2f       	mov	r27, r26
    11c8:	a0 2d       	mov	r26, r0
    11ca:	0b 01       	movw	r0, r22
    11cc:	b9 01       	movw	r22, r18
    11ce:	90 01       	movw	r18, r0
    11d0:	0c 01       	movw	r0, r24
    11d2:	ca 01       	movw	r24, r20
    11d4:	a0 01       	movw	r20, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	ff 27       	eor	r31, r31
    11da:	59 1b       	sub	r21, r25
    11dc:	99 f0       	breq	.+38     	; 0x1204 <__addsf3x+0x60>
    11de:	59 3f       	cpi	r21, 0xF9	; 249
    11e0:	50 f4       	brcc	.+20     	; 0x11f6 <__addsf3x+0x52>
    11e2:	50 3e       	cpi	r21, 0xE0	; 224
    11e4:	68 f1       	brcs	.+90     	; 0x1240 <__addsf3x+0x9c>
    11e6:	1a 16       	cp	r1, r26
    11e8:	f0 40       	sbci	r31, 0x00	; 0
    11ea:	a2 2f       	mov	r26, r18
    11ec:	23 2f       	mov	r18, r19
    11ee:	34 2f       	mov	r19, r20
    11f0:	44 27       	eor	r20, r20
    11f2:	58 5f       	subi	r21, 0xF8	; 248
    11f4:	f3 cf       	rjmp	.-26     	; 0x11dc <__addsf3x+0x38>
    11f6:	46 95       	lsr	r20
    11f8:	37 95       	ror	r19
    11fa:	27 95       	ror	r18
    11fc:	a7 95       	ror	r26
    11fe:	f0 40       	sbci	r31, 0x00	; 0
    1200:	53 95       	inc	r21
    1202:	c9 f7       	brne	.-14     	; 0x11f6 <__addsf3x+0x52>
    1204:	7e f4       	brtc	.+30     	; 0x1224 <__addsf3x+0x80>
    1206:	1f 16       	cp	r1, r31
    1208:	ba 0b       	sbc	r27, r26
    120a:	62 0b       	sbc	r22, r18
    120c:	73 0b       	sbc	r23, r19
    120e:	84 0b       	sbc	r24, r20
    1210:	ba f0       	brmi	.+46     	; 0x1240 <__addsf3x+0x9c>
    1212:	91 50       	subi	r25, 0x01	; 1
    1214:	a1 f0       	breq	.+40     	; 0x123e <__addsf3x+0x9a>
    1216:	ff 0f       	add	r31, r31
    1218:	bb 1f       	adc	r27, r27
    121a:	66 1f       	adc	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	c2 f7       	brpl	.-16     	; 0x1212 <__addsf3x+0x6e>
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <__addsf3x+0x9c>
    1224:	ba 0f       	add	r27, r26
    1226:	62 1f       	adc	r22, r18
    1228:	73 1f       	adc	r23, r19
    122a:	84 1f       	adc	r24, r20
    122c:	48 f4       	brcc	.+18     	; 0x1240 <__addsf3x+0x9c>
    122e:	87 95       	ror	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f7 95       	ror	r31
    1238:	9e 3f       	cpi	r25, 0xFE	; 254
    123a:	08 f0       	brcs	.+2      	; 0x123e <__addsf3x+0x9a>
    123c:	b0 cf       	rjmp	.-160    	; 0x119e <__addsf3+0x28>
    123e:	93 95       	inc	r25
    1240:	88 0f       	add	r24, r24
    1242:	08 f0       	brcs	.+2      	; 0x1246 <__addsf3x+0xa2>
    1244:	99 27       	eor	r25, r25
    1246:	ee 0f       	add	r30, r30
    1248:	97 95       	ror	r25
    124a:	87 95       	ror	r24
    124c:	08 95       	ret

0000124e <__divsf3>:
    124e:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divsf3x>
    1252:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_round>
    1256:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_pscB>
    125a:	58 f0       	brcs	.+22     	; 0x1272 <__divsf3+0x24>
    125c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_pscA>
    1260:	40 f0       	brcs	.+16     	; 0x1272 <__divsf3+0x24>
    1262:	29 f4       	brne	.+10     	; 0x126e <__divsf3+0x20>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	29 f0       	breq	.+10     	; 0x1272 <__divsf3+0x24>
    1268:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>
    126c:	51 11       	cpse	r21, r1
    126e:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_szero>
    1272:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_nan>

00001276 <__divsf3x>:
    1276:	0e 94 2d 0a 	call	0x145a	; 0x145a <__fp_split3>
    127a:	68 f3       	brcs	.-38     	; 0x1256 <__divsf3+0x8>

0000127c <__divsf3_pse>:
    127c:	99 23       	and	r25, r25
    127e:	b1 f3       	breq	.-20     	; 0x126c <__divsf3+0x1e>
    1280:	55 23       	and	r21, r21
    1282:	91 f3       	breq	.-28     	; 0x1268 <__divsf3+0x1a>
    1284:	95 1b       	sub	r25, r21
    1286:	55 0b       	sbc	r21, r21
    1288:	bb 27       	eor	r27, r27
    128a:	aa 27       	eor	r26, r26
    128c:	62 17       	cp	r22, r18
    128e:	73 07       	cpc	r23, r19
    1290:	84 07       	cpc	r24, r20
    1292:	38 f0       	brcs	.+14     	; 0x12a2 <__divsf3_pse+0x26>
    1294:	9f 5f       	subi	r25, 0xFF	; 255
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	44 1f       	adc	r20, r20
    129e:	aa 1f       	adc	r26, r26
    12a0:	a9 f3       	breq	.-22     	; 0x128c <__divsf3_pse+0x10>
    12a2:	35 d0       	rcall	.+106    	; 0x130e <__divsf3_pse+0x92>
    12a4:	0e 2e       	mov	r0, r30
    12a6:	3a f0       	brmi	.+14     	; 0x12b6 <__divsf3_pse+0x3a>
    12a8:	e0 e8       	ldi	r30, 0x80	; 128
    12aa:	32 d0       	rcall	.+100    	; 0x1310 <__divsf3_pse+0x94>
    12ac:	91 50       	subi	r25, 0x01	; 1
    12ae:	50 40       	sbci	r21, 0x00	; 0
    12b0:	e6 95       	lsr	r30
    12b2:	00 1c       	adc	r0, r0
    12b4:	ca f7       	brpl	.-14     	; 0x12a8 <__divsf3_pse+0x2c>
    12b6:	2b d0       	rcall	.+86     	; 0x130e <__divsf3_pse+0x92>
    12b8:	fe 2f       	mov	r31, r30
    12ba:	29 d0       	rcall	.+82     	; 0x130e <__divsf3_pse+0x92>
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	bb 1f       	adc	r27, r27
    12c4:	26 17       	cp	r18, r22
    12c6:	37 07       	cpc	r19, r23
    12c8:	48 07       	cpc	r20, r24
    12ca:	ab 07       	cpc	r26, r27
    12cc:	b0 e8       	ldi	r27, 0x80	; 128
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__divsf3_pse+0x56>
    12d0:	bb 0b       	sbc	r27, r27
    12d2:	80 2d       	mov	r24, r0
    12d4:	bf 01       	movw	r22, r30
    12d6:	ff 27       	eor	r31, r31
    12d8:	93 58       	subi	r25, 0x83	; 131
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	3a f0       	brmi	.+14     	; 0x12ec <__divsf3_pse+0x70>
    12de:	9e 3f       	cpi	r25, 0xFE	; 254
    12e0:	51 05       	cpc	r21, r1
    12e2:	78 f0       	brcs	.+30     	; 0x1302 <__divsf3_pse+0x86>
    12e4:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>
    12e8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_szero>
    12ec:	5f 3f       	cpi	r21, 0xFF	; 255
    12ee:	e4 f3       	brlt	.-8      	; 0x12e8 <__divsf3_pse+0x6c>
    12f0:	98 3e       	cpi	r25, 0xE8	; 232
    12f2:	d4 f3       	brlt	.-12     	; 0x12e8 <__divsf3_pse+0x6c>
    12f4:	86 95       	lsr	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f7 95       	ror	r31
    12fe:	9f 5f       	subi	r25, 0xFF	; 255
    1300:	c9 f7       	brne	.-14     	; 0x12f4 <__divsf3_pse+0x78>
    1302:	88 0f       	add	r24, r24
    1304:	91 1d       	adc	r25, r1
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret
    130e:	e1 e0       	ldi	r30, 0x01	; 1
    1310:	66 0f       	add	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	bb 1f       	adc	r27, r27
    1318:	62 17       	cp	r22, r18
    131a:	73 07       	cpc	r23, r19
    131c:	84 07       	cpc	r24, r20
    131e:	ba 07       	cpc	r27, r26
    1320:	20 f0       	brcs	.+8      	; 0x132a <__divsf3_pse+0xae>
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	ba 0b       	sbc	r27, r26
    132a:	ee 1f       	adc	r30, r30
    132c:	88 f7       	brcc	.-30     	; 0x1310 <__divsf3_pse+0x94>
    132e:	e0 95       	com	r30
    1330:	08 95       	ret

00001332 <__fixunssfsi>:
    1332:	0e 94 35 0a 	call	0x146a	; 0x146a <__fp_splitA>
    1336:	88 f0       	brcs	.+34     	; 0x135a <__fixunssfsi+0x28>
    1338:	9f 57       	subi	r25, 0x7F	; 127
    133a:	98 f0       	brcs	.+38     	; 0x1362 <__fixunssfsi+0x30>
    133c:	b9 2f       	mov	r27, r25
    133e:	99 27       	eor	r25, r25
    1340:	b7 51       	subi	r27, 0x17	; 23
    1342:	b0 f0       	brcs	.+44     	; 0x1370 <__fixunssfsi+0x3e>
    1344:	e1 f0       	breq	.+56     	; 0x137e <__fixunssfsi+0x4c>
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	1a f0       	brmi	.+6      	; 0x1356 <__fixunssfsi+0x24>
    1350:	ba 95       	dec	r27
    1352:	c9 f7       	brne	.-14     	; 0x1346 <__fixunssfsi+0x14>
    1354:	14 c0       	rjmp	.+40     	; 0x137e <__fixunssfsi+0x4c>
    1356:	b1 30       	cpi	r27, 0x01	; 1
    1358:	91 f0       	breq	.+36     	; 0x137e <__fixunssfsi+0x4c>
    135a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_zero>
    135e:	b1 e0       	ldi	r27, 0x01	; 1
    1360:	08 95       	ret
    1362:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_zero>
    1366:	67 2f       	mov	r22, r23
    1368:	78 2f       	mov	r23, r24
    136a:	88 27       	eor	r24, r24
    136c:	b8 5f       	subi	r27, 0xF8	; 248
    136e:	39 f0       	breq	.+14     	; 0x137e <__fixunssfsi+0x4c>
    1370:	b9 3f       	cpi	r27, 0xF9	; 249
    1372:	cc f3       	brlt	.-14     	; 0x1366 <__fixunssfsi+0x34>
    1374:	86 95       	lsr	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b3 95       	inc	r27
    137c:	d9 f7       	brne	.-10     	; 0x1374 <__fixunssfsi+0x42>
    137e:	3e f4       	brtc	.+14     	; 0x138e <__fixunssfsi+0x5c>
    1380:	90 95       	com	r25
    1382:	80 95       	com	r24
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	08 95       	ret

00001390 <__floatunsisf>:
    1390:	e8 94       	clt
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <__floatsisf+0x12>

00001394 <__floatsisf>:
    1394:	97 fb       	bst	r25, 7
    1396:	3e f4       	brtc	.+14     	; 0x13a6 <__floatsisf+0x12>
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	99 23       	and	r25, r25
    13a8:	a9 f0       	breq	.+42     	; 0x13d4 <__floatsisf+0x40>
    13aa:	f9 2f       	mov	r31, r25
    13ac:	96 e9       	ldi	r25, 0x96	; 150
    13ae:	bb 27       	eor	r27, r27
    13b0:	93 95       	inc	r25
    13b2:	f6 95       	lsr	r31
    13b4:	87 95       	ror	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	f1 11       	cpse	r31, r1
    13be:	f8 cf       	rjmp	.-16     	; 0x13b0 <__floatsisf+0x1c>
    13c0:	fa f4       	brpl	.+62     	; 0x1400 <__floatsisf+0x6c>
    13c2:	bb 0f       	add	r27, r27
    13c4:	11 f4       	brne	.+4      	; 0x13ca <__floatsisf+0x36>
    13c6:	60 ff       	sbrs	r22, 0
    13c8:	1b c0       	rjmp	.+54     	; 0x1400 <__floatsisf+0x6c>
    13ca:	6f 5f       	subi	r22, 0xFF	; 255
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	16 c0       	rjmp	.+44     	; 0x1400 <__floatsisf+0x6c>
    13d4:	88 23       	and	r24, r24
    13d6:	11 f0       	breq	.+4      	; 0x13dc <__floatsisf+0x48>
    13d8:	96 e9       	ldi	r25, 0x96	; 150
    13da:	11 c0       	rjmp	.+34     	; 0x13fe <__floatsisf+0x6a>
    13dc:	77 23       	and	r23, r23
    13de:	21 f0       	breq	.+8      	; 0x13e8 <__floatsisf+0x54>
    13e0:	9e e8       	ldi	r25, 0x8E	; 142
    13e2:	87 2f       	mov	r24, r23
    13e4:	76 2f       	mov	r23, r22
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <__floatsisf+0x5e>
    13e8:	66 23       	and	r22, r22
    13ea:	71 f0       	breq	.+28     	; 0x1408 <__floatsisf+0x74>
    13ec:	96 e8       	ldi	r25, 0x86	; 134
    13ee:	86 2f       	mov	r24, r22
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	2a f0       	brmi	.+10     	; 0x1400 <__floatsisf+0x6c>
    13f6:	9a 95       	dec	r25
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	da f7       	brpl	.-10     	; 0x13f6 <__floatsisf+0x62>
    1400:	88 0f       	add	r24, r24
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	97 f9       	bld	r25, 7
    1408:	08 95       	ret

0000140a <__fp_inf>:
    140a:	97 f9       	bld	r25, 7
    140c:	9f 67       	ori	r25, 0x7F	; 127
    140e:	80 e8       	ldi	r24, 0x80	; 128
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	08 95       	ret

00001416 <__fp_nan>:
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	80 ec       	ldi	r24, 0xC0	; 192
    141a:	08 95       	ret

0000141c <__fp_pscA>:
    141c:	00 24       	eor	r0, r0
    141e:	0a 94       	dec	r0
    1420:	16 16       	cp	r1, r22
    1422:	17 06       	cpc	r1, r23
    1424:	18 06       	cpc	r1, r24
    1426:	09 06       	cpc	r0, r25
    1428:	08 95       	ret

0000142a <__fp_pscB>:
    142a:	00 24       	eor	r0, r0
    142c:	0a 94       	dec	r0
    142e:	12 16       	cp	r1, r18
    1430:	13 06       	cpc	r1, r19
    1432:	14 06       	cpc	r1, r20
    1434:	05 06       	cpc	r0, r21
    1436:	08 95       	ret

00001438 <__fp_round>:
    1438:	09 2e       	mov	r0, r25
    143a:	03 94       	inc	r0
    143c:	00 0c       	add	r0, r0
    143e:	11 f4       	brne	.+4      	; 0x1444 <__fp_round+0xc>
    1440:	88 23       	and	r24, r24
    1442:	52 f0       	brmi	.+20     	; 0x1458 <__fp_round+0x20>
    1444:	bb 0f       	add	r27, r27
    1446:	40 f4       	brcc	.+16     	; 0x1458 <__fp_round+0x20>
    1448:	bf 2b       	or	r27, r31
    144a:	11 f4       	brne	.+4      	; 0x1450 <__fp_round+0x18>
    144c:	60 ff       	sbrs	r22, 0
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <__fp_round+0x20>
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	08 95       	ret

0000145a <__fp_split3>:
    145a:	57 fd       	sbrc	r21, 7
    145c:	90 58       	subi	r25, 0x80	; 128
    145e:	44 0f       	add	r20, r20
    1460:	55 1f       	adc	r21, r21
    1462:	59 f0       	breq	.+22     	; 0x147a <__fp_splitA+0x10>
    1464:	5f 3f       	cpi	r21, 0xFF	; 255
    1466:	71 f0       	breq	.+28     	; 0x1484 <__fp_splitA+0x1a>
    1468:	47 95       	ror	r20

0000146a <__fp_splitA>:
    146a:	88 0f       	add	r24, r24
    146c:	97 fb       	bst	r25, 7
    146e:	99 1f       	adc	r25, r25
    1470:	61 f0       	breq	.+24     	; 0x148a <__fp_splitA+0x20>
    1472:	9f 3f       	cpi	r25, 0xFF	; 255
    1474:	79 f0       	breq	.+30     	; 0x1494 <__fp_splitA+0x2a>
    1476:	87 95       	ror	r24
    1478:	08 95       	ret
    147a:	12 16       	cp	r1, r18
    147c:	13 06       	cpc	r1, r19
    147e:	14 06       	cpc	r1, r20
    1480:	55 1f       	adc	r21, r21
    1482:	f2 cf       	rjmp	.-28     	; 0x1468 <__fp_split3+0xe>
    1484:	46 95       	lsr	r20
    1486:	f1 df       	rcall	.-30     	; 0x146a <__fp_splitA>
    1488:	08 c0       	rjmp	.+16     	; 0x149a <__fp_splitA+0x30>
    148a:	16 16       	cp	r1, r22
    148c:	17 06       	cpc	r1, r23
    148e:	18 06       	cpc	r1, r24
    1490:	99 1f       	adc	r25, r25
    1492:	f1 cf       	rjmp	.-30     	; 0x1476 <__fp_splitA+0xc>
    1494:	86 95       	lsr	r24
    1496:	71 05       	cpc	r23, r1
    1498:	61 05       	cpc	r22, r1
    149a:	08 94       	sec
    149c:	08 95       	ret

0000149e <__fp_zero>:
    149e:	e8 94       	clt

000014a0 <__fp_szero>:
    14a0:	bb 27       	eor	r27, r27
    14a2:	66 27       	eor	r22, r22
    14a4:	77 27       	eor	r23, r23
    14a6:	cb 01       	movw	r24, r22
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret

000014ac <__itoa_ncheck>:
    14ac:	bb 27       	eor	r27, r27
    14ae:	4a 30       	cpi	r20, 0x0A	; 10
    14b0:	31 f4       	brne	.+12     	; 0x14be <__itoa_ncheck+0x12>
    14b2:	99 23       	and	r25, r25
    14b4:	22 f4       	brpl	.+8      	; 0x14be <__itoa_ncheck+0x12>
    14b6:	bd e2       	ldi	r27, 0x2D	; 45
    14b8:	90 95       	com	r25
    14ba:	81 95       	neg	r24
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__utoa_common>

000014c2 <__utoa_ncheck>:
    14c2:	bb 27       	eor	r27, r27

000014c4 <__utoa_common>:
    14c4:	fb 01       	movw	r30, r22
    14c6:	55 27       	eor	r21, r21
    14c8:	aa 27       	eor	r26, r26
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	aa 1f       	adc	r26, r26
    14d0:	a4 17       	cp	r26, r20
    14d2:	10 f0       	brcs	.+4      	; 0x14d8 <__utoa_common+0x14>
    14d4:	a4 1b       	sub	r26, r20
    14d6:	83 95       	inc	r24
    14d8:	50 51       	subi	r21, 0x10	; 16
    14da:	b9 f7       	brne	.-18     	; 0x14ca <__utoa_common+0x6>
    14dc:	a0 5d       	subi	r26, 0xD0	; 208
    14de:	aa 33       	cpi	r26, 0x3A	; 58
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <__utoa_common+0x20>
    14e2:	a9 5d       	subi	r26, 0xD9	; 217
    14e4:	a1 93       	st	Z+, r26
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	79 f7       	brne	.-34     	; 0x14c8 <__utoa_common+0x4>
    14ea:	b1 11       	cpse	r27, r1
    14ec:	b1 93       	st	Z+, r27
    14ee:	11 92       	st	Z+, r1
    14f0:	cb 01       	movw	r24, r22
    14f2:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <strrev>

000014f6 <strrev>:
    14f6:	dc 01       	movw	r26, r24
    14f8:	fc 01       	movw	r30, r24
    14fa:	67 2f       	mov	r22, r23
    14fc:	71 91       	ld	r23, Z+
    14fe:	77 23       	and	r23, r23
    1500:	e1 f7       	brne	.-8      	; 0x14fa <strrev+0x4>
    1502:	32 97       	sbiw	r30, 0x02	; 2
    1504:	04 c0       	rjmp	.+8      	; 0x150e <strrev+0x18>
    1506:	7c 91       	ld	r23, X
    1508:	6d 93       	st	X+, r22
    150a:	70 83       	st	Z, r23
    150c:	62 91       	ld	r22, -Z
    150e:	ae 17       	cp	r26, r30
    1510:	bf 07       	cpc	r27, r31
    1512:	c8 f3       	brcs	.-14     	; 0x1506 <strrev+0x10>
    1514:	08 95       	ret

00001516 <_exit>:
    1516:	f8 94       	cli

00001518 <__stop_program>:
    1518:	ff cf       	rjmp	.-2      	; 0x1518 <__stop_program>
